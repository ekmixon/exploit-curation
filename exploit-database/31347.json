{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/lin_x86-64/local/31347.c", 
    "id": "31347", 
    "cves": [
        "CVE-2014-0038"
    ]
}