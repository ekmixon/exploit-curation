{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/remote/38912.txt", 
    "id": "38912", 
    "cves": [
        "CVE-2015-6127"
    ]
}