{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/jsp/webapps/10013.txt", 
    "id": "10013", 
    "cves": [
        "CVE-2009-2897", 
        "CVE-2009-2898"
    ]
}