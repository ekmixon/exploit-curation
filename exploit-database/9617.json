{
    "source": "exploit-database", 
    "exploit": "LS0tLS1CRUdJTiBQR1AgU0lHTkVEIE1FU1NBR0UtLS0tLQ0KSGFzaDogU0hBMQ0KDQogICAgICAgIENvcmUgU2VjdXJpdHkgVGVjaG5vbG9naWVzIC0gQ29yZUxhYnMgQWR2aXNvcnkNCiAgICAgICAgICAgIGh0dHA6Ly93d3cuY29yZXNlY3VyaXR5LmNvbS9jb3JlbGFicy8NCg0KIERuc21hc3EgSGVhcCBPdmVyZmxvdyBhbmQgTnVsbC1wb2ludGVyIERlcmVmZXJlbmNlIG9uIFRGVFAgU2VydmVyDQoNCg0KMS4gKkFkdmlzb3J5IEluZm9ybWF0aW9uKg0KDQpUaXRsZTogRG5zbWFzcSBIZWFwIE92ZXJmbG93IGFuZCBOdWxsLXBvaW50ZXIgRGVyZWZlcmVuY2Ugb24gVEZUUCBTZXJ2ZXINCkFkdmlzb3J5IElEOiBDT1JFLTIwMDktMDgyMA0KQWR2aXNvcnkgVVJMOiBodHRwOi8vd3d3LmNvcmVzZWN1cml0eS5jb20vY29udGVudC9kbnNtYXNxLXZ1bG5lcmFiaWxpdGllcw0KRGF0ZSBwdWJsaXNoZWQ6IDIwMDktMDgtMzENCkRhdGUgb2YgbGFzdCB1cGRhdGU6IDIwMDktMDgtMzENClZlbmRvcnMgY29udGFjdGVkOiBTaW1vbiBLZWxsZXkNClJlbGVhc2UgbW9kZTogQ29vcmRpbmF0ZWQgcmVsZWFzZQ0KDQoNCjIuICpWdWxuZXJhYmlsaXR5IEluZm9ybWF0aW9uKg0KDQpDbGFzczogQnVmZmVyIG92ZXJmbG93DQpSZW1vdGVseSBFeHBsb2l0YWJsZTogWWVzDQpMb2NhbGx5IEV4cGxvaXRhYmxlOiBObw0KQnVndHJhcSBJRDogMzYxMjAsIDM2MTIxDQpDVkUgTmFtZTogQ1ZFLTIwMDktMjk1NywgQ1ZFLTIwMDktMjk1OA0KDQoNCjMuICpWdWxuZXJhYmlsaXR5IERlc2NyaXB0aW9uKg0KDQpEbnNtYXNxIGlzIGEgbGlnaHR3ZWlnaHQgRE5TIGZvcndhcmRlciBhbmQgREhDUCBzZXJ2ZXIuIEEgdnVsbmVyYWJpbGl0eQ0KaGFzIGJlZW4gZm91bmQgdGhhdCBtYXkgYWxsb3cgYW4gYXR0YWNrZXIgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSBvbg0Kc2VydmVycyBvciBob21lIHJvdXRlcnMgcnVubmluZyBkbnNtYXNxWzFdIHdpdGggdGhlIFRGVFAgc2VydmljZVsyXVszXQ0KZW5hYmxlZCAoJy0tZW5hYmxlLXRmcCcpLiBUaGlzIHNlcnZpY2UgaXMgbm90IGVuYWJsZWQgYnkgZGVmYXVsdCBvbiBtb3N0DQpkaXN0cmlidXRpb25zOyBpbiBwYXJ0aWN1bGFyIGl0IGlzIG5vdCBlbmFibGVkIGJ5IGRlZmF1bHQgb24gT3BlbldSVCBvcg0KREQtV1JULiBDaGFuY2VzIG9mIHN1Y2Nlc3NmdWwgZXhwbG9pdGF0aW9uIGluY3JlYXNlIHdoZW4gYSBsb25nDQpkaXJlY3RvcnkgcHJlZml4IGlzIHVzZWQgZm9yIFRGVFAuIENvZGUgd2lsbCBiZSBleGVjdXRlZCB3aXRoIHRoZQ0KcHJpdmlsZWdlcyBvZiB0aGUgdXNlciBydW5uaW5nIGRuc21hc3EsIHdoaWNoIGlzIG5vcm1hbGx5IGENCm5vbi1wcml2aWxlZ2VkIG9uZS4NCg0KQWRkaXRpb25hbGx5IHRoZXJlIGlzIGEgcG90ZW50aWFsIERvUyBhdHRhY2sgdG8gdGhlIFRGVFAgc2VydmljZSBieQ0KZXhwbG9pdGluZyBhIG51bGwtcG9pbnRlciBkZXJlZmVyZW5jZSB2dWxuZXJhYmlsaXR5Lg0KDQoNCjQuICpWdWxuZXJhYmxlIHBhY2thZ2VzKg0KDQogICAuIGRuc21hc3EgMi40MC4NCiAgIC4gZG5zbWFzcSAyLjQxLg0KICAgLiBkbnNtYXNxIDIuNDIuDQogICAuIGRuc21hc3EgMi40My4NCiAgIC4gZG5zbWFzcSAyLjQ0Lg0KICAgLiBkbnNtYXNxIDIuNDUuDQogICAuIGRuc21hc3EgMi40Ni4NCiAgIC4gZG5zbWFzcSAyLjQ3Lg0KICAgLiBkbnNtYXNxIDIuNDguDQogICAuIGRuc21hc3EgMi40OS4NCiAgIC4gT2xkZXIgdmVyc2lvbnMgYXJlIHByb2JhYmx5IGFmZmVjdGVkIHRvbywgYnV0IHRoZXkgd2VyZSBub3QgY2hlY2tlZC4NCg0KDQo1LiAqTm9uLXZ1bG5lcmFibGUgcGFja2FnZXMqDQoNCiAgIC4gZG5zbWFzcSAyLjUwDQoNCg0KNi4gKlZlbmRvciBJbmZvcm1hdGlvbiwgU29sdXRpb25zIGFuZCBXb3JrYXJvdW5kcyoNCg0KSWYgdGhlIFRGVFAgc2VydmljZSBpcyBlbmFibGVkIGFuZCBwYXRjaGluZyBpcyBub3QgYXZhaWxhYmxlDQppbW1lZGlhdGVseSwgYSB2YWxpZCB3b3JrYXJvdW5kIGlzIHRvIGZpbHRlciBURlRQIGZvciB1bnRydXN0ZWQgaG9zdHMgaW4NCnRoZSBuZXR3b3JrIChzdWNoIGFzIHRoZSBJbnRlcm5ldCkuIFRoaXMgaXMgdGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbg0Kd2hlbiBlbmFibGluZyBURlRQIG9uIG1vc3QgaG9tZSByb3V0ZXJzLg0KDQpQYXRjaGVzIGFyZSBhbHJlYWR5IGF2YWlsYWJsZSBmcm9tIHRoZSBzb2Z0d2FyZSBhdXRob3IuIE1vc3QNCmRpc3RyaWJ1dGlvbnMgc2hvdWxkIHJlbGVhc2UgdXBkYXRlcyBmb3IgYmluYXJ5IHBhY2thZ2VzIHNvb24uDQoNCg0KNy4gKkNyZWRpdHMqDQoNClRoZSBoZWFwLW92ZXJmbG93IHZ1bG5lcmFiaWxpdHkgKENWRS0yMDA5LTI5NTcpIHdhcyBkaXNjb3ZlcmVkIGR1cmluZw0KQnVnd2VlayAyMDA5IGJ5IFBhYmxvIEpvcmdlIGFuZCBBbGJlcnRvIFNvbGlubyBmcm9tIHRoZSB0ZWFtICJMb3MNCkhlcmVkZXJvcyBkZSBEb24gUGFibG8iIG9mIENvcmUgU2VjdXJpdHkgVGVjaG5vbG9naWVzLg0KDQpUaGUgbnVsbC1wb2ludGVyIGRlcmVmZXJlbmNlIChDVkUtMjAwOS0yOTU4KSB3YXMgcmVwb3J0ZWQgdG8gdGhlIGF1dGhvcg0Kb2YgZG5zbWFzcSBpbmRlcGVuZGVudGx5IGJ5IGFuIHVuY3JlZGl0ZWQgY29kZSBhdWRpdG9yLiBJdCB3YXMgbWVyZ2VkDQp3aXRoIHRoaXMgYWR2aXNvcnkgZm9yIHVzZXIncyBjb252ZW5pZW5jZS4NCg0KDQo4LiAqVGVjaG5pY2FsIERlc2NyaXB0aW9uKg0KDQo4LjEuICpIZWFwIE92ZXJmbG93IHZ1bG5lcmFiaWxpdHkgKENWRS0yMDA5LTI5NTcsIEJJRCAzNjEyMSkqDQoNCkZpcnN0IGxldCdzIGZvY3VzIG9uIHRoZSBvdmVyZmxvdyB2dWxuZXJhYmlsaXR5LiBUaGUgJ3RmdHBfcmVxdWVzdCcNCmNhbGxzICdzdHJuY2F0JyBvbiAnZGFlbW9uLT5uYW1lYnVmZicsIHdoaWNoIGhhcyBhIHByZWRlZmluZWQgc2l6ZSBvZg0KJ01BWEROQU1FJyBieXRlcyAoZGVmYXVsdGluZyB0byAxMDI1KS4NCg0KLy0tLS0tLS0tLS0tDQplbHNlIGlmIChmaWxlbmFtZVswXSA9PSAnLycpDQogICBkYWVtb24tPm5hbWVidWZmWzBdID0gMDsNCnN0cm5jYXQoZGFlbW9uLT5uYW1lYnVmZiwgZmlsZW5hbWUsIE1BWEROQU1FKTsNCi0gLS0tLS0tLS0tLS0vDQoNClRoaXMgbWF5IGNhdXNlIGEgaGVhcCBvdmVyZmxvdyBiZWNhdXNlICdkYWVtb24tPm5hbWVidWZmJyBtYXkgYWxyZWFkeQ0KY29udGFpbiBkYXRhLCBuYW1lbHkgdGhlIGNvbmZpZ3VyZWQgJ2RhZW1vbi0+dGZ0cF9wcmVmaXgnIHBhc3NlZCB0byB0aGUNCmRhZW1vbiB2aWEgYSBjb25maWd1cmF0aW9uIGZpbGUuDQoNCi8tLS0tLS0tLS0tLQ0KaWYgKGRhZW1vbi0+dGZ0cF9wcmVmaXgpDQp7DQogIGlmIChkYWVtb24tPnRmdHBfcHJlZml4WzBdID09ICcvJykNCiAgICBkYWVtb24tPm5hbWVidWZmWzBdID0gMDsNCiAgICBzdHJuY2F0KGRhZW1vbi0+bmFtZWJ1ZmYsIGRhZW1vbi0+dGZ0cF9wcmVmaXgsIE1BWEROQU1FKQ0KLSAtLS0tLS0tLS0tLS8NCg0KVGhlIGRlZmF1bHQgcHJlZml4IGlzICcvdmFyL3RmdHBkJywgYnV0IGlmIGEgbG9uZ2VyIHByZWZpeCBpcyB1c2VkLA0KYXJiaXRyYXJ5IGNvZGUgZXhlY3V0aW9uIG1heSBiZSBwb3NzaWJsZS4NCg0KU2VuZGluZyB0aGUgc3RyaW5nIHJlc3VsdGluZyBmcm9tIHRoZSBleGVjdXRpb24gb2YgdGhlIGZvbGxvd2luZyBweXRob24NCnNuaXBwZXQgdG8gYSB2dWxuZXJhYmxlIHNlcnZlciwgd2l0aCBhIGxvbmcgZW5vdWdoIGRpcmVjdG9yeSBwcmVmaXgNCmNvbmZpZ3VyZWQsIHNob3VsZCBjcmFzaCB0aGUgZGFlbW9uLg0KDQovLS0tLS0tLS0tLS0NCmltcG9ydCBzeXMNCnN5cy5zdGRvdXQud3JpdGUoICdceDAwXHgwMScgKyAiQSIqMTUzNSArICdceDAwJyArICJuZXRhc2NpaSIgKyAnXHgwMCcgKQ0KLSAtLS0tLS0tLS0tLS8NCg0KOC4yLiAqTnVsbC1wb2ludGVyIERlcmVmZXJlbmNlIHZ1bG5lcmFiaWxpdHkgKENWRS0yMDA5LTI5NTgsIEJJRCAzNjEyMCkqDQoNCk5vdyBvbnRvIHRoZSBudWxsLXBvaW50ZXIgZGVyZWZlcmVuY2UuIFRoZSB1c2VyIGNhbiBjcmFzaCB0aGUgc2VydmljZSBieQ0KaGFuZGNyYWZ0aW5nIGEgcGFja2V0LCBiZWNhdXNlIG9mIGEgcHJvYmxlbSBvbiB0aGUgZ3VhcmQgb2YgdGhlIGZpcnN0IGlmDQppbnNpZGUgdGhpcyBjb2RlIGxvb3A6DQoNCi8tLS0tLS0tLS0tLQ0Kd2hpbGUgKChvcHQgPSBuZXh0KCZwLCBlbmQpKSkNCiB7DQogICBpZiAoc3RyY2FzZWNtcChvcHQsICJibGtzaXplIikgPT0gMCAmJg0KICAgICAgIChvcHQgPSBuZXh0KCZwLCBlbmQpKSAmJg0KICAgICAgICEoZGFlbW9uLT5vcHRpb25zICYgT1BUX1RGVFBfTk9CTE9DSykpDQogICAgIHsNCiAgICAgICB0cmFuc2Zlci0+YmxvY2tzaXplID0gYXRvaShvcHQpOw0KICAgICAgIGlmICh0cmFuc2Zlci0+YmxvY2tzaXplIDwgMSkNCiAgICAgICAgIHRyYW5zZmVyLT5ibG9ja3NpemUgPSAxOw0KICAgICAgIGlmICh0cmFuc2Zlci0+YmxvY2tzaXplID4gKHVuc2lnbmVkKWRhZW1vbi0+cGFja2V0X2J1ZmZfc3ogLSA0KQ0KICAgICAgICAgIHRyYW5zZmVyLT5ibG9ja3NpemUgPSAodW5zaWduZWQpZGFlbW9uLT5wYWNrZXRfYnVmZl9zeiAtIDQ7DQogICAgICAgdHJhbnNmZXItPm9wdF9ibG9ja3NpemUgPSAxOw0KICAgICAgIHRyYW5zZmVyLT5ibG9jayA9IDA7DQogICAgIH0NCg0KICBpZiAoc3RyY2FzZWNtcChvcHQsICJ0c2l6ZSIpID09IDAgJiYgbmV4dCgmcCwgZW5kKSAmJg0KICAgICAgIXRyYW5zZmVyLT5uZXRhc2NpaSkNCiAgICAgew0KICAgICAgIHRyYW5zZmVyLT5vcHRfdHJhbnNpemUgPSAxOw0KICAgICAgIHRyYW5zZmVyLT5ibG9jayA9IDA7DQogICAgIH0NCiB9DQotIC0tLS0tLS0tLS0tLw0KDQpUaGUgcHJvYmxlbSBleGlzdHMgYmVjYXVzZSB0aGUgZ3VhcmQgb2YgdGhlIGZpcnN0IGlmIGluY2x1ZGVzIHRoZSByZXN1bHQNCm9mICdvcHQgPSBuZXh0KCZwLCBlbmQpJyBhcyBwYXJ0IG9mIHRoZSBjaGVjay4gSWYgdGhpcyByZXR1cm5zICdOVUxMJywNCnRoZSBndWFyZCB3aWxsIGZhaWwgYW5kIGluIHRoZSBuZXh0IGlmICdzdHJjYXNlY21wKG9wdCwgInRzaXplIiknIHdpbGwNCmRlcnJlZmVuY2UgdGhlIG51bGwtcG9pbnRlci4NCg0KDQo5LiAqUmVwb3J0IFRpbWVsaW5lKg0KDQouIDIwMDktMDgtMjA6DQpDb3JlIFNlY3VyaXR5IFRlY2hub2xvZ2llcyBub3RpZmllcyBTaW1vbiBLZWxsZXkgb2YgdGhlIHZ1bG5lcmFiaWxpdHksDQppbmNsdWRpbmcgdGVjaG5pY2FsIGRldGFpbHMgb2YgdGhlIHZ1bG5lcmFiaWxpdHkgaW4gYW4gYWR2aXNvcnkgZHJhZnQuDQoNCi4gMjAwOS0wOC0yMToNClNpbW9uIEtlbGxleSBhY2tub3dsZWRnZXMgdGhlIHZ1bG5lcmFiaWxpdHkgYW5kIGNvbmZpcm1zIHRvIGJlIHdvcmtpbmcNCm9uIGEgcGF0Y2guIEhlIGFsc28gaW5mb3JtcyB0aGF0IGhlIGlzIGF3YXJlIHRoYXQgbW9zdCBob21lIHJvdXRlcg0KZGlzdHJpYnV0aW9ucyBoYXZlIHRmdHAgdHVybmVkIG9mZiBieSBkZWZhdWx0LCBhbmQgZmlyZXdhbGxlZCwgYW5kDQpzdWdnZXN0cyB0aGlzIHNob3VsZCBiZSBtZW50aW9uZWQgb24gdGhlIGFkdmlzb3J5LiBTaW1vbiBhbHNvIG1lbnRpb25zDQp0aGF0IGEgTlVMTC1wb2ludGVyIGRlcmVmZXJlbmNlIGJ1ZyBoYXMgYWxzbyBiZWVuIGRpc2NvdmVyZWQgb24gdGhhdA0KY29kZSwgYW5kIHN1Z2dlc3RzIG1lcmdpbmcgYm90aCBidWdzIGluIHRoZSBzYW1lIGFkdmlzb3J5LiBNb25kYXkgMzEvMDgNCmlzIGFjY2VwdGVkIGFzIGEgcG9zc2libGUgcmVsZWFzZSBkYXRlIGZvciB0aGlzIGFkdmlzb3J5LCBhbmQgaGVscCBpcw0Kb2ZmZXJlZCBpbiBjb250YWN0aW5nIHBhY2thZ2UgbWFpbnRhaW5lcnMgb2YgZG5zbWFzcSBmb3IgbW9zdCBvcGVyYXRpbmcNCnN5c3RlbXMuDQoNCi4gMjAwOS0wOC0yMToNCkNvcmUgY2hhbmdlcyB0aGUgYWR2aXNvcnkgZHJhZnQgdG8gYWNjb21tb2RhdGUgU2ltb24ncyBzdWdnZXN0aW9ucy4NCkFib3V0IHRoZSBOVUxMLXBvaW50ZXIgZGVyZWZlcmVuY2UsIENvcmUgbWVudGlvbnMgdGhlIHRlcm1zIGl0IHRoaW5rcw0KYXBwcm9wcmlhdGUgZm9yIHRoZSBidWcgdG8gYmUgbWVyZ2VkIGludG8gdGhpcyBhZHZpc29yeSwgYW5kIGRldGFpbHMgaG93DQp0aGlzIHdvdWxkIGFmZmVjdCB0aGUgZm9sbG93aW5nIHByb2NlZHVyZXMsIHN1Y2ggYXMgYXNraW5nIGZvciBhDQpDVkUvQnVndHJhcSBJRC4NCg0KLiAyMDA5LTA4LTIzOg0KU2ltb24gS2VsbGV5IGNvbnRhY3RzIENvcmUgYmFjaywgc2F5aW5nIHRoYXQgdGhlIHRlcm1zIGZvciB0aGUNCm51bGwtcG9pbnRlciBkZXJyZWZlbmNlIGJ1ZyB0byBiZSBpbmNsdWRlZCBpbiB0aGUgYWR2aXNvcnkgYXJlIG9rLiBIZQ0KYWxzbyBtZW50aW9ucyB0aGF0IHRoZSBmaW5kZXIgb2YgdGhpcyBidWcgcHJlZmVycyB0byByZW1haW4gdW5jcmVkaXRlZA0KaW4gdGhpcyBhZHZpc29yeS4gRGV0YWlscyBhcmUgc2VudCBieSBoaW0gYWJvdXQgdGhlIG5ldyBidWcgc28gdGhhdCB0aGUNCmFkdmlzb3J5IGRyYWZ0IGNhbiBiZSB1cGRhdGVkIHRvIGluY2x1ZGUgaXQuDQoNCi4gMjAwOS0wOC0yMzoNCkNvcmUgYXNrcyBmb3IgcHJvcGVyIENWRSBhbmQgQnVndHJhcSBJRCBudW1iZXJzLCBzcGVjaWZ5aW5nIGl0IGJlbGlldmVzDQplYWNoIHZ1bG5lcmFiaWxpdHkgcmVwb3J0ZWQgaW4gdGhpcyBhZHZpc29yeSBzaG91bGQgYmUgYXNzaWduZWQgaXRzIG93bi4NCg0KLiAyMDA5LTA4LTIzOg0KVmluY2VudCBEYW5lbiwgZnJvbSBSZWQgSGF0J3MgU2VjdXJpdHkgUmVzcG9uc2UgVGVhbSBjb250YWN0cyBDb3JlIGluDQpvcmRlciB0byBkaXNjdXNzIGJvdGggdnVsbmVyYWJpbGl0aWVzIGJ5IGEgc2VjdXJlIGNvbW11bmljYXRpb25zDQpjaGFubmVsLCBhbmQgb2ZmZXJzIGl0cyBoZWxwIGluIG9idGFpbmluZyBwcm9wZXIgQ1ZFIG51bWJlcnMsIHNwZWNpZnlpbmcNCnRoZXkgYWxzbyBiZWxpZXZlIGEgc2VwYXJhdGUgbnVtYmVyIHNob3VsZCBiZSBhc3NpZ25lZCB0byBlYWNoDQp2dWxuZXJhYmlsaXR5Lg0KDQouIDIwMDktMDgtMjM6DQpDb3JlIHJlcGxpZXMgdG8gVmluY2VudCBEYW5lbiBieSBzZW5kaW5nIGl0cyBncGcga2V5LiBDb3JlIGFsc28gbWVudGlvbnMNCnNlcGFyYXRlIENWRSBudW1iZXJzIGhhdmUgYWxyZWFkeSBiZWVuIGFza2VkLg0KDQouIDIwMDktMDgtMjM6DQpDb3JlIHJlcGxpZXMgdG8gU2ltb24gS2VsbGV5LCBpbmNsdWRpbmcgYSBuZXcgYWR2aXNvcnkgZHJhZnQgd2l0aCBib3RoDQpidWdzIG1lcmdlZC4NCg0KLiAyMDA5LTA4LTIzOg0KQ29yZSByZWNlaXZlcyBwcm9wZXIgQ1ZFIGFuZCBCdWd0cmFxIElEIG51bWJlcnMgZm9yIGJvdGggYnVncywgYW5kIHNlbmRzDQp0aGVtIHRvIFJlZCBIYXQgYW5kIFNpbW9uIEtlbGxleS4NCg0KLiAyMDA5LTA4LTMxOg0KVGhlIGFkdmlzb3J5IENPUkUtMjAwOS0wODIwIGlzIHB1Ymxpc2hlZC4NCg0KDQoxMC4gKlJlZmVyZW5jZXMqDQoNClsxXSBodHRwOi8vd3d3LnRoZWtlbGxleXMub3JnLnVrL2Ruc21hc3EvZG9jLmh0bWwNClsyXSBodHRwOi8vd3d3LmlzaS5lZHUvaW4tbm90ZXMvaWVuL2llbjEzMy50eHQNClszXSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1RyaXZpYWxfRmlsZV9UcmFuc2Zlcl9Qcm90b2NvbA0KDQoNCjExLiAqQWJvdXQgQ29yZUxhYnMqDQoNCkNvcmVMYWJzLCB0aGUgcmVzZWFyY2ggY2VudGVyIG9mIENvcmUgU2VjdXJpdHkgVGVjaG5vbG9naWVzLCBpcyBjaGFyZ2VkDQp3aXRoIGFudGljaXBhdGluZyB0aGUgZnV0dXJlIG5lZWRzIGFuZCByZXF1aXJlbWVudHMgZm9yIGluZm9ybWF0aW9uDQpzZWN1cml0eSB0ZWNobm9sb2dpZXMuIFdlIGNvbmR1Y3Qgb3VyIHJlc2VhcmNoIGluIHNldmVyYWwgaW1wb3J0YW50DQphcmVhcyBvZiBjb21wdXRlciBzZWN1cml0eSBpbmNsdWRpbmcgc3lzdGVtIHZ1bG5lcmFiaWxpdGllcywgY3liZXINCmF0dGFjayBwbGFubmluZyBhbmQgc2ltdWxhdGlvbiwgc291cmNlIGNvZGUgYXVkaXRpbmcsIGFuZCBjcnlwdG9ncmFwaHkuDQpPdXIgcmVzdWx0cyBpbmNsdWRlIHByb2JsZW0gZm9ybWFsaXphdGlvbiwgaWRlbnRpZmljYXRpb24gb2YNCnZ1bG5lcmFiaWxpdGllcywgbm92ZWwgc29sdXRpb25zIGFuZCBwcm90b3R5cGVzIGZvciBuZXcgdGVjaG5vbG9naWVzLg0KQ29yZUxhYnMgcmVndWxhcmx5IHB1Ymxpc2hlcyBzZWN1cml0eSBhZHZpc29yaWVzLCB0ZWNobmljYWwgcGFwZXJzLA0KcHJvamVjdCBpbmZvcm1hdGlvbiBhbmQgc2hhcmVkIHNvZnR3YXJlIHRvb2xzIGZvciBwdWJsaWMgdXNlIGF0Og0KaHR0cDovL3d3dy5jb3Jlc2VjdXJpdHkuY29tL2NvcmVsYWJzLg0KDQoNCjEyLiAqQWJvdXQgQ29yZSBTZWN1cml0eSBUZWNobm9sb2dpZXMqDQoNCkNvcmUgU2VjdXJpdHkgVGVjaG5vbG9naWVzIGRldmVsb3BzIHN0cmF0ZWdpYyBzb2x1dGlvbnMgdGhhdCBoZWxwDQpzZWN1cml0eS1jb25zY2lvdXMgb3JnYW5pemF0aW9ucyB3b3JsZHdpZGUgZGV2ZWxvcCBhbmQgbWFpbnRhaW4gYQ0KcHJvYWN0aXZlIHByb2Nlc3MgZm9yIHNlY3VyaW5nIHRoZWlyIG5ldHdvcmtzLiBUaGUgY29tcGFueSdzIGZsYWdzaGlwDQpwcm9kdWN0LCBDT1JFIElNUEFDVCwgaXMgdGhlIG1vc3QgY29tcHJlaGVuc2l2ZSBwcm9kdWN0IGZvciBwZXJmb3JtaW5nDQplbnRlcnByaXNlIHNlY3VyaXR5IGFzc3VyYW5jZSB0ZXN0aW5nLiBDT1JFIElNUEFDVCBldmFsdWF0ZXMgbmV0d29yaywNCmVuZHBvaW50IGFuZCBlbmQtdXNlciB2dWxuZXJhYmlsaXRpZXMgYW5kIGlkZW50aWZpZXMgd2hhdCByZXNvdXJjZXMgYXJlDQpleHBvc2VkLiBJdCBlbmFibGVzIG9yZ2FuaXphdGlvbnMgdG8gZGV0ZXJtaW5lIGlmIGN1cnJlbnQgc2VjdXJpdHkNCmludmVzdG1lbnRzIGFyZSBkZXRlY3RpbmcgYW5kIHByZXZlbnRpbmcgYXR0YWNrcy4gQ29yZSBTZWN1cml0eQ0KVGVjaG5vbG9naWVzIGF1Z21lbnRzIGl0cyBsZWFkaW5nIHRlY2hub2xvZ3kgc29sdXRpb24gd2l0aCB3b3JsZC1jbGFzcw0Kc2VjdXJpdHkgY29uc3VsdGluZyBzZXJ2aWNlcywgaW5jbHVkaW5nIHBlbmV0cmF0aW9uIHRlc3RpbmcgYW5kIHNvZnR3YXJlDQpzZWN1cml0eSBhdWRpdGluZy4gQmFzZWQgaW4gQm9zdG9uLCBNQSBhbmQgQnVlbm9zIEFpcmVzLCBBcmdlbnRpbmEsIENvcmUNClNlY3VyaXR5IFRlY2hub2xvZ2llcyBjYW4gYmUgcmVhY2hlZCBhdCA2MTctMzk5LTY5ODAgb3Igb24gdGhlIFdlYiBhdA0KaHR0cDovL3d3dy5jb3Jlc2VjdXJpdHkuY29tLg0KDQoNCjEzLiAqRGlzY2xhaW1lcioNCg0KVGhlIGNvbnRlbnRzIG9mIHRoaXMgYWR2aXNvcnkgYXJlIGNvcHlyaWdodCAoYykgMjAwOSBDb3JlIFNlY3VyaXR5DQpUZWNobm9sb2dpZXMgYW5kIChjKSAyMDA5IENvcmVMYWJzLCBhbmQgbWF5IGJlIGRpc3RyaWJ1dGVkIGZyZWVseQ0KcHJvdmlkZWQgdGhhdCBubyBmZWUgaXMgY2hhcmdlZCBmb3IgdGhpcyBkaXN0cmlidXRpb24gYW5kIHByb3BlciBjcmVkaXQNCmlzIGdpdmVuLg0KDQoNCjE0LiAqUEdQL0dQRyBLZXlzKg0KDQpUaGlzIGFkdmlzb3J5IGhhcyBiZWVuIHNpZ25lZCB3aXRoIHRoZSBHUEcga2V5IG9mIENvcmUgU2VjdXJpdHkNClRlY2hub2xvZ2llcyBhZHZpc29yaWVzIHRlYW0sIHdoaWNoIGlzIGF2YWlsYWJsZSBmb3IgZG93bmxvYWQgYXQNCmh0dHA6Ly93d3cuY29yZXNlY3VyaXR5LmNvbS9maWxlcy9hdHRhY2htZW50cy9jb3JlX3NlY3VyaXR5X2Fkdmlzb3JpZXMuYXNjLg0KLS0tLS1CRUdJTiBQR1AgU0lHTkFUVVJFLS0tLS0NClZlcnNpb246IEdudVBHIHYxLjQuNyAoTWluZ1czMikNCkNvbW1lbnQ6IFVzaW5nIEdudVBHIHdpdGggTW96aWxsYSAtIGh0dHA6Ly9lbmlnbWFpbC5tb3pkZXYub3JnDQoNCmlEOERCUUZLcDlyT3lOaWJnZ2l0V2EwUkFqa2JBSjBTTElGd0kxQ01GN0lPSFNEditGZzBEd0ZOUXdDZldzWm0NCndhM3N5QWR5WGxpeFZkUWhkazV2Y0swPQ0KPXRmcU0NCi0tLS0tRU5EIFBHUCBTSUdOQVRVUkUtLS0tLQ0KDQojIG1pbHcwcm0uY29tIFsyMDA5LTA5LTA5XQ==", 
    "filename": "platforms/windows/dos/9617.txt", 
    "id": "9617", 
    "cves": [
        "CVE-2009-2957", 
        "CVE-2009-2958"
    ]
}