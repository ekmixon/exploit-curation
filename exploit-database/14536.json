{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/hardware/remote/14536.txt", 
    "id": "14536", 
    "cves": [
        "CVE-2010-2860"
    ]
}