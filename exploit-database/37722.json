{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/lin_x86-64/local/37722.c", 
    "id": "37722", 
    "cves": [
        "CVE-2015-3290"
    ]
}