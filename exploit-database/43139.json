{
    "source": "exploit-database", 
    "exploit": "", 
    "id": "43139", 
    "cves": [
        "CVE-2017-14961"
    ]
}