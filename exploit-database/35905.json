{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/local/35905.c", 
    "id": "35905", 
    "cves": [
        "CVE-2014-9633"
    ]
}