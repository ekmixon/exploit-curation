{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/php/dos/30395.txt", 
    "id": "30395", 
    "cves": [
        "CVE-2013-6420"
    ]
}