{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/java/webapps/39715.rb", 
    "id": "39715", 
    "cves": [
        "CVE-2016-2203"
    ]
}