{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/remote/22351.py", 
    "id": "22351", 
    "cves": [
        "CVE-2012-5106", 
        "CVE-2012-510"
    ]
}