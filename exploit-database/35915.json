{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/webapps/35915.txt", 
    "id": "35915", 
    "cves": [
        "CVE-2014-9226", 
        "CVE-2014-9225", 
        "CVE-2014-7289", 
        "CVE-2014-9224"
    ]
}