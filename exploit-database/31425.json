{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/hardware/webapps/31425.txt", 
    "id": "31425", 
    "cves": [
        "CVE-2013-7053", 
        "CVE-2013-7052", 
        "CVE-2013-7051", 
        "CVE-2013-7055", 
        "CVE-2013-7054"
    ]
}