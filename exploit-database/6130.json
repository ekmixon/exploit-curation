{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/remote/6130.c", 
    "id": "6130", 
    "cves": [
        "CVE-2008-1447"
    ]
}