{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/jsp/webapps/17924.pl", 
    "id": "17924", 
    "cves": [
        "CVE-2010-0738"
    ]
}