{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/local/16086.txt", 
    "id": "16086", 
    "cves": [
        "CVE-2011-0018"
    ]
}