{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/dos/35061.c", 
    "id": "35061", 
    "cves": [
        "CVE-2010-4052", 
        "CVE-2010-4051"
    ]
}