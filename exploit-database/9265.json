{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/dos/9265.c", 
    "id": "9265", 
    "cves": [
        "CVE-2009-0692"
    ]
}