{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/remote/37958.rb", 
    "id": "37958", 
    "cves": [
        "CVE-2015-0802"
    ]
}