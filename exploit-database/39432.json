{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/win_x86/local/39432.c", 
    "id": "39432", 
    "cves": [
        "CVE-2016-0051"
    ]
}