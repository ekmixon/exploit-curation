{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/php/webapps/40114.py", 
    "id": "40114", 
    "cves": [
        "CVE-2014-2021", 
        "CVE-2014-2023"
    ]
}