{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/remote/16318.rb", 
    "id": "16318", 
    "cves": [
        "CVE-2010-0738"
    ]
}