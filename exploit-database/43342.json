{
    "source": "exploit-database", 
    "exploit": "", 
    "id": "43342", 
    "cves": [
        "CVE-2017-15944"
    ]
}