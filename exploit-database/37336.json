{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/remote/37336.txt", 
    "id": "37336", 
    "cves": [
        "CVE-2015-1158", 
        "CVE-2015-1159"
    ]
}