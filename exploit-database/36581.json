{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/php/webapps/36581.txt", 
    "id": "36581", 
    "cves": [
        "CVE-2014-1222", 
        "CVE-2014-9148", 
        "CVE-2014-9146", 
        "CVE-2014-9147", 
        "CVE-2014-9145"
    ]
}