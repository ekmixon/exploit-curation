{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/local/41683.rb", 
    "id": "41683", 
    "cves": [
        "CVE-2013-0757", 
        "CVE-2013-0758"
    ]
}