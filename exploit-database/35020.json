{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/win_x86/local/35020.rb", 
    "id": "35020", 
    "cves": [
        "CVE-2014-4114"
    ]
}