{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/xml/webapps/41482.txt", 
    "id": "41482", 
    "cves": [
        "CVE-2016-8527", 
        "CVE-2016-8526"
    ]
}