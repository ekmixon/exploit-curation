{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/local/35993.c", 
    "id": "35993", 
    "cves": [
        "CVE-2014-9632"
    ]
}