{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/local/36747.c", 
    "id": "36747", 
    "cves": [
        "CVE-2015-1862"
    ]
}