{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/local/25134.c", 
    "id": "25134", 
    "cves": [
        "CVE-2012-0864", 
        "CVE-2012-0809"
    ]
}