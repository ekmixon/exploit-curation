{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/local/17787.c", 
    "id": "17787", 
    "cves": [
        "CVE-2010-3848", 
        "CVE-2010-3850", 
        "CVE-2010-4073"
    ]
}