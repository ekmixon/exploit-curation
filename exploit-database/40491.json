{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/remote/40491.py", 
    "id": "40491", 
    "cves": [
        "CVE-2015-1497"
    ]
}