{
    "cpes": {
        "cpe:/o:redhat:enterprise_linux:7.0:ga:server": {
            "scores": {
                "skipped": "20171009"
            }
        }
    }, 
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/local/40688.rb", 
    "id": "40688", 
    "cves": [
        "CVE-2015-1328", 
        "CVE-2015-8660"
    ]
}