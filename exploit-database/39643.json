{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/java/remote/39643.rb", 
    "id": "39643", 
    "cves": [
        "CVE-2016-0709", 
        "CVE-2016-0710"
    ]
}