{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/php/webapps/12330.txt", 
    "id": "12330", 
    "cves": [
        "CVE-2010-0432"
    ]
}