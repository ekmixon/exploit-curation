{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/hardware/webapps/30062.py", 
    "id": "30062", 
    "cves": [
        "CVE-2013-5946", 
        "CVE-2013-5945"
    ]
}