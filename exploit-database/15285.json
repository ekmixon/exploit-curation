{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/local/15285.c", 
    "id": "15285", 
    "cves": [
        "CVE-2010-3904"
    ]
}