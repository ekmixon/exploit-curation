{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/local/7646.txt", 
    "id": "7646", 
    "cves": [
        "CVE-2008-5498"
    ]
}