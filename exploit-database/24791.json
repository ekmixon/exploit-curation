{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/java/webapps/24791.txt", 
    "id": "24791", 
    "cves": [
        "CVE-2013-1651", 
        "CVE-2013-1650", 
        "CVE-2013-1648", 
        "CVE-2013-1649", 
        "CVE-2013-1645", 
        "CVE-2013-1646", 
        "CVE-2013-1647"
    ]
}