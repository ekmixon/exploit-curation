{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/webapps/18750.txt", 
    "id": "18750", 
    "cves": [
        "CVE-2012-1258", 
        "CVE-2012-1259", 
        "CVE-2012-1261", 
        "CVE-2012-1260"
    ]
}