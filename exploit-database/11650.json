{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/remote/11650.c", 
    "id": "11650", 
    "cves": [
        "CVE-2010-0425"
    ]
}