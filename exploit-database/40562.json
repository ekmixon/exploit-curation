{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/local/40562.cpp", 
    "id": "40562", 
    "cves": [
        "CVE-2016-3231"
    ]
}