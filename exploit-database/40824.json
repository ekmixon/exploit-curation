{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/remote/40824.py", 
    "id": "40824", 
    "cves": [
        "CVE-2016-7098"
    ]
}