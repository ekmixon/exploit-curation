{
    "cpes": {
        "cpe:/o:redhat:enterprise_linux:7.1:ga:server": {
            "scores": {
                "skipped": "20180123"
            }
        }
    }, 
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/php/webapps/38573.txt", 
    "id": "38573", 
    "cves": [
        "CVE-2015-5161", 
        "CVE-2014-0191"
    ]
}