{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/dos/33073.c", 
    "id": "33073", 
    "cves": [
        "CVE-2013-5211"
    ]
}