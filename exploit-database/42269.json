{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/webapps/42269.txt", 
    "id": "42269", 
    "cves": [
        "CVE-2017-9811", 
        "CVE-2017-9810", 
        "CVE-2017-9813", 
        "CVE-2017-9812"
    ]
}