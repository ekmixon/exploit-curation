{
    "cpes": {
        "cpe:/o:redhat:enterprise_linux:6workstation:ga:workstation": {
            "scores": {
                "stride": "000009"
            }
        }, 
        "cpe:/o:redhat:enterprise_linux:7.0:ga:server": {
            "selinux": "enforcing", 
            "packages": [
                "gcc"
            ], 
            "scores": {
                "stride": "000009"
            }
        }, 
        "cpe:/o:redhat:enterprise_linux:7.1:ga:server": {
            "selinux": "enforcing", 
            "packages": [
                "gcc"
            ], 
            "filename": "exploit.c", 
            "scores": {
                "stride": "000009"
            }
        }
    }, 
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/dos/37706.txt", 
    "id": "37706", 
    "cves": [
        "CVE-2015-3245", 
        "CVE-2015-3246"
    ]
}
