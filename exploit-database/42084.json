{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/remote/42084.rb", 
    "id": "42084", 
    "cves": [
        "CVE-2017-7494"
    ]
}