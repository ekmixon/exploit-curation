{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/remote/3555.pl", 
    "id": "3555", 
    "cves": [
        "CVE-2003-0001"
    ]
}