{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/local/15304.txt", 
    "id": "15304", 
    "cves": [
        "CVE-2010-3856", 
        "CVE-2010-3847"
    ]
}