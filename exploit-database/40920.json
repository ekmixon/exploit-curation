{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/remote/40920.py", 
    "id": "40920", 
    "cves": [
        "CVE-2016-9566", 
        "CVE-2016-9565"
    ]
}