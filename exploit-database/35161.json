{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/local/35161.c", 
    "id": "35161", 
    "cves": [
        "CVE-2012-0056"
    ]
}