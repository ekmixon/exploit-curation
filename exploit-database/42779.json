{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/remote/42779.rb", 
    "id": "42779", 
    "cves": [
        "CVE-2017-11610"
    ]
}