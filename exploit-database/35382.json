{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/android/dos/35382.txt", 
    "id": "35382", 
    "cves": [
        "CVE-2014-8507"
    ]
}