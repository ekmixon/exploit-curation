{
    "source": "exploit-database", 
    "exploit": "QWR2aXNvcnk6IFB5dGhvbiBDR0lIVFRQU2VydmVyIEZpbGUgRGlzY2xvc3VyZSBhbmQgUG90ZW50aWFsIENvZGUNCiAgICAgICAgICBFeGVjdXRpb24NCg0KVGhlIENHSUhUVFBTZXJ2ZXIgUHl0aG9uIG1vZHVsZSBkb2VzIG5vdCBwcm9wZXJseSBoYW5kbGUgVVJMLWVuY29kZWQNCnBhdGggc2VwYXJhdG9ycyBpbiBVUkxzLiBUaGlzIG1heSBlbmFibGUgYXR0YWNrZXJzIHRvIGRpc2Nsb3NlIGEgQ0dJDQpzY3JpcHQncyBzb3VyY2UgY29kZSBvciBleGVjdXRlIGFyYml0cmFyeSBDR0kgc2NyaXB0cyBpbiB0aGUgc2VydmVyJ3MNCmRvY3VtZW50IHJvb3QuDQoNCkRldGFpbHMNCj09PT09PT0NCg0KUHJvZHVjdDogUHl0aG9uIENHSUhUVFBTZXJ2ZXINCkFmZmVjdGVkIFZlcnNpb25zOg0KICAyLjcgLSAyLjcuNywNCiAgMy4yIC0gMy4yLjQsDQogIDMuMyAtIDMuMy4yLA0KICAzLjQgLSAzLjQuMSwNCiAgMy41IHByZS1yZWxlYXNlDQpGaXhlZCBWZXJzaW9uczoNCiAgMi43IHJldiBiNGJhYjA3ODg3NjgsDQogIDMuMiByZXYgZTQ3NDIyODU1ODQxLA0KICAzLjMgcmV2IDU2NzY3OTdmM2EzZSwNCiAgMy40IHJldiA4NDdlMjg4ZDZlOTMsDQogIDMuNSByZXYgZjhiM2JiNWViMTkwDQpWdWxuZXJhYmlsaXR5IFR5cGU6IEZpbGUgRGlzY2xvc3VyZSwgRGlyZWN0b3J5IFRyYXZlcnNhbCwgQ29kZSBFeGVjdXRpb24NClNlY3VyaXR5IFJpc2s6IGhpZ2gNClZlbmRvciBVUkw6IGh0dHBzOi8vZG9jcy5weXRob24ub3JnLzIvbGlicmFyeS9jZ2lodHRwc2VydmVyLmh0bWwNClZlbmRvciBTdGF0dXM6IGZpeGVkIHZlcnNpb24gcmVsZWFzZWQNCkFkdmlzb3J5IFVSTDogaHR0cHM6Ly93d3cucmVkdGVhbS1wZW50ZXN0aW5nLmRlL2Fkdmlzb3JpZXMvcnQtc2EtMjAxNC0wMDgNCkFkdmlzb3J5IFN0YXR1czogcHVibGlzaGVkDQpDVkU6IENWRS0yMDE0LTQ2NTANCkNWRSBVUkw6IGh0dHBzOi8vY3ZlLm1pdHJlLm9yZy9jZ2ktYmluL2N2ZW5hbWUuY2dpP25hbWU9Q1ZFLTIwMTQtNDY1MA0KDQoNCkludHJvZHVjdGlvbg0KPT09PT09PT09PT09DQoNClRoZSBDR0lIVFRQU2VydmVyIG1vZHVsZSBkZWZpbmVzIGEgcmVxdWVzdC1oYW5kbGVyIGNsYXNzLCBpbnRlcmZhY2UNCmNvbXBhdGlibGUgd2l0aCBCYXNlSFRUUFNlcnZlci4gQmFzZUhUVFBSZXF1ZXN0SGFuZGxlciBhbmQgaW5oZXJpdHMNCmJlaGF2aW9yIGZyb20gU2ltcGxlSFRUUFNlcnZlci4gU2ltcGxlSFRUUFJlcXVlc3RIYW5kbGVyIGJ1dCBjYW4gYWxzbw0KcnVuIENHSSBzY3JpcHRzLg0KDQooZnJvbSB0aGUgUHl0aG9uIGRvY3VtZW50YXRpb24pDQoNCg0KTW9yZSBEZXRhaWxzDQo9PT09PT09PT09PT0NCg0KVGhlIENHSUhUVFBTZXJ2ZXIgbW9kdWxlIGNhbiBiZSB1c2VkIHRvIHNldCB1cCBhIHNpbXBsZSBIVFRQIHNlcnZlciB3aXRoDQpDR0kgc2NyaXB0cy4gQSBzYW1wbGUgc2VydmVyIHNjcmlwdCBpbiBQeXRob24gbWF5IGxvb2sgbGlrZSB0aGUNCmZvbGxvd2luZzoNCg0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQojIS91c3IvYmluL2VudiBweXRob24yDQoNCmltcG9ydCBDR0lIVFRQU2VydmVyDQppbXBvcnQgQmFzZUhUVFBTZXJ2ZXINCg0KaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoNCiAgICBzZXJ2ZXIgPSBCYXNlSFRUUFNlcnZlci5IVFRQU2VydmVyDQogICAgaGFuZGxlciA9IENHSUhUVFBTZXJ2ZXIuQ0dJSFRUUFJlcXVlc3RIYW5kbGVyDQogICAgc2VydmVyX2FkZHJlc3MgPSAoIiIsIDgwMDApDQogICAgIyBOb3RlIHRoYXQgb25seSAvY2dpLWJpbiB3aWxsIHdvcms6DQogICAgaGFuZGxlci5jZ2lfZGlyZWN0b3JpZXMgPSBbIi9jZ2ktYmluIiwgIi9jZ2ktYmluL3N1YmRpciJdDQogICAgaHR0cGQgPSBzZXJ2ZXIoc2VydmVyX2FkZHJlc3MsIGhhbmRsZXIpDQogICAgaHR0cGQuc2VydmVfZm9yZXZlcigpDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCg0KVGhpcyBzZXJ2ZXIgc2hvdWxkIGV4ZWN1dGUgYW55IHNjcmlwdHMgbG9jYXRlZCBpbiB0aGUgc3ViZGlyZWN0b3J5DQoiY2dpLWJpbiIuIEEgc2FtcGxlIENHSSBzY3JpcHQgY2FuIGJlIHBsYWNlZCBpbiB0aGF0IGRpcmVjdG9yeSwgZm9yDQpleGFtcGxlIGEgc2NyaXB0IGxpa2UgdGhlIGZvbGxvd2luZzoNCg0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQojIS91c3IvYmluL2VudiBweXRob24yDQppbXBvcnQganNvbg0KaW1wb3J0IHN5cw0KDQpkYl9jcmVkZW50aWFscyA9ICJTRUNSRVQiDQpzeXMuc3Rkb3V0LndyaXRlKCJDb250ZW50LXR5cGU6IHRleHQvanNvblxyXG5cclxuIikNCnN5cy5zdGRvdXQud3JpdGUoanNvbi5kdW1wcyh7InRleHQiOiAiVGhpcyBpcyBhIFRlc3QifSkpDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCg0KVGhlIFB5dGhvbiBsaWJyYXJ5IENHSUhUVFBTZXJ2ZXIucHkgaW1wbGVtZW50cyB0aGUgQ0dJSFRUUFJlcXVlc3RIYW5kbGVyDQpjbGFzcyB3aGljaCBpbmhlcml0cyBmcm9tIFNpbXBsZUhUVFBTZXJ2ZXIuU2ltcGxlSFRUUFJlcXVlc3RIYW5kbGVyOg0KDQpjbGFzcyBTaW1wbGVIVFRQUmVxdWVzdEhhbmRsZXIoQmFzZUhUVFBTZXJ2ZXIuQmFzZUhUVFBSZXF1ZXN0SGFuZGxlcik6DQpbLi4uXQ0KICAgIGRlZiBkb19HRVQoc2VsZik6DQogICAgICAgICIiIlNlcnZlIGEgR0VUIHJlcXVlc3QuIiIiDQogICAgICAgIGYgPSBzZWxmLnNlbmRfaGVhZCgpDQogICAgICAgIGlmIGY6DQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgc2VsZi5jb3B5ZmlsZShmLCBzZWxmLndmaWxlKQ0KICAgICAgICAgICAgZmluYWxseToNCiAgICAgICAgICAgICAgICBmLmNsb3NlKCkNCg0KICAgIGRlZiBkb19IRUFEKHNlbGYpOg0KICAgICAgICAiIiJTZXJ2ZSBhIEhFQUQgcmVxdWVzdC4iIiINCiAgICAgICAgZiA9IHNlbGYuc2VuZF9oZWFkKCkNCiAgICAgICAgaWYgZjoNCiAgICAgICAgICAgIGYuY2xvc2UoKQ0KDQogICAgZGVmIHRyYW5zbGF0ZV9wYXRoKHNlbGYsIHBhdGgpOg0KICAgIFsuLi5dDQogICAgICAgIHBhdGggPSBwb3NpeHBhdGgubm9ybXBhdGgodXJsbGliLnVucXVvdGUocGF0aCkpDQogICAgICAgIHdvcmRzID0gcGF0aC5zcGxpdCgnLycpDQogICAgICAgIHdvcmRzID0gZmlsdGVyKE5vbmUsIHdvcmRzKQ0KICAgICAgICBwYXRoID0gb3MuZ2V0Y3dkKCkNCiAgICAgICAgWy4uLl0NCg0KVGhlIENHSUhUVFBSZXF1ZXN0SGFuZGxlciBjbGFzcyBpbmhlcml0cywgYW1vbmcgb3RoZXJzLCB0aGUgbWV0aG9kcw0KZG9fR0VUKCkgYW5kIGRvX0hFQUQoKSBmb3IgaGFuZGxpbmcgSFRUUCBHRVQgYW5kIEhUVFAgSEVBRCByZXF1ZXN0cy4gVGhlDQpjbGFzcyBvdmVycmlkZXMgc2VuZF9oZWFkKCkgYW5kIGltcGxlbWVudHMgc2V2ZXJhbCBuZXcgbWV0aG9kcywgc3VjaCBhcw0KZG9fUE9TVCgpLCBpc19jZ2koKSBhbmQgcnVuX2NnaSgpOg0KDQpjbGFzcyBDR0lIVFRQUmVxdWVzdEhhbmRsZXIoU2ltcGxlSFRUUFNlcnZlci5TaW1wbGVIVFRQUmVxdWVzdEhhbmRsZXIpOg0KWy4uLl0NCiAgICBkZWYgZG9fUE9TVChzZWxmKToNCiAgICAgICAgWy4uLl0NCiAgICAgICAgaWYgc2VsZi5pc19jZ2koKToNCiAgICAgICAgICAgIHNlbGYucnVuX2NnaSgpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBzZWxmLnNlbmRfZXJyb3IoNTAxLCAiQ2FuIG9ubHkgUE9TVCB0byBDR0kgc2NyaXB0cyIpDQoNCiAgICBkZWYgc2VuZF9oZWFkKHNlbGYpOg0KICAgICAgICAiIiJWZXJzaW9uIG9mIHNlbmRfaGVhZCB0aGF0IHN1cHBvcnQgQ0dJIHNjcmlwdHMiIiINCiAgICAgICAgaWYgc2VsZi5pc19jZ2koKToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLnJ1bl9jZ2koKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIFNpbXBsZUhUVFBTZXJ2ZXIuU2ltcGxlSFRUUFJlcXVlc3RIYW5kbGVyLnNlbmRfaGVhZChzZWxmKQ0KDQogICAgZGVmIGlzX2NnaShzZWxmKToNCiAgICAgICAgWy4uLl0NCiAgICAgICAgY29sbGFwc2VkX3BhdGggPSBfdXJsX2NvbGxhcHNlX3BhdGgoc2VsZi5wYXRoKQ0KICAgICAgICBkaXJfc2VwID0gY29sbGFwc2VkX3BhdGguZmluZCgnLycsIDEpDQogICAgICAgIGhlYWQsIHRhaWwgPSBjb2xsYXBzZWRfcGF0aFs6ZGlyX3NlcF0sIGNvbGxhcHNlZF9wYXRoW2Rpcl9zZXArMTpdDQogICAgICAgIGlmIGhlYWQgaW4gc2VsZi5jZ2lfZGlyZWN0b3JpZXM6DQogICAgICAgICAgICBzZWxmLmNnaV9pbmZvID0gaGVhZCwgdGFpbA0KICAgICAgICAgICAgcmV0dXJuIFRydWUNCiAgICAgICAgcmV0dXJuIEZhbHNlDQpbLi4uXQ0KICAgIGRlZiBydW5fY2dpKHNlbGYpOg0KICAgICAgICAiIiJFeGVjdXRlIGEgQ0dJIHNjcmlwdC4iIiINCiAgICAgICAgZGlyLCByZXN0ID0gc2VsZi5jZ2lfaW5mbw0KDQogICAgICAgIFsuLi5dDQoNCiAgICAgICAgIyBkaXNzZWN0IHRoZSBwYXJ0IGFmdGVyIHRoZSBkaXJlY3RvcnkgbmFtZSBpbnRvIGEgc2NyaXB0IG5hbWUgJg0KICAgICAgICAjIGEgcG9zc2libGUgYWRkaXRpb25hbCBwYXRoLCB0byBiZSBzdG9yZWQgaW4gUEFUSF9JTkZPLg0KICAgICAgICBpID0gcmVzdC5maW5kKCcvJykNCiAgICAgICAgaWYgaSA+PSAwOg0KICAgICAgICAgICAgc2NyaXB0LCByZXN0ID0gcmVzdFs6aV0sIHJlc3RbaTpdDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBzY3JpcHQsIHJlc3QgPSByZXN0LCAnJw0KDQogICAgICAgIHNjcmlwdG5hbWUgPSBkaXIgKyAnLycgKyBzY3JpcHQNCiAgICAgICAgc2NyaXB0ZmlsZSA9IHNlbGYudHJhbnNsYXRlX3BhdGgoc2NyaXB0bmFtZSkNCiAgICAgICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKHNjcmlwdGZpbGUpOg0KICAgICAgICAgICAgc2VsZi5zZW5kX2Vycm9yKDQwNCwgIk5vIHN1Y2ggQ0dJIHNjcmlwdCAoJXIpIiAlIHNjcmlwdG5hbWUpDQogICAgICAgICAgICByZXR1cm4NCiAgICAgICAgaWYgbm90IG9zLnBhdGguaXNmaWxlKHNjcmlwdGZpbGUpOg0KICAgICAgICAgICAgc2VsZi5zZW5kX2Vycm9yKDQwMywgIkNHSSBzY3JpcHQgaXMgbm90IGEgcGxhaW4gZmlsZSAoJXIpIiAlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyaXB0bmFtZSkNCiAgICAgICAgICAgIHJldHVybg0KICAgICAgICBbLi4uXQ0KWy4uLl0NCg0KRm9yIEhUVFAgR0VUIHJlcXVlc3RzLCBkb19HRVQoKSBmaXJzdCBpbnZva2VzIHNlbmRfaGVhZCgpLiBUaGF0IG1ldGhvZA0KY2FsbHMgaXNfY2dpKCkgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIHJlcXVlc3RlZCBwYXRoIGlzIHRvIGJlIGV4ZWN1dGVkDQphcyBhIENHSSBzY3JpcHQuIFRoZSBpc19jZ2koKSBtZXRob2QgdXNlcyBfdXJsX2NvbGxhcHNlX3BhdGgoKSB0bw0Kbm9ybWFsaXplIHRoZSBwYXRoLCBpLmUuIHJlbW92ZSBleHRyYW5lb3VzIHNsYXNoZXMgKC8pLGN1cnJlbnQgZGlyZWN0b3J5DQooLiksIG9yIHBhcmVudCBkaXJlY3RvcnkgKC4uKSBlbGVtZW50cywgdGFraW5nIGNhcmUgbm90IHRvIHBlcm1pdA0KZGlyZWN0b3J5IHRyYXZlcnNhbCBiZWxvdyB0aGUgZG9jdW1lbnQgcm9vdC4gVGhlIGlzX2NnaSgpIGZ1bmN0aW9uDQpyZXR1cm5zIFRydWUgd2hlbiB0aGUgZmlyc3QgcGF0aCBlbGVtZW50IGlzIGNvbnRhaW5lZCBpbiB0aGUNCmNnaV9kaXJlY3RvcmllcyBsaXN0LiBBcyBfdXJsX2NvbGxhcHNfcGF0aCgpIGFuZCBpc19jZ2koKSBuZXZlciBVUkwNCmRlY29kZSB0aGUgcGF0aCwgcmVwbGFjaW5nIHRoZSBmb3J3YXJkIHNsYXNoIGFmdGVyIHRoZSBDR0kgZGlyZWN0b3J5IGluDQp0aGUgVVJMIHRvIGEgQ0dJIHNjcmlwdCB3aXRoIHRoZSBVUkwgZW5jb2RlZCB2YXJpYW50ICUyZiBsZWFkcyB0bw0KaXNfY2dpKCkgcmV0dXJuaW5nIEZhbHNlLiBUaGlzIHdpbGwgbWFrZSBDR0lIVFRQUmVxdWVzdEhhbmRsZXIncw0Kc2VuZF9oZWFkKCkgdGhlbiBpbnZva2UgaXRzIHBhcmVudCdzIHNlbmRfaGVhZCgpIG1ldGhvZCB3aGljaCB0cmFuc2xhdGVzDQp0aGUgVVJMIHBhdGggdG8gYSBmaWxlIHN5c3RlbSBwYXRoIHVzaW5nIHRoZSB0cmFuc2xhdGVfcGF0aCgpIG1ldGhvZCBhbmQNCnRoZW4gb3V0cHV0cyB0aGUgZmlsZSdzIGNvbnRlbnRzIHJhdy4gQXMgdHJhbnNsYXRlX3BhdGgoKSBVUkwgZGVjb2Rlcw0KdGhlIHBhdGgsIHRoaXMgdGhlbiBzdWNjZWVkcyBhbmQgZGlzY2xvc2VzIHRoZSBDR0kgc2NyaXB0J3MgZmlsZQ0KY29udGVudHM6DQoNCiQgY3VybCBodHRwOi8vbG9jYWxob3N0OjgwMDAvY2dpLWJpbiUyZnRlc3QucHkNCiMhL3Vzci9iaW4vZW52IHB5dGhvbjINCmltcG9ydCBqc29uDQppbXBvcnQgc3lzDQoNCmRiX2NyZWRlbnRpYWxzID0gIlNFQ1JFVCINCnN5cy5zdGRvdXQud3JpdGUoIkNvbnRlbnQtdHlwZTogdGV4dC9qc29uXHJcblxyXG4iKQ0Kc3lzLnN0ZG91dC53cml0ZShqc29uLmR1bXBzKHsidGV4dCI6ICJUaGlzIGlzIGEgVGVzdCJ9KSkNCg0KU2ltaWxhcmx5LCB0aGUgQ0dJSFRUUFJlcXVlc3RIYW5kbGVyIGNhbiBiZSB0cmlja2VkIGludG8gZXhlY3V0aW5nIENHSQ0Kc2NyaXB0cyB0aGF0IHdvdWxkIG5vcm1hbGx5IG5vdCBiZSBleGVjdXRhYmxlLiBUaGUgY2xhc3Mgbm9ybWFsbHkgb25seQ0KYWxsb3dzIGV4ZWN1dGluZyBDR0kgc2NyaXB0cyB0aGF0IGFyZSBkaXJlY3QgY2hpbGRyZW4gb2Ygb25lIG9mIHRoZQ0KZGlyZWN0b3JpZXMgbGlzdGVkIGluIGNnaV9kaXJlY3Rvcmllcy4gRnVydGhlcm1vcmUsIG9ubHkgZGlyZWN0DQpzdWJkaXJlY3RvcmllcyBvZiB0aGUgZG9jdW1lbnQgcm9vdCAodGhlIGN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnkpIGNhbg0KYmUgdmFsaWQgQ0dJIGRpcmVjdG9yaWVzLg0KDQpUaGlzIGNhbiBiZSBzZWVuIGluIHRoZSBmb2xsb3dpbmcgZXhhbXBsZS4gRXZlbiB0aG91Z2ggdGhlIHNhbXBsZSBzZXJ2ZXINCnNob3duIGFib3ZlIGluY2x1ZGVzICIvY2dpLWJpbi9zdWJkaXIiIGFzIHBhcnQgb2YgdGhlIHJlcXVlc3QgaGFuZGxlcidzDQpjZ2lfZGlyZWN0b3JpZXMsIGEgQ0dJIHNjcmlwdCBuYW1lZCB0ZXN0LnB5IGluIHRoYXQgZGlyZWN0b3J5IGlzIG5vdA0KZXhlY3V0ZWQ6DQoNCiQgY3VybCBodHRwOi8vbG9jYWxob3N0OjgwMDAvY2dpLWJpbi9zdWJkaXIvdGVzdC5weQ0KWy4uLl0NCjxwPkVycm9yIGNvZGUgNDAzLg0KPHA+TWVzc2FnZTogQ0dJIHNjcmlwdCBpcyBub3QgYSBwbGFpbiBmaWxlICgnL2NnaS1iaW4vc3ViZGlyJykuDQpbLi4uXQ0KDQpIZXJlLCBpc19jZ2koKSBzZXQgc2VsZi5jZ2lfaW5mbyB0byAoJy9jZ2ktYmluJywgJ3N1YmRpci90ZXN0LnB5JykgYW5kDQpyZXR1cm5lZCBUcnVlLiBOZXh0LCBydW5fY2dpKCkgZnVydGhlciBkaXNzZWN0ZWQgdGhlc2UgcGF0aHMgdG8gcGVyZm9ybQ0Kc29tZSBzYW5pdHkgY2hlY2tzLCB0aGVyZWJ5IG1pc3Rha2VubHkgYXNzdW1pbmcgc3ViZGlyIHRvIGJlIHRoZQ0KZXhlY3V0YWJsZSBzY3JpcHQncyBmaWxlbmFtZSBhbmQgdGVzdC5weSB0byBiZSBwYXRoIGluZm8uIEFzIHN1YmRpciBpcw0Kbm90IGFuIGV4ZWN1dGFibGUgZmlsZSwgcnVuX2NnaSgpIHJldHVybnMgYW4gZXJyb3IgbWVzc2FnZS4gSG93ZXZlciwgaWYNCnRoZSBmb3J3YXJkIHNsYXNoIGJldHdlZW4gc3ViZGlyIGFuZCB0ZXN0LnB5IGlzIHJlcGxhY2VkIHdpdGggJTJmLA0KaW52b2tpbmcgdGhlIHNjcmlwdCBzdWNjZWVkczoNCg0KJCBjdXJsIGh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9jZ2ktYmluL3N1YmRpciUyZnRlc3QucHkNCnsidGV4dCI6ICJUaGlzIGlzIGEgVGVzdCJ9DQoNClRoaXMgaXMgYmVjYXVzZSBuZWl0aGVyIGlzX2NnaSgpIG5vciBydW5fY2dpKCkgVVJMIGRlY29kZSB0aGUgcGF0aA0KZHVyaW5nIHByb2Nlc3NpbmcgdW50aWwgcnVuX2NnaSgpIHRyaWVzIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZSB0YXJnZXQNCnNjcmlwdCBpcyBhbiBleGVjdXRhYmxlIGZpbGUuIE1vcmUgc3BlY2lmaWNhbGx5LCBhcyBzdWJkaXIlMmZ0ZXN0LnB5DQpkb2VzIG5vdCBjb250YWluIGEgZm9yd2FyZCBzbGFzaCwgaXQgaXMgbm90IHNwbGl0IGludG8gdGhlIHNjcmlwdCBuYW1lDQpzdWJkaXIgYW5kIHBhdGggaW5mbyB0ZXN0LnB5LCBhcyBpbiB0aGUgcHJldmlvdXMgZXhhbXBsZS4NCg0KU2ltaWxhcmx5LCB1c2luZyBVUkwgZW5jb2RlZCBmb3J3YXJkIHNsYXNoZXMsIGV4ZWN1dGFibGVzIG91dHNpZGUgb2YgYQ0KQ0dJIGRpcmVjdG9yeSBjYW4gYmUgZXhlY3V0ZWQ6DQoNCiQgY3VybCBodHRwOi8vbG9jYWxob3N0OjgwMDAvY2dpLWJpbi8uLiUyZnRyYXZlcnNlZC5weQ0KeyJ0ZXh0IjogIlRoaXMgaXMgYSBUZXN0In0NCg0KDQpXb3JrYXJvdW5kDQo9PT09PT09PT09DQoNClN1YmNsYXNzIENHSUhUVFBSZXF1ZXN0SGFuZGxlciBhbmQgb3ZlcnJpZGUgdGhlIGlzX2NnaSgpIG1ldGhvZCAgd2l0aCBhDQp2YXJpYW50IHRoYXQgZmlyc3QgVVJMIGRlY29kZXMgdGhlIHN1cHBsaWVkIHBhdGgsIGZvciBleGFtcGxlOg0KDQpjbGFzcyBGaXhlZENHSUhUVFBSZXF1ZXN0SGFuZGxlcihDR0lIVFRQU2VydmVyLkNHSUhUVFBSZXF1ZXN0SGFuZGxlcik6DQogICAgZGVmIGlzX2NnaShzZWxmKToNCiAgICAgICAgc2VsZi5wYXRoID0gdXJsbGliLnVucXVvdGUoc2VsZi5wYXRoKQ0KICAgICAgICByZXR1cm4gQ0dJSFRUUFNlcnZlci5DR0lIVFRQUmVxdWVzdEhhbmRsZXIuaXNfY2dpKHNlbGYpDQoNCg0KRml4DQo9PT0NCg0KVXBkYXRlIHRvIHRoZSBsYXRlc3QgUHl0aG9uIHZlcnNpb24gZnJvbSB0aGUgTWVyY3VyaWFsIHJlcG9zaXRvcnkgYXQNCmh0dHA6Ly9oZy5weXRob24ub3JnL2NweXRob24vDQoNCg0KU2VjdXJpdHkgUmlzaw0KPT09PT09PT09PT09PQ0KDQpUaGUgdnVsbmVyYWJpbGl0eSBjYW4gYmUgdXNlZCB0byBnYWluIGFjY2VzcyB0byB0aGUgY29udGVudHMgb2YgQ0dJDQpiaW5hcmllcyBvciB0aGUgc291cmNlIGNvZGUgb2YgQ0dJIHNjcmlwdHMuIFRoaXMgbWF5IHJldmVhbCBzZW5zaXR2ZQ0KaW5mb3JtYXRpb24sIGZvciBleGFtcGxlIGFjY2VzcyBjcmVkZW50aWFscy4gVGhpcyBjYW4gZ3JlYXRseSBoZWxwDQphdHRhY2tlcnMgaW4gbW91bnRpbmcgZnVydGhlciBhdHRhY2tzIGFuZCBpcyB0aGVyZWZvcmUgY29uc2lkZXJlZCB0bw0KcG9zZSBhIGhpZ2ggcmlzay4gRnVydGhlcm1vcmUgYXR0YWNrZXJzIG1heSBiZSBhYmxlIHRvIGV4ZWN1dGUgY29kZSB0aGF0DQp3YXMgbm90IGludGVuZGVkIHRvIGJlIGV4ZWN1dGVkLiBIb3dldmVyLCB0aGlzIGlzIGxpbWl0ZWQgdG8gZmlsZXMNCnN0b3JlZCBpbiB0aGUgc2VydmVyJ3Mgd29ya2luZyBkaXJlY3Rvcnkgb3IgaW4gaXRzIHN1YmRpcmVjdG9yaWVzLg0KDQpUaGUgQ0dJSFRUUFNlcnZlciBjb2RlIGRvZXMgY29udGFpbiB0aGlzIHdhcm5pbmc6DQoiU0VDVVJJVFkgV0FSTklORzogRE9OJ1QgVVNFIFRISVMgQ09ERSBVTkxFU1MgWU9VIEFSRSBJTlNJREUgQSBGSVJFV0FMTCINCkV2ZW4gd2hlbiB1c2VkIG9uIGEgbG9jYWwgY29tcHV0ZXIgdGhpcyBtYXkgYWxsb3cgb3RoZXIgbG9jYWwgdXNlcnMgdG8NCmV4ZWN1dGUgY29kZSBpbiB0aGUgY29udGV4dCBvZiBhbm90aGVyIHVzZXIuDQoNCg0KVGltZWxpbmUNCj09PT09PT09DQoNCjIwMTQtMDQtMDcgVnVsbmVyYWJpbGl0eSBpZGVudGlmaWVkDQoyMDE0LTA2LTExIEN1c3RvbWVyIGFwcHJvdmVkIGRpc2Nsb3N1cmUgdG8gdmVuZG9yDQoyMDE0LTA2LTExIFZlbmRvciBub3RpZmllZA0KMjAxNC0wNi0xNSBWZW5kb3IgZGlzY2xvc2VkIHZ1bG5lcmFiaWxpdHkgaW4gdGhlaXIgcHVibGljIGJ1ZyB0cmFja2VyDQogICAgICAgICAgIGFuZCBhZGRyZXNzZWQgaXQgaW4gcHVibGljIHNvdXJjZSBjb2RlIHJlcG9zaXRvcnkNCjIwMTQtMDYtMjMgQ1ZFIG51bWJlciByZXF1ZXN0ZWQNCjIwMTQtMDYtMjUgQ1ZFIG51bWJlciBhc3NpZ25lZA0KMjAxNC0wNi0yNiBBZHZpc29yeSByZWxlYXNlZA0KDQoNClJlZmVyZW5jZXMNCj09PT09PT09PT0NCg0KaHR0cDovL2J1Z3MucHl0aG9uLm9yZy9pc3N1ZTIxNzY2DQoNCg0KUmVkVGVhbSBQZW50ZXN0aW5nIEdtYkgNCj09PT09PT09PT09PT09PT09PT09PT09DQoNClJlZFRlYW0gUGVudGVzdGluZyBvZmZlcnMgaW5kaXZpZHVhbCBwZW5ldHJhdGlvbiB0ZXN0cywgc2hvcnQgcGVudGVzdHMsDQpwZXJmb3JtZWQgYnkgYSB0ZWFtIG9mIHNwZWNpYWxpc2VkIElULXNlY3VyaXR5IGV4cGVydHMuIEhlcmVieSwgc2VjdXJpdHkNCndlYWtuZXNzZXMgaW4gY29tcGFueSBuZXR3b3JrcyBvciBwcm9kdWN0cyBhcmUgdW5jb3ZlcmVkIGFuZCBjYW4gYmUNCmZpeGVkIGltbWVkaWF0ZWx5Lg0KDQpBcyB0aGVyZSBhcmUgb25seSBmZXcgZXhwZXJ0cyBpbiB0aGlzIGZpZWxkLCBSZWRUZWFtIFBlbnRlc3Rpbmcgd2FudHMgdG8NCnNoYXJlIGl0cyBrbm93bGVkZ2UgYW5kIGVuaGFuY2UgdGhlIHB1YmxpYyBrbm93bGVkZ2Ugd2l0aCByZXNlYXJjaCBpbg0Kc2VjdXJpdHkgcmVsYXRlZCBhcmVhcy4gVGhlIHJlc3VsdHMgYXJlIG1hZGUgYXZhaWxhYmxlIGFzIHB1YmxpYw0Kc2VjdXJpdHkgYWR2aXNvcmllcy4NCg0KTW9yZSBpbmZvcm1hdGlvbiBhYm91dCBSZWRUZWFtIFBlbnRlc3RpbmcgY2FuIGJlIGZvdW5kIGF0DQpodHRwczovL3d3dy5yZWR0ZWFtLXBlbnRlc3RpbmcuZGUuDQoNCg0KLS0gDQpSZWRUZWFtIFBlbnRlc3RpbmcgR21iSCAgICAgICAgICAgICAgICAgICBUZWwuOiArNDkgMjQxIDUxMDA4MS0wDQpEZW5uZXdhcnRzdHIuIDI1LTI3ICAgICAgICAgICAgICAgICAgICAgICBGYXggOiArNDkgMjQxIDUxMDA4MS05OQ0KNTIwNjggQWFjaGVuICAgICAgICAgICAgICAgICAgICBodHRwczovL3d3dy5yZWR0ZWFtLXBlbnRlc3RpbmcuZGUNCkdlcm1hbnkgICAgICAgICAgICAgICAgICAgICAgICAgUmVnaXN0ZXJnZXJpY2h0OiBBYWNoZW4gSFJCIDE0MDA0DQpHZXNjaMOkZnRzZsO8aHJlcjogICAgICAgICAgICAgICAgICAgICAgIFBhdHJpY2sgSG9mLCBKZW5zIExpZWJjaGVu", 
    "filename": "platforms/multiple/webapps/33894.txt", 
    "id": "33894", 
    "cves": [
        "CVE-2014-4650"
    ]
}