{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/local/15704.c", 
    "id": "15704", 
    "cves": [
        "CVE-2010-3849", 
        "CVE-2010-3850", 
        "CVE-2010-4258"
    ]
}