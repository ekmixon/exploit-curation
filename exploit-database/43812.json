{
    "source": "exploit-database", 
    "exploit": "UEhQWCBNdWx0aXBsZSBWdWxuZXJhYmlsaXRpZXMNCg0KVmVuZG9yOiBQSFBYDQpQcm9kdWN0OiBQSFBYDQpWZXJzaW9uOiA8PSAzLjI2DQpXZWJzaXRlOiBodHRwOi8vd3d3LnBocHgub3JnDQoNCkJJRDogMTAyODMgMTAyODQgDQpDVkU6IENWRS0yMDA0LTIzNjQgDQpPU1ZEQjogNTkwMyA1OTA0IDU5MDUgNTkwNiA1OTA3IDU5MDggNTkwOSA1OTEwIDU5MTEgDQpTRUNVTklBOiAxMTU1NCANClBBQ0tFVFNUT1JNOiAzMzI1MSANCg0KRGVzY3JpcHRpb246DQpQSFBYIGlzIGEgY29uc3RhbnRseSBldm9sdmluZyBhbmQgY2hhbmdpbmcgQ29udGVudCBNYW5hZ2VtZW50IFN5c3RlbSAoQ01TKS4gUEhQWCBpcyBoaWdobHkgY3VzdG9taXphYmxlIGFuZCBoaWdoIHBvd2VyZWQgYWxsIGluIG9uZSBzeXN0ZW0uIFBIUFggcHJvdmlkZXMgY29udGVudCBtYW5hZ2VtZW50IGNvbWJpbmVkIHdpdGggdGhlIHBvd2VyIG9mIGEgcG9ydGFsIGJ5IGluY2x1ZGluZyBpbiB0aGUgY29yZSBwYWNrYWdlIG1vZHVsZXMgc3VjaCBhcyBGQVEsIHBvbGxzLCBhbmQgZm9ydW1zLiBQSFBYIHVzZXMgZHluYW1pYy10ZW1wbGF0ZS1kZXNpZ24sIHdoYXQgdGhpcyBtZWFucyBpcyB0aGF0IHlvdSBoYXZlIHRoZSBwb3dlciB0byBjb250cm9sIHdoYXQgeW91ciBzaXRlIHdpbGwgbG9vayBsaWtlLiBUaGVtZXMgYXJlIGluY2x1ZGVkLCBidXQgbm90IHJlcXVpcmVkLiBZb3UgY2FuIGNyZWF0ZSB0aGUgcGFnZSBob3dldmVyIHlvdSB3YW50LCBhbmQgUEhQWCB3aWxsIGp1c3QgaW5zZXJ0IGNvZGUgd2hlcmUgeW91IHdhbnQgaXQuIE5vIG1vcmUgMyBjb2x1bW5zIGlmIHlvdSBkb27DouKCrOKEonQgd2FudCBpdCEgV3JpdHRlbiBpbiB0aGUgcG93ZXJmdWwgc2VydmVyIGxhbmd1YWdlLCBQSFAsIGFuZCB1dGlsaXppbmcgdGhlIGFtYXppbmdseSBmYXN0IGFuZCBzZWN1cmUgZGF0YWJhc2UgTXlTUUwsIFBIUFggaXMgYSBncmVhdCBzb2x1dGlvbiBmb3IgYWxsIHNpemUgd2Vic2l0ZSBjb21tdW5pdGllcywgYXQgdGhlIGJlc3QgcHJpY2UgcG9zc2libGXDouKCrMKmZnJlZSEgDQoNCkNyb3NzIFNpdGUgU2NyaXB0aW5nIFZ1bG5lcmFiaWxpdGllczoNClBIUFggdXNlcyBhIGZ1bmN0aW9uIGluIHRoZSBpbmNsdWRlcy9mdW5jdGlvbnMuaW5jLnBocCBmaWxlIHRoYXQgc3RyaXBzIG91dCBiYWQgc3R1ZmYgZnJvbSB0aGUgdXJpIGNhbGxlZCBjaGVja1VSSSgpIFRoaXMgaXMgbm90IGEgYmFkIGlkZWEgd2hlbiBpdCBjb21lcyB0byBkZWFsaW5nIHdpdGggWFNTIGlzc3VlcywgaG93ZXZlciBpdCBpcyBwb29ybHkgY29kZWQgYW5kIGRvZXMgbm90IHByb3Blcmx5IHNhbml0aXplIHRoZSB2YWx1ZXMgcmV0cmlldmVkIGZyb20gdGhlIHVyaS4gTGV0cyBoYXZlIGEgbG9vayANCg0KZnVuY3Rpb24gY2hlY2tVUkkoKXsNCiAgICAgJGNoZWNrQXJyYXkgPSBhcnJheSgiPiIsIjwiLCIoIiwiKSIpOw0KICAgICBmb3JlYWNoKCRjaGVja0FycmF5IGFzICRjKXsNCiAgICAgICAgIGlmIChzdWJzdHJfY291bnQoJF9TRVJWRVJbIlJFUVVFU1RfVVJJIl0sICRjKSl7IGRpZSgiSEFDSyBBVFRFTVBUIik7IH0NCiAgICAgfQ0KIH0NCg0KQXMgeW91IGNhbiBzZWUgZnJvbSB0aGlzIGZ1bmN0aW9uIG9ubHkgYSBmZXcgaXRlbXMgYXJlIHRvIGJlIHN0cmlwcGVkIGZyb20gdGhlIHVyaS4gVGhpcyBjYW4gZWFzaWx5IGJlIGNpcmN1bXZlbnRlZCBieSBoZXggZW5jb2Rpbmcgc2NyaXB0IGFuZCB0aGVuIGJ5IHNlbmRpbmcgdGhlIHJlcXVlc3RzIHRvIGEgdnVsbmVyYWJsZSBmaWxlLiBCZWxvdyBhcmUganVzdCBhIGZldyBleGFtcGxlcy4gDQoNCmZvcnVtcy5waHA/Zm9ydW1faWQ9W1ZJRF0mbGltaXQ9MjUlM0NpZnJhbWUlM0UNCmZvcnVtcy5waHA/Zm9ydW1faWQ9W1ZJRF0mdG9waWNfaWQ9W1ZJRF0mbGltaXQ9MTUlM0NpZnJhbWUlM0UNCnVzZXJzLnBocD9hY3Rpb249JmxpbWl0PTEwMCUzQ2lmcmFtZSUzRQ0KdXNlcnMucGhwP2FjdGlvbj12aWV3JnVzZXJfaWQ9W1ZJRF0lM0UlM0NpZnJhbWUlM0UNCmZvcnVtcy5waHA/YWN0aW9uPXBvc3QmZm9ydW1faWQ9W1ZJRF0lM0UlM0NpZnJhbWUlM0UNCmZvcnVtcy5waHA/YWN0aW9uPXNlYXJjaCZzZWFyY2hfaWQ9W1ZJRF0mbGltaXQ9MjUlM0UlM0NpZnJhbWUlM0UNCnVzZXJzLnBocD9hY3Rpb249ZW1haWwmdXNlcl9pZD0lM0UlM0NpZnJhbWUlM0UNCnVzZXJzLnBocD9hY3Rpb249dmlldyZ1c2VyX2lkPVtWSURdJTNFJTNDaWZyYW1lJTNFDQpmb3J1bXMucGhwP2ZvcnVtX2lkPVtWSURdJTNFJTNDaWZyYW1lJTNFDQpmb3J1bXMucGhwP2ZvcnVtX2lkPVtWSURdJnRvcGljX2lkPVtWSURdJmxpbWl0PSUzRSUzQ2lmcmFtZSUzRQ0KZm9ydW1zLnBocD9hY3Rpb249cG9zdCZmb3J1bV9pZD1bVklEXSZ0b3BpY19pZD1bVklEXSUzRSUzQ2lmcmFtZSUzRQ0KbmV3cy5waHA/bmV3c19pZD1bVklEXSUzRSUzQ2lmcmFtZSUzRQ0KZm9ydW1zLnBocD9mb3J1bV9pZD1bVklEXSZ0b3BpY19pZD1bVklEXSUzRSUzQ2lmcmFtZSUzRSANCg0KV2hlcmUgVklEIGlzIHNob3VsZCBiZSBhIHZhbGlkIGlkIG9mIHNvbWUgc29ydHMgZGVwZW5kaW5nIG9uIHRoZSBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZC4gSSBhbSBzdXJlIHRoZXJlIGFyZSBtb3JlIFhTUyBpc3N1ZXMgdGhhbiB0aGlzLCBidXQgdGhlIHJlYWwgcG9pbnQgaXMgdG8gc2hvdyBQSFBYJ3MgZmlsdGVyaW5nIGZ1bmN0aW9uIGRvZXMgbm90IHdvcmssIGFuZCBub3QgdG8gZmluZCBldmVyeSBzaW5nbGUgcGxhY2Ugd2hlcmUgdGhlcmUgaXMgcG9zc2liaWxpdHkgZm9yIGNyb3NzIHNpdGUgc2NyaXB0aW5nLiBUaGUgY2hlY2tVUkkoKSBmdW5jdGlvbiBpc24ndCBhIGJhZCBpZGVhLCBidXQgc2hvdWxkIGRlZmluaXRlbHkgdXNlIHNvbWV0aGluZyBsaWtlIHRoZSBzdHJpcF90YWdzKCkgZnVuY3Rpb24gb3IgaHRtbHNwZWNpYWxjaGFycygpIHRvIGJldHRlciB2YWxpZGF0ZS4gDQoNClBhdGggRGlzY2xvc3VyZSBWdWxuZXJhYmlsaXRpZXM6DQpJdCBpcyBwb3NzaWJsZSBmb3IgYW4gYXR0YWNrZXIgdG8gbGVhcm4gdGhlIGZ1bGwgcGh5c2ljYWwgcGF0aCBvZiB0aGUgUEhQWCBpbnN0YWxsYXRpb24uIFRoaXMgY2FuIGJlIGFjY29tcGxpc2hlZCBieSBzZW5kaW5nIGEgbnVsbCBvciBpbnZhbGlkIHZhbHVlIHRvIHNldmVyYWwgaW5zdGFuY2VzIG9mIHRoZSAkbGltaXQgdmFyaWFibGUuIEZvciBleGFtcGxlIHNlZSBiZWxvdyANCg0KZm9ydW1zLnBocD9hY3Rpb249c2VhcmNoJnNlYXJjaF9pZD1bVklEXSZsaW1pdD0gDQoNClRoaXMgdXJpIHdpbGwgcmVzdWx0IGluIGEgTXlTUUxfZmV0Y2hfcm93KCkgZXJyb3IgYW5kIHJldmVhbCB0aGUgZnVsbCBwaHlzaWNhbCBwYXRoIG9mIHRoZSBQSFBYIGluc3RhbGxhdGlvbi4gVGhpcyBpcyBiZWNhdXNlICRsaW1pdCBpc24ndCBwcm9wZXJseSB2YWxpZGF0ZWQuIA0KDQpBcmJpdHJhcnkgQ29tbWFuZCBFeGVjdXRpb246DQpUaGlzIGlzIHJlYWxseSBpbiBteSBvcGluaW9uIGF0IGxlYXN0LCBhIHZlcnkgZnVuZGFtZW50YWwgZmxhdy4gQXMgc3RhdGVkIGluIHRoZSBIVFRQLzEuMSBSRkMgKFJGQyAyNjE2IFNlY3Rpb24gOS4xLjEgIlNhZmUgTWV0aG9kcyIpIG5vIEdFVCByZXF1ZXN0IHNob3VsZCBiZSB1c2VkIHRvIG1ha2UgYW55IHNpZ25pZmljYW50IGFjdGlvbnMuIFRoaXMgaG93ZXZlciB3b3VsZCBub3QgYmUgc3VjaCBhIGJpZyBkZWFsIGlmIHRoZXJlIHdhcyBzb21lIHNvcnQgb2YgYXV0aCBrZXkgb3Igc2Vzc2lvbiBpZCBpbiBwbGFjZSB0byB2ZXJpZnkgdGhlIHZhbGlkaXR5IG9mIGFjdGlvbnMsIGJ1dCB0aGVyZSBpc24ndC4gSW4gc2hvcnQgYWxsIGFuIGF0dGFja2VyIGhhcyB0byBkbyBpcyBzZW5kIGFuIGFkbWluIGEgcG0sIG9yIG1ha2UgYSBtYWxpY2lvdXMgcG9zdCB3aXRoIHRoZSBkZXNpcmVkIGNvbW1hbmQgYW5kIHRoZSBhY3Rpb24gd2lsbCBzaWxlbnRseSBleGVjdXRlLiANCg0KL2FkbWluL3BhZ2UucGhwP2FjdGlvbj1kZWxldGUmcGFnZV9pZD1bVklEXQ0KL2FkbWluL25ld3MucGhwP2FjdGlvbj1kZWxldGUmbmV3c19pZD1bVklEXQ0KL2FkbWluL3VzZXIucGhwP2FjdGlvbj1kZWxldGUmdXNlcl9pZD1bVklEXQ0KL2FkbWluL2ltYWdlcy5waHA/YWN0aW9uPWRlbGV0ZSZpbWFnZV9pZD1bVklEXQ0KL2FkbWluL3BhZ2UucGhwP2FjdGlvbj1kZWxldGVQb2xsJnBvbGxfaWQ9W1ZJRF0NCi9hZG1pbi9mb3J1bXMucGhwP2FjdGlvbj13b3JkcyZzdWJhY3Rpb249ZGVsZXRlJndvcmRfaWQ9W1ZJRF0NCi9hZG1pbi9mb3J1bXMucGhwP2FjdGlvbj1mbGFnJnN1YmFjdGlvbj1kZWxldGUmZmxhZ19pZD1bVklEXQ0KL2FkbWluL2ZvcnVtcy5waHA/YWN0aW9uPXhjb2RlJnN1YmFjdGlvbj1kZWxldGUmeGNvZGVfaWQ9W1ZJRF0gDQoNCkFzIHdlIGNhbiBzZWUgZnJvbSB0aGUgYWJvdmUgZXhhbXBsZXMsIHRoaXMgaXNzdWUgY2FuIGJlIHVzZWQgYnkgYSBtYWxpY2lvdXMgcGVyc29uIHRvIGFsbCBidXQgY29tcGxldGVseSBzYWJvdGFnZSBhIHNpdGUgcnVubmluZyBQSFBYLiBJZiBhbnkgb25lIG9mIHRoZXNlIGNvbW1hbmRzIHdlcmUgcGxhY2VkIGluIGFuIGltYWdlIHRhZyBhbiBhdHRhY2tlciBjb3VsZCBkZWxldGUgdXNlcnMsIG5ld3MgaXRlbXMsIHBhZ2VzLCBpbWFnZXMsIHBvbGxzLCB3b3JkIGNlbnNvcnMsIGZsYWdzLCB4Y29kZSBhbmQgcHJvYmFibHkgbW9yZS4gSW4gdGhlIHBhc3QgSSBoYXZlIHNlZW4gcGhwQkIgZm9yIGV4YW1wbGUgZGVhbCB3aXRoIHRoZSBzYW1lIGlzc3VlIG9mIHVzaW5nIHVuc2FmZSBHRVQgcmVxdWVzdHMgYnkgbGltaXRpbmcgdGhlIGJiY29kZSB0byBvbmx5IGFsbG93IGltYWdlcyB3aXRoIGEgdmFsaWQgZXh0ZW5zaW9uLiBIb3dldmVyIHRoaXMgaXMgYSBiYWQgaWRlYSBiZWNhdXNlIGl0IGRvZXMgbm90IHNvbHZlIHRoZSBwcm9ibGVtIGF0IGFsbCwgYW5kIHRvIHRoaXMgZGF5IGFsbCBwaHBCQiB2ZXJzaW9ucyBhcmUgdnVsbmVyYWJsZSB0byBoYXZpbmcgYXJiaXRyYXJ5IHBvc3RzIGRlbGV0ZWQgYW5kIG1vcmUganVzdCBieSB2aXNpdGluZyBhIG1hbGljaW91cyB3ZWIgcGFnZSBvciBsaW5rLiBJdCBpcyBhIHNlcmlvdXMgaXNzdWUgYW5kIHNob3VsZCBiZSB0cmVhdGVkIGFzIHN1Y2guIEl0IGdyZWF0bHkgaW1wYWN0cyB0aGUgc2VjdXJpdHkgb2YgYSB3ZWIgYXBwbGljYXRpb24uIEV2ZW4gdXNpbmcgdGhlIFBPU1QgbWV0aG9kIHdpdGhvdXQgYW4gYXV0aCBrZXkgb3IgdGhlIGxpa2UgaXMgYSBiYWQgaWRlYS4gDQoNClNvbHV0aW9uOg0KVGhlIGxlYWQgZGV2ZWxvcGVyIHdhcyBmaXJzdCBpbmZvcm1lZCBvZiB0aGVzZSBpc3N1ZXMgb3ZlciBhIG1vbnRoIGFnby4gQWxsIG9mIHRoZSBpc3N1ZXMgc2hvdWxkIGJlIGFkZHJlc3NlZC4gT25lIG9mIHRoZSBuZXcgZmVhdHVyZXMgdG8gbWFrZSBwaHBYIG1vcmUgc2VjdXJlIGlzIGEgYXV0aF9rZXkgc2NoZW1hIHRvIHZhbGlkYXRlIGFjdGlvbnMgZXRjLiBBbGwgaW4gYWxsIEkgdGhpbmsgdGhleSBkaWQgYSBncmVhdCBqb2IgYW5kIHRha2UgdGhlIHNlY3VyaXR5IG9mIHRoZWlyIHByb2R1Y3QgdmVyeSBzZXJpb3VzbHkgOikgcGhwWCAzLjMuMCBpcyB0byBiZSByZWxlYXNlZCBNb25kYXksIE1heSB0aGUgM3JkLiBVcGdyYWRlIGlzIHN0cm9uZ2x5IGFkdmlzZWQuIA0KDQpDcmVkaXRzOg0KSmFtZXMgQmVyY2VnYXkgb2YgdGhlIEd1bGZUZWNoIFNlY3VyaXR5IFJlc2VhcmNoIFRlYW0u", 
    "id": "43812", 
    "cves": [
        "CVE-2004-2364"
    ]
}