{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/hardware/remote/31033.py", 
    "id": "31033", 
    "cves": [
        "CVE-2013-6343"
    ]
}