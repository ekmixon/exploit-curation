{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/android/dos/40502.txt", 
    "id": "40502", 
    "cves": [
        "CVE-2016-5348"
    ]
}