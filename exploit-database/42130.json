{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/cgi/webapps/42130.txt", 
    "id": "42130", 
    "cves": [
        "CVE-2017-8838", 
        "CVE-2017-8839", 
        "CVE-2017-8835", 
        "CVE-2017-8836", 
        "CVE-2017-8837", 
        "CVE-2017-8841", 
        "CVE-2017-8840"
    ]
}