{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/remote/11138.c", 
    "id": "11138", 
    "cves": [
        "CVE-2009-0950"
    ]
}