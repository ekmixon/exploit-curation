{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/osx/local/27944.rb", 
    "id": "27944", 
    "cves": [
        "CVE-2013-1775"
    ]
}