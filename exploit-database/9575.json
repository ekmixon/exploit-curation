{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/local/9575.c", 
    "id": "9575", 
    "cves": [
        "CVE-2009-2698"
    ]
}