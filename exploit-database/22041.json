{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/webapps/22041.txt", 
    "id": "22041", 
    "cves": [
        "CVE-2012-3186", 
        "CVE-2012-3184", 
        "CVE-2012-3185", 
        "CVE-2012-3183"
    ]
}