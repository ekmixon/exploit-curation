{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/php/remote/41996.sh", 
    "id": "41996", 
    "cves": [
        "CVE-2016-10073", 
        "CVE-2016-10033"
    ]
}