{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/remote/24205.txt", 
    "id": "24205", 
    "cves": [
        "CVE-2012-0432"
    ]
}