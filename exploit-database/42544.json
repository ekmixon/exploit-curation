{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/java/webapps/42544.py", 
    "id": "42544", 
    "cves": [
        "CVE-2017-9650"
    ]
}