{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/local/34112.txt", 
    "id": "34112", 
    "cves": [
        "CVE-2014-4971"
    ]
}