{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/remote/40136.py", 
    "id": "40136", 
    "cves": [
        "CVE-2016-6210"
    ]
}