{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/php/webapps/41377.sh", 
    "id": "41377", 
    "cves": [
        "CVE-2017-5344"
    ]
}