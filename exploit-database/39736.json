{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/remote/39736.txt", 
    "id": "39736", 
    "cves": [
        "CVE-2016-3074"
    ]
}