{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/php/webapps/18417.txt", 
    "id": "18417", 
    "cves": [
        "CVE-2011-4898", 
        "CVE-2011-4899", 
        "CVE-2012-0782"
    ]
}