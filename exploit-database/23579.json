{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/unix/remote/23579.rb", 
    "id": "23579", 
    "cves": [
        "CVE-2012-6329"
    ]
}