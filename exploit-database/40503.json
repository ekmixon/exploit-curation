{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/local/40503.rb", 
    "id": "40503", 
    "cves": [
        "CVE-2014-0038"
    ]
}