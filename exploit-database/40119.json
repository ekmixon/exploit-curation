{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/remote/40119.md", 
    "id": "40119", 
    "cves": [
        "CVE-2016-3116"
    ]
}