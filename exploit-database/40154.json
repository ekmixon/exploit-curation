{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/php/webapps/40154.txt", 
    "id": "40154", 
    "cves": [
        "CVE-2016-6175"
    ]
}