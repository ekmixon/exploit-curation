{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/local/35992.c", 
    "id": "35992", 
    "cves": [
        "CVE-2014-9643"
    ]
}