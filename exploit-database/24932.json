{
    "source": "exploit-database", 
    "exploit": "U0VDIENvbnN1bHQgVnVsbmVyYWJpbGl0eSBMYWIgU2VjdXJpdHkgQWR2aXNvcnkgPCAyMDEzMDQwMy0wID4NCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQogICAgICAgICAgICAgIHRpdGxlOiBNdWx0aXBsZSB2dWxuZXJhYmlsaXRpZXMNCiAgICAgICAgICAgIHByb2R1Y3Q6IFNvcGhvcyBXZWIgUHJvdGVjdGlvbiBBcHBsaWFuY2UNCiB2dWxuZXJhYmxlIHZlcnNpb246IDw9IDMuNy44LjENCiAgICAgIGZpeGVkIHZlcnNpb246IDMuNy44LjINCiAgICAgICAgICAgICBpbXBhY3Q6IENyaXRpY2FsDQogICAgICAgICBDVkUgbnVtYmVyOiBDVkUtMjAxMy0yNjQxLCBDVkUtMjAxMy0yNjQyLCBDVkUtMjAxMy0yNjQzDQogICAgICAgICAgIGhvbWVwYWdlOiBodHRwOi8vd3d3LnNvcGhvcy5jb20vDQogICAgICAgICAgICAgIGZvdW5kOiAyMDEzLTAxLTE0DQogICAgICAgICAgICAgICAgIGJ5OiBXb2xmZ2FuZyBFdHRsaW5nZXINCiAgICAgICAgICAgICAgICAgICAgIFNFQyBDb25zdWx0IFZ1bG5lcmFiaWxpdHkgTGFiDQogICAgICAgICAgICAgICAgICAgICBodHRwczovL3d3dy5zZWMtY29uc3VsdC5jb20NCg0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCg0KVmVuZG9yL3Byb2R1Y3QgZGVzY3JpcHRpb246DQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KIk91ciBhd2FyZC13aW5uaW5nIFNlY3VyZSBXZWIgR2F0ZXdheSBhcHBsaWFuY2VzIG1ha2Ugd2ViIHByb3RlY3Rpb24gZWFzeS4NClRoZXkgYXJlIHF1aWNrIHRvIHNldHVwLCBzaW1wbGUgdG8gbWFuYWdlIGFuZCBtYWtlIHBvbGljeSBhZG1pbmlzdHJhdGlvbiBhDQpzbmFwLCBldmVuIGZvciBub24tdGVjaG5pY2FsIHVzZXJzLiINCg0KVVJMOiBodHRwOi8vd3d3LnNvcGhvcy5jb20vZW4tdXMvcHJvZHVjdHMvd2ViL3dlYi1wcm90ZWN0aW9uLmFzcHgNCg0KDQpCdXNpbmVzcyByZWNvbW1lbmRhdGlvbjoNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KU0VDIENvbnN1bHQgaGFzIGlkZW50aWZpZWQgc2V2ZXJhbCB2dWxuZXJhYmlsaXRpZXMgd2l0aGluIHRoZSBjb21wb25lbnRzIG9mDQp0aGUgU29waG9zIFdlYiBQcm90ZWN0aW9uIEFwcGxpYW5jZSBpbiB0aGUgY291cnNlIG9mIGEgc2hvcnQgY3Jhc2ggdGVzdC4gU29tZQ0KY29tcG9uZW50cyBoYXZlIGJlZW4gc3BvdC1jaGVja2VkLCB3aGlsZSBvdGhlcnMgaGF2ZSBub3QgYmVlbiB0ZXN0ZWQgYXQgYWxsLg0KDQpBbiBhdHRhY2tlciBjYW4gZ2V0IHVuYXV0aG9yaXplZCBhY2Nlc3MgdG8gdGhlIGFwcGxpYW5jZSBhbmQgcGxhbnQgYmFja2Rvb3JzIG9yDQphY2Nlc3MgY29uZmlndXJhdGlvbiBmaWxlcyBjb250YWluaW5nIGNyZWRlbnRpYWxzIGZvciBvdGhlciBzeXN0ZW1zIChlZy4gQWN0aXZlDQpEaXJlY3RvcnkvRlRQIGxvZ2luKSB3aGljaCBjYW4gYmUgdXNlZCBpbiBmdXJ0aGVyIGF0dGFja3MuDQpTaW5jZSBhbGwgd2ViIHRyYWZmaWMgcGFzc2VzIHRocm91Z2ggdGhlIGFwcGxpYW5jZSwgaW50ZXJjZXB0aW9uIG9mIEhUVFAgYXMNCndlbGwgYXMgdGhlIHBsYWludGV4dCBmb3JtIG9mIEhUVFBTIHRyYWZmaWMgKGlmIEhUVFBTIFNjYW5uaW5nIGZlYXR1cmUgaW4gdXNlKSwNCmluY2x1ZGluZyBzZW5zaXRpdmUgaW5mb3JtYXRpb24gbGlrZSBwYXNzd29yZHMgYW5kIHNlc3Npb24gQ29va2llcyBpcyBwb3NzaWJsZS4NCklmIEhUVFBTIFNjYW5uaW5nIGlzIGVuYWJsZWQsIHRoZSBhcHBsaWFuY2UgaG9sZHMgYSBwcml2YXRlIGtleSBmb3IgYQ0KQ2VydGlmaWNhdGUgQXV0aG9yaXR5IChDQSkgY2VydGlmaWNhdGUgdGhhdCBpcyBpbnN0YWxsZWQvdHJ1c3RlZCBvbiBhbGwNCndvcmtzdGF0aW9ucyBpbiB0aGUgY29tcGFueS4gSWYgdGhpcyBwcml2YXRlIGtleSBpcyBjb21wcm9taXNlZCBieSBhbiBhdHRhY2tlciwNCmFyYml0cmFyeSBjZXJ0aWZpY2F0ZXMgY2FuIGJlIHNpZ25lZC4gVGhlc2UgY2VydGlmaWNhdGVzIHdpbGwgdGhlbiBwYXNzDQp2YWxpZGF0aW9uIG9uIHRoZSBjbGllbnQgbWFjaGluZXMsIGVuYWJsaW5nIGluIHZhcmlvdXMgYXR0YWNrcyB0YXJnZXRpbmcNCmNsaWVudHMgKE1JVE0sIHBoaXNoaW5nLCBldmlsZ3JhZGUsIC4uLikuDQoNClRoZSByZWNvbW1lbmRhdGlvbiBvZiBTRUMgQ29uc3VsdCBpcyB0byBzd2l0Y2ggb2ZmIHRoZSBwcm9kdWN0IHVudGlsIGENCmNvbXByZWhlbnNpdmUgc2VjdXJpdHkgYXVkaXQgYmFzZWQgb24gYSBzZWN1cml0eSBzb3VyY2UgY29kZSByZXZpZXcgaGFzIGJlZW4NCnBlcmZvcm1lZCBhbmQgYWxsIGlkZW50aWZpZWQgc2VjdXJpdHkgZGVmaWNpZW5jaWVzIGhhdmUgYmVlbiByZXNvbHZlZCBieSB0aGUNCnZlbmRvci4NCg0KVnVsbmVyYWJpbGl0eSBvdmVydmlldy9kZXNjcmlwdGlvbjoNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoxKSBVbmF1dGhlbnRpY2F0ZWQgbG9jYWwgZmlsZSBkaXNjbG9zdXJlIChDVkUtMjAxMy0yNjQxKQ0KVW5hdXRoZW50aWNhdGVkIHVzZXJzIGNhbiByZWFkIGFyYml0cmFyeSBmaWxlcyBmcm9tIHRoZSBmaWxlc3lzdGVtIHdpdGggdGhlDQpwcml2aWxlZ2VzIG9mIHRoZSAic3BpZGVybWFuIiBvcGVyYXRpbmcgc3lzdGVtIHVzZXIuIFRoZXNlIGZpbGVzIGluY2x1ZGUNCmNvbmZpZ3VyYXRpb24gZmlsZXMgY29udGFpbmluZyBzZW5zaXRpdmUgaW5mb3JtYXRpb24gc3VjaCBhcyBjbGVhciB0ZXh0DQpwYXNzd29yZHMgd2hpY2ggY2FuIGJlIHVzZWQgaW4gb3RoZXIgYXR0YWNrcy4NCkZ1cnRoZXJtb3JlIHRoZSB3ZWJzZXJ2ZXIgbG9nIGZpbGUgd2hpY2ggaG9sZHMgdmFsaWQgUEhQIHNlc3Npb24gSURzIGNhbiBiZQ0KYWNjZXNzZWQuIFdpdGggdGhpcyBpbmZvcm1hdGlvbiBhZG1pbmlzdHJhdG9yIHVzZXJzIGNhbiBiZSBpbXBlcnNvbmF0ZWQuDQoNCjIpIE9TIGNvbW1hbmQgaW5qZWN0aW9uIChDVkUtMjAxMy0yNjQyKQ0KQXV0aGVudGljYXRlZCB1c2VycyBjYW4gZXhlY3V0ZSBhcmJpdHJhcnkgY29tbWFuZHMgb24gdGhlIHVuZGVybHlpbmcNCm9wZXJhdGluZyBzeXN0ZW0gd2l0aCB0aGUgcHJpdmlsZWdlcyBvZiB0aGUgInNwaWRlcm1hbiIgb3BlcmF0aW5nIHN5c3RlbSB1c2VyLg0KVGhpcyBjYW4gYmUgdXNlZCB0byBnZXQgcGVyc2lzdGVudCBhY2Nlc3MgdG8gdGhlIGFmZmVjdGVkIHN5c3RlbSAoZWcuIGJ5DQpwbGFudGluZyBiYWNrZG9vcnMpLCBhY2Nlc3NpbmcgYWxsIGtpbmRzIGxvY2FsbHkgc3RvcmVkIGluZm9ybWF0aW9uIG9yDQppbnRlcmNlcHRpbmcgd2ViIHRyYWZmaWMgdGhhdCBwYXNzZXMgdGhyb3VnaCB0aGUgYXBwbGlhbmNlLg0KVW5hdXRoZW50aWNhdGVkIHVzZXJzIGNhbiBleHBsb2l0IHRoaXMga2luZCBvZiB2dWxuZXJhYmlsaXR5IHRvbyAoZGVwZW5kcyBvbg0KYXBwbGlhbmNlIGNvbmZpZ3VyYXRpb24pLg0KDQozKSBSZWZsZWN0ZWQgQ3Jvc3MgU2l0ZSBTY3JpcHRpbmcgKFhTUykgKENWRS0yMDEzLTI2NDMpDQpSZWZsZWN0ZWQgQ3Jvc3MgU2l0ZSBTY3JpcHRpbmcgdnVsbmVyYWJpbGl0aWVzIHdlcmUgZm91bmQuIEFuIGF0dGFja2VyIGNhbiB1c2UNCnRoZXNlIHZ1bG5lcmFiaWxpdGllcyB0aGUgZXhwbG9pdCBvdGhlciB2dWxuZXJhYmlsaXRpZXMgaW4gdGhlIHdlYiBpbnRlcmZhY2UNCm9yIGNvbmR1Y3RpbmcgcGhpc2hpbmcgYXR0YWNrcy4NCg0KDQpQcm9vZiBvZiBjb25jZXB0Og0KLS0tLS0tLS0tLS0tLS0tLS0NCjEpIFVuYXV0aGVudGljYXRlZCBsb2NhbCBmaWxlIGRpc2Nsb3N1cmUgKENWRS0yMDEzLTI2NDEpDQpBcyBhbiBleGFtcGxlLCBhbiB1bmF1dGhlbnRpY2F0ZWQgdXNlciBjYW4gZG93bmxvYWQgdGhlIGNvbmZpZ3VyYXRpb24gZmlsZQ0KY29udGFpbmluZyB0aGUgc2FsdGVkIGhhc2ggb2YgdGhlIGFkbWluaXN0cmF0b3IgcGFzc3dvcmQgYXMgd2VsbCBhcyBjbGVhciB0ZXh0DQpwYXNzd29yZHMgZS5nLiBmb3IgRlRQIGJhY2t1cCBzdG9yYWdlIG9yIEFjdGl2ZSBEaXJlY3RvcnkgYXV0aGVudGljYXRpb246DQoNCmh0dHBzOi8vPGhvc3Q+L2NnaS1iaW4vcGF0aWVuY2UuY2dpP2lkPS4uLy4uL3BlcnNpc3QvY29uZmlnL3NoYXJlZC5jb25mJTAwDQoNCkZ1cnRoZXJtb3JlIHRoZSBBcGFjaGUgYWNjZXNzIGxvZyBjYW4gYmUgcmV0cmlldmVkLiBBcyBQSFAgc2Vzc2lvbiBJRHMgYXJlDQpwYXNzZWQgdmlhIHRoZSBVUkwgcmF0aGVyIHRoYW4gdmlhIENvb2tpZXMsIHRoZXNlIGNhbiBiZSBmb3VuZCBpbiB0aGlzIGxvZw0KZmlsZSBhbmQgZWZmZWN0aXZlbHkgdXNlZCB0byBpbXBlcnNvbmF0ZSBhZG1pbmlzdHJhdG9yIHVzZXJzOg0KDQpodHRwczovLzxob3N0Pi9jZ2ktYmluL3BhdGllbmNlLmNnaT9pZD0uLi8uLi9sb2cvdWlfYWNjZXNzX2xvZyUwMA0KDQpBbiBleGNlcnB0IGZyb20gdGhlIGxvZyBmaWxlIHNob3dzIHRoYXQgaXQgY29udGFpbnMgUEhQIHNlc3Npb24gSUQgaW5mb3JtYXRpb24NCihwYXJhbWV0ZXIgIlNUWUxFIikuDQo8aG9zdD4gLSAtIFsyMS9GZWIvMjAxMzoxNzowMjoxNyArMDAwMF0gIlBPU1QgL2luZGV4LnBocD9jPWRhc2hib2FyZCBIVFRQLzEuMSIgMjAwIDEzOQ0KImh0dHBzOi8vPGhvc3Q+L2luZGV4LnBocD9zZWN0aW9uPWNvbmZpZ3VyYXRpb24mYz1jb25maWd1cmF0aW9uJlNUWUxFPTg1MTRkMGEzYzJmYzlmOGQ0N2UyOTg4MDc2Nzc4MTUzIg0KIk1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxOS4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzE5LjAiDQoNCg0KMikgT1MgY29tbWFuZCBpbmplY3Rpb24gKENWRS0yMDEzLTI2NDIpDQpUaGUgIkRpYWdub3N0aWMgVG9vbHMiIGZ1bmN0aW9uYWxpdHkgYWxsb3dzIGFuIGF1dGhlbnRpY2F0ZWQgdXNlciB0byBpbmplY3QNCmFyYml0cmFyeSBvcGVyYXRpbmcgc3lzdGVtIGNvbW1hbmRzIGVuY2xvc2VkIGluIGJhY2t0aWNrcyAoYCkuIFRoZXNlIGNvbW1hbmRzDQphcmUgcnVuIHdpdGggdGhlIHByaXZpbGVnZXMgb2YgdGhlIG9wZXJhdGluZyBzeXN0ZW0gdXNlciAic3BpZGVybWFuIjoNCg0KUE9TVCAvaW5kZXgucGhwP2M9ZGlhZ25vc3RpY190b29scyBIVFRQLzEuMQ0KSG9zdDogPGhvc3Q+DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOA0KQ29udGVudC1MZW5ndGg6IDkyDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZQ0KDQphY3Rpb249d2dldCZzZWN0aW9uPWNvbmZpZ3VyYXRpb24mU1RZTEU9PHZhbGlkIHNlc3Npb24gaWQ+JnVybD0lNjBzbGVlcCUyMDUlNjANCg0KDQpUaGUgIkxvY2FsIFNpdGUgTGlzdCIgZnVuY3Rpb25hbGl0eSBhbGxvd3MgaW5qZWN0aW9uIG9mIGFyYml0cmFyeSBPUyBjb21tYW5kczoNCg0KUE9TVCAvaW5kZXgucGhwP2M9bG9jYWxfc2l0ZV9saXN0X2VkaXRvciBIVFRQLzEuMQ0KSG9zdDogPGhvc3Q+DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOA0KQ29udGVudC1MZW5ndGg6IDIwNQ0KDQpTVFlMRT08dmFsaWQgc2Vzc2lvbg0KaWQ+JmFjdGlvbj1zYXZlJmVudHJpZXM9W3sidXJsIiUzYSsiLidgc2xlZXArMTBgJyIsKyJyYW5nZSIlM2ErIm5vIiwrInRsZCIlM2ErInllcyIsKyJ2YWxpZF9yYW5nZSIlM2ErIm5vIn1dDQoNCk5vdGU6IFVuYXV0aGVudGljYXRlZCB1c2VycyBjYW4gcmV0cmlldmUgdmFsaWQgc2Vzc2lvbiBJRHMgdXNpbmcgdGhlDQp2dWxuZXJhYmlsaXR5IGluIDEpLg0KDQpJZiBhIGN1c3RvbWl6ZWQgdGVtcGxhdGUgZm9yIHRoZSAiQmxvY2sgcGFnZSIgdXNlcyB0aGUgdmFyaWFibGUNCiIlJXVzZXJfd29ya3N0YXRpb24lJSIsIGFuIF91bmF1dGhlbnRpY2F0ZWRfIHVzZXIgY2FuIGluamVjdCBPUyBjb21tYW5kcyB1c2luZyB0aGUNCmZvbGxvd2luZyBVUkw6DQoNCmh0dHBzOi8vPGhvc3Q+L2VuZC11c2VyL2luZGV4LnBocD9yZWFzb249YXBwbGljYXRpb24mY2xpZW50LWlwPSUyMCU2MHNsZWVwKzEwJTYwDQoNCg0KMykgUmVmbGVjdGVkIENyb3NzIFNpdGUgU2NyaXB0aW5nIChYU1MpIChDVkUtMjAxMy0yNjQzKQ0KVGhlIGZvbGxvd2luZyBVUkxzIGRlbW9uc3RyYXRlIHJlZmxlY3RlZCBDcm9zcyBTaXRlIFNjcmlwdGluZyB2dWxuZXJhYmlsaXRpZXM6DQoNCmh0dHBzOi8vPGhvc3Q+L3Jzcy5waHA/YWN0aW9uPWFsbG93Jnhzcz0lM0NzY3JpcHQlM0VhbGVydCUyOFN0cmluZy5mcm9tQ2hhckNvZGUlMjgxMjAsJTIwMTE1LCUyMDExNSUyOSUyOSUzQy9zY3JpcHQlM0UNCmh0dHBzOi8vPGhvc3Q+L2VuZC11c2VyL2VycmRvYy5waHA/ZT01MzAmbXNnPVBITmpjbWx3ZEQ1aGJHVnlkQ2duZUhOekp5azdQQzl6WTNKcGNIUSUyYkNnJTNkJTNkDQpodHRwczovLzxob3N0Pi9lbmQtdXNlci9mdHBfcmVkaXJlY3QucGhwP3I9eCZoPSUzQy9zY3JpcHQlM0UlM0NzY3JpcHQlM0VhbGVydCUyODElMjklM2IlM0Mvc2NyaXB0JTNFDQpodHRwczovLzxob3N0Pi9pbmRleC5waHA/Yz1ibG9ja2VkJnJlYXNvbj1tYWx3YXJlJnVzZXI9JiZ0aHJlYXQ9JTNDc2NyaXB0JTNFYWxlcnQlMjgxJTI5JTNDL3NjcmlwdCUzRQ0KDQpBcyB0aGUgYXBwbGljYXRpb24gdXNlcyBVUkwgcGFyYW1ldGVycyB0byB0cmFuc21pdCBzZXNzaW9uIElEcyBhbmQgcmF0aGVyDQp0aGFuIGNvb2tpZXMsIHNlc3Npb24gc3RlYWxpbmcgYXR0YWNrcyBjYW5ub3QgYmUgZXhlY3V0ZWQgdXNpbmcgdGhlc2UgZmxhd3MuDQpIb3dldmVyLCB0aGVzZSB2dWxuZXJhYmlsaXRpZXMgY2FuIHN0aWxsIGJlIHVzZWQgdG8gZmFrZSBsb2dpbiBwYWdlcyBmb3INCnBoaXNoaW5nIHB1cnBvc2VzLg0KRnVydGhlcm1vcmUgdGhlIHZ1bG5lcmFiaWxpdGllcyBpbiAxKSBhbmQgMikgY2FuIGJlIGV4cGxvaXRlZCB2aWEgb25lIG9mIHRoZQ0KWFNTIHZ1bG5lcmFiaWxpdGllcy4gVGhpcyBlbmFibGVzIGF0dGFja3Mgb24gdGhlIGFwcGxpYW5jZSBldmVuIHdoZW4gdGhlDQp3ZWIgaW50ZXJmYWNlIHdvdWxkIG90aGVyd2lzZSBub3QgYmUgcmVhY2hhYmxlIHRvIHRoZSBhdHRhY2tlci4NCg0KUG9zc2libGUgYXR0YWNrIHNjZW5hcmlvOg0KVXNlIFhTUyB0byBydW4gbWFsaWNvdXMgSmF2YXNjcmlwdCBpbiB0aGUgYnJvd3NlciBvZiBhIHVzZXIgd2hvIGhhcyBuZXR3b3JrDQphY2Nlc3MgdG8gdGhlIHdlYiBpbnRlcmZhY2UuIFRoaXMgY29kZSBjYW46DQotIEV4cGxvaXQgdGhlIGxvY2FsIGZpbGUgZGlzY2xvc3VyZSB2dWxuZXJhYmlsaXR5IChzZWUgMSkgaW4gb3JkZXIgdG8gZ2Fpbg0KICBhY2Nlc3MgdG8gdmFsaWQgc2Vzc2lvbiBJRHMgYW5kIGltcGVyc29uYXRlIGFkbWluaXN0cmF0b3IgdXNlcnMuDQotIEV4cGxvaXQgdGhlIE9TIGNvbW1hbmQgaW5qZWN0aW9uIChzZWUgMikgaW4gb3JkZXIgdG8gZXhlY3V0ZSBhcmJpdHJhcnkNCiAgY29tbWFuZHMgb24gdGhlIHN5c3RlbS4NCi0gRXhmaWx0cmF0ZSBzZW5zaXRpdmUgaW5mb3JtYXRpb24gbGlrZSBIVFRQLCAocGxhaW50ZXh0KSBIVFRQUyB0cmFmZmljIG9yIHRoZQ0KICBwcml2YXRlIGtleSBmb3IgdGhlIENBIGNlcnRpZmljYXRlIHVzZWQgZm9yIEhUVFBTIHNjYW5uaW5nIChNSVRNKS4NCg0KDQpWdWxuZXJhYmxlIC8gdGVzdGVkIHZlcnNpb25zOg0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NClRoZSB2dWxuZXJhYmlsaXRpZXMgaGF2ZSBiZWVuIHZlcmlmaWVkIHRvIGV4aXN0IGluIHRoZSBTb3Bob3MgV2ViIFByb3RlY3Rpb24NCkFwcGxpYW5jZSB2ZXJzaW9uIDMuNy44LjEsIHdoaWNoIHdhcyB0aGUgbW9zdCByZWNlbnQgdmVyc2lvbiBhdCB0aGUgdGltZSBvZg0KZGlzY292ZXJ5Lg0KDQoNClZlbmRvciBjb250YWN0IHRpbWVsaW5lOg0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoyMDEzLTAyLTIyOiBTZW5kaW5nIGFkdmlzb3J5IGFuZCBwcm9vZiBvZiBjb25jZXB0IGV4cGxvaXQgdmlhIGVuY3J5cHRlZA0KICAgICAgICAgICAgY2hhbm5lbC4NCjIwMTMtMDItMjM6IFZlbmRvciBhY2tub3dsZWRnZXMgcmVjZWlwdCBvZiBhZHZpc29yeS4NCjIwMTMtMDMtMDE6IFZlbmRvciBjb25maXJtcyByZXBvcnRlZCBpc3N1ZXMgYW5kIHByb3ZpZGVzIHByZWxpbWluYXJ5DQogICAgICAgICAgICBpbmZvcm1hdGlvbiBhYm91dCByZWxlYXNlIGRhdGVzLg0KMjAxMy0wMy0wNzogQ29uZmVyZW5jZSBjYWxsOiBBZGRyZXNzaW5nIHRoZSByaXNrcyB0aGUgZGlzY292ZXJlZA0KICAgICAgICAgICAgdnVsbmVyYWJpbGl0aWVzIHBvc2UgdG8gY3VzdG9tZXJzIGFuZCByZWxlYXNlIHNjaGVkdWxlLg0KMjAxMy0wMy0xODogVmVuZG9yIHN0YXJ0cyByb2xsb3V0IG9mIHVwZGF0ZSB0byAiYSBmaXJzdCBncm91cCBvZiBjdXN0b21lcnMiLg0KMjAxMy0wNC0wMzogU0VDIENvbnN1bHQgcmVsZWFzZXMgY29vcmRpbmF0ZWQgc2VjdXJpdHkgYWR2aXNvcnkuDQoNCg0KU29sdXRpb246DQotLS0tLS0tLS0NClVwZGF0ZSB0byBXZWIgUHJvdGVjdGlvbiBBcHBsaWFuY2UgdmVyc2lvbiAzLjcuOC4yLg0KDQpNb3JlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBhdDoNCmh0dHA6Ly93d3cuc29waG9zLmNvbS9lbi11cy9zdXBwb3J0L2tub3dsZWRnZWJhc2UvMTE4OTY5LmFzcHgNCg0KDQpXb3JrYXJvdW5kOg0KLS0tLS0tLS0tLS0NCk5vIHdvcmthcm91bmQgYXZhaWxhYmxlLg0KDQoNCkFkdmlzb3J5IFVSTDoNCi0tLS0tLS0tLS0tLS0tDQpodHRwczovL3d3dy5zZWMtY29uc3VsdC5jb20vZW4vVnVsbmVyYWJpbGl0eS1MYWIvQWR2aXNvcmllcy5odG0NCg0KDQp+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fg0KU0VDIENvbnN1bHQgVW50ZXJuZWhtZW5zYmVyYXR1bmcgR21iSA0KDQpPZmZpY2UgVmllbm5hDQpNb29zbGFja2VuZ2Fzc2UgMTcNCkEtMTE5MCBWaWVubmENCkF1c3RyaWENCg0KVGVsLjogKzQzIC8gMSAvIDg5MCAzMCA0MyAtIDANCkZheC46ICs0MyAvIDEgLyA4OTAgMzAgNDMgLSAyNQ0KTWFpbDogcmVzZWFyY2ggYXQgc2VjLWNvbnN1bHQgZG90IGNvbQ0KaHR0cHM6Ly93d3cuc2VjLWNvbnN1bHQuY29tDQpodHRwOi8vYmxvZy5zZWMtY29uc3VsdC5jb20NCg0KDQpFT0YgV29sZmdhbmcgRXR0bGluZ2VyLCBTdGVmYW4gVmllaGLDtmNrIC8gQDIwMTM=", 
    "filename": "platforms/linux/webapps/24932.txt", 
    "id": "24932", 
    "cves": [
        "CVE-2013-2641", 
        "CVE-2013-2643", 
        "CVE-2013-2642"
    ]
}