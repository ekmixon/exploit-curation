{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/local/18914.py", 
    "id": "18914", 
    "cves": [
        "CVE-2007-5762"
    ]
}