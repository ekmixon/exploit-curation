{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/remote/39698.html", 
    "id": "39698", 
    "cves": [
        "CVE-2015-6086"
    ]
}