{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/local/42429.py", 
    "id": "42429", 
    "cves": [
        "CVE-2015-0096", 
        "CVE-2017-8464"
    ]
}