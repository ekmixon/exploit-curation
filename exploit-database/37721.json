{
    "cpes": {
        "cpe:/o:redhat:enterprise_linux:7.0:ga:server": {
            "scores": {
                "stride": "000009" 
            }
        }
    }, 
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/dos/37721.c", 
    "id": "37721", 
    "cves": [
        "CVE-2015-5477"
    ]
}
