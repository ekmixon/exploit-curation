{
    "source": "exploit-database", 
    "exploit": "", 
    "id": "43385", 
    "cves": [
        "CVE-2017-5689"
    ]
}