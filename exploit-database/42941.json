{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/dos/42941.py", 
    "id": "42941", 
    "cves": [
        "CVE-2017-14491"
    ]
}