{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/java/webapps/42358.rb", 
    "id": "42358", 
    "cves": [
        "CVE-2017-11346"
    ]
}