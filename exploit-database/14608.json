{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/dos/14608.txt", 
    "id": "14608", 
    "cves": [
        "CVE-2010-1897", 
        "CVE-2010-0485"
    ]
}