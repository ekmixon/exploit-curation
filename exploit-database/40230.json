{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/dos/40230.txt", 
    "id": "40230", 
    "cves": [
        "CVE-2016-5845", 
        "CVE-2016-5847"
    ]
}