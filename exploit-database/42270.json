{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/solaris_x86/local/42270.c", 
    "id": "42270", 
    "cves": [
        "CVE-2017-3631", 
        "CVE-2017-3630", 
        "CVE-2017-3629"
    ]
}