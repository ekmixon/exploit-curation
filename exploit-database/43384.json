{
    "source": "exploit-database", 
    "exploit": "", 
    "id": "43384", 
    "cves": [
        "CVE-2017-5135"
    ]
}