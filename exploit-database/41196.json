{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/local/41196.txt", 
    "id": "41196", 
    "cves": [
        "CVE-2017-3316"
    ]
}