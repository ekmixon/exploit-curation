{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/dos/14422.c", 
    "id": "14422", 
    "cves": [
        "CVE-2010-1205"
    ]
}