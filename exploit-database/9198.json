{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/dos/9198.txt", 
    "id": "9198", 
    "cves": [
        "CVE-2009-2534", 
        "CVE-2009-2533"
    ]
}