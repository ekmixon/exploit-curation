{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/hardware/webapps/25138.txt", 
    "id": "25138", 
    "cves": [
        "CVE-2013-1600", 
        "CVE-2013-1601", 
        "CVE-2013-1602", 
        "CVE-2013-1603", 
        "CVE-2013-1599"
    ]
}