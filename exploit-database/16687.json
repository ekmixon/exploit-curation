{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/local/16687.rb", 
    "id": "16687", 
    "cves": [
        "CVE-2010-1297"
    ]
}