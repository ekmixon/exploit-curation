{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/remote/22007.txt", 
    "id": "22007", 
    "cves": [
        "CVE-2012-3807", 
        "CVE-2012-3806", 
        "CVE-2012-3810", 
        "CVE-2012-3809", 
        "CVE-2012-3808"
    ]
}