{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/hardware/remote/40589.html", 
    "id": "40589", 
    "cves": [
        "CVE-2013-4863", 
        "CVE-2016-6255"
    ]
}