{
    "source": "exploit-database", 
    "exploit": "U0VDIENvbnN1bHQgVnVsbmVyYWJpbGl0eSBMYWIgU2VjdXJpdHkgQWR2aXNvcnkgPCAyMDEzMDcyNi0wID4NCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQogICAgICAgICAgICAgIHRpdGxlOiBNdWx0aXBsZSB2dWxuZXJhYmlsaXRpZXMgLSBTdXJ2ZWlsbGFuY2UgdmlhIFN5bWFudGVjIFdlYg0KICAgICAgICAgICAgICAgICAgICAgR2F0ZXdheSANCiAgICAgICAgICAgIHByb2R1Y3Q6IFN5bWFudGVjIFdlYiBHYXRld2F5DQogdnVsbmVyYWJsZSB2ZXJzaW9uOiA8PSA1LjEuMC4qDQogICAgICBmaXhlZCB2ZXJzaW9uOiA1LjEuMQ0KICAgICAgICAgQ1ZFIG51bWJlcjogQ1ZFLTIwMTMtMTYxNiwgQ1ZFLTIwMTMtMTYxNywgQ1ZFLTIwMTMtNDY3MCwgDQogICAgICAgICAgICAgICAgICAgICBDVkUtMjAxMy00NjcxLCBDVkUtMjAxMy00NjcyDQogICAgICAgICAgICAgaW1wYWN0OiBDcml0aWNhbA0KICAgICAgICAgICBob21lcGFnZTogaHR0cHM6Ly93d3cuc3ltYW50ZWMuY29tLw0KICAgICAgICAgICAgICBmb3VuZDogMjAxMi0xMi0xOA0KICAgICAgICAgICAgICAgICBieTogV29sZmdhbmcgRXR0bGluZ2VyDQogICAgICAgICAgICAgICAgICAgICBTRUMgQ29uc3VsdCBWdWxuZXJhYmlsaXR5IExhYiANCiAgICAgICAgICAgICAgICAgICAgIGh0dHBzOi8vd3d3LnNlYy1jb25zdWx0LmNvbQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCg0KVmVuZG9yL3Byb2R1Y3QgZGVzY3JpcHRpb246DQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KIlN5bWFudGVjIFdlYiBHYXRld2F5IHByb3RlY3RzIG9yZ2FuaXphdGlvbnMgYWdhaW5zdCBtdWx0aXBsZSB0eXBlcyBvZiBXZWItYm9ybmUNCm1hbHdhcmUgYW5kIGdpdmVzIG9yZ2FuaXphdGlvbnMgdGhlIGZsZXhpYmlsaXR5IG9mIGRlcGxveWluZyBpdCBhcyBlaXRoZXIgYSANCnZpcnR1YWwgYXBwbGlhbmNlIG9yIG9uIHBoeXNpY2FsIGhhcmR3YXJlLiBQb3dlcmVkIGJ5IEluc2lnaHQsIFN5bWFudGVj4oCZcyANCmlubm92YXRpdmUgcmVwdXRhdGlvbiBiYXNlZCBtYWx3YXJlIGZpbHRlcmluZyB0ZWNobm9sb2d5LCBXZWIgR2F0ZXdheSByZWxpZXMgb24gDQphIGdsb2JhbCBuZXR3b3JrIG9mIGdyZWF0ZXIgdGhhbiAyMTAgbWlsbGlvbiBzeXN0ZW1zIHRvIGlkZW50aWZ5IG5ldyB0aHJlYXRzIA0KYmVmb3JlIHRoZXkgY2F1c2UgZGlzcnVwdGlvbiBpbiBvcmdhbml6YXRpb25zLiINCg0KVVJMOiBodHRwczovL3d3dy5zeW1hbnRlYy5jb20vd2ViLWdhdGV3YXkNCg0KDQpCdXNpbmVzcyByZWNvbW1lbmRhdGlvbjoNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KU0VDIENvbnN1bHQgaGFzIGlkZW50aWZpZWQgc2V2ZXJhbCB2dWxuZXJhYmlsaXRpZXMgd2l0aGluIHRoZSBjb21wb25lbnRzIG9mDQpTeW1hbnRlYyBXZWIgR2F0ZXdheSBpbiB0aGUgY291cnNlIG9mIGEgc2hvcnQgY3Jhc2ggdGVzdC4gU29tZSBjb21wb25lbnRzIGhhdmUNCmJlZW4gc3BvdC1jaGVja2VkLCB3aGlsZSBvdGhlcnMgaGF2ZSBub3QgYmVlbiB0ZXN0ZWQgYXQgYWxsLg0KDQpTZXZlcmFsIG9mIHRoZSBkaXNjb3ZlcmVkIHZ1bG5lcmFiaWxpdGllcyBiZWxvdyBjYW4gYmUgY2hhaW5lZCB0b2dldGhlciBpbg0Kb3JkZXIgdG8gcnVuIGFyYml0cmFyeSBjb21tYW5kcyB3aXRoIHRoZSBwcml2aWxlZ2VzIG9mIHRoZSAicm9vdCIgdXNlciBvbiB0aGUNCmFwcGxpYW5jZS4NCg0KQW4gYXR0YWNrZXIgY2FuIGdldCB1bmF1dGhvcml6ZWQgYWNjZXNzIHRvIHRoZSBhcHBsaWFuY2UgYW5kIHBsYW50IGJhY2tkb29ycyBvcg0KYWNjZXNzIGNvbmZpZ3VyYXRpb24gZmlsZXMgY29udGFpbmluZyBjcmVkZW50aWFscyBmb3Igb3RoZXIgc3lzdGVtcyAoZWcuIEFjdGl2ZQ0KRGlyZWN0b3J5L0xEQVAgY3JlZGVudGlhbHMpIHdoaWNoIGNhbiBiZSB1c2VkIGluIGZ1cnRoZXIgYXR0YWNrcy4NClNpbmNlIGFsbCB3ZWIgdHJhZmZpYyBwYXNzZXMgdGhyb3VnaCB0aGUgYXBwbGlhbmNlLCBpbnRlcmNlcHRpb24gb2YgSFRUUCBhcw0Kd2VsbCBhcyB0aGUgcGxhaW50ZXh0IGZvcm0gb2YgSFRUUFMgdHJhZmZpYyAoaWYgU1NMIERlZXAgSW5zcGVjdGlvbiBmZWF0dXJlIGluDQp1c2UpLCBpbmNsdWRpbmcgc2Vuc2l0aXZlIGluZm9ybWF0aW9uIGxpa2UgcGFzc3dvcmRzIGFuZCBzZXNzaW9uIGNvb2tpZXMgaXMNCnBvc3NpYmxlLg0KDQpJZiBTU0wgRGVlcCBJbnNwZWN0aW9uIGlzIGVuYWJsZWQsIHRoZSBhcHBsaWFuY2UgaG9sZHMgYSBwcml2YXRlIGtleSBmb3IgYQ0KQ2VydGlmaWNhdGUgQXV0aG9yaXR5IChDQSkgY2VydGlmaWNhdGUgdGhhdCBpcyBpbnN0YWxsZWQvdHJ1c3RlZCBvbiBhbGwNCndvcmtzdGF0aW9ucyBpbiB0aGUgY29tcGFueS4gSWYgdGhpcyBwcml2YXRlIGtleSBpcyBjb21wcm9taXNlZCBieSBhbiBhdHRhY2tlciwNCmFyYml0cmFyeSBjZXJ0aWZpY2F0ZXMgY2FuIGJlIHNpZ25lZC4gVGhlc2UgY2VydGlmaWNhdGVzIHdpbGwgdGhlbiBwYXNzDQp2YWxpZGF0aW9uIG9uIHRoZSBjbGllbnQgbWFjaGluZXMsIGVuYWJsaW5nIGluIHZhcmlvdXMgYXR0YWNrcyB0YXJnZXRpbmcNCmNsaWVudHMgKGZ1cnRoZXIgTUlUTSBhdHRhY2tzLCBwaGlzaGluZywgZXZpbGdyYWRlLCAuLi4pLg0KDQpUaGUgcmVjb21tZW5kYXRpb24gb2YgU0VDIENvbnN1bHQgaXMgdG8gc3dpdGNoIG9mZiB0aGUgcHJvZHVjdCB1bnRpbCBhDQpjb21wcmVoZW5zaXZlIHNlY3VyaXR5IGF1ZGl0IGJhc2VkIG9uIGEgc2VjdXJpdHkgc291cmNlIGNvZGUgcmV2aWV3IGhhcyBiZWVuDQpwZXJmb3JtZWQgYW5kIGFsbCBpZGVudGlmaWVkIHNlY3VyaXR5IGRlZmljaWVuY2llcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYnkgdGhlDQp2ZW5kb3IuDQoNCg0KVnVsbmVyYWJpbGl0eSBvdmVydmlldy9kZXNjcmlwdGlvbjoNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoxKSBSZWZsZWN0ZWQgQ3Jvc3MgU2l0ZSBTY3JpcHRpbmcgKFhTUykgKENWRS0yMDEzLTQ2NzApDQpBIHJlZmxlY3RlZCBjcm9zcyBzaXRlIHNjcmlwdGluZyB2dWxuZXJhYmlsaXR5IHdhcyBmb3VuZC4gVGhpcyBhbGxvd3MNCmVmZmVjdGl2ZSBzZXNzaW9uIGhpamFja2luZyBhdHRhY2tzIG9mIGFkbWluaXN0cmF0b3Igc2Vzc2lvbiBjb29raWVzLiANCg0KDQoyKSBQZXJzaXN0ZW50IENyb3NzIFNpdGUgU2NyaXB0aW5nIChYU1MpIChDVkUtMjAxMy00NjcwKQ0KTW9yZW92ZXIgYSBwZXJzaXN0ZW50IGNyb3NzIHNpdGUgc2NyaXB0aW5nIHZ1bG5lcmFiaWxpdHkgYWxsb3dzIGFuIA0KdW5hdXRoZW50aWNhdGVkIHVzZXIgdG8gaW5qZWN0IHNjcmlwdCBjb2RlIGludG8gdGhlIGFkbWluaXN0cmF0aW9uIGludGVyZmFjZS4NClRoaXMgc2NyaXB0IGNvZGUgd2lsbCBiZSBleGVjdXRlZCBvbmNlIGFuIGFkbWluaXN0cmF0b3IgdmlzaXRzIHRoZQ0KYWRtaW5pc3RyYXRpb24gaW50ZXJmYWNlLg0KDQoNCjMpIE9TIENvbW1hbmQgSW5qZWN0aW9uIChDVkUtMjAxMy0xNjE2KQ0KTXVsdGlwbGUgT1MgY29tbWFuZCBpbmplY3Rpb24gdnVsbmVyYWJpbGl0aWVzIHdlcmUgZGlzY292ZXJlZC4gQXV0aGVudGljYXRlZA0KdXNlcnMgY2FuIGV4ZWN1dGUgYXJiaXRyYXJ5IGNvbW1hbmRzIG9uIHRoZSB1bmRlcmx5aW5nIG9wZXJhdGluZyBzeXN0ZW0gd2l0aA0KdGhlIHByaXZpbGVnZXMgb2YgdGhlICJhcGFjaGUiIG9wZXJhdGluZyBzeXN0ZW0gdXNlci4NCg0KVGhpcyBjYW4gYmUgdXNlZCB0byBnZXQgcGVyc2lzdGVudCBhY2Nlc3MgdG8gdGhlIGFmZmVjdGVkIHN5c3RlbSAoZWcuIGJ5DQpwbGFudGluZyBiYWNrZG9vcnMpLCBhY2Nlc3NpbmcgYWxsIGtpbmRzIG9mIGxvY2FsbHkgc3RvcmVkIGluZm9ybWF0aW9uIG9yDQppbnRlcmNlcHRpb24gb2Ygd2ViIHRyYWZmaWMgdGhhdCBwYXNzZXMgdGhyb3VnaCB0aGUgYXBwbGlhbmNlLg0KDQoNCjQpIFNlY3VyaXR5IE1pc2NvbmZpZ3VyYXRpb24gKENWRS0yMDEzLTQ2NzIpDQpVbnByaXZpbGVnZWQgb3BlcmF0aW5nIHN5c3RlbSB1c2VycyAoZWcuIGFwYWNoZSkgY2FuIGdhaW4gcm9vdCBwcml2aWxlZ2VzDQpkdWUgdG8gYSBtaXNjb25maWd1cmF0aW9uIG9mIHRoZSBzdWRvIHByb2dyYW0uDQoNCg0KNSkgU1FMIEluamVjdGlvbiAoQ1ZFLTIwMTMtMTYxNykNClNldmVyYWwgU1FMIGluamVjdGlvbiB2dWxuZXJhYmlsaXRpZXMgd2VyZSBpZGVudGlmaWVkIHRoYXQgYWxsb3cgYW4gDQphdXRoZW50aWNhdGVkIGFkbWluaXN0cmF0b3IgdG8gaXNzdWUgbWFuaXB1bGF0ZWQgU1FMIGNvbW1hbmRzLg0KDQoNCjYpIENyb3NzIFNpdGUgUmVxdWVzdCBGb3JnZXJ5IChDVkUtMjAxMy00NjcxKQ0KVGhlIGNyb3NzIHNpdGUgcmVxdWVzdCBmb3JnZXJ5IHByb3RlY3Rpb24gaW1wbGVtZW50ZWQgY2FuIGJlIGJ5cGFzc2VkIGVhc2lseS4NClVzaW5nIHRoaXMgdnVsbmVyYWJpbGl0eSwgYW4gYXR0YWNrZXIgY2FuIGlzc3VlIHJlcXVlc3RzIGluIHRoZSBjb250ZXh0IG9mDQphZG1pbmlzdHJhdGl2ZSB1c2VyIHNlc3Npb25zLg0KDQoNClNldmVyYWwgb2YgdGhlIHZ1bG5lcmFiaWxpdGllcyBhYm92ZSBjYW4gYmUgY2hhaW5lZCB0b2dldGhlciBieSBhbg0KdW5hdXRoZW50aWNhdGVkIGF0dGFja2VyIGluIG9yZGVyIHRvIHJ1biBhcmJpdHJhcnkgY29tbWFuZHMgd2l0aCB0aGUNCnByaXZpbGVnZXMgb2YgdGhlICJyb290IiBvcGVyYXRpbmcgc3lzdGVtIHVzZXIgb24gdGhlIGFwcGxpYW5jZS4NCg0KDQpQcm9vZiBvZiBjb25jZXB0Og0KLS0tLS0tLS0tLS0tLS0tLS0NCjEpIFJlZmxlY3RlZCBDcm9zcyBTaXRlIFNjcmlwdGluZyAoWFNTKSAoQ1ZFLTIwMTMtNDY3MCkNClRoZSBmb2xsb3dpbmcgVVJMIGRlbW9uc3RyYXRlcyBhIHJlZmxlY3RlZCBjcm9zcyBzaXRlIHNjcmlwdGluZyB2dWxuZXJhYmlsaXR5Og0KDQpodHRwczovLzxob3N0Pi9zcHl3YWxsL2ZlZWRiYWNrX3JlcG9ydC5waHA/cnBwPTAlMjclMjBvbmZvY3VzPSUyMmFsZXJ0JTI4JTI3eHNzJTI3JTI5JTIyJTIwYXV0b2ZvY3VzLyUzRQ0KDQoNCjIpIFBlcnNpc3RlbnQgQ3Jvc3MgU2l0ZSBTY3JpcHRpbmcgKFhTUykgKENWRS0yMDEzLTQ2NzApDQpUaGUgImJsb2NrZWQucGhwIiBwYWdlIHdoaWNoIGlzIGFjY2Vzc2libGUgd2l0aG91dCBhdXRoZW50aWNhdGlvbiBhbGxvd3MgdG8NCmluamVjdCBzY3JpcHQgY29kZSB0byB0aGUgIkJsb2NraW5nIEZlZWRiYWNrIiBmdW5jdGlvbmFsaXR5IG9uIHRoZSANCmFkbWluaXN0cmF0aW9uIGludGVyZmFjZS4gVGhlIGZvbGxvd2luZyBVUkwgZGVtb25zdHJhdGVzIHRoaXMgaXNzdWUuIFRoZQ0KcGF5bG9hZCBvZiB0aGUgcGFyYW1ldGVyICJ1IiB3aWxsIGJlIHN0b3JlZCBwZXJtYW5lbnRseToNCg0KaHR0cHM6Ly88aG9zdD4vc3B5d2FsbC9ibG9ja2VkLnBocD9pZD0xJmhpc3Rvcnk9LTImdT0lMjcvJTNFJTNDc2NyaXB0JTNFYWxlcnQlMjglMjd4c3MlMjclMjk7JTNDL3NjcmlwdCUzRQ0KDQoNCjMpIE9TIENvbW1hbmQgSW5qZWN0aW9uIChDVkUtMjAxMy0xNjE2KQ0KVGhlIGZ1bmN0aW9uYWxpdHkgdG8gY2hhbmdlIHRoZSBob3N0bmFtZSBhcyB3ZWxsIGFzIHRoZSAiVGVzdCBQaW5nIiANCmZ1bmN0aW9uYWxpdHkgYWxsb3cgdG8gaW5qZWN0IGNvbW1hbmRzIGVuY2xvc2VkIGluIGJhY2t0aWNrcyAoYCkuIFRoZXNlIGNvbW1hbmRzDQphcmUgcnVuIGFzIHRoZSBzeXN0ZW0gdXNlciAiYXBhY2hlIi4NCkFmZmVjdGVkIHNjcmlwdHM6IC9zcHl3YWxsL25hbWVDb25maWcucGhwDQogICAgICAgICAgICAgICAgICAvc3B5d2FsbC9uZXR3b3JrQ29uZmlnLnBocA0KDQpEZXRhaWxlZCBwcm9vZiBvZiBjb25jZXB0IGV4cGxvaXRzIGhhdmUgYmVlbSByZW1vdmVkIGZvciB0aGlzIHZ1bG5lcmFiaWxpdHkuDQoNCg0KNCkgU2VjdXJpdHkgTWlzY29uZmlndXJhdGlvbiAoQ1ZFLTIwMTMtNDY3MikNClRoZSAvZXRjL3N1ZG9lcnMgZmlsZSBhbGxvd3MgdGhlIHVzZXJzICJhcGFjaGUiIGFuZCAiYWRtaW4iIHRvIHJ1biBzZXZlcmFsIA0KY3JpdGljYWwgY29tbWFuZHMgd2l0aCByb290IHByaXZpbGVnZXMuIEFzIHRoZSB1c2VyICJhcGFjaGUiIGlzIGFibGUgdG8gcnVuDQpjb21tYW5kcyAgbGlrZSAiY2htb2QiLCAiY2hvd24iIGFuZCAiaW5zbW9kIiB3aXRob3V0IHRoZSBuZWVkIG9mIGEgcGFzc3dvcmQsDQphbiBhdHRhY2tlciB0aGF0IGlzIGFibGUgdG8gaXNzdWUgY29tbWFuZHMgYXMgdGhpcyB1c2VyIChzZWUgMykgY2FuIGVmZmVjdGl2ZWx5DQpnYWluIHJvb3QgcHJpdmlsZWdlcy4NCg0KDQo1KSBTUUwgSW5qZWN0aW9uIChDVkUtMjAxMy0xNjE3KQ0KVGhlIGZvbGxvd2luZyBVUkxzIGRlbW9uc3RyYXRlIHRoZSBTUUwgaW5qZWN0aW9uIGZsYXdzIGZvdW5kIGJ5IHByaW50aW5nIHRoZSANCnVzZXJuYW1lIGFuZCBwYXNzd29yZCBoYXNoIG9mIGFsbCB1c2VyczoNCg0KaHR0cHM6Ly88aG9zdD4vc3B5d2FsbC9mZWVkYmFja19yZXBvcnQucGhwP3ZhcmlhYmxlW109MSkgVU5JT04gU0VMRUNUIDEsMiwzLDQsdXNlcm5hbWUsNiw3LDgsOSxwYXNzd29yZCBGUk9NIHVzZXJzIC0tIA0KJm9wZXJhdG9yW109bm90ZXF1YWwmb3BlcmFuZFtdPXgNCmh0dHBzOi8vPGhvc3Q+L3NweXdhbGwvZWRpdF9hbGVydC5waHA/YWxlcnRpZD0xMSUyMFVOSU9OJTIwU0VMRUNUJTIwMSwyLHVzZXJuYW1lLHBhc3N3b3JkLDUsNiw3LDgsOSwxMCwxMTEsMTIsMTMsMTQsMTUsMTYsMTcsMTglMjBGUk9NJTIwdXNlcnMlMjAtLSUyMA0KDQoNCjYpIENyb3NzIFNpdGUgUmVxdWVzdCBGb3JnZXJ5IChDVkUtMjAxMy00NjcxKQ0KQXMgYW4gZXhhbXBsZSwgdGhlIGZvbGxvd2luZyByZXF1ZXN0IGNvbmZpZ3VyZXMgYSBMREFQIHNlcnZlciB0byBhdXRoZW50aWNhdGUNCmFkbWluaXN0cmF0aXZlIHVzZXJzOg0KDQpQT1NUIC9zcHl3YWxsL2xkYXBDb25maWcucGhwIEhUVFAvMS4xDQpIb3N0OiA8aG9zdD4NCkNvb2tpZTogUEhQU0VTU0lEPTx2YWxpZC1jb29raWU+DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDI0Nw0KDQpwb3N0dGltZT05OTk5OTk5OTk5JnNhdmVGb3JtPVNhdmUmdXNlbGRhcD0xJmxkYXBfaG9zdD0wLjAuMC4wJmxkYXBfcG9ydD0zODkmYXV0aF9tZXRob2Q9U2ltcGxlJnNlYXJjaF9iYXNlPWRjJTNEdGVzdCUyQ2RjJTNEbG9jYWwmbGRhcF91c2VyPXRlc3QmbGRhcF9wYXNzd29yZD10ZXN0JmRlcHRfdHlwZT1kZXB0JnVzZXJfYXR0cmlidXRlPXNBTUFjY291bnROYW1lJnVzZXJfYXR0cmlidXRlX290aGVyPSZsZGFwX3RpbWVvdXQ9MTY4DQoNClRoZSBzb2xlIENTUkYgcHJvdGVjdGlvbiBpcyB0aGUgInBvc3R0aW1lIiBwYXJhbWV0ZXIgdGhhdCBjb250YWlucyBhIHVuaXggDQp0aW1lc3RhbXAgdGhhdCBoYXMgdG8gYmUgZ3JlYXRlciB0aGFuIHRoZSBvbmUgaW4gdGhlIGxhc3QgcmVxdWVzdC4gVXNpbmcgdGhlIHZhbHVlDQpvZiBlZy4gIjk5OTk5OTk5OTkiIHdvdWxkIGFsd2F5cyBzdWNjZWVkLg0KDQoNCg0KQXR0YWNrIHNjZW5hcmlvOg0KLS0tLS0tLS0tLS0tLS0tLQ0KDQpVc2luZyB0aGUgdnVsbmVyYWJpbGl0aWVzIG1lbnRpb25lZCBhYm92ZSwgdGhlIGZvbGxvd2luZyBhdHRhY2sgaGFzIGJlZW4NCmltcGxlbWVudGVkICh0aGUgZXhwbG9pdCBjb2RlIHdpbGwgbm90IGJlIHB1Ymxpc2hlZCk6DQoNCjEpIEEgdXNlciBwcm90ZWN0ZWQgYnkgU3ltYW50ZWMgV2ViIEdhdGV3YXkgdmlzaXRzIGEgd2Vic2l0ZSB0aGF0IGVtYmVkcyBhbg0KICAgaW1hZ2UgKHBvc3NpYmxlIGluIG1vc3Qgd2ViIGZvcnVtcyksIGEgVVJMIG9yIGFuIElGcmFtZS4gVGhlIFVSTCBvZiB0aGUNCiAgIHJlc291cmNlIHBvaW50cyB0byBhIGJsb2NrZWQgcGFnZSAoZWcuIHRoZSBFSUNBUiB0ZXN0IGZpbGUpIGFuZCBhbHNvDQogICBpbmNsdWRlcyBzY3JpcHQgY29kZSAoUGVyc2lzdGVudCBYU1MpLg0KMikgVGhlIFN5bWFudGVjIFdlYiBHYXRld2F5IGJsb2NrcyB0aGUgcmVxdWVzdCBhbmQgcmVkaXJlY3RzIHRoZSB1c2VyIHRvIHRoZSANCiAgIGJsb2NrZWQucGhwIHNjcmlwdC4gSWYgdGhlIGJsb2NrZWQgVVJMIGNvbnRhaW5zIHRoZSBwYXJhbWV0ZXIgImhpc3Rvcnk9LTIiDQogICAod2hpY2ggaGFzIGJlZW4gYWRkZWQgYnkgdGhlIGF0dGFja2VyKSB0aGUgVVJML3NjcmlwdCAoUGVyc2lzdGVudCBYU1MpIGlzDQogICBhdXRvbWF0aWNhbGx5IHN0b3JlZCBhcyBhICJCbG9ja2luZyBGZWVkYmFjayIgZW50cnkgaW4gdGhlIGFkbWluIGludGVyZmFjZQ0KMykgV2hlbiB0aGUgYWRtaW5pc3RyYXRvciB2aXNpdHMgdGhlICJCbG9ja2luZyBGZWVkYmFjayIgcGFnZSwgdGhlIGluamVjdGVkIA0KICAgc2NyaXB0IGlzIGV4ZWN1dGVkLiBVc2luZyB0aGUgT1MgY29tbWFuZCBpbmplY3Rpb24gZmxhdywgdGhlIHNjcmlwdCBub3cNCiAgIGF1dG9tYXRpY2FsbHkgZG93bmxvYWRzIGFuZCBleGVjdXRlcyBhIHNoZWxsIHNjcmlwdC4NCjQpIEFzIHRoZSB1c2VyICJhcGFjaGUiIGhhcyBwZXJtaXNzaW9uIHRvIGV4ZWN1dGUgImNobW9kIiBhbmQgImNob3duIiBhcyByb290LCANCiAgIHRoZSBzaGVsbCBzY3JpcHQgY2FuIG5vdyBjcmVhdGUgYSBTVUlEIGJpbmFyeSBhbmQgcnVuIGEgcmV2ZXJzZSBzaGVsbCBhcyByb290Lg0KNSkgVGhlIGF0dGFja2VyIGNhbiBub3cgYWNjZXNzIHRoZSBzeXN0ZW0gd2l0aCBoaWdoZXN0IChyb290KSBwcml2aWxlZ2VzDQoNCk5vdGU6IFRoaXMgYXR0YWNrIG9ubHkgcmVxdWlyZXMgYSB1c2VyIChwcm90ZWN0ZWQgYnkgdGhlIFN5bWFudGVjIFdlYg0KR2F0ZXdheSkgdG8gdmlzaXQgYSAibWFsaWNpb3VzIiBwYWdlLiBUaGlzIGNhbiBiZSBhY2hpZXZlZCBieSBzZW5kaW5nIHBoaXNoaW5nDQptYWlscyB0byBlbXBsb3llZXMsIG9yIGVtYmVkZGluZyBpbWFnZXMsIFVSTHMgb3IgSUZyYW1lcyBpbiB3ZWJzaXRlcyBlbXBsb3llZXMNCndvdWxkIGxpa2VseSB2aXNpdC4NCg0KSWYgdGhlIGF0dGFja2VyIGhhcyBhbHJlYWR5IGFjY2VzcyB0byB0aGUgdGFyZ2V0IG5ldHdvcmssIHRoaXMgaXMgb2YgY291cnNlIG5vdA0KbmVjZXNzYXJ5IC0gdGhlIHBlcnNpc3RlbnQgWFNTIHZ1bG5lcmFiaWxpdHkgY2FuIGJlIGV4cGxvaXRlZCBkaXJlY3RseS4NCg0KTm90ZTogTm8gcHJpb3Iga25vd2xlZGdlIGFib3V0IGhvc3RuYW1lcyBvciBpbnRlcm5hbCBJUCBhZGRyZXNzZXMgaW4gdGhlIHRhcmdldA0KbmV0d29yayBpcyBuZWVkZWQhDQoNCkEgZGV0YWlsZWQgcHJvb2Ygb2YgY29uY2VwdCBleHBsb2l0IGhhcyBiZWVuIGNyZWF0ZWQgYnV0IHdpbGwgbm90IGJlDQpwdWJsaXNoZWQuDQoNCg0KVnVsbmVyYWJsZSAvIHRlc3RlZCB2ZXJzaW9uczoNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQpUaGUgdnVsbmVyYWJpbGl0aWVzIGhhdmUgYmVlbiB2ZXJpZmllZCB0byBleGlzdCBpbiB0aGUgU3ltYW50ZWMgV2ViIEdhdGV3YXkgDQp2ZXJzaW9uIDUuMS4wLjM5LCB3aGljaCB3YXMgdGhlIG1vc3QgcmVjZW50IHZlcnNpb24gYXQgdGhlIHRpbWUgb2YgZGlzY292ZXJ5Lg0KDQpTeW1hbnRlYyBjb25maXJtZWQgdGhhdCBTV0cgdmVyc2lvbiA1LjEuMCAoJiBhbGwgc3ViLXJlbGVhc2VzKSBhbmQgcHJpb3INCnJlbGVhc2VzIGFyZSBhZmZlY3RlZC4NCg0KDQpWZW5kb3IgY29udGFjdCB0aW1lbGluZToNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KMjAxMy0wMi0yMjogU2VuZGluZyBhZHZpc29yeSBhbmQgcHJvb2Ygb2YgY29uY2VwdCBleHBsb2l0IHZpYSBlbmNyeXB0ZWQNCiAgICAgICAgICAgIGNoYW5uZWwuDQoyMDEzLTAyLTIyOiBWZW5kb3IgYWNrbm93bGVkZ2VzIHJlY2VpcHQgb2YgYWR2aXNvcnkuDQoyMDEzLTAzLTA1OiBSZXF1ZXN0aW5nIHN0YXR1cyB1cGRhdGUuDQoyMDEzLTAzLTA1OiBWZW5kb3IgY29uZmlybXMgdnVsbmVyYWJpbGl0aWVzLCBpcyB3b3JraW5nIG9uIHNvbHV0aW9ucy4NCjIwMTMtMDMtMjI6IFJlcXVlc3Rpbmcgc3RhdHVzIHVwZGF0ZS4NCjIwMTMtMDMtMjI6IFZlbmRvciBpcyBzdGlsbCB3b3JraW5nIG9uIHNvbHV0aW9ucy4NCjIwMTMtMDQtMTk6IFJlcXVlc3Rpbmcgc3RhdHVzIHVwZGF0ZSBhbmQgcmVsZWFzZSBzY2hlZHVsZS4NCjIwMTMtMDQtMTk6IFZlbmRvciBpcyBpbiB0aGUgImZpbmFsIHBoYXNlcyIgb2YgcmVsZWFzaW5nIGFuIHVwZGF0ZS4NCjIwMTMtMDYtMDU6IFNlbmRpbmcgcmVtaW5kZXIgcmVnYXJkaW5nIGRlYWRsaW5kZXMgZGVmaW5lZCBpbiBkaXNjbG9zdXJlIHBvbGljeS4NCjIwMTMtMDYtMDU6IFZlbmRvciB3aWxsIHJlbGVhc2UgYW4gdXBkYXRlIGluICJNaWQtSnVseSIuDQoyMDEzLTA3LTE2OiBWZW5kb3IgcG9zdHBvbmVzIHVwZGF0ZSB0byB0aW1lZnJhbWUgYmV3ZWVuIEp1bHkgMjIgYW5kIDI1Lg0KMjAxMy0wNy0yNTogVmVuZG9yIHJlbGVhc2VzIGFkdmlzb3J5IGFuZCBwcm9kdWN0IHVwZGF0ZSAodmVyc2lvbiA1LjEuMSkuDQoyMDEzLTA3LTI2OiBTRUMgQ29uc3VsdCByZWxlYXNlcyBjb29yZGluYXRlZCBzZWN1cml0eSBhZHZpc29yeS4NCg0KDQpTb2x1dGlvbjoNCi0tLS0tLS0tLQ0KVXBkYXRlIHRvIFN5bWFudGVjIFdlYiBHYXRld2F5IHZlcnNpb24gNS4xLjEuDQoNCk1vcmUgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGF0Og0KaHR0cDovL3d3dy5zeW1hbnRlYy5jb20vc2VjdXJpdHlfcmVzcG9uc2Uvc2VjdXJpdHl1cGRhdGVzL2RldGFpbC5qc3A/ZmlkPXNlY3VyaXR5X2Fkdmlzb3J5JnB2aWQ9c2VjdXJpdHlfYWR2aXNvcnkmeWVhcj0mc3VpZD0yMDEzMDcyNV8wMA0KDQoNCg0KV29ya2Fyb3VuZDoNCi0tLS0tLS0tLS0tDQpObyB3b3JrYXJvdW5kIGF2YWlsYWJsZS4NCg0KDQoNCkFkdmlzb3J5IFVSTDoNCi0tLS0tLS0tLS0tLS0tDQpodHRwczovL3d3dy5zZWMtY29uc3VsdC5jb20vZW4vVnVsbmVyYWJpbGl0eS1MYWIvQWR2aXNvcmllcy5odG0NCg0KDQp+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fg0KU0VDIENvbnN1bHQgVnVsbmVyYWJpbGl0eSBMYWINCg0KU0VDIENvbnN1bHQNClZpZW5uYSAtIEJhbmdrb2sgLSBGcmFua2Z1cnQvTWFpbiAtIE1vbnRyZWFsIC0gU2luZ2Fwb3JlIC0gVmlsbml1cw0KDQpIZWFkcXVhcnRlcjoNCk1vb3NsYWNrZW5nYXNzZSAxNywgMTE5MCBWaWVubmEsIEF1c3RyaWENClBob25lOiAgICs0MyAxIDg5MDMwNDMgMA0KRmF4OiAgICAgKzQzIDEgODkwMzA0MyAxNQ0KDQpNYWlsOiByZXNlYXJjaCBhdCBzZWMtY29uc3VsdCBkb3QgY29tDQpXZWI6IGh0dHBzOi8vd3d3LnNlYy1jb25zdWx0LmNvbQ0KQmxvZzogaHR0cDovL2Jsb2cuc2VjLWNvbnN1bHQuY29tDQpUd2l0dGVyOiBodHRwczovL3R3aXR0ZXIuY29tL3NlY19jb25zdWx0DQoNCkVPRiBXb2xmZ2FuZyBFdHRsaW5nZXIgLyBAMjAxMw==", 
    "filename": "platforms/php/webapps/27136.txt", 
    "id": "27136", 
    "cves": [
        "CVE-2013-1617", 
        "CVE-2013-1616", 
        "CVE-2013-4672", 
        "CVE-2013-4670", 
        "CVE-2013-4671"
    ]
}