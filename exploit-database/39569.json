{
    "cpes": {
        "cpe:/o:redhat:enterprise_linux:7.0:ga:server": {
            "scores": {
                "stride": "090900"
            }
        }
    }, 
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/remote/39569.py", 
    "id": "39569", 
    "cves": [
        "CVE-2016-3115"
    ]
}