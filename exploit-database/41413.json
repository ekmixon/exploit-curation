{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/php/webapps/41413.rb", 
    "id": "41413", 
    "cves": [
        "CVE-2016-9553"
    ]
}