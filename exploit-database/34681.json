{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/php/webapps/34681.txt", 
    "id": "34681", 
    "cves": [
        "CVE-2014-5460"
    ]
}