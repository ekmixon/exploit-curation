{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/remote/40507.py", 
    "id": "40507", 
    "cves": [
        "CVE-2013-2088"
    ]
}