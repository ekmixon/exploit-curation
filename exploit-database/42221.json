{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/php/webapps/42221.py", 
    "id": "42221", 
    "cves": [
        "CVE-2016-10045", 
        "CVE-2016-10034", 
        "CVE-2016-10033", 
        "CVE-2016-10074"
    ]
}