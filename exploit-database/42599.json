{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/python/remote/42599.rb", 
    "id": "42599", 
    "cves": [
        "CVE-2017-1000117"
    ]
}