{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/remote/20174.rb", 
    "id": "20174", 
    "cves": [
        "CVE-2012-1876"
    ]
}