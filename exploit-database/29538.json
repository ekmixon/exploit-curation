{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/remote/29538.c", 
    "id": "29538", 
    "cves": [
        "CVE-2006-5854"
    ]
}