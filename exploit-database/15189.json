{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/asp/webapps/15189.txt", 
    "id": "15189", 
    "cves": [
        "CVE-2010-3486"
    ]
}