{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/local/40768.sh", 
    "id": "40768", 
    "cves": [
        "CVE-2016-1247"
    ]
}