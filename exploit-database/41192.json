{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/dos/41192.c", 
    "id": "41192", 
    "cves": [
        "CVE-2017-3730"
    ]
}