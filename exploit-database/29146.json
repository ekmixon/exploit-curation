{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/remote/29146.c", 
    "id": "29146", 
    "cves": [
        "CVE-2006-5854"
    ]
}