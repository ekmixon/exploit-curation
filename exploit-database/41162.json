{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/remote/41162.py", 
    "id": "41162", 
    "cves": [
        "CVE-2016-1000282"
    ]
}