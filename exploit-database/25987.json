{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/hardware/remote/25987.txt", 
    "id": "25987", 
    "cves": [
        "CVE-2013-2571"
    ]
}