{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/java/remote/38983.rb", 
    "id": "38983", 
    "cves": [
        "CVE-2015-8103"
    ]
}