{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/remote/16319.rb", 
    "id": "16319", 
    "cves": [
        "CVE-2010-0738"
    ]
}