{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/local/12406.py", 
    "id": "12406", 
    "cves": [
        "CVE-2008-1625"
    ]
}