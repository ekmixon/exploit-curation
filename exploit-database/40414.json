{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/php/webapps/40414.txt", 
    "id": "40414", 
    "cves": [
        "CVE-2016-5773", 
        "CVE-2016-5771", 
        "CVE-2014-8142", 
        "CVE-2014-3515", 
        "CVE-2015-0231", 
        "CVE-2015-6834"
    ]
}