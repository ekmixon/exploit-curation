{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/local/11199.txt", 
    "id": "11199", 
    "cves": [
        "CVE-2010-0232"
    ]
}