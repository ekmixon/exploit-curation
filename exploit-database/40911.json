{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/remote/40911.py", 
    "id": "40911", 
    "cves": [
        "CVE-2016-8024", 
        "CVE-2016-8025", 
        "CVE-2016-8020", 
        "CVE-2016-8021", 
        "CVE-2016-8022", 
        "CVE-2016-8023", 
        "CVE-2016-8017", 
        "CVE-2016-8016", 
        "CVE-2016-8019", 
        "CVE-2016-8018"
    ]
}