{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/php/webapps/31986.txt", 
    "id": "31986", 
    "cves": [
        "CVE-2014-1906", 
        "CVE-2014-1907", 
        "CVE-2014-1905", 
        "CVE-2014-1908"
    ]
}