{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/local/39549.txt", 
    "id": "39549", 
    "cves": [
        "CVE-2016-1531"
    ]
}