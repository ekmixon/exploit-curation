{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/dos/30397.txt", 
    "id": "30397", 
    "cves": [
        "CVE-2013-5058"
    ]
}