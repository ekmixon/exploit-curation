{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/dos/17831.txt", 
    "id": "17831", 
    "cves": [
        "CVE-2011-1984"
    ]
}