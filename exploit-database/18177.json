{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/php/webapps/18177.txt", 
    "id": "18177", 
    "cves": [
        "CVE-2011-4449", 
        "CVE-2011-4448", 
        "CVE-2011-4450", 
        "CVE-2011-4451", 
        "CVE-2011-4452"
    ]
}