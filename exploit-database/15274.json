{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/local/15274.txt", 
    "id": "15274", 
    "cves": [
        "CVE-2009-1894", 
        "CVE-2010-3847"
    ]
}