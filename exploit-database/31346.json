{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/local/31346.c", 
    "id": "31346", 
    "cves": [
        "CVE-2014-0038"
    ]
}