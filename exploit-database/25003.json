{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/php/webapps/25003.txt", 
    "id": "25003", 
    "cves": [
        "CVE-2013-3239", 
        "CVE-2013-3238", 
        "CVE-2013-3240", 
        "CVE-2013-3241"
    ]
}