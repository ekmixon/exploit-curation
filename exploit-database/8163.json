{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/bsd/dos/8163.txt", 
    "id": "8163", 
    "cves": [
        "CVE-2009-0537"
    ]
}