{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/remote/16925.rb", 
    "id": "16925", 
    "cves": [
        "CVE-2010-4345"
    ]
}