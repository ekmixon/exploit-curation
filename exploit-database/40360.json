{
    "cpes": {
        "cpe:/o:redhat:enterprise_linux:7.0:ga:server": {
            "scores": {
                "skipped": "20171008"
            }
        }
    }, 
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/local/40360.txt", 
    "id": "40360", 
    "cves": [
        "CVE-2016-6662", 
        "CVE-2016-6663"
    ]
}