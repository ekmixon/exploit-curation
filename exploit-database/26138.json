{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/hardware/dos/26138.txt", 
    "id": "26138", 
    "cves": [
        "CVE-2013-1606"
    ]
}