{
    "cves": [
        "CVE-2017-16885", 
        "CVE-2017-16887", 
        "CVE-2017-16886"
    ], 
    "exploit": "", 
    "id": "43460", 
    "source": "exploit-database"
}