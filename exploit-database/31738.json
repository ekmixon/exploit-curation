{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/php/webapps/31738.py", 
    "id": "31738", 
    "cves": [
        "CVE-2014-1206"
    ]
}