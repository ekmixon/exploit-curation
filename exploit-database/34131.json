{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/local/34131.py", 
    "id": "34131", 
    "cves": [
        "CVE-2014-4971"
    ]
}