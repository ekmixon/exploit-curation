{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/jsp/webapps/37114.txt", 
    "id": "37114", 
    "cves": [
        "CVE-2014-0999", 
        "CVE-2014-8391"
    ]
}