{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/php/webapps/37708.txt", 
    "id": "37708", 
    "cves": [
        "CVE-2015-4667", 
        "CVE-2015-4666", 
        "CVE-2015-4665", 
        "CVE-2015-4664", 
        "CVE-2015-4669", 
        "CVE-2015-4668"
    ]
}