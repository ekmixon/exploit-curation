{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/remote/31056.py", 
    "id": "31056", 
    "cves": [
        "CVE-2008-0410", 
        "CVE-2008-0405", 
        "CVE-2008-0407", 
        "CVE-2008-0406", 
        "CVE-2008-0409", 
        "CVE-2008-0408"
    ]
}