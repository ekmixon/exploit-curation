{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/hardware/remote/40858.py", 
    "id": "40858", 
    "cves": [
        "CVE-2016-3115"
    ]
}