{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/php/webapps/9110.txt", 
    "id": "9110", 
    "cves": [
        "CVE-2009-2336", 
        "CVE-2009-2334", 
        "CVE-2009-2335", 
        "CVE-2008-0196"
    ]
}