{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/win_x86/local/39446.py", 
    "id": "39446", 
    "cves": [
        "CVE-2014-1767"
    ]
}