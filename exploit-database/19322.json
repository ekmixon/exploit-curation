{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/remote/19322.rb", 
    "id": "19322", 
    "cves": [
        "CVE-2012-0677"
    ]
}