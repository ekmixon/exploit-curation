{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/remote/35115.rb", 
    "id": "35115", 
    "cves": [
        "CVE-2014-6271", 
        "CVE-2014-6278"
    ]
}