{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/php/webapps/41824.txt", 
    "id": "41824", 
    "cves": [
        "CVE-2017-7446", 
        "CVE-2017-7447"
    ]
}