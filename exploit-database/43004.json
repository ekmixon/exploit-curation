{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/webapps/43004.py", 
    "id": "43004", 
    "cves": [
        "CVE-2017-15013"
    ]
}