{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/webapps/28175.txt", 
    "id": "28175", 
    "cves": [
        "CVE-2013-4983", 
        "CVE-2013-4984"
    ]
}