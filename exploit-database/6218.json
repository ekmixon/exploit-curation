{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/dos/6218.txt", 
    "id": "6218", 
    "cves": [
        "CVE-2008-3431"
    ]
}