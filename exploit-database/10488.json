{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/php/webapps/10488.txt", 
    "id": "10488", 
    "cves": [
        "CVE-2009-3703"
    ]
}