{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/hardware/webapps/25139.txt", 
    "id": "25139", 
    "cves": [
        "CVE-2013-1594", 
        "CVE-2013-1595", 
        "CVE-2013-1596", 
        "CVE-2013-1597", 
        "CVE-2013-1598"
    ]
}