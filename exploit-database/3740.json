{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/remote/3740.c", 
    "id": "3740", 
    "cves": [
        "CVE-2007-1748"
    ]
}