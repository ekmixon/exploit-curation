{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/remote/11203.py", 
    "id": "11203", 
    "cves": [
        "CVE-2010-0013"
    ]
}