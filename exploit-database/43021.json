{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/python/webapps/43021.py", 
    "id": "43021", 
    "cves": [
        "CVE-2017-14955"
    ]
}