{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/local/42735.c", 
    "id": "42735", 
    "cves": [
        "CVE-2017-14311"
    ]
}