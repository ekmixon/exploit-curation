{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/macos/local/40669.txt", 
    "id": "40669", 
    "cves": [
        "CVE-2016-1757"
    ]
}