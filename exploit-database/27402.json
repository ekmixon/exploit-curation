{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/hardware/webapps/27402.txt", 
    "id": "27402", 
    "cves": [
        "CVE-2013-4975", 
        "CVE-2013-4977", 
        "CVE-2013-4976"
    ]
}