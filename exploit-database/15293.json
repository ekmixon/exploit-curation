{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/dos/15293.txt", 
    "id": "15293", 
    "cves": [
        "CVE-2010-2891"
    ]
}