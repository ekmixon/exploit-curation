{
    "source": "exploit-database", 
    "exploit": "", 
    "id": "43835", 
    "cves": [
        "CVE-2006-1794", 
        "CVE-2006-0871"
    ]
}