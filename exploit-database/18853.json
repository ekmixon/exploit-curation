{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/dos/18853.txt", 
    "id": "18853", 
    "cves": [
        "CVE-2011-1516", 
        "CVE-2011-1517", 
        "CVE-2012-2514", 
        "CVE-2012-2512", 
        "CVE-2012-2513", 
        "CVE-2012-2511"
    ]
}