{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/remote/28974.rb", 
    "id": "28974", 
    "cves": [
        "CVE-2013-3893"
    ]
}