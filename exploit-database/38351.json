{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/asp/webapps/38351.txt", 
    "id": "38351", 
    "cves": [
        "CVE-2015-6922", 
        "CVE-2015-6589"
    ]
}