{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/remote/38096.rb", 
    "id": "38096", 
    "cves": [
        "CVE-2015-5082"
    ]
}