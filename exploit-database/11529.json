{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/dos/11529.txt", 
    "id": "11529", 
    "cves": [
        "CVE-2009-3960"
    ]
}