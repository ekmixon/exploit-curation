{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/remote/31737.rb", 
    "id": "31737", 
    "cves": [
        "CVE-2012-3153", 
        "CVE-2012-3152"
    ]
}