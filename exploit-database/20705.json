{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/dos/20705.py", 
    "id": "20705", 
    "cves": [
        "CVE-2011-1516", 
        "CVE-2011-1517", 
        "CVE-2012-2611", 
        "CVE-2012-2612", 
        "CVE-2012-2514", 
        "CVE-2012-2512", 
        "CVE-2012-2513", 
        "CVE-2012-2511"
    ]
}