{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/cgi/webapps/35357.txt", 
    "id": "35357", 
    "cves": [
        "CVE-2014-8387"
    ]
}