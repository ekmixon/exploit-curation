{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/webapps/39382.txt", 
    "id": "39382", 
    "cves": [
        "CVE-2015-7986"
    ]
}