{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/webapps/43002.py", 
    "id": "43002", 
    "cves": [
        "CVE-2017-15276"
    ]
}