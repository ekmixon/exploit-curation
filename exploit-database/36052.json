{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/local/36052.c", 
    "id": "36052", 
    "cves": [
        "CVE-2015-1515"
    ]
}