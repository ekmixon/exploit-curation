{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/dos/40411.txt", 
    "id": "40411", 
    "cves": [
        "CVE-2016-5725"
    ]
}