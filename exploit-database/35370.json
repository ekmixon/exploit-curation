{
    "cpes": {
        "cpe:/o:redhat:enterprise_linux:7.0:ga:server": {
            "selinux": "permissive", 
            "packages": [
                "gcc"
            ], 
            "staging": "gcc -lpthread -o exploit exploit.c", 
            "filename": "exploit.c", 
            "scores": {
                "stride": "000008"
            }
        }
    }, 
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/local/35370.c", 
    "id": "35370", 
    "cves": [
        "CVE-2014-3153"
    ]
}