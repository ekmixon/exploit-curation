{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/dos/35000.txt", 
    "id": "35000", 
    "cves": [
        "CVE-2014-0995"
    ]
}