{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/local/41542.c", 
    "id": "41542", 
    "cves": [
        "CVE-2017-6178"
    ]
}