{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/local/40488.txt", 
    "id": "40488", 
    "cves": [
        "CVE-2016-5425"
    ]
}