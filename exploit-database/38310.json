{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/android/remote/38310.c", 
    "id": "38310", 
    "cves": [
        "CVE-2011-1350", 
        "CVE-2011-1352"
    ]
}