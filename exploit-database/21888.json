{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/remote/21888.rb", 
    "id": "21888", 
    "cves": [
        "CVE-2012-2516"
    ]
}