{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/remote/41013.txt", 
    "id": "41013", 
    "cves": [
        "CVE-2016-9587"
    ]
}