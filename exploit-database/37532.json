{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/hardware/webapps/37532.txt", 
    "id": "37532", 
    "cves": [
        "CVE-2014-8389", 
        "CVE-2015-2279"
    ]
}