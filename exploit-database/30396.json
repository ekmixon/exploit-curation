{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/php/webapps/30396.txt", 
    "id": "30396", 
    "cves": [
        "CVE-2013-6884", 
        "CVE-2013-6883", 
        "CVE-2013-6882", 
        "CVE-2013-6881"
    ]
}