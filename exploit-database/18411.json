{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/local/18411.c", 
    "id": "18411", 
    "cves": [
        "CVE-2012-0056"
    ]
}