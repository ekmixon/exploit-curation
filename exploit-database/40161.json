{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/java/webapps/40161.txt", 
    "id": "40161", 
    "cves": [
        "CVE-2016-1610", 
        "CVE-2016-1609", 
        "CVE-2016-1608", 
        "CVE-2016-1607", 
        "CVE-2016-1611"
    ]
}