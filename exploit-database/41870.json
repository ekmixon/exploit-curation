{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/local/41870.txt", 
    "id": "41870", 
    "cves": [
        "CVE-2012-5513"
    ]
}