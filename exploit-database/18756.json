{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/dos/18756.txt", 
    "id": "18756", 
    "cves": [
        "CVE-2012-2110"
    ]
}