{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/php/webapps/28684.txt", 
    "id": "28684", 
    "cves": [
        "CVE-2013-5640", 
        "CVE-2013-5639"
    ]
}