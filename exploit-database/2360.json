{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/solaris/local/2360.c", 
    "id": "2360", 
    "cves": [
        "CVE-2006-4655"
    ]
}