{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/php/webapps/27279.txt", 
    "id": "27279", 
    "cves": [
        "CVE-2013-3215", 
        "CVE-2013-3214", 
        "CVE-2013-3213", 
        "CVE-2013-3212"
    ]
}