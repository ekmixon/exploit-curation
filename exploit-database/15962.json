{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/solaris/local/15962.c", 
    "id": "15962", 
    "cves": [
        "CVE-2008-568"
    ]
}