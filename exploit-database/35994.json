{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/local/35994.c", 
    "id": "35994", 
    "cves": [
        "CVE-2014-9642"
    ]
}