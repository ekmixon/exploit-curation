{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/multiple/dos/39767.txt", 
    "id": "39767", 
    "cves": [
        "CVE-2016-3718", 
        "CVE-2016-3717", 
        "CVE-2016-3716", 
        "CVE-2016-3715", 
        "CVE-2016-3714"
    ]
}