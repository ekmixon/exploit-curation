{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/php/dos/18305.py", 
    "id": "18305", 
    "cves": [
        "CVE-2011-5035", 
        "CVE-2011-5034", 
        "CVE-2011-4858", 
        "CVE-2011-4885"
    ]
}