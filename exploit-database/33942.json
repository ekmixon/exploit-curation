{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/jsp/webapps/33942.txt", 
    "id": "33942", 
    "cves": [
        "CVE-2014-0866", 
        "CVE-2014-0867", 
        "CVE-2014-0864", 
        "CVE-2014-0865", 
        "CVE-2014-0871", 
        "CVE-2014-0870", 
        "CVE-2014-0894", 
        "CVE-2014-0868", 
        "CVE-2014-0869"
    ]
}