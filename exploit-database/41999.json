{
    "cpes": {
        "cpe:/o:redhat:enterprise_linux:7.0:ga:server": {
            "scores": {
                "skipped": "20171028"
            }
        }
    }, 
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/local/41999.txt", 
    "id": "41999", 
    "cves": [
        "CVE-2016-2384"
    ]
}