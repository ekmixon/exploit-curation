{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/windows/local/40107.rb", 
    "id": "40107", 
    "cves": [
        "CVE-2016-0099"
    ]
}