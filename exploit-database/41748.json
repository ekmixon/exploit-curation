{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/jsp/webapps/41748.rb", 
    "id": "41748", 
    "cves": [
        "CVE-2017-5869"
    ]
}