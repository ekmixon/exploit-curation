{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/linux/dos/12334.c", 
    "id": "12334", 
    "cves": [
        "CVE-2010-0740"
    ]
}