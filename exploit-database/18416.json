{
    "source": "exploit-database", 
    "exploit": "", 
    "filename": "platforms/jsp/webapps/18416.txt", 
    "id": "18416", 
    "cves": [
        "CVE-2012-0285", 
        "CVE-2012-0286"
    ]
}